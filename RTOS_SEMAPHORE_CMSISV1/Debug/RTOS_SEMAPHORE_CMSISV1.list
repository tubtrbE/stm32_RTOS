
RTOS_SEMAPHORE_CMSISV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b50  08006b50  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b58  08006b58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040f0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004164  20004164  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e97  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a06  00000000  00000000  00038f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266fe  00000000  00000000  0003f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018417  00000000  00000000  0006570e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e883c  00000000  00000000  0007db25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166361  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057c8  00000000  00000000  001663b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a50 	.word	0x08006a50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006a50 	.word	0x08006a50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_GPIO_EXTI_Callback>:
osSemaphoreId hBinarySemHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	osSemaphoreRelease(hBinarySemHandle);
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fa9c 	bl	8003ae0 <osSemaphoreRelease>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000094 	.word	0x20000094

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000098 	.word	0x20000098
 80005e4:	2000014c 	.word	0x2000014c

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	  MX_GPIO_Init();
//	  MX_RTC_Init();
//	  MX_USART3_UART_Init();
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY+1, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2106      	movs	r1, #6
 80005f2:	2028      	movs	r0, #40	; 0x28
 80005f4:	f000 fc72 	bl	8000edc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f8:	2028      	movs	r0, #40	; 0x28
 80005fa:	f000 fc8b 	bl	8000f14 <HAL_NVIC_EnableIRQ>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem */
  osSemaphoreDef(hBinarySem);
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  hBinarySemHandle = osSemaphoreCreate(osSemaphore(hBinarySem), 1);
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2101      	movs	r1, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f9e6 	bl	80039de <osSemaphoreCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <MX_FREERTOS_Init+0x5c>)
 8000616:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_FREERTOS_Init+0x60>)
 800061a:	1d3c      	adds	r4, r7, #4
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000626:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 f975 	bl	800391e <osThreadCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <MX_FREERTOS_Init+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bdb0      	pop	{r4, r5, r7, pc}
 8000642:	bf00      	nop
 8000644:	20000094 	.word	0x20000094
 8000648:	08006a74 	.word	0x08006a74
 800064c:	20000090 	.word	0x20000090

08000650 <StartDefaultTask>:
//  /* USER CODE END StartDefaultTask */
//}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartDefaultTask(void const *argument) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t uart_buf[30];
	/* Infinite loop */
	for (;;) {
		if (hBinarySemHandle != NULL) {
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <StartDefaultTask+0x88>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d029      	beq.n	80006b4 <StartDefaultTask+0x64>
			if (osSemaphoreWait(hBinarySemHandle, 0) == osOK) {
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <StartDefaultTask+0x88>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f9ec 	bl	8003a44 <osSemaphoreWait>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d120      	bne.n	80006b4 <StartDefaultTask+0x64>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <StartDefaultTask+0x8c>)
 8000678:	f000 fe98 	bl	80013ac <HAL_GPIO_WritePin>
				osDelay(100);
 800067c:	2064      	movs	r0, #100	; 0x64
 800067e:	f003 f99a 	bl	80039b6 <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <StartDefaultTask+0x8c>)
 8000688:	f000 fe90 	bl	80013ac <HAL_GPIO_WritePin>

				memset(uart_buf, 0, sizeof(uart_buf));
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	221e      	movs	r2, #30
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f005 fd0b 	bl	80060b0 <memset>
				sprintf(uart_buf, "\r\nKorea \r\n");
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4910      	ldr	r1, [pc, #64]	; (80006e0 <StartDefaultTask+0x90>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fe1b 	bl	80062dc <siprintf>
				HAL_UART_Transmit(&huart3, uart_buf, sizeof(uart_buf), 100);
 80006a6:	f107 0108 	add.w	r1, r7, #8
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	221e      	movs	r2, #30
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <StartDefaultTask+0x94>)
 80006b0:	f002 f93d 	bl	800292e <HAL_UART_Transmit>
			}
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <StartDefaultTask+0x8c>)
 80006ba:	f000 fe77 	bl	80013ac <HAL_GPIO_WritePin>
		osDelay(100);
 80006be:	2064      	movs	r0, #100	; 0x64
 80006c0:	f003 f979 	bl	80039b6 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <StartDefaultTask+0x8c>)
 80006ca:	f000 fe6f 	bl	80013ac <HAL_GPIO_WritePin>
		osDelay(100);
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f003 f971 	bl	80039b6 <osDelay>
		if (hBinarySemHandle != NULL) {
 80006d4:	e7c0      	b.n	8000658 <StartDefaultTask+0x8>
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094
 80006dc:	40020400 	.word	0x40020400
 80006e0:	08006a90 	.word	0x08006a90
 80006e4:	200003b8 	.word	0x200003b8

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_GPIO_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f244 0181 	movw	r1, #16513	; 0x4081
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <MX_GPIO_Init+0xbc>)
 800075a:	f000 fe27 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_GPIO_Init+0xc0>)
 8000776:	f000 fc6d 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800077a:	f244 0381 	movw	r3, #16513	; 0x4081
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0xbc>)
 8000794:	f000 fc5e 	bl	8001054 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020800 	.word	0x40020800

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fa9a 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f80e 	bl	80007d4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 80007b8:	f7ff ff96 	bl	80006e8 <MX_GPIO_Init>
  MX_RTC_Init();
 80007bc:	f000 f8a8 	bl	8000910 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 f9f6 	bl	8000bb0 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007c4:	f000 f878 	bl	80008b8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c8:	f7ff ff0e 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007cc:	f003 f8a0 	bl	8003910 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x24>
	...

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fc64 	bl	80060b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <SystemClock_Config+0xdc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0xdc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xdc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <SystemClock_Config+0xe0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <SystemClock_Config+0xe0>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <SystemClock_Config+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000830:	2306      	movs	r3, #6
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000848:	2308      	movs	r3, #8
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800084c:	23b4      	movs	r3, #180	; 0xb4
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fe27 	bl	80014b0 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000868:	f000 f84c 	bl	8000904 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800086c:	f000 fdd0 	bl	8001410 <HAL_PWREx_EnableOverDrive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000876:	f000 f845 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2105      	movs	r1, #5
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f881 	bl	80019a0 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008a4:	f000 f82e 	bl	8000904 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3750      	adds	r7, #80	; 0x50
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2028      	movs	r0, #40	; 0x28
 80008c2:	f000 fb0b 	bl	8000edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f000 fb24 	bl	8000f14 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	2027      	movs	r0, #39	; 0x27
 80008d2:	f000 fb03 	bl	8000edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80008d6:	2027      	movs	r0, #39	; 0x27
 80008d8:	f000 fb1c 	bl	8000f14 <HAL_NVIC_EnableIRQ>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 fa1b 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40000c00 	.word	0x40000c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_RTC_Init+0x44>)
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <MX_RTC_Init+0x48>)
 8000918:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_RTC_Init+0x44>)
 800091c:	2200      	movs	r2, #0
 800091e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_RTC_Init+0x44>)
 8000922:	227f      	movs	r2, #127	; 0x7f
 8000924:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_RTC_Init+0x44>)
 8000928:	22ff      	movs	r2, #255	; 0xff
 800092a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_RTC_Init+0x44>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_RTC_Init+0x44>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_RTC_Init+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_RTC_Init+0x44>)
 8000940:	f001 fc00 	bl	8002144 <HAL_RTC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800094a:	f7ff ffdb 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000034c 	.word	0x2000034c
 8000958:	40002800 	.word	0x40002800

0800095c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2230      	movs	r2, #48	; 0x30
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f005 fb9f 	bl	80060b0 <memset>
  if(rtcHandle->Instance==RTC)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_RTC_MspInit+0x4c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d111      	bne.n	80009a0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800097c:	2320      	movs	r3, #32
 800097e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fa1a 	bl	8001dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000996:	f7ff ffb5 	bl	8000904 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_RTC_MspInit+0x50>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3738      	adds	r7, #56	; 0x38
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40002800 	.word	0x40002800
 80009ac:	42470e3c 	.word	0x42470e3c

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x54>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <HAL_MspInit+0x54>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_MspInit+0x54>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_MspInit+0x54>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	f06f 0001 	mvn.w	r0, #1
 80009f6:	f000 fa71 	bl	8000edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f000 fa5d 	bl	8000edc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a22:	2032      	movs	r0, #50	; 0x32
 8000a24:	f000 fa76 	bl	8000f14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_InitTick+0xa4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <HAL_InitTick+0xa4>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_InitTick+0xa4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a44:	f107 0210 	add.w	r2, r7, #16
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f986 	bl	8001d60 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a54:	f001 f95c 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <HAL_InitTick+0xa8>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	0c9b      	lsrs	r3, r3, #18
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <HAL_InitTick+0xb0>)
 8000a70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a78:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a8e:	f001 fc53 	bl	8002338 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d104      	bne.n	8000aa2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <HAL_InitTick+0xac>)
 8000a9a:	f001 fca7 	bl	80023ec <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	431bde83 	.word	0x431bde83
 8000ab4:	2000036c 	.word	0x2000036c
 8000ab8:	40000c00 	.word	0x40000c00

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART3_IRQHandler+0x10>)
 8000aee:	f001 ffb1 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200003b8 	.word	0x200003b8

08000afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b04:	f000 fc6c 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM5_IRQHandler+0x10>)
 8000b12:	f001 fcdb 	bl	80024cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000036c 	.word	0x2000036c

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f005 fa74 	bl	800603c <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20030000 	.word	0x20030000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	200003b4 	.word	0x200003b4
 8000b88:	20004168 	.word	0x20004168

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART3_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART3_UART_Init+0x4c>)
 8000be8:	f001 fe54 	bl	8002894 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f7ff fe87 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200003b8 	.word	0x200003b8
 8000c00:	40004800 	.word	0x40004800

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12c      	bne.n	8000c80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7c:	f000 f9ea 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004800 	.word	0x40004800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ff65 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f005 f9c1 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fd71 	bl	80007ac <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ccc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cd8:	08006b60 	.word	0x08006b60
  ldr r2, =_sbss
 8000cdc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ce0:	20004164 	.word	0x20004164

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d8 	bl	8000ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f7ff fe76 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe48 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200003fc 	.word	0x200003fc

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200003fc 	.word	0x200003fc

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff4c 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eee:	f7ff ff61 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000ef2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f7ff ffb1 	bl	8000e60 <NVIC_EncodePriority>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff80 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff54 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f3e:	f7ff ff09 	bl	8000d54 <HAL_GetTick>
 8000f42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d008      	beq.n	8000f62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e052      	b.n	8001008 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0216 	bic.w	r2, r2, #22
 8000f70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <HAL_DMA_Abort+0x62>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d007      	beq.n	8000fa2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	e013      	b.n	8000fdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb4:	f7ff fece 	bl	8000d54 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d90c      	bls.n	8000fdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2203      	movs	r2, #3
 8000fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e015      	b.n	8001008 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e4      	bne.n	8000fb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fee:	223f      	movs	r2, #63	; 0x3f
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d004      	beq.n	800102e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00c      	b.n	8001048 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	e177      	b.n	8001360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	429a      	cmp	r2, r3
 800108a:	f040 8166 	bne.w	800135a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d005      	beq.n	80010a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d130      	bne.n	8001108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	69b9      	ldr	r1, [r7, #24]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80c0 	beq.w	800135a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a65      	ldr	r2, [pc, #404]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_GPIO_Init+0x324>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f6:	4a61      	ldr	r2, [pc, #388]	; (800137c <HAL_GPIO_Init+0x328>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d037      	beq.n	8001292 <HAL_GPIO_Init+0x23e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d031      	beq.n	800128e <HAL_GPIO_Init+0x23a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a56      	ldr	r2, [pc, #344]	; (8001388 <HAL_GPIO_Init+0x334>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02b      	beq.n	800128a <HAL_GPIO_Init+0x236>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a55      	ldr	r2, [pc, #340]	; (800138c <HAL_GPIO_Init+0x338>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x232>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a54      	ldr	r2, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x33c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x22e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a53      	ldr	r2, [pc, #332]	; (8001394 <HAL_GPIO_Init+0x340>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x22a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x344>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x226>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x348>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x222>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x34c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x21e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x350>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x21a>
 800126a:	2309      	movs	r3, #9
 800126c:	e012      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800126e:	230a      	movs	r3, #10
 8001270:	e010      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001272:	2308      	movs	r3, #8
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001276:	2307      	movs	r3, #7
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x240>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x240>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x328>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x354>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_GPIO_Init+0x354>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x354>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae84 	bls.w	8001070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40022400 	.word	0x40022400
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8c8 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143c:	f7ff fc8a 	bl	8000d54 <HAL_GetTick>
 8001440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001442:	e009      	b.n	8001458 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001444:	f7ff fc86 	bl	8000d54 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001452:	d901      	bls.n	8001458 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e01f      	b.n	8001498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001464:	d1ee      	bne.n	8001444 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff fc72 	bl	8000d54 <HAL_GetTick>
 8001470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001472:	e009      	b.n	8001488 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001474:	f7ff fc6e 	bl	8000d54 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001482:	d901      	bls.n	8001488 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e007      	b.n	8001498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001494:	d1ee      	bne.n	8001474 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	420e0040 	.word	0x420e0040
 80014a8:	40007000 	.word	0x40007000
 80014ac:	420e0044 	.word	0x420e0044

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e267      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d00c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d112      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b82      	ldr	r3, [pc, #520]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e242      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b76      	ldr	r3, [pc, #472]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a75      	ldr	r2, [pc, #468]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6f      	ldr	r2, [pc, #444]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b6d      	ldr	r3, [pc, #436]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6c      	ldr	r2, [pc, #432]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b66      	ldr	r3, [pc, #408]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a65      	ldr	r2, [pc, #404]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fbf4 	bl	8000d54 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fbf0 	bl	8000d54 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e207      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fbe0 	bl	8000d54 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fbdc 	bl	8000d54 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1f3      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d063      	beq.n	800168e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c7      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4937      	ldr	r1, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e03a      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d020      	beq.n	8001662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fb95 	bl	8000d54 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fb91 	bl	8000d54 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1a8      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4925      	ldr	r1, [pc, #148]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x244>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb74 	bl	8000d54 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fb70 	bl	8000d54 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e187      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d036      	beq.n	8001708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d016      	beq.n	80016d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fb54 	bl	8000d54 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff fb50 	bl	8000d54 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e167      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x248>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb3d 	bl	8000d54 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	e00e      	b.n	80016fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fb39 	bl	8000d54 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d907      	bls.n	80016fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e150      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 80016f0:	40023800 	.word	0x40023800
 80016f4:	42470000 	.word	0x42470000
 80016f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ea      	bne.n	80016de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8097 	beq.w	8001844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a7c      	ldr	r2, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b77      	ldr	r3, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d118      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a73      	ldr	r2, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff faf9 	bl	8000d54 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff faf5 	bl	8000d54 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e10c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x474>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x2ea>
 800178c:	4b64      	ldr	r3, [pc, #400]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a63      	ldr	r2, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x30c>
 80017a2:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x324>
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff faba 	bl	8000d54 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fab6 	bl	8000d54 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0cb      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0ee      	beq.n	80017e4 <HAL_RCC_OscConfig+0x334>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff faa4 	bl	8000d54 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff faa0 	bl	8000d54 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b5      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ee      	bne.n	8001810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a1 	beq.w	8001990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d05c      	beq.n	8001914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d141      	bne.n	80018e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fa74 	bl	8000d54 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa70 	bl	8000d54 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e087      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	041b      	lsls	r3, r3, #16
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	491b      	ldr	r1, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fa49 	bl	8000d54 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fa45 	bl	8000d54 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e05c      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x416>
 80018e4:	e054      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_RCC_OscConfig+0x478>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fa32 	bl	8000d54 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fa2e 	bl	8000d54 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e045      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_RCC_OscConfig+0x470>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x444>
 8001912:	e03d      	b.n	8001990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e038      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000
 8001928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x4ec>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d028      	beq.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d121      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0cc      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d90c      	bls.n	80019dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b65      	ldr	r3, [pc, #404]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b8      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0c:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	494d      	ldr	r1, [pc, #308]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d044      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e07f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d003      	beq.n	8001a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e067      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4934      	ldr	r1, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff f960 	bl	8000d54 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff f95c 	bl	8000d54 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d20c      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e032      	b.n	8001b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4916      	ldr	r1, [pc, #88]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	490e      	ldr	r1, [pc, #56]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b26:	f000 f821 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	490a      	ldr	r1, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ff5e 	bl	8000a08 <HAL_InitTick>

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08006aa4 	.word	0x08006aa4
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b70:	b090      	sub	sp, #64	; 0x40
 8001b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d00d      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	f200 80a1 	bhi.w	8001cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b9e:	e09b      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ba4:	e09b      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001baa:	e098      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	2200      	movs	r2, #0
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd8:	fb03 f201 	mul.w	r2, r3, r1
 8001bdc:	2300      	movs	r3, #0
 8001bde:	fb00 f303 	mul.w	r3, r0, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001be6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bec:	460a      	mov	r2, r1
 8001bee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	4413      	add	r3, r2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	61fa      	str	r2, [r7, #28]
 8001bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c06:	f7fe fb43 	bl	8000290 <__aeabi_uldivmod>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c12:	e053      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	617a      	str	r2, [r7, #20]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c26:	f04f 0b00 	mov.w	fp, #0
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ebb2 080a 	subs.w	r8, r2, sl
 8001c46:	eb63 090b 	sbc.w	r9, r3, fp
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c62:	eb63 0509 	sbc.w	r5, r3, r9
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	00eb      	lsls	r3, r5, #3
 8001c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c74:	00e2      	lsls	r2, r4, #3
 8001c76:	4614      	mov	r4, r2
 8001c78:	461d      	mov	r5, r3
 8001c7a:	eb14 030a 	adds.w	r3, r4, sl
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	eb45 030b 	adc.w	r3, r5, fp
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	60fa      	str	r2, [r7, #12]
 8001cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb0:	f7fe faee 	bl	8000290 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cd6:	e002      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3740      	adds	r7, #64	; 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	017d7840 	.word	0x017d7840

08001cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08006ab4 	.word	0x08006ab4

08001d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d3c:	f7ff ffdc 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	0b5b      	lsrs	r3, r3, #13
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08006ab4 	.word	0x08006ab4

08001d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_RCC_GetClockConfig+0x60>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 020f 	and.w	r2, r3, #15
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d075      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001df8:	4b91      	ldr	r3, [pc, #580]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfe:	f7fe ffa9 	bl	8000d54 <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e06:	f7fe ffa5 	bl	8000d54 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e189      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e18:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	019a      	lsls	r2, r3, #6
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	071b      	lsls	r3, r3, #28
 8001e3c:	4981      	ldr	r1, [pc, #516]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01f      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e56:	0f1b      	lsrs	r3, r3, #28
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	019a      	lsls	r2, r3, #6
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	071b      	lsls	r3, r3, #28
 8001e70:	4974      	ldr	r1, [pc, #464]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e78:	4b72      	ldr	r3, [pc, #456]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7e:	f023 021f 	bic.w	r2, r3, #31
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	496e      	ldr	r1, [pc, #440]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	019a      	lsls	r2, r3, #6
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	071b      	lsls	r3, r3, #28
 8001eb0:	4964      	ldr	r1, [pc, #400]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe ff49 	bl	8000d54 <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ec6:	f7fe ff45 	bl	8000d54 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e129      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d079      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f02:	f7fe ff27 	bl	8000d54 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f0a:	f7fe ff23 	bl	8000d54 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e107      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f1c:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f28:	d0ef      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d020      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3c:	0f1b      	lsrs	r3, r3, #28
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	019a      	lsls	r2, r3, #6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	431a      	orrs	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	493b      	ldr	r1, [pc, #236]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	4934      	ldr	r1, [pc, #208]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01e      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	0e1b      	lsrs	r3, r3, #24
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	019a      	lsls	r2, r3, #6
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	061b      	lsls	r3, r3, #24
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	071b      	lsls	r3, r3, #28
 8001fa4:	4927      	ldr	r1, [pc, #156]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fec4 	bl	8000d54 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fd0:	f7fe fec0 	bl	8000d54 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0a4      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fee:	d1ef      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 808b 	beq.w	8002114 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002026:	f7fe fe95 	bl	8000d54 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800202c:	e010      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe fe91 	bl	8000d54 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d909      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e075      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002040:	42470068 	.word	0x42470068
 8002044:	40023800 	.word	0x40023800
 8002048:	42470070 	.word	0x42470070
 800204c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0e8      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002064:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d028      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002082:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d114      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fe57 	bl	8000d54 <HAL_GetTick>
 80020a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe fe53 	bl	8000d54 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e035      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	4912      	ldr	r1, [pc, #72]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
 80020f4:	e005      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002100:	6093      	str	r3, [r2, #8]
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	490a      	ldr	r1, [pc, #40]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002110:	4313      	orrs	r3, r2
 8002112:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002128:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40007000 	.word	0x40007000
 8002138:	40023800 	.word	0x40023800
 800213c:	42470e40 	.word	0x42470e40
 8002140:	424711e0 	.word	0x424711e0

08002144 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e066      	b.n	8002228 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7f5b      	ldrb	r3, [r3, #29]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fbf6 	bl	800095c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	22ca      	movs	r2, #202	; 0xca
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2253      	movs	r2, #83	; 0x53
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f87a 	bl	8002280 <RTC_EnterInitMode>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d12c      	bne.n	80021f0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80021a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68d2      	ldr	r2, [r2, #12]
 80021d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f881 	bl	80022ee <RTC_ExitInitMode>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800224a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800224c:	f7fe fd82 	bl	8000d54 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002252:	e009      	b.n	8002268 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002254:	f7fe fd7e 	bl	8000d54 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002262:	d901      	bls.n	8002268 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e007      	b.n	8002278 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d122      	bne.n	80022e4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022ae:	f7fe fd51 	bl	8000d54 <HAL_GetTick>
 80022b2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022b4:	e00c      	b.n	80022d0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022b6:	f7fe fd4d 	bl	8000d54 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c4:	d904      	bls.n	80022d0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <RTC_EnterInitMode+0x64>
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d1e8      	bne.n	80022b6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002308:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff89 	bl	8002230 <HAL_RTC_WaitForSynchro>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f839 	bl	80023d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 f9d8 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d001      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e04e      	b.n	80024a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d022      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d01d      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_TIM_Base_Start_IT+0xd0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d111      	bne.n	8002490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d010      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	e007      	b.n	80024a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40010000 	.word	0x40010000
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800
 80024bc:	40000c00 	.word	0x40000c00
 80024c0:	40010400 	.word	0x40010400
 80024c4:	40014000 	.word	0x40014000
 80024c8:	40001800 	.word	0x40001800

080024cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d122      	bne.n	8002528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d11b      	bne.n	8002528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0202 	mvn.w	r2, #2
 80024f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8ee 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8e0 	bl	80026dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8f1 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d122      	bne.n	800257c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d11b      	bne.n	800257c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0204 	mvn.w	r2, #4
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8c4 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8b6 	bl	80026dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8c7 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d122      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f89a 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f88c 	bl	80026dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f89d 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0210 	mvn.w	r2, #16
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2208      	movs	r2, #8
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f870 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f862 	bl	80026dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f873 	bl	8002704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0201 	mvn.w	r2, #1
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe f948 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d10e      	bne.n	800267c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d107      	bne.n	800267c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f902 	bl	8002880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d10e      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f838 	bl	8002718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0220 	mvn.w	r2, #32
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8cc 	bl	800286c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d00f      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3d      	ldr	r2, [pc, #244]	; (8002844 <TIM_Base_SetConfig+0x118>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00b      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3c      	ldr	r2, [pc, #240]	; (8002848 <TIM_Base_SetConfig+0x11c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3b      	ldr	r2, [pc, #236]	; (800284c <TIM_Base_SetConfig+0x120>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <TIM_Base_SetConfig+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d108      	bne.n	800277e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2f      	ldr	r2, [pc, #188]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d027      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <TIM_Base_SetConfig+0x118>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d023      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <TIM_Base_SetConfig+0x11c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <TIM_Base_SetConfig+0x120>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <TIM_Base_SetConfig+0x124>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d017      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <TIM_Base_SetConfig+0x128>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <TIM_Base_SetConfig+0x12c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00f      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <TIM_Base_SetConfig+0x130>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00b      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <TIM_Base_SetConfig+0x134>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <TIM_Base_SetConfig+0x138>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a23      	ldr	r2, [pc, #140]	; (8002868 <TIM_Base_SetConfig+0x13c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d108      	bne.n	80027f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <TIM_Base_SetConfig+0x114>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0xf8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <TIM_Base_SetConfig+0x124>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800
 800284c:	40000c00 	.word	0x40000c00
 8002850:	40010400 	.word	0x40010400
 8002854:	40014000 	.word	0x40014000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800
 8002860:	40001800 	.word	0x40001800
 8002864:	40001c00 	.word	0x40001c00
 8002868:	40002000 	.word	0x40002000

0800286c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e03f      	b.n	8002926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe f9a2 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fd7b 	bl	80033d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08a      	sub	sp, #40	; 0x28
 8002932:	af02      	add	r7, sp, #8
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	d17c      	bne.n	8002a48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_UART_Transmit+0x2c>
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e075      	b.n	8002a4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x3e>
 8002968:	2302      	movs	r3, #2
 800296a:	e06e      	b.n	8002a4a <HAL_UART_Transmit+0x11c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2221      	movs	r2, #33	; 0x21
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002982:	f7fe f9e7 	bl	8000d54 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88fa      	ldrh	r2, [r7, #6]
 800298c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299c:	d108      	bne.n	80029b0 <HAL_UART_Transmit+0x82>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e003      	b.n	80029b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029c0:	e02a      	b.n	8002a18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 faf9 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e036      	b.n	8002a4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	3302      	adds	r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e007      	b.n	8002a0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	3301      	adds	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1cf      	bne.n	80029c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2140      	movs	r1, #64	; 0x40
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fac9 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0ba      	sub	sp, #232	; 0xe8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fbd3 	bl	800325e <UART_Receive_IT>
      return;
 8002ab8:	e256      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80de 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
 8002ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80d1 	beq.w	8002c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
 8002b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d011      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
 8002b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 81ed 	beq.w	8002f5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fb5e 	bl	800325e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_UART_IRQHandler+0x17a>
 8002bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04f      	beq.n	8002c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa66 	bl	80030a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d141      	bne.n	8002c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1d9      	bne.n	8002be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d013      	beq.n	8002c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4a7d      	ldr	r2, [pc, #500]	; (8002e30 <HAL_UART_IRQHandler+0x3dc>)
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f9e4 	bl	8001010 <HAL_DMA_Abort_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00e      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f99a 	bl	8002f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00a      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f996 	bl	8002f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e006      	b.n	8002c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f992 	bl	8002f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c7a:	e170      	b.n	8002f5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	bf00      	nop
    return;
 8002c7e:	e16e      	b.n	8002f5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 814a 	bne.w	8002f1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8143 	beq.w	8002f1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 813c 	beq.w	8002f1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	f040 80b4 	bne.w	8002e34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8140 	beq.w	8002f62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f080 8139 	bcs.w	8002f62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	f000 8088 	beq.w	8002e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1d9      	bne.n	8002d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e1      	bne.n	8002d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002db2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002db4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e3      	bne.n	8002d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de6:	f023 0310 	bic.w	r3, r3, #16
 8002dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002df8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e3      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe f88d 	bl	8000f30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8c0 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e2c:	e099      	b.n	8002f62 <HAL_UART_IRQHandler+0x50e>
 8002e2e:	bf00      	nop
 8002e30:	08003167 	.word	0x08003167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808b 	beq.w	8002f66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8086 	beq.w	8002f66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e7e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e3      	bne.n	8002e5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3314      	adds	r3, #20
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e3      	bne.n	8002e92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0310 	bic.w	r3, r3, #16
 8002eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002efc:	61fa      	str	r2, [r7, #28]
 8002efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	617b      	str	r3, [r7, #20]
   return(result);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e3      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f848 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f1c:	e023      	b.n	8002f66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_UART_IRQHandler+0x4ea>
 8002f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f929 	bl	800318e <UART_Transmit_IT>
    return;
 8002f3c:	e014      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <HAL_UART_IRQHandler+0x514>
 8002f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f969 	bl	800322e <UART_EndTransmit_IT>
    return;
 8002f5c:	e004      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
    return;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
      return;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <HAL_UART_IRQHandler+0x514>
      return;
 8002f66:	bf00      	nop
  }
}
 8002f68:	37e8      	adds	r7, #232	; 0xe8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop

08002f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd4:	e050      	b.n	8003078 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d04c      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe4:	f7fd feb6 	bl	8000d54 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d241      	bcs.n	8003078 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	e853 3f00 	ldrex	r3, [r3]
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003014:	637a      	str	r2, [r7, #52]	; 0x34
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800301a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301c:	e841 2300 	strex	r3, r2, [r1]
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e5      	bne.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	613b      	str	r3, [r7, #16]
   return(result);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003048:	623a      	str	r2, [r7, #32]
 800304a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	69f9      	ldr	r1, [r7, #28]
 800304e:	6a3a      	ldr	r2, [r7, #32]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	61bb      	str	r3, [r7, #24]
   return(result);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e00f      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d09f      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3740      	adds	r7, #64	; 0x40
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b095      	sub	sp, #84	; 0x54
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c8:	643a      	str	r2, [r7, #64]	; 0x40
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3314      	adds	r3, #20
 80030fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d119      	bne.n	800314c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	60bb      	str	r3, [r7, #8]
   return(result);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	647b      	str	r3, [r7, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003138:	61ba      	str	r2, [r7, #24]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	613b      	str	r3, [r7, #16]
   return(result);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800315a:	bf00      	nop
 800315c:	3754      	adds	r7, #84	; 0x54
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff ff09 	bl	8002f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b21      	cmp	r3, #33	; 0x21
 80031a0:	d13e      	bne.n	8003220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d114      	bne.n	80031d6 <UART_Transmit_IT+0x48>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d110      	bne.n	80031d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	e008      	b.n	80031e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6211      	str	r1, [r2, #32]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4619      	mov	r1, r3
 80031f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10f      	bne.n	800321c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fe8e 	bl	8002f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b08c      	sub	sp, #48	; 0x30
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b22      	cmp	r3, #34	; 0x22
 8003270:	f040 80ab 	bne.w	80033ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d117      	bne.n	80032ae <UART_Receive_IT+0x50>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d113      	bne.n	80032ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	b29a      	uxth	r2, r3
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	1c9a      	adds	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e026      	b.n	80032fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c0:	d007      	beq.n	80032d2 <UART_Receive_IT+0x74>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <UART_Receive_IT+0x82>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e008      	b.n	80032f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800330c:	2b00      	cmp	r3, #0
 800330e:	d15a      	bne.n	80033c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0220 	bic.w	r2, r2, #32
 800331e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	2b01      	cmp	r3, #1
 800334e:	d135      	bne.n	80033bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	613b      	str	r3, [r7, #16]
   return(result);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f023 0310 	bic.w	r3, r3, #16
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	623a      	str	r2, [r7, #32]
 8003378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	69f9      	ldr	r1, [r7, #28]
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	61bb      	str	r3, [r7, #24]
   return(result);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d10a      	bne.n	80033ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fdf9 	bl	8002fac <HAL_UARTEx_RxEventCallback>
 80033ba:	e002      	b.n	80033c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fde1 	bl	8002f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e002      	b.n	80033cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e000      	b.n	80033cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3730      	adds	r7, #48	; 0x30
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d8:	b0c0      	sub	sp, #256	; 0x100
 80033da:	af00      	add	r7, sp, #0
 80033dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	ea40 0301 	orr.w	r3, r0, r1
 80033fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	431a      	orrs	r2, r3
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	431a      	orrs	r2, r3
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800342c:	f021 010c 	bic.w	r1, r1, #12
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800343a:	430b      	orrs	r3, r1
 800343c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	6999      	ldr	r1, [r3, #24]
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	ea40 0301 	orr.w	r3, r0, r1
 800345a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8f      	ldr	r3, [pc, #572]	; (80036a0 <UART_SetConfig+0x2cc>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d005      	beq.n	8003474 <UART_SetConfig+0xa0>
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b8d      	ldr	r3, [pc, #564]	; (80036a4 <UART_SetConfig+0x2d0>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d104      	bne.n	800347e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7fe fc60 	bl	8001d38 <HAL_RCC_GetPCLK2Freq>
 8003478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800347c:	e003      	b.n	8003486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800347e:	f7fe fc47 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8003482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	f040 810c 	bne.w	80036ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800349e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ae:	415b      	adcs	r3, r3
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034b6:	4621      	mov	r1, r4
 80034b8:	eb12 0801 	adds.w	r8, r2, r1
 80034bc:	4629      	mov	r1, r5
 80034be:	eb43 0901 	adc.w	r9, r3, r1
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d6:	4690      	mov	r8, r2
 80034d8:	4699      	mov	r9, r3
 80034da:	4623      	mov	r3, r4
 80034dc:	eb18 0303 	adds.w	r3, r8, r3
 80034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034e4:	462b      	mov	r3, r5
 80034e6:	eb49 0303 	adc.w	r3, r9, r3
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003502:	460b      	mov	r3, r1
 8003504:	18db      	adds	r3, r3, r3
 8003506:	653b      	str	r3, [r7, #80]	; 0x50
 8003508:	4613      	mov	r3, r2
 800350a:	eb42 0303 	adc.w	r3, r2, r3
 800350e:	657b      	str	r3, [r7, #84]	; 0x54
 8003510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003518:	f7fc feba 	bl	8000290 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003522:	fba3 2302 	umull	r2, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	011c      	lsls	r4, r3, #4
 800352a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800353c:	4642      	mov	r2, r8
 800353e:	464b      	mov	r3, r9
 8003540:	1891      	adds	r1, r2, r2
 8003542:	64b9      	str	r1, [r7, #72]	; 0x48
 8003544:	415b      	adcs	r3, r3
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800354c:	4641      	mov	r1, r8
 800354e:	eb12 0a01 	adds.w	sl, r2, r1
 8003552:	4649      	mov	r1, r9
 8003554:	eb43 0b01 	adc.w	fp, r3, r1
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356c:	4692      	mov	sl, r2
 800356e:	469b      	mov	fp, r3
 8003570:	4643      	mov	r3, r8
 8003572:	eb1a 0303 	adds.w	r3, sl, r3
 8003576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800357a:	464b      	mov	r3, r9
 800357c:	eb4b 0303 	adc.w	r3, fp, r3
 8003580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003598:	460b      	mov	r3, r1
 800359a:	18db      	adds	r3, r3, r3
 800359c:	643b      	str	r3, [r7, #64]	; 0x40
 800359e:	4613      	mov	r3, r2
 80035a0:	eb42 0303 	adc.w	r3, r2, r3
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ae:	f7fc fe6f 	bl	8000290 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <UART_SetConfig+0x2d4>)
 80035ba:	fba3 2301 	umull	r2, r3, r3, r1
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2264      	movs	r2, #100	; 0x64
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	1acb      	subs	r3, r1, r3
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035ce:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <UART_SetConfig+0x2d4>)
 80035d0:	fba3 2302 	umull	r2, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035dc:	441c      	add	r4, r3
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035f8:	415b      	adcs	r3, r3
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6339      	str	r1, [r7, #48]	; 0x30
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800364c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003654:	460b      	mov	r3, r1
 8003656:	18db      	adds	r3, r3, r3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
 800365a:	4613      	mov	r3, r2
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800366a:	f7fc fe11 	bl	8000290 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <UART_SetConfig+0x2d4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 0207 	and.w	r2, r3, #7
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4422      	add	r2, r4
 800369a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800369c:	e105      	b.n	80038aa <UART_SetConfig+0x4d6>
 800369e:	bf00      	nop
 80036a0:	40011000 	.word	0x40011000
 80036a4:	40011400 	.word	0x40011400
 80036a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b0:	2200      	movs	r2, #0
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036be:	4642      	mov	r2, r8
 80036c0:	464b      	mov	r3, r9
 80036c2:	1891      	adds	r1, r2, r2
 80036c4:	6239      	str	r1, [r7, #32]
 80036c6:	415b      	adcs	r3, r3
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ce:	4641      	mov	r1, r8
 80036d0:	1854      	adds	r4, r2, r1
 80036d2:	4649      	mov	r1, r9
 80036d4:	eb43 0501 	adc.w	r5, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	00eb      	lsls	r3, r5, #3
 80036e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e6:	00e2      	lsls	r2, r4, #3
 80036e8:	4614      	mov	r4, r2
 80036ea:	461d      	mov	r5, r3
 80036ec:	4643      	mov	r3, r8
 80036ee:	18e3      	adds	r3, r4, r3
 80036f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036f4:	464b      	mov	r3, r9
 80036f6:	eb45 0303 	adc.w	r3, r5, r3
 80036fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800370a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800371a:	4629      	mov	r1, r5
 800371c:	008b      	lsls	r3, r1, #2
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003724:	4621      	mov	r1, r4
 8003726:	008a      	lsls	r2, r1, #2
 8003728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800372c:	f7fc fdb0 	bl	8000290 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	011c      	lsls	r4, r3, #4
 800373e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800374c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	1891      	adds	r1, r2, r2
 8003756:	61b9      	str	r1, [r7, #24]
 8003758:	415b      	adcs	r3, r3
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003760:	4641      	mov	r1, r8
 8003762:	1851      	adds	r1, r2, r1
 8003764:	6139      	str	r1, [r7, #16]
 8003766:	4649      	mov	r1, r9
 8003768:	414b      	adcs	r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	00cb      	lsls	r3, r1, #3
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003782:	4651      	mov	r1, sl
 8003784:	00ca      	lsls	r2, r1, #3
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	4603      	mov	r3, r0
 800378c:	4642      	mov	r2, r8
 800378e:	189b      	adds	r3, r3, r2
 8003790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003794:	464b      	mov	r3, r9
 8003796:	460a      	mov	r2, r1
 8003798:	eb42 0303 	adc.w	r3, r2, r3
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037b8:	4649      	mov	r1, r9
 80037ba:	008b      	lsls	r3, r1, #2
 80037bc:	4641      	mov	r1, r8
 80037be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c2:	4641      	mov	r1, r8
 80037c4:	008a      	lsls	r2, r1, #2
 80037c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037ca:	f7fc fd61 	bl	8000290 <__aeabi_uldivmod>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <UART_SetConfig+0x4e4>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a34      	ldr	r2, [pc, #208]	; (80038b8 <UART_SetConfig+0x4e4>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f2:	441c      	add	r4, r3
 80037f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f8:	2200      	movs	r2, #0
 80037fa:	673b      	str	r3, [r7, #112]	; 0x70
 80037fc:	677a      	str	r2, [r7, #116]	; 0x74
 80037fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	1891      	adds	r1, r2, r2
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	415b      	adcs	r3, r3
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003812:	4641      	mov	r1, r8
 8003814:	1851      	adds	r1, r2, r1
 8003816:	6039      	str	r1, [r7, #0]
 8003818:	4649      	mov	r1, r9
 800381a:	414b      	adcs	r3, r1
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800382a:	4659      	mov	r1, fp
 800382c:	00cb      	lsls	r3, r1, #3
 800382e:	4651      	mov	r1, sl
 8003830:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003834:	4651      	mov	r1, sl
 8003836:	00ca      	lsls	r2, r1, #3
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	4603      	mov	r3, r0
 800383e:	4642      	mov	r2, r8
 8003840:	189b      	adds	r3, r3, r2
 8003842:	66bb      	str	r3, [r7, #104]	; 0x68
 8003844:	464b      	mov	r3, r9
 8003846:	460a      	mov	r2, r1
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	663b      	str	r3, [r7, #96]	; 0x60
 8003858:	667a      	str	r2, [r7, #100]	; 0x64
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003866:	4649      	mov	r1, r9
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	4641      	mov	r1, r8
 800386c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003870:	4641      	mov	r1, r8
 8003872:	008a      	lsls	r2, r1, #2
 8003874:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003878:	f7fc fd0a 	bl	8000290 <__aeabi_uldivmod>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003882:	fba3 1302 	umull	r1, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2164      	movs	r1, #100	; 0x64
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	3332      	adds	r3, #50	; 0x32
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <UART_SetConfig+0x4e4>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4422      	add	r2, r4
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ce:	2b84      	cmp	r3, #132	; 0x84
 80038d0:	d005      	beq.n	80038de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	3303      	adds	r3, #3
 80038dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f2:	f3ef 8305 	mrs	r3, IPSR
 80038f6:	607b      	str	r3, [r7, #4]
  return(result);
 80038f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003914:	f001 f926 	bl	8004b64 <vTaskStartScheduler>
  
  return osOK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	bd80      	pop	{r7, pc}

0800391e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800391e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003920:	b089      	sub	sp, #36	; 0x24
 8003922:	af04      	add	r7, sp, #16
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <osThreadCreate+0x54>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685c      	ldr	r4, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681d      	ldr	r5, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691e      	ldr	r6, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ffb6 	bl	80038bc <makeFreeRtosPriority>
 8003950:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800395a:	9202      	str	r2, [sp, #8]
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	9100      	str	r1, [sp, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4632      	mov	r2, r6
 8003964:	4629      	mov	r1, r5
 8003966:	4620      	mov	r0, r4
 8003968:	f000 ff1e 	bl	80047a8 <xTaskCreateStatic>
 800396c:	4603      	mov	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e01c      	b.n	80039ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685c      	ldr	r4, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800397e:	b29e      	uxth	r6, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff98 	bl	80038bc <makeFreeRtosPriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	4632      	mov	r2, r6
 800399a:	4629      	mov	r1, r5
 800399c:	4620      	mov	r0, r4
 800399e:	f000 ff60 	bl	8004862 <xTaskCreate>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d001      	beq.n	80039ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039ac:	68fb      	ldr	r3, [r7, #12]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <osDelay+0x16>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	e000      	b.n	80039ce <osDelay+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f894 	bl	8004afc <vTaskDelay>
  
  return osOK;
 80039d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00f      	beq.n	8003a10 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10a      	bne.n	8003a0c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2203      	movs	r2, #3
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2001      	movs	r0, #1
 8003a04:	f000 f9be 	bl	8003d84 <xQueueGenericCreateStatic>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	e016      	b.n	8003a3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e014      	b.n	8003a3a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d110      	bne.n	8003a38 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003a16:	2203      	movs	r2, #3
 8003a18:	2100      	movs	r1, #0
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f000 fa2a 	bl	8003e74 <xQueueGenericCreate>
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <osSemaphoreCreate+0x56>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa7a 	bl	8003f28 <xQueueGenericSend>
      return sema;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	e000      	b.n	8003a3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003a38:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	e03a      	b.n	8003ad2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d103      	bne.n	8003a70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e009      	b.n	8003a84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <osSemaphoreWait+0x40>
      ticks = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a84:	f7ff ff32 	bl	80038ec <inHandlerMode>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	461a      	mov	r2, r3
 8003a94:	2100      	movs	r1, #0
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fcde 	bl	8004458 <xQueueReceiveFromISR>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003aa2:	23ff      	movs	r3, #255	; 0xff
 8003aa4:	e015      	b.n	8003ad2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d011      	beq.n	8003ad0 <osSemaphoreWait+0x8c>
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <osSemaphoreWait+0x98>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	e008      	b.n	8003ad0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fbbd 	bl	8004240 <xQueueSemaphoreTake>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003acc:	23ff      	movs	r3, #255	; 0xff
 8003ace:	e000      	b.n	8003ad2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003af0:	f7ff fefc 	bl	80038ec <inHandlerMode>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003afa:	f107 0308 	add.w	r3, r7, #8
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb0f 	bl	8004124 <xQueueGiveFromISR>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d001      	beq.n	8003b10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003b0c:	23ff      	movs	r3, #255	; 0xff
 8003b0e:	e017      	b.n	8003b40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d013      	beq.n	8003b3e <osSemaphoreRelease+0x5e>
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <osSemaphoreRelease+0x68>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	e00a      	b.n	8003b3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9fa 	bl	8003f28 <xQueueGenericSend>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d001      	beq.n	8003b3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003b3a:	23ff      	movs	r3, #255	; 0xff
 8003b3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0208 	add.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f103 0208 	add.w	r2, r3, #8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0208 	add.w	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d103      	bne.n	8003c0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e00c      	b.n	8003c28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3308      	adds	r3, #8
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <vListInsert+0x2e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d2f6      	bcs.n	8003c16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6892      	ldr	r2, [r2, #8]
 8003c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d103      	bne.n	8003c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cde:	f001 fea1 	bl	8005a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	441a      	add	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	22ff      	movs	r2, #255	; 0xff
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d114      	bne.n	8003d5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01a      	beq.n	8003d72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3310      	adds	r3, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f001 f961 	bl	8005008 <xTaskRemoveFromEventList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <xQueueGenericReset+0xcc>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	e009      	b.n	8003d72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3310      	adds	r3, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fef2 	bl	8003b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff feed 	bl	8003b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d72:	f001 fe87 	bl	8005a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	; 0x38
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <xQueueGenericCreateStatic+0x52>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <xQueueGenericCreateStatic+0x56>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericCreateStatic+0x58>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <xQueueGenericCreateStatic+0x7e>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <xQueueGenericCreateStatic+0x82>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <xQueueGenericCreateStatic+0x84>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	61fb      	str	r3, [r7, #28]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e22:	2348      	movs	r3, #72	; 0x48
 8003e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b48      	cmp	r3, #72	; 0x48
 8003e2a:	d00a      	beq.n	8003e42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61bb      	str	r3, [r7, #24]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f83f 	bl	8003ee8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3730      	adds	r7, #48	; 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	613b      	str	r3, [r7, #16]
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3348      	adds	r3, #72	; 0x48
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fedb 	bl	8005c68 <pvPortMalloc>
 8003eb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d011      	beq.n	8003ede <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	3348      	adds	r3, #72	; 0x48
 8003ec2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ecc:	79fa      	ldrb	r2, [r7, #7]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f805 	bl	8003ee8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ede:	69bb      	ldr	r3, [r7, #24]
	}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e002      	b.n	8003f0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f16:	2101      	movs	r1, #1
 8003f18:	69b8      	ldr	r0, [r7, #24]
 8003f1a:	f7ff fecb 	bl	8003cb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08e      	sub	sp, #56	; 0x38
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f36:	2300      	movs	r3, #0
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xQueueGenericSend+0x32>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <xQueueGenericSend+0x40>
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <xQueueGenericSend+0x44>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <xQueueGenericSend+0x46>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <xQueueGenericSend+0x60>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d103      	bne.n	8003f96 <xQueueGenericSend+0x6e>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <xQueueGenericSend+0x72>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <xQueueGenericSend+0x74>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	623b      	str	r3, [r7, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb6:	f001 f9e7 	bl	8005388 <xTaskGetSchedulerState>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <xQueueGenericSend+0x9e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xQueueGenericSend+0xa2>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueGenericSend+0xa4>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61fb      	str	r3, [r7, #28]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fe6:	f001 fd1d 	bl	8005a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <xQueueGenericSend+0xd4>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d129      	bne.n	8004050 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004002:	f000 fac1 	bl	8004588 <prvCopyDataToQueue>
 8004006:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fff7 	bl	8005008 <xTaskRemoveFromEventList>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <xQueueGenericSend+0x1f8>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	e00a      	b.n	8004048 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <xQueueGenericSend+0x1f8>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004048:	f001 fd1c 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	e063      	b.n	8004118 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004056:	f001 fd15 	bl	8005a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800405a:	2300      	movs	r3, #0
 800405c:	e05c      	b.n	8004118 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f82f 	bl	80050cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800406e:	2301      	movs	r3, #1
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004072:	f001 fd07 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004076:	f000 fddf 	bl	8004c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800407a:	f001 fcd3 	bl	8005a24 <vPortEnterCritical>
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004084:	b25b      	sxtb	r3, r3
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d103      	bne.n	8004094 <xQueueGenericSend+0x16c>
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800409a:	b25b      	sxtb	r3, r3
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d103      	bne.n	80040aa <xQueueGenericSend+0x182>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040aa:	f001 fceb 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ae:	1d3a      	adds	r2, r7, #4
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f81e 	bl	80050f8 <xTaskCheckForTimeOut>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d124      	bne.n	800410c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c4:	f000 fb58 	bl	8004778 <prvIsQueueFull>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	3310      	adds	r3, #16
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ff72 	bl	8004fc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040de:	f000 fae3 	bl	80046a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040e2:	f000 fdb7 	bl	8004c54 <xTaskResumeAll>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f af7c 	bne.w	8003fe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <xQueueGenericSend+0x1f8>)
 80040f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	e772      	b.n	8003fe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004102:	f000 fad1 	bl	80046a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004106:	f000 fda5 	bl	8004c54 <xTaskResumeAll>
 800410a:	e76c      	b.n	8003fe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800410c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410e:	f000 facb 	bl	80046a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004112:	f000 fd9f 	bl	8004c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004118:	4618      	mov	r0, r3
 800411a:	3738      	adds	r7, #56	; 0x38
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	; 0x38
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	623b      	str	r3, [r7, #32]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	61fb      	str	r3, [r7, #28]
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <xQueueGiveFromISR+0x58>
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <xQueueGiveFromISR+0x5c>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <xQueueGiveFromISR+0x5e>
 8004180:	2300      	movs	r3, #0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	61bb      	str	r3, [r7, #24]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800419c:	f001 fd24 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041a0:	f3ef 8211 	mrs	r2, BASEPRI
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	617a      	str	r2, [r7, #20]
 80041b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d22b      	bcs.n	8004224 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d112      	bne.n	800420e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	3324      	adds	r3, #36	; 0x24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 ff07 	bl	8005008 <xTaskRemoveFromEventList>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e007      	b.n	800421e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800420e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004212:	3301      	adds	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	b25a      	sxtb	r2, r3
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800421e:	2301      	movs	r3, #1
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e001      	b.n	8004228 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004224:	2300      	movs	r3, #0
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004236:	4618      	mov	r0, r3
 8004238:	3738      	adds	r7, #56	; 0x38
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61fb      	str	r3, [r7, #28]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004290:	f001 f87a 	bl	8005388 <xTaskGetSchedulerState>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <xQueueSemaphoreTake+0x60>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <xQueueSemaphoreTake+0x64>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <xQueueSemaphoreTake+0x66>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	61bb      	str	r3, [r7, #24]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042c0:	f001 fbb0 	bl	8005a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d024      	beq.n	800431a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80042e0:	f001 f9fa 	bl	80056d8 <pvTaskIncrementMutexHeldCount>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00f      	beq.n	8004312 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	3310      	adds	r3, #16
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fe86 	bl	8005008 <xTaskRemoveFromEventList>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004302:	4b54      	ldr	r3, [pc, #336]	; (8004454 <xQueueSemaphoreTake+0x214>)
 8004304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004312:	f001 fbb7 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8004316:	2301      	movs	r3, #1
 8004318:	e097      	b.n	800444a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	617b      	str	r3, [r7, #20]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800433c:	f001 fba2 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004340:	2300      	movs	r3, #0
 8004342:	e082      	b.n	800444a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800434a:	f107 030c 	add.w	r3, r7, #12
 800434e:	4618      	mov	r0, r3
 8004350:	f000 febc 	bl	80050cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004358:	f001 fb94 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800435c:	f000 fc6c 	bl	8004c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004360:	f001 fb60 	bl	8005a24 <vPortEnterCritical>
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800436a:	b25b      	sxtb	r3, r3
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d103      	bne.n	800437a <xQueueSemaphoreTake+0x13a>
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004380:	b25b      	sxtb	r3, r3
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d103      	bne.n	8004390 <xQueueSemaphoreTake+0x150>
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004390:	f001 fb78 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004394:	463a      	mov	r2, r7
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 feab 	bl	80050f8 <xTaskCheckForTimeOut>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d132      	bne.n	800440e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043aa:	f000 f9cf 	bl	800474c <prvIsQueueEmpty>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d026      	beq.n	8004402 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80043bc:	f001 fb32 	bl	8005a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fffd 	bl	80053c4 <xTaskPriorityInherit>
 80043ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80043cc:	f001 fb5a 	bl	8005a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fdf1 	bl	8004fc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043e0:	f000 f962 	bl	80046a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043e4:	f000 fc36 	bl	8004c54 <xTaskResumeAll>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f47f af68 	bne.w	80042c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <xQueueSemaphoreTake+0x214>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	e75e      	b.n	80042c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004404:	f000 f950 	bl	80046a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004408:	f000 fc24 	bl	8004c54 <xTaskResumeAll>
 800440c:	e758      	b.n	80042c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800440e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004410:	f000 f94a 	bl	80046a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004414:	f000 fc1e 	bl	8004c54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800441a:	f000 f997 	bl	800474c <prvIsQueueEmpty>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f43f af4d 	beq.w	80042c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800442c:	f001 fafa 	bl	8005a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004432:	f000 f891 	bl	8004558 <prvGetDisinheritPriorityAfterTimeout>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f8bc 	bl	80055bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004444:	f001 fb1e 	bl	8005a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004448:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800444a:	4618      	mov	r0, r3
 800444c:	3738      	adds	r7, #56	; 0x38
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08e      	sub	sp, #56	; 0x38
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	623b      	str	r3, [r7, #32]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <xQueueReceiveFromISR+0x3a>
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <xQueueReceiveFromISR+0x3e>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <xQueueReceiveFromISR+0x40>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	61fb      	str	r3, [r7, #28]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044b2:	f001 fb99 	bl	8005be8 <vPortValidateInterruptPriority>
	__asm volatile
 80044b6:	f3ef 8211 	mrs	r2, BASEPRI
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	61ba      	str	r2, [r7, #24]
 80044cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80044ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02f      	beq.n	800453e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ec:	f000 f8b6 	bl	800465c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	1e5a      	subs	r2, r3, #1
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d112      	bne.n	8004528 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	3310      	adds	r3, #16
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fd7a 	bl	8005008 <xTaskRemoveFromEventList>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00e      	beq.n	8004538 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e007      	b.n	8004538 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800452c:	3301      	adds	r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	b25a      	sxtb	r2, r3
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004538:	2301      	movs	r3, #1
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
 800453c:	e001      	b.n	8004542 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800453e:	2300      	movs	r3, #0
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f383 8811 	msr	BASEPRI, r3
}
 800454c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800454e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004550:	4618      	mov	r0, r3
 8004552:	3738      	adds	r7, #56	; 0x38
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f1c3 0307 	rsb	r3, r3, #7
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e001      	b.n	800457a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800457a:	68fb      	ldr	r3, [r7, #12]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10d      	bne.n	80045c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14d      	bne.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ff7c 	bl	80054b0 <xTaskPriorityDisinherit>
 80045b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e043      	b.n	800464a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d119      	bne.n	80045fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6858      	ldr	r0, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	461a      	mov	r2, r3
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	f001 fd5e 	bl	8006094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d32b      	bcc.n	800464a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e026      	b.n	800464a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68d8      	ldr	r0, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	461a      	mov	r2, r3
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	f001 fd44 	bl	8006094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	425b      	negs	r3, r3
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d207      	bcs.n	8004638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	425b      	negs	r3, r3
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d105      	bne.n	800464a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	3b01      	subs	r3, #1
 8004648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004652:	697b      	ldr	r3, [r7, #20]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d303      	bcc.n	8004690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68d9      	ldr	r1, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	461a      	mov	r2, r3
 800469a:	6838      	ldr	r0, [r7, #0]
 800469c:	f001 fcfa 	bl	8006094 <memcpy>
	}
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046b0:	f001 f9b8 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046bc:	e011      	b.n	80046e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d012      	beq.n	80046ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fc9c 	bl	8005008 <xTaskRemoveFromEventList>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046d6:	f000 fd71 	bl	80051bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	3b01      	subs	r3, #1
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dce9      	bgt.n	80046be <prvUnlockQueue+0x16>
 80046ea:	e000      	b.n	80046ee <prvUnlockQueue+0x46>
					break;
 80046ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046f6:	f001 f9c5 	bl	8005a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046fa:	f001 f993 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004706:	e011      	b.n	800472c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3310      	adds	r3, #16
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fc77 	bl	8005008 <xTaskRemoveFromEventList>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004720:	f000 fd4c 	bl	80051bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	3b01      	subs	r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800472c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dce9      	bgt.n	8004708 <prvUnlockQueue+0x60>
 8004734:	e000      	b.n	8004738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	22ff      	movs	r2, #255	; 0xff
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004740:	f001 f9a0 	bl	8005a84 <vPortExitCritical>
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004754:	f001 f966 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800476a:	f001 f98b 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004780:	f001 f950 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	429a      	cmp	r2, r3
 800478e:	d102      	bne.n	8004796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e001      	b.n	800479a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800479a:	f001 f973 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08e      	sub	sp, #56	; 0x38
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	623b      	str	r3, [r7, #32]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xTaskCreateStatic+0x46>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	61fb      	str	r3, [r7, #28]
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ee:	23b4      	movs	r3, #180	; 0xb4
 80047f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2bb4      	cmp	r3, #180	; 0xb4
 80047f6:	d00a      	beq.n	800480e <xTaskCreateStatic+0x66>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	61bb      	str	r3, [r7, #24]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800480e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01e      	beq.n	8004854 <xTaskCreateStatic+0xac>
 8004816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004824:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2202      	movs	r2, #2
 800482a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800482e:	2300      	movs	r3, #0
 8004830:	9303      	str	r3, [sp, #12]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	f107 0314 	add.w	r3, r7, #20
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f850 	bl	80048ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800484c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800484e:	f000 f8eb 	bl	8004a28 <prvAddNewTaskToReadyList>
 8004852:	e001      	b.n	8004858 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004858:	697b      	ldr	r3, [r7, #20]
	}
 800485a:	4618      	mov	r0, r3
 800485c:	3728      	adds	r7, #40	; 0x28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08c      	sub	sp, #48	; 0x30
 8004866:	af04      	add	r7, sp, #16
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4618      	mov	r0, r3
 8004878:	f001 f9f6 	bl	8005c68 <pvPortMalloc>
 800487c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004884:	20b4      	movs	r0, #180	; 0xb4
 8004886:	f001 f9ef 	bl	8005c68 <pvPortMalloc>
 800488a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
 8004898:	e005      	b.n	80048a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	f001 fab0 	bl	8005e00 <vPortFree>
 80048a0:	e001      	b.n	80048a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	2300      	movs	r3, #0
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	9302      	str	r3, [sp, #8]
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f80e 	bl	80048ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048d0:	69f8      	ldr	r0, [r7, #28]
 80048d2:	f000 f8a9 	bl	8004a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e002      	b.n	80048e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048e2:	69bb      	ldr	r3, [r7, #24]
	}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004904:	3b01      	subs	r3, #1
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <prvInitialiseNewTask+0x48>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	617b      	str	r3, [r7, #20]
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01f      	beq.n	800497a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e012      	b.n	8004966 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	7819      	ldrb	r1, [r3, #0]
 8004948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	3334      	adds	r3, #52	; 0x34
 8004950:	460a      	mov	r2, r1
 8004952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2b0f      	cmp	r3, #15
 800496a:	d9e9      	bls.n	8004940 <prvInitialiseNewTask+0x54>
 800496c:	e000      	b.n	8004970 <prvInitialiseNewTask+0x84>
			{
				break;
 800496e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004978:	e003      	b.n	8004982 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	2b06      	cmp	r3, #6
 8004986:	d901      	bls.n	800498c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004988:	2306      	movs	r3, #6
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2200      	movs	r2, #0
 800499c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff f8f2 	bl	8003b8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	3318      	adds	r3, #24
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f8ed 	bl	8003b8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	f1c3 0207 	rsb	r2, r3, #7
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	334c      	adds	r3, #76	; 0x4c
 80049dc:	2260      	movs	r2, #96	; 0x60
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 fb65 	bl	80060b0 <memset>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <prvInitialiseNewTask+0x130>)
 80049ea:	651a      	str	r2, [r3, #80]	; 0x50
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <prvInitialiseNewTask+0x134>)
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <prvInitialiseNewTask+0x138>)
 80049f6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	69b8      	ldr	r0, [r7, #24]
 80049fe:	f000 fee5 	bl	80057cc <pxPortInitialiseStack>
 8004a02:	4602      	mov	r2, r0
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a14:	bf00      	nop
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08006adc 	.word	0x08006adc
 8004a20:	08006afc 	.word	0x08006afc
 8004a24:	08006abc 	.word	0x08006abc

08004a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a30:	f000 fff8 	bl	8005a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a34:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <prvAddNewTaskToReadyList+0xb8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <prvAddNewTaskToReadyList+0xb8>)
 8004a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <prvAddNewTaskToReadyList+0xbc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a46:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <prvAddNewTaskToReadyList+0xbc>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a4c:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <prvAddNewTaskToReadyList+0xb8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d110      	bne.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a54:	f000 fbd6 	bl	8005204 <prvInitialiseTaskLists>
 8004a58:	e00d      	b.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a5a:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <prvAddNewTaskToReadyList+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <prvAddNewTaskToReadyList+0xbc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d802      	bhi.n	8004a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a70:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <prvAddNewTaskToReadyList+0xbc>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <prvAddNewTaskToReadyList+0xc4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <prvAddNewTaskToReadyList+0xc4>)
 8004a7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	2201      	movs	r2, #1
 8004a86:	409a      	lsls	r2, r3
 8004a88:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <prvAddNewTaskToReadyList+0xc8>)
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <prvAddNewTaskToReadyList+0xcc>)
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7ff f87c 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004aae:	f000 ffe9 	bl	8005a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <prvAddNewTaskToReadyList+0xc0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <prvAddNewTaskToReadyList+0xbc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d207      	bcs.n	8004ad8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvAddNewTaskToReadyList+0xd0>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000500 	.word	0x20000500
 8004ae4:	20000400 	.word	0x20000400
 8004ae8:	2000050c 	.word	0x2000050c
 8004aec:	2000051c 	.word	0x2000051c
 8004af0:	20000508 	.word	0x20000508
 8004af4:	20000404 	.word	0x20000404
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d017      	beq.n	8004b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <vTaskDelay+0x60>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <vTaskDelay+0x30>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	60bb      	str	r3, [r7, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b2c:	f000 f884 	bl	8004c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b30:	2100      	movs	r1, #0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fde4 	bl	8005700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b38:	f000 f88c 	bl	8004c54 <xTaskResumeAll>
 8004b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d107      	bne.n	8004b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <vTaskDelay+0x64>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000528 	.word	0x20000528
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b72:	463a      	mov	r2, r7
 8004b74:	1d39      	adds	r1, r7, #4
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fb fd1a 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	9202      	str	r2, [sp, #8]
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	460a      	mov	r2, r1
 8004b92:	4921      	ldr	r1, [pc, #132]	; (8004c18 <vTaskStartScheduler+0xb4>)
 8004b94:	4821      	ldr	r0, [pc, #132]	; (8004c1c <vTaskStartScheduler+0xb8>)
 8004b96:	f7ff fe07 	bl	80047a8 <xTaskCreateStatic>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <vTaskStartScheduler+0xbc>)
 8004b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <vTaskStartScheduler+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e001      	b.n	8004bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d11b      	bne.n	8004bf0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	613b      	str	r3, [r7, #16]
}
 8004bca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bcc:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <vTaskStartScheduler+0xc0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	334c      	adds	r3, #76	; 0x4c
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <vTaskStartScheduler+0xc4>)
 8004bd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <vTaskStartScheduler+0xc8>)
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bde:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <vTaskStartScheduler+0xcc>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004be4:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <vTaskStartScheduler+0xd0>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bea:	f000 fe79 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bee:	e00e      	b.n	8004c0e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d10a      	bne.n	8004c0e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <vTaskStartScheduler+0xa8>
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08006a9c 	.word	0x08006a9c
 8004c1c:	080051d5 	.word	0x080051d5
 8004c20:	20000524 	.word	0x20000524
 8004c24:	20000400 	.word	0x20000400
 8004c28:	20000010 	.word	0x20000010
 8004c2c:	20000520 	.word	0x20000520
 8004c30:	2000050c 	.word	0x2000050c
 8004c34:	20000504 	.word	0x20000504

08004c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <vTaskSuspendAll+0x18>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <vTaskSuspendAll+0x18>)
 8004c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20000528 	.word	0x20000528

08004c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <xTaskResumeAll+0x114>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	603b      	str	r3, [r7, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c80:	f000 fed0 	bl	8005a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c84:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <xTaskResumeAll+0x114>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4a37      	ldr	r2, [pc, #220]	; (8004d68 <xTaskResumeAll+0x114>)
 8004c8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <xTaskResumeAll+0x114>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d161      	bne.n	8004d5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c96:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <xTaskResumeAll+0x118>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d05d      	beq.n	8004d5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c9e:	e02e      	b.n	8004cfe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <xTaskResumeAll+0x11c>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3318      	adds	r3, #24
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe ffd7 	bl	8003c60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe ffd2 	bl	8003c60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <xTaskResumeAll+0x120>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	4a2a      	ldr	r2, [pc, #168]	; (8004d74 <xTaskResumeAll+0x120>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <xTaskResumeAll+0x124>)
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f7fe ff5e 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <xTaskResumeAll+0x128>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d302      	bcc.n	8004cfe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <xTaskResumeAll+0x12c>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <xTaskResumeAll+0x11c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cc      	bne.n	8004ca0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d0c:	f000 fb1c 	bl	8005348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d10:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <xTaskResumeAll+0x130>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d1c:	f000 f836 	bl	8004d8c <xTaskIncrementTick>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d26:	4b16      	ldr	r3, [pc, #88]	; (8004d80 <xTaskResumeAll+0x12c>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f1      	bne.n	8004d1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <xTaskResumeAll+0x130>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <xTaskResumeAll+0x12c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d46:	2301      	movs	r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <xTaskResumeAll+0x134>)
 8004d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d5a:	f000 fe93 	bl	8005a84 <vPortExitCritical>

	return xAlreadyYielded;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000528 	.word	0x20000528
 8004d6c:	20000500 	.word	0x20000500
 8004d70:	200004c0 	.word	0x200004c0
 8004d74:	20000508 	.word	0x20000508
 8004d78:	20000404 	.word	0x20000404
 8004d7c:	20000400 	.word	0x20000400
 8004d80:	20000514 	.word	0x20000514
 8004d84:	20000510 	.word	0x20000510
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d96:	4b4e      	ldr	r3, [pc, #312]	; (8004ed0 <xTaskIncrementTick+0x144>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f040 808e 	bne.w	8004ebc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <xTaskIncrementTick+0x148>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004da8:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <xTaskIncrementTick+0x148>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d120      	bne.n	8004df6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004db4:	4b48      	ldr	r3, [pc, #288]	; (8004ed8 <xTaskIncrementTick+0x14c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	603b      	str	r3, [r7, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <xTaskIncrementTick+0x46>
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <xTaskIncrementTick+0x14c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	4b40      	ldr	r3, [pc, #256]	; (8004edc <xTaskIncrementTick+0x150>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3e      	ldr	r2, [pc, #248]	; (8004ed8 <xTaskIncrementTick+0x14c>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <xTaskIncrementTick+0x150>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <xTaskIncrementTick+0x154>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <xTaskIncrementTick+0x154>)
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	f000 faa9 	bl	8005348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <xTaskIncrementTick+0x158>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d348      	bcc.n	8004e92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <xTaskIncrementTick+0x14c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <xTaskIncrementTick+0x158>)
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	601a      	str	r2, [r3, #0]
					break;
 8004e12:	e03e      	b.n	8004e92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <xTaskIncrementTick+0x14c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d203      	bcs.n	8004e34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <xTaskIncrementTick+0x158>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e32:	e02e      	b.n	8004e92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe ff11 	bl	8003c60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe ff08 	bl	8003c60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	2201      	movs	r2, #1
 8004e56:	409a      	lsls	r2, r3
 8004e58:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <xTaskIncrementTick+0x15c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <xTaskIncrementTick+0x15c>)
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <xTaskIncrementTick+0x160>)
 8004e70:	441a      	add	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fe fe94 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <xTaskIncrementTick+0x164>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d3b9      	bcc.n	8004e00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e90:	e7b6      	b.n	8004e00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <xTaskIncrementTick+0x164>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	4914      	ldr	r1, [pc, #80]	; (8004eec <xTaskIncrementTick+0x160>)
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d901      	bls.n	8004eae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <xTaskIncrementTick+0x168>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e004      	b.n	8004ec6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <xTaskIncrementTick+0x16c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	4a0d      	ldr	r2, [pc, #52]	; (8004ef8 <xTaskIncrementTick+0x16c>)
 8004ec4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ec6:	697b      	ldr	r3, [r7, #20]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000528 	.word	0x20000528
 8004ed4:	20000504 	.word	0x20000504
 8004ed8:	200004b8 	.word	0x200004b8
 8004edc:	200004bc 	.word	0x200004bc
 8004ee0:	20000518 	.word	0x20000518
 8004ee4:	20000520 	.word	0x20000520
 8004ee8:	20000508 	.word	0x20000508
 8004eec:	20000404 	.word	0x20000404
 8004ef0:	20000400 	.word	0x20000400
 8004ef4:	20000514 	.word	0x20000514
 8004ef8:	20000510 	.word	0x20000510

08004efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f02:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <vTaskSwitchContext+0xac>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f0a:	4b28      	ldr	r3, [pc, #160]	; (8004fac <vTaskSwitchContext+0xb0>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f10:	e044      	b.n	8004f9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <vTaskSwitchContext+0xb0>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <vTaskSwitchContext+0xb4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f1c3 031f 	rsb	r3, r3, #31
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	4921      	ldr	r1, [pc, #132]	; (8004fb4 <vTaskSwitchContext+0xb8>)
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <vTaskSwitchContext+0x5a>
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <vTaskSwitchContext+0xb8>)
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d104      	bne.n	8004f88 <vTaskSwitchContext+0x8c>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <vTaskSwitchContext+0xbc>)
 8004f90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <vTaskSwitchContext+0xbc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	334c      	adds	r3, #76	; 0x4c
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <vTaskSwitchContext+0xc0>)
 8004f9a:	6013      	str	r3, [r2, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	20000528 	.word	0x20000528
 8004fac:	20000514 	.word	0x20000514
 8004fb0:	20000508 	.word	0x20000508
 8004fb4:	20000404 	.word	0x20000404
 8004fb8:	20000400 	.word	0x20000400
 8004fbc:	20000010 	.word	0x20000010

08004fc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <vTaskPlaceOnEventList+0x44>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3318      	adds	r3, #24
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fe fdfd 	bl	8003bee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	6838      	ldr	r0, [r7, #0]
 8004ff8:	f000 fb82 	bl	8005700 <prvAddCurrentTaskToDelayedList>
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000400 	.word	0x20000400

08005008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3318      	adds	r3, #24
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fe11 	bl	8003c60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <xTaskRemoveFromEventList+0xac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d11c      	bne.n	8005080 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3304      	adds	r3, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fe08 	bl	8003c60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	2201      	movs	r2, #1
 8005056:	409a      	lsls	r2, r3
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <xTaskRemoveFromEventList+0xb0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <xTaskRemoveFromEventList+0xb0>)
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <xTaskRemoveFromEventList+0xb4>)
 8005070:	441a      	add	r2, r3
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7fe fd94 	bl	8003ba6 <vListInsertEnd>
 800507e:	e005      	b.n	800508c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3318      	adds	r3, #24
 8005084:	4619      	mov	r1, r3
 8005086:	480e      	ldr	r0, [pc, #56]	; (80050c0 <xTaskRemoveFromEventList+0xb8>)
 8005088:	f7fe fd8d 	bl	8003ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <xTaskRemoveFromEventList+0xbc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	429a      	cmp	r2, r3
 8005098:	d905      	bls.n	80050a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <xTaskRemoveFromEventList+0xc0>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e001      	b.n	80050aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050aa:	697b      	ldr	r3, [r7, #20]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000528 	.word	0x20000528
 80050b8:	20000508 	.word	0x20000508
 80050bc:	20000404 	.word	0x20000404
 80050c0:	200004c0 	.word	0x200004c0
 80050c4:	20000400 	.word	0x20000400
 80050c8:	20000514 	.word	0x20000514

080050cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <vTaskInternalSetTimeOutState+0x24>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <vTaskInternalSetTimeOutState+0x28>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	605a      	str	r2, [r3, #4]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000518 	.word	0x20000518
 80050f4:	20000504 	.word	0x20000504

080050f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	613b      	str	r3, [r7, #16]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60fb      	str	r3, [r7, #12]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800513a:	f000 fc73 	bl	8005a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800513e:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <xTaskCheckForTimeOut+0xbc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d102      	bne.n	800515e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e023      	b.n	80051a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <xTaskCheckForTimeOut+0xc0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d007      	beq.n	800517a <xTaskCheckForTimeOut+0x82>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005174:	2301      	movs	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e015      	b.n	80051a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	429a      	cmp	r2, r3
 8005182:	d20b      	bcs.n	800519c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff9b 	bl	80050cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	e004      	b.n	80051a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f000 fc6d 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 80051aa:	69fb      	ldr	r3, [r7, #28]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000504 	.word	0x20000504
 80051b8:	20000518 	.word	0x20000518

080051bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <vTaskMissedYield+0x14>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000514 	.word	0x20000514

080051d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051dc:	f000 f852 	bl	8005284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <prvIdleTask+0x28>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d9f9      	bls.n	80051dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <prvIdleTask+0x2c>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051f8:	e7f0      	b.n	80051dc <prvIdleTask+0x8>
 80051fa:	bf00      	nop
 80051fc:	20000404 	.word	0x20000404
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	e00c      	b.n	800522a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <prvInitialiseTaskLists+0x60>)
 800521c:	4413      	add	r3, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fc94 	bl	8003b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3301      	adds	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b06      	cmp	r3, #6
 800522e:	d9ef      	bls.n	8005210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005230:	480d      	ldr	r0, [pc, #52]	; (8005268 <prvInitialiseTaskLists+0x64>)
 8005232:	f7fe fc8b 	bl	8003b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005236:	480d      	ldr	r0, [pc, #52]	; (800526c <prvInitialiseTaskLists+0x68>)
 8005238:	f7fe fc88 	bl	8003b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <prvInitialiseTaskLists+0x6c>)
 800523e:	f7fe fc85 	bl	8003b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005242:	480c      	ldr	r0, [pc, #48]	; (8005274 <prvInitialiseTaskLists+0x70>)
 8005244:	f7fe fc82 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005248:	480b      	ldr	r0, [pc, #44]	; (8005278 <prvInitialiseTaskLists+0x74>)
 800524a:	f7fe fc7f 	bl	8003b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <prvInitialiseTaskLists+0x78>)
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <prvInitialiseTaskLists+0x64>)
 8005252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <prvInitialiseTaskLists+0x7c>)
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <prvInitialiseTaskLists+0x68>)
 8005258:	601a      	str	r2, [r3, #0]
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000404 	.word	0x20000404
 8005268:	20000490 	.word	0x20000490
 800526c:	200004a4 	.word	0x200004a4
 8005270:	200004c0 	.word	0x200004c0
 8005274:	200004d4 	.word	0x200004d4
 8005278:	200004ec 	.word	0x200004ec
 800527c:	200004b8 	.word	0x200004b8
 8005280:	200004bc 	.word	0x200004bc

08005284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800528a:	e019      	b.n	80052c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800528c:	f000 fbca 	bl	8005a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <prvCheckTasksWaitingTermination+0x50>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f7fe fcdf 	bl	8003c60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <prvCheckTasksWaitingTermination+0x54>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <prvCheckTasksWaitingTermination+0x54>)
 80052aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052b6:	f000 fbe5 	bl	8005a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f810 	bl	80052e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <prvCheckTasksWaitingTermination+0x58>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e1      	bne.n	800528c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200004d4 	.word	0x200004d4
 80052d8:	20000500 	.word	0x20000500
 80052dc:	200004e8 	.word	0x200004e8

080052e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	334c      	adds	r3, #76	; 0x4c
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 ff89 	bl	8006204 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fd7d 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd7a 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800530c:	e018      	b.n	8005340 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d103      	bne.n	8005320 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fd71 	bl	8005e00 <vPortFree>
	}
 800531e:	e00f      	b.n	8005340 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005326:	2b02      	cmp	r3, #2
 8005328:	d00a      	beq.n	8005340 <prvDeleteTCB+0x60>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60fb      	str	r3, [r7, #12]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <prvDeleteTCB+0x5e>
	}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <prvResetNextTaskUnblockTime+0x38>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <prvResetNextTaskUnblockTime+0x3c>)
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005360:	e008      	b.n	8005374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <prvResetNextTaskUnblockTime+0x38>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a04      	ldr	r2, [pc, #16]	; (8005384 <prvResetNextTaskUnblockTime+0x3c>)
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	200004b8 	.word	0x200004b8
 8005384:	20000520 	.word	0x20000520

08005388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <xTaskGetSchedulerState+0x34>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005396:	2301      	movs	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	e008      	b.n	80053ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <xTaskGetSchedulerState+0x38>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053a4:	2302      	movs	r3, #2
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	e001      	b.n	80053ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ae:	687b      	ldr	r3, [r7, #4]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	2000050c 	.word	0x2000050c
 80053c0:	20000528 	.word	0x20000528

080053c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d05e      	beq.n	8005498 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <xTaskPriorityInherit+0xe0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d24e      	bcs.n	8005486 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db06      	blt.n	80053fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <xTaskPriorityInherit+0xe0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	f1c3 0207 	rsb	r2, r3, #7
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6959      	ldr	r1, [r3, #20]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <xTaskPriorityInherit+0xe4>)
 8005410:	4413      	add	r3, r2
 8005412:	4299      	cmp	r1, r3
 8005414:	d12f      	bne.n	8005476 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fc20 	bl	8003c60 <uxListRemove>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43da      	mvns	r2, r3
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <xTaskPriorityInherit+0xe8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4013      	ands	r3, r2
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <xTaskPriorityInherit+0xe8>)
 800543a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <xTaskPriorityInherit+0xe0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <xTaskPriorityInherit+0xe8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <xTaskPriorityInherit+0xe8>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a10      	ldr	r2, [pc, #64]	; (80054a8 <xTaskPriorityInherit+0xe4>)
 8005466:	441a      	add	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fb99 	bl	8003ba6 <vListInsertEnd>
 8005474:	e004      	b.n	8005480 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <xTaskPriorityInherit+0xe0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005480:	2301      	movs	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e008      	b.n	8005498 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <xTaskPriorityInherit+0xe0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	429a      	cmp	r2, r3
 8005492:	d201      	bcs.n	8005498 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005498:	68fb      	ldr	r3, [r7, #12]
	}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000400 	.word	0x20000400
 80054a8:	20000404 	.word	0x20000404
 80054ac:	20000508 	.word	0x20000508

080054b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d06e      	beq.n	80055a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <xTaskPriorityDisinherit+0x100>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d00a      	beq.n	80054e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	429a      	cmp	r2, r3
 8005518:	d044      	beq.n	80055a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551e:	2b00      	cmp	r3, #0
 8005520:	d140      	bne.n	80055a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fb9a 	bl	8003c60 <uxListRemove>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d115      	bne.n	800555e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	491f      	ldr	r1, [pc, #124]	; (80055b4 <xTaskPriorityDisinherit+0x104>)
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <xTaskPriorityDisinherit+0xae>
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	2201      	movs	r2, #1
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <xTaskPriorityDisinherit+0x108>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4013      	ands	r3, r2
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <xTaskPriorityDisinherit+0x108>)
 800555c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f1c3 0207 	rsb	r2, r3, #7
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	2201      	movs	r2, #1
 8005578:	409a      	lsls	r2, r3
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <xTaskPriorityDisinherit+0x108>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4313      	orrs	r3, r2
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <xTaskPriorityDisinherit+0x108>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <xTaskPriorityDisinherit+0x104>)
 8005592:	441a      	add	r2, r3
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	3304      	adds	r3, #4
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f7fe fb03 	bl	8003ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055a4:	697b      	ldr	r3, [r7, #20]
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000400 	.word	0x20000400
 80055b4:	20000404 	.word	0x20000404
 80055b8:	20000508 	.word	0x20000508

080055bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d077      	beq.n	80056c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d902      	bls.n	8005602 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	e002      	b.n	8005608 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d058      	beq.n	80056c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	429a      	cmp	r2, r3
 800561a:	d153      	bne.n	80056c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	429a      	cmp	r2, r3
 8005624:	d10a      	bne.n	800563c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60bb      	str	r3, [r7, #8]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	db04      	blt.n	800565a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f1c3 0207 	rsb	r2, r3, #7
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	6959      	ldr	r1, [r3, #20]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800566a:	4413      	add	r3, r2
 800566c:	4299      	cmp	r1, r3
 800566e:	d129      	bne.n	80056c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3304      	adds	r3, #4
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe faf3 	bl	8003c60 <uxListRemove>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	2201      	movs	r2, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43da      	mvns	r2, r3
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4013      	ands	r3, r2
 8005692:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005694:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056b6:	441a      	add	r2, r3
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7fe fa71 	bl	8003ba6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000400 	.word	0x20000400
 80056d0:	20000404 	.word	0x20000404
 80056d4:	20000508 	.word	0x20000508

080056d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <pvTaskIncrementMutexHeldCount+0x24>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <pvTaskIncrementMutexHeldCount+0x24>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ea:	3201      	adds	r2, #1
 80056ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <pvTaskIncrementMutexHeldCount+0x24>)
 80056f0:	681b      	ldr	r3, [r3, #0]
	}
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000400 	.word	0x20000400

08005700 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800570a:	4b29      	ldr	r3, [pc, #164]	; (80057b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005710:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3304      	adds	r3, #4
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe faa2 	bl	8003c60 <uxListRemove>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10b      	bne.n	800573a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43da      	mvns	r2, r3
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4013      	ands	r3, r2
 8005736:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d10a      	bne.n	8005758 <prvAddCurrentTaskToDelayedList+0x58>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	481a      	ldr	r0, [pc, #104]	; (80057bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005752:	f7fe fa28 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005756:	e026      	b.n	80057a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	429a      	cmp	r2, r3
 800576e:	d209      	bcs.n	8005784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005770:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3304      	adds	r3, #4
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f7fe fa36 	bl	8003bee <vListInsert>
}
 8005782:	e010      	b.n	80057a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe fa2c 	bl	8003bee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d202      	bcs.n	80057a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057a0:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6013      	str	r3, [r2, #0]
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000504 	.word	0x20000504
 80057b4:	20000400 	.word	0x20000400
 80057b8:	20000508 	.word	0x20000508
 80057bc:	200004ec 	.word	0x200004ec
 80057c0:	200004bc 	.word	0x200004bc
 80057c4:	200004b8 	.word	0x200004b8
 80057c8:	20000520 	.word	0x20000520

080057cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b04      	subs	r3, #4
 80057dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <pxPortInitialiseStack+0x64>)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b14      	subs	r3, #20
 8005806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f06f 0202 	mvn.w	r2, #2
 800581a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b20      	subs	r3, #32
 8005820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	08005835 	.word	0x08005835

08005834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <prvTaskExitError+0x54>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d00a      	beq.n	800585e <prvTaskExitError+0x2a>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <prvTaskExitError+0x28>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	60bb      	str	r3, [r7, #8]
}
 8005870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005872:	bf00      	nop
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0fc      	beq.n	8005874 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	2000000c 	.word	0x2000000c
 800588c:	00000000 	.word	0x00000000

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ec:	f7ff fa86 	bl	8004efc <vTaskSwitchContext>
	prvTaskExitError();
 80059f0:	f7ff ff20 	bl	8005834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	2000052c 	.word	0x2000052c
 8005a14:	20000530 	.word	0x20000530
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
	}
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000000c 	.word	0x2000000c
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7ff f9f4 	bl	8004efc <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7ff f913 	bl	8004d8c <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <SysTick_Handler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	2000052c 	.word	0x2000052c
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	20000530 	.word	0x20000530

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7fe ffe0 	bl	8004c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7fe ff4c 	bl	8004c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2000413c 	.word	0x2000413c
 8005dec:	20004150 	.word	0x20004150
 8005df0:	20004140 	.word	0x20004140
 8005df4:	20004134 	.word	0x20004134
 8005df8:	20004144 	.word	0x20004144
 8005dfc:	20004148 	.word	0x20004148

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7fe fed6 	bl	8004c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7fe fed3 	bl	8004c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004150 	.word	0x20004150
 8005ebc:	20004140 	.word	0x20004140
 8005ec0:	2000414c 	.word	0x2000414c

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000534 	.word	0x20000534
 8005f74:	20004134 	.word	0x20004134
 8005f78:	2000413c 	.word	0x2000413c
 8005f7c:	20004144 	.word	0x20004144
 8005f80:	20004140 	.word	0x20004140
 8005f84:	20004150 	.word	0x20004150

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004134 	.word	0x20004134
 8006038:	2000413c 	.word	0x2000413c

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4d0d      	ldr	r5, [pc, #52]	; (8006080 <__libc_init_array+0x38>)
 800604c:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	2600      	movs	r6, #0
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	4d0b      	ldr	r5, [pc, #44]	; (8006088 <__libc_init_array+0x40>)
 800605a:	4c0c      	ldr	r4, [pc, #48]	; (800608c <__libc_init_array+0x44>)
 800605c:	f000 fcf8 	bl	8006a50 <_init>
 8006060:	1b64      	subs	r4, r4, r5
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	2600      	movs	r6, #0
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	08006b58 	.word	0x08006b58
 8006084:	08006b58 	.word	0x08006b58
 8006088:	08006b58 	.word	0x08006b58
 800608c:	08006b5c 	.word	0x08006b5c

08006090 <__retarget_lock_acquire_recursive>:
 8006090:	4770      	bx	lr

08006092 <__retarget_lock_release_recursive>:
 8006092:	4770      	bx	lr

08006094 <memcpy>:
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	f100 33ff 	add.w	r3, r0, #4294967295
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	4770      	bx	lr
 80060a0:	b510      	push	{r4, lr}
 80060a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060aa:	4291      	cmp	r1, r2
 80060ac:	d1f9      	bne.n	80060a2 <memcpy+0xe>
 80060ae:	bd10      	pop	{r4, pc}

080060b0 <memset>:
 80060b0:	4402      	add	r2, r0
 80060b2:	4603      	mov	r3, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d100      	bne.n	80060ba <memset+0xa>
 80060b8:	4770      	bx	lr
 80060ba:	f803 1b01 	strb.w	r1, [r3], #1
 80060be:	e7f9      	b.n	80060b4 <memset+0x4>

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0e      	ldr	r6, [pc, #56]	; (80060fc <sbrk_aligned+0x3c>)
 80060c4:	460c      	mov	r4, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	4605      	mov	r5, r0
 80060ca:	b911      	cbnz	r1, 80060d2 <sbrk_aligned+0x12>
 80060cc:	f000 f8f6 	bl	80062bc <_sbrk_r>
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f8f1 	bl	80062bc <_sbrk_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d00a      	beq.n	80060f4 <sbrk_aligned+0x34>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d007      	beq.n	80060f8 <sbrk_aligned+0x38>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f8e6 	bl	80062bc <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d101      	bne.n	80060f8 <sbrk_aligned+0x38>
 80060f4:	f04f 34ff 	mov.w	r4, #4294967295
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	2000415c 	.word	0x2000415c

08006100 <_malloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	1ccd      	adds	r5, r1, #3
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	2d00      	cmp	r5, #0
 8006114:	4607      	mov	r7, r0
 8006116:	db01      	blt.n	800611c <_malloc_r+0x1c>
 8006118:	42a9      	cmp	r1, r5
 800611a:	d905      	bls.n	8006128 <_malloc_r+0x28>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	2600      	movs	r6, #0
 8006122:	4630      	mov	r0, r6
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006128:	4e2e      	ldr	r6, [pc, #184]	; (80061e4 <_malloc_r+0xe4>)
 800612a:	f000 f8f7 	bl	800631c <__malloc_lock>
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	461c      	mov	r4, r3
 8006132:	bb34      	cbnz	r4, 8006182 <_malloc_r+0x82>
 8006134:	4629      	mov	r1, r5
 8006136:	4638      	mov	r0, r7
 8006138:	f7ff ffc2 	bl	80060c0 <sbrk_aligned>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	4604      	mov	r4, r0
 8006140:	d14d      	bne.n	80061de <_malloc_r+0xde>
 8006142:	6834      	ldr	r4, [r6, #0]
 8006144:	4626      	mov	r6, r4
 8006146:	2e00      	cmp	r6, #0
 8006148:	d140      	bne.n	80061cc <_malloc_r+0xcc>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	4631      	mov	r1, r6
 800614e:	4638      	mov	r0, r7
 8006150:	eb04 0803 	add.w	r8, r4, r3
 8006154:	f000 f8b2 	bl	80062bc <_sbrk_r>
 8006158:	4580      	cmp	r8, r0
 800615a:	d13a      	bne.n	80061d2 <_malloc_r+0xd2>
 800615c:	6821      	ldr	r1, [r4, #0]
 800615e:	3503      	adds	r5, #3
 8006160:	1a6d      	subs	r5, r5, r1
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa5 	bl	80060c0 <sbrk_aligned>
 8006176:	3001      	adds	r0, #1
 8006178:	d02b      	beq.n	80061d2 <_malloc_r+0xd2>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	442b      	add	r3, r5
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e00e      	b.n	80061a0 <_malloc_r+0xa0>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	1b52      	subs	r2, r2, r5
 8006186:	d41e      	bmi.n	80061c6 <_malloc_r+0xc6>
 8006188:	2a0b      	cmp	r2, #11
 800618a:	d916      	bls.n	80061ba <_malloc_r+0xba>
 800618c:	1961      	adds	r1, r4, r5
 800618e:	42a3      	cmp	r3, r4
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	bf18      	it	ne
 8006194:	6059      	strne	r1, [r3, #4]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	bf08      	it	eq
 800619a:	6031      	streq	r1, [r6, #0]
 800619c:	5162      	str	r2, [r4, r5]
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f104 060b 	add.w	r6, r4, #11
 80061a6:	f000 f8bf 	bl	8006328 <__malloc_unlock>
 80061aa:	f026 0607 	bic.w	r6, r6, #7
 80061ae:	1d23      	adds	r3, r4, #4
 80061b0:	1af2      	subs	r2, r6, r3
 80061b2:	d0b6      	beq.n	8006122 <_malloc_r+0x22>
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	50a3      	str	r3, [r4, r2]
 80061b8:	e7b3      	b.n	8006122 <_malloc_r+0x22>
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	bf0c      	ite	eq
 80061c0:	6032      	streq	r2, [r6, #0]
 80061c2:	605a      	strne	r2, [r3, #4]
 80061c4:	e7ec      	b.n	80061a0 <_malloc_r+0xa0>
 80061c6:	4623      	mov	r3, r4
 80061c8:	6864      	ldr	r4, [r4, #4]
 80061ca:	e7b2      	b.n	8006132 <_malloc_r+0x32>
 80061cc:	4634      	mov	r4, r6
 80061ce:	6876      	ldr	r6, [r6, #4]
 80061d0:	e7b9      	b.n	8006146 <_malloc_r+0x46>
 80061d2:	230c      	movs	r3, #12
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4638      	mov	r0, r7
 80061d8:	f000 f8a6 	bl	8006328 <__malloc_unlock>
 80061dc:	e7a1      	b.n	8006122 <_malloc_r+0x22>
 80061de:	6025      	str	r5, [r4, #0]
 80061e0:	e7de      	b.n	80061a0 <_malloc_r+0xa0>
 80061e2:	bf00      	nop
 80061e4:	20004158 	.word	0x20004158

080061e8 <cleanup_glue>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	460c      	mov	r4, r1
 80061ec:	6809      	ldr	r1, [r1, #0]
 80061ee:	4605      	mov	r5, r0
 80061f0:	b109      	cbz	r1, 80061f6 <cleanup_glue+0xe>
 80061f2:	f7ff fff9 	bl	80061e8 <cleanup_glue>
 80061f6:	4621      	mov	r1, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fe:	f000 b899 	b.w	8006334 <_free_r>
	...

08006204 <_reclaim_reent>:
 8006204:	4b2c      	ldr	r3, [pc, #176]	; (80062b8 <_reclaim_reent+0xb4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4283      	cmp	r3, r0
 800620a:	b570      	push	{r4, r5, r6, lr}
 800620c:	4604      	mov	r4, r0
 800620e:	d051      	beq.n	80062b4 <_reclaim_reent+0xb0>
 8006210:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006212:	b143      	cbz	r3, 8006226 <_reclaim_reent+0x22>
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d14a      	bne.n	80062b0 <_reclaim_reent+0xac>
 800621a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621c:	6819      	ldr	r1, [r3, #0]
 800621e:	b111      	cbz	r1, 8006226 <_reclaim_reent+0x22>
 8006220:	4620      	mov	r0, r4
 8006222:	f000 f887 	bl	8006334 <_free_r>
 8006226:	6961      	ldr	r1, [r4, #20]
 8006228:	b111      	cbz	r1, 8006230 <_reclaim_reent+0x2c>
 800622a:	4620      	mov	r0, r4
 800622c:	f000 f882 	bl	8006334 <_free_r>
 8006230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006232:	b111      	cbz	r1, 800623a <_reclaim_reent+0x36>
 8006234:	4620      	mov	r0, r4
 8006236:	f000 f87d 	bl	8006334 <_free_r>
 800623a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800623c:	b111      	cbz	r1, 8006244 <_reclaim_reent+0x40>
 800623e:	4620      	mov	r0, r4
 8006240:	f000 f878 	bl	8006334 <_free_r>
 8006244:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006246:	b111      	cbz	r1, 800624e <_reclaim_reent+0x4a>
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f873 	bl	8006334 <_free_r>
 800624e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006250:	b111      	cbz	r1, 8006258 <_reclaim_reent+0x54>
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f86e 	bl	8006334 <_free_r>
 8006258:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800625a:	b111      	cbz	r1, 8006262 <_reclaim_reent+0x5e>
 800625c:	4620      	mov	r0, r4
 800625e:	f000 f869 	bl	8006334 <_free_r>
 8006262:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006264:	b111      	cbz	r1, 800626c <_reclaim_reent+0x68>
 8006266:	4620      	mov	r0, r4
 8006268:	f000 f864 	bl	8006334 <_free_r>
 800626c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800626e:	b111      	cbz	r1, 8006276 <_reclaim_reent+0x72>
 8006270:	4620      	mov	r0, r4
 8006272:	f000 f85f 	bl	8006334 <_free_r>
 8006276:	69a3      	ldr	r3, [r4, #24]
 8006278:	b1e3      	cbz	r3, 80062b4 <_reclaim_reent+0xb0>
 800627a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800627c:	4620      	mov	r0, r4
 800627e:	4798      	blx	r3
 8006280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006282:	b1b9      	cbz	r1, 80062b4 <_reclaim_reent+0xb0>
 8006284:	4620      	mov	r0, r4
 8006286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800628a:	f7ff bfad 	b.w	80061e8 <cleanup_glue>
 800628e:	5949      	ldr	r1, [r1, r5]
 8006290:	b941      	cbnz	r1, 80062a4 <_reclaim_reent+0xa0>
 8006292:	3504      	adds	r5, #4
 8006294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006296:	2d80      	cmp	r5, #128	; 0x80
 8006298:	68d9      	ldr	r1, [r3, #12]
 800629a:	d1f8      	bne.n	800628e <_reclaim_reent+0x8a>
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f849 	bl	8006334 <_free_r>
 80062a2:	e7ba      	b.n	800621a <_reclaim_reent+0x16>
 80062a4:	680e      	ldr	r6, [r1, #0]
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f844 	bl	8006334 <_free_r>
 80062ac:	4631      	mov	r1, r6
 80062ae:	e7ef      	b.n	8006290 <_reclaim_reent+0x8c>
 80062b0:	2500      	movs	r5, #0
 80062b2:	e7ef      	b.n	8006294 <_reclaim_reent+0x90>
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	bf00      	nop
 80062b8:	20000010 	.word	0x20000010

080062bc <_sbrk_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d06      	ldr	r5, [pc, #24]	; (80062d8 <_sbrk_r+0x1c>)
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	f7fa fc2a 	bl	8000b20 <_sbrk>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_sbrk_r+0x1a>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_sbrk_r+0x1a>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20004160 	.word	0x20004160

080062dc <siprintf>:
 80062dc:	b40e      	push	{r1, r2, r3}
 80062de:	b500      	push	{lr}
 80062e0:	b09c      	sub	sp, #112	; 0x70
 80062e2:	ab1d      	add	r3, sp, #116	; 0x74
 80062e4:	9002      	str	r0, [sp, #8]
 80062e6:	9006      	str	r0, [sp, #24]
 80062e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ec:	4809      	ldr	r0, [pc, #36]	; (8006314 <siprintf+0x38>)
 80062ee:	9107      	str	r1, [sp, #28]
 80062f0:	9104      	str	r1, [sp, #16]
 80062f2:	4909      	ldr	r1, [pc, #36]	; (8006318 <siprintf+0x3c>)
 80062f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f8:	9105      	str	r1, [sp, #20]
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	a902      	add	r1, sp, #8
 8006300:	f000 f8c0 	bl	8006484 <_svfiprintf_r>
 8006304:	9b02      	ldr	r3, [sp, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	b01c      	add	sp, #112	; 0x70
 800630c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006310:	b003      	add	sp, #12
 8006312:	4770      	bx	lr
 8006314:	20000010 	.word	0x20000010
 8006318:	ffff0208 	.word	0xffff0208

0800631c <__malloc_lock>:
 800631c:	4801      	ldr	r0, [pc, #4]	; (8006324 <__malloc_lock+0x8>)
 800631e:	f7ff beb7 	b.w	8006090 <__retarget_lock_acquire_recursive>
 8006322:	bf00      	nop
 8006324:	20004154 	.word	0x20004154

08006328 <__malloc_unlock>:
 8006328:	4801      	ldr	r0, [pc, #4]	; (8006330 <__malloc_unlock+0x8>)
 800632a:	f7ff beb2 	b.w	8006092 <__retarget_lock_release_recursive>
 800632e:	bf00      	nop
 8006330:	20004154 	.word	0x20004154

08006334 <_free_r>:
 8006334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006336:	2900      	cmp	r1, #0
 8006338:	d044      	beq.n	80063c4 <_free_r+0x90>
 800633a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800633e:	9001      	str	r0, [sp, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f1a1 0404 	sub.w	r4, r1, #4
 8006346:	bfb8      	it	lt
 8006348:	18e4      	addlt	r4, r4, r3
 800634a:	f7ff ffe7 	bl	800631c <__malloc_lock>
 800634e:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <_free_r+0x94>)
 8006350:	9801      	ldr	r0, [sp, #4]
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	b933      	cbnz	r3, 8006364 <_free_r+0x30>
 8006356:	6063      	str	r3, [r4, #4]
 8006358:	6014      	str	r4, [r2, #0]
 800635a:	b003      	add	sp, #12
 800635c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006360:	f7ff bfe2 	b.w	8006328 <__malloc_unlock>
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x46>
 8006368:	6825      	ldr	r5, [r4, #0]
 800636a:	1961      	adds	r1, r4, r5
 800636c:	428b      	cmp	r3, r1
 800636e:	bf01      	itttt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	1949      	addeq	r1, r1, r5
 8006376:	6021      	streq	r1, [r4, #0]
 8006378:	e7ed      	b.n	8006356 <_free_r+0x22>
 800637a:	461a      	mov	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b10b      	cbz	r3, 8006384 <_free_r+0x50>
 8006380:	42a3      	cmp	r3, r4
 8006382:	d9fa      	bls.n	800637a <_free_r+0x46>
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	1855      	adds	r5, r2, r1
 8006388:	42a5      	cmp	r5, r4
 800638a:	d10b      	bne.n	80063a4 <_free_r+0x70>
 800638c:	6824      	ldr	r4, [r4, #0]
 800638e:	4421      	add	r1, r4
 8006390:	1854      	adds	r4, r2, r1
 8006392:	42a3      	cmp	r3, r4
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	d1e0      	bne.n	800635a <_free_r+0x26>
 8006398:	681c      	ldr	r4, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	6053      	str	r3, [r2, #4]
 800639e:	4421      	add	r1, r4
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	e7da      	b.n	800635a <_free_r+0x26>
 80063a4:	d902      	bls.n	80063ac <_free_r+0x78>
 80063a6:	230c      	movs	r3, #12
 80063a8:	6003      	str	r3, [r0, #0]
 80063aa:	e7d6      	b.n	800635a <_free_r+0x26>
 80063ac:	6825      	ldr	r5, [r4, #0]
 80063ae:	1961      	adds	r1, r4, r5
 80063b0:	428b      	cmp	r3, r1
 80063b2:	bf04      	itt	eq
 80063b4:	6819      	ldreq	r1, [r3, #0]
 80063b6:	685b      	ldreq	r3, [r3, #4]
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	bf04      	itt	eq
 80063bc:	1949      	addeq	r1, r1, r5
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	6054      	str	r4, [r2, #4]
 80063c2:	e7ca      	b.n	800635a <_free_r+0x26>
 80063c4:	b003      	add	sp, #12
 80063c6:	bd30      	pop	{r4, r5, pc}
 80063c8:	20004158 	.word	0x20004158

080063cc <__ssputs_r>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	688e      	ldr	r6, [r1, #8]
 80063d2:	429e      	cmp	r6, r3
 80063d4:	4682      	mov	sl, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4690      	mov	r8, r2
 80063da:	461f      	mov	r7, r3
 80063dc:	d838      	bhi.n	8006450 <__ssputs_r+0x84>
 80063de:	898a      	ldrh	r2, [r1, #12]
 80063e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063e4:	d032      	beq.n	800644c <__ssputs_r+0x80>
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	6909      	ldr	r1, [r1, #16]
 80063ea:	eba5 0901 	sub.w	r9, r5, r1
 80063ee:	6965      	ldr	r5, [r4, #20]
 80063f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063f8:	3301      	adds	r3, #1
 80063fa:	444b      	add	r3, r9
 80063fc:	106d      	asrs	r5, r5, #1
 80063fe:	429d      	cmp	r5, r3
 8006400:	bf38      	it	cc
 8006402:	461d      	movcc	r5, r3
 8006404:	0553      	lsls	r3, r2, #21
 8006406:	d531      	bpl.n	800646c <__ssputs_r+0xa0>
 8006408:	4629      	mov	r1, r5
 800640a:	f7ff fe79 	bl	8006100 <_malloc_r>
 800640e:	4606      	mov	r6, r0
 8006410:	b950      	cbnz	r0, 8006428 <__ssputs_r+0x5c>
 8006412:	230c      	movs	r3, #12
 8006414:	f8ca 3000 	str.w	r3, [sl]
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	6921      	ldr	r1, [r4, #16]
 800642a:	464a      	mov	r2, r9
 800642c:	f7ff fe32 	bl	8006094 <memcpy>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	6126      	str	r6, [r4, #16]
 800643e:	6165      	str	r5, [r4, #20]
 8006440:	444e      	add	r6, r9
 8006442:	eba5 0509 	sub.w	r5, r5, r9
 8006446:	6026      	str	r6, [r4, #0]
 8006448:	60a5      	str	r5, [r4, #8]
 800644a:	463e      	mov	r6, r7
 800644c:	42be      	cmp	r6, r7
 800644e:	d900      	bls.n	8006452 <__ssputs_r+0x86>
 8006450:	463e      	mov	r6, r7
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	4632      	mov	r2, r6
 8006456:	4641      	mov	r1, r8
 8006458:	f000 faa8 	bl	80069ac <memmove>
 800645c:	68a3      	ldr	r3, [r4, #8]
 800645e:	1b9b      	subs	r3, r3, r6
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	4433      	add	r3, r6
 8006466:	6023      	str	r3, [r4, #0]
 8006468:	2000      	movs	r0, #0
 800646a:	e7db      	b.n	8006424 <__ssputs_r+0x58>
 800646c:	462a      	mov	r2, r5
 800646e:	f000 fab7 	bl	80069e0 <_realloc_r>
 8006472:	4606      	mov	r6, r0
 8006474:	2800      	cmp	r0, #0
 8006476:	d1e1      	bne.n	800643c <__ssputs_r+0x70>
 8006478:	6921      	ldr	r1, [r4, #16]
 800647a:	4650      	mov	r0, sl
 800647c:	f7ff ff5a 	bl	8006334 <_free_r>
 8006480:	e7c7      	b.n	8006412 <__ssputs_r+0x46>
	...

08006484 <_svfiprintf_r>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	4698      	mov	r8, r3
 800648a:	898b      	ldrh	r3, [r1, #12]
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	b09d      	sub	sp, #116	; 0x74
 8006490:	4607      	mov	r7, r0
 8006492:	460d      	mov	r5, r1
 8006494:	4614      	mov	r4, r2
 8006496:	d50e      	bpl.n	80064b6 <_svfiprintf_r+0x32>
 8006498:	690b      	ldr	r3, [r1, #16]
 800649a:	b963      	cbnz	r3, 80064b6 <_svfiprintf_r+0x32>
 800649c:	2140      	movs	r1, #64	; 0x40
 800649e:	f7ff fe2f 	bl	8006100 <_malloc_r>
 80064a2:	6028      	str	r0, [r5, #0]
 80064a4:	6128      	str	r0, [r5, #16]
 80064a6:	b920      	cbnz	r0, 80064b2 <_svfiprintf_r+0x2e>
 80064a8:	230c      	movs	r3, #12
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	e0d1      	b.n	8006656 <_svfiprintf_r+0x1d2>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	616b      	str	r3, [r5, #20]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ba:	2320      	movs	r3, #32
 80064bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c4:	2330      	movs	r3, #48	; 0x30
 80064c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006670 <_svfiprintf_r+0x1ec>
 80064ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ce:	f04f 0901 	mov.w	r9, #1
 80064d2:	4623      	mov	r3, r4
 80064d4:	469a      	mov	sl, r3
 80064d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064da:	b10a      	cbz	r2, 80064e0 <_svfiprintf_r+0x5c>
 80064dc:	2a25      	cmp	r2, #37	; 0x25
 80064de:	d1f9      	bne.n	80064d4 <_svfiprintf_r+0x50>
 80064e0:	ebba 0b04 	subs.w	fp, sl, r4
 80064e4:	d00b      	beq.n	80064fe <_svfiprintf_r+0x7a>
 80064e6:	465b      	mov	r3, fp
 80064e8:	4622      	mov	r2, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7ff ff6d 	bl	80063cc <__ssputs_r>
 80064f2:	3001      	adds	r0, #1
 80064f4:	f000 80aa 	beq.w	800664c <_svfiprintf_r+0x1c8>
 80064f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fa:	445a      	add	r2, fp
 80064fc:	9209      	str	r2, [sp, #36]	; 0x24
 80064fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80a2 	beq.w	800664c <_svfiprintf_r+0x1c8>
 8006508:	2300      	movs	r3, #0
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006512:	f10a 0a01 	add.w	sl, sl, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	9307      	str	r3, [sp, #28]
 800651a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651e:	931a      	str	r3, [sp, #104]	; 0x68
 8006520:	4654      	mov	r4, sl
 8006522:	2205      	movs	r2, #5
 8006524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006528:	4851      	ldr	r0, [pc, #324]	; (8006670 <_svfiprintf_r+0x1ec>)
 800652a:	f7f9 fe61 	bl	80001f0 <memchr>
 800652e:	9a04      	ldr	r2, [sp, #16]
 8006530:	b9d8      	cbnz	r0, 800656a <_svfiprintf_r+0xe6>
 8006532:	06d0      	lsls	r0, r2, #27
 8006534:	bf44      	itt	mi
 8006536:	2320      	movmi	r3, #32
 8006538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653c:	0711      	lsls	r1, r2, #28
 800653e:	bf44      	itt	mi
 8006540:	232b      	movmi	r3, #43	; 0x2b
 8006542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006546:	f89a 3000 	ldrb.w	r3, [sl]
 800654a:	2b2a      	cmp	r3, #42	; 0x2a
 800654c:	d015      	beq.n	800657a <_svfiprintf_r+0xf6>
 800654e:	9a07      	ldr	r2, [sp, #28]
 8006550:	4654      	mov	r4, sl
 8006552:	2000      	movs	r0, #0
 8006554:	f04f 0c0a 	mov.w	ip, #10
 8006558:	4621      	mov	r1, r4
 800655a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655e:	3b30      	subs	r3, #48	; 0x30
 8006560:	2b09      	cmp	r3, #9
 8006562:	d94e      	bls.n	8006602 <_svfiprintf_r+0x17e>
 8006564:	b1b0      	cbz	r0, 8006594 <_svfiprintf_r+0x110>
 8006566:	9207      	str	r2, [sp, #28]
 8006568:	e014      	b.n	8006594 <_svfiprintf_r+0x110>
 800656a:	eba0 0308 	sub.w	r3, r0, r8
 800656e:	fa09 f303 	lsl.w	r3, r9, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	46a2      	mov	sl, r4
 8006578:	e7d2      	b.n	8006520 <_svfiprintf_r+0x9c>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfbb      	ittet	lt
 8006586:	425b      	neglt	r3, r3
 8006588:	f042 0202 	orrlt.w	r2, r2, #2
 800658c:	9307      	strge	r3, [sp, #28]
 800658e:	9307      	strlt	r3, [sp, #28]
 8006590:	bfb8      	it	lt
 8006592:	9204      	strlt	r2, [sp, #16]
 8006594:	7823      	ldrb	r3, [r4, #0]
 8006596:	2b2e      	cmp	r3, #46	; 0x2e
 8006598:	d10c      	bne.n	80065b4 <_svfiprintf_r+0x130>
 800659a:	7863      	ldrb	r3, [r4, #1]
 800659c:	2b2a      	cmp	r3, #42	; 0x2a
 800659e:	d135      	bne.n	800660c <_svfiprintf_r+0x188>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfb8      	it	lt
 80065ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b0:	3402      	adds	r4, #2
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006680 <_svfiprintf_r+0x1fc>
 80065b8:	7821      	ldrb	r1, [r4, #0]
 80065ba:	2203      	movs	r2, #3
 80065bc:	4650      	mov	r0, sl
 80065be:	f7f9 fe17 	bl	80001f0 <memchr>
 80065c2:	b140      	cbz	r0, 80065d6 <_svfiprintf_r+0x152>
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	eba0 000a 	sub.w	r0, r0, sl
 80065ca:	fa03 f000 	lsl.w	r0, r3, r0
 80065ce:	9b04      	ldr	r3, [sp, #16]
 80065d0:	4303      	orrs	r3, r0
 80065d2:	3401      	adds	r4, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065da:	4826      	ldr	r0, [pc, #152]	; (8006674 <_svfiprintf_r+0x1f0>)
 80065dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e0:	2206      	movs	r2, #6
 80065e2:	f7f9 fe05 	bl	80001f0 <memchr>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d038      	beq.n	800665c <_svfiprintf_r+0x1d8>
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <_svfiprintf_r+0x1f4>)
 80065ec:	bb1b      	cbnz	r3, 8006636 <_svfiprintf_r+0x1b2>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	f023 0307 	bic.w	r3, r3, #7
 80065f6:	3308      	adds	r3, #8
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fc:	4433      	add	r3, r6
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	e767      	b.n	80064d2 <_svfiprintf_r+0x4e>
 8006602:	fb0c 3202 	mla	r2, ip, r2, r3
 8006606:	460c      	mov	r4, r1
 8006608:	2001      	movs	r0, #1
 800660a:	e7a5      	b.n	8006558 <_svfiprintf_r+0xd4>
 800660c:	2300      	movs	r3, #0
 800660e:	3401      	adds	r4, #1
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	4619      	mov	r1, r3
 8006614:	f04f 0c0a 	mov.w	ip, #10
 8006618:	4620      	mov	r0, r4
 800661a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661e:	3a30      	subs	r2, #48	; 0x30
 8006620:	2a09      	cmp	r2, #9
 8006622:	d903      	bls.n	800662c <_svfiprintf_r+0x1a8>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0c5      	beq.n	80065b4 <_svfiprintf_r+0x130>
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	e7c3      	b.n	80065b4 <_svfiprintf_r+0x130>
 800662c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006630:	4604      	mov	r4, r0
 8006632:	2301      	movs	r3, #1
 8006634:	e7f0      	b.n	8006618 <_svfiprintf_r+0x194>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <_svfiprintf_r+0x1f8>)
 800663e:	a904      	add	r1, sp, #16
 8006640:	4638      	mov	r0, r7
 8006642:	f3af 8000 	nop.w
 8006646:	1c42      	adds	r2, r0, #1
 8006648:	4606      	mov	r6, r0
 800664a:	d1d6      	bne.n	80065fa <_svfiprintf_r+0x176>
 800664c:	89ab      	ldrh	r3, [r5, #12]
 800664e:	065b      	lsls	r3, r3, #25
 8006650:	f53f af2c 	bmi.w	80064ac <_svfiprintf_r+0x28>
 8006654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006656:	b01d      	add	sp, #116	; 0x74
 8006658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	ab03      	add	r3, sp, #12
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	462a      	mov	r2, r5
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <_svfiprintf_r+0x1f8>)
 8006664:	a904      	add	r1, sp, #16
 8006666:	4638      	mov	r0, r7
 8006668:	f000 f87a 	bl	8006760 <_printf_i>
 800666c:	e7eb      	b.n	8006646 <_svfiprintf_r+0x1c2>
 800666e:	bf00      	nop
 8006670:	08006b1c 	.word	0x08006b1c
 8006674:	08006b26 	.word	0x08006b26
 8006678:	00000000 	.word	0x00000000
 800667c:	080063cd 	.word	0x080063cd
 8006680:	08006b22 	.word	0x08006b22

08006684 <_printf_common>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	4616      	mov	r6, r2
 800668a:	4699      	mov	r9, r3
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	bfb8      	it	lt
 8006698:	4613      	movlt	r3, r2
 800669a:	6033      	str	r3, [r6, #0]
 800669c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a0:	4607      	mov	r7, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	b10a      	cbz	r2, 80066aa <_printf_common+0x26>
 80066a6:	3301      	adds	r3, #1
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	0699      	lsls	r1, r3, #26
 80066ae:	bf42      	ittt	mi
 80066b0:	6833      	ldrmi	r3, [r6, #0]
 80066b2:	3302      	addmi	r3, #2
 80066b4:	6033      	strmi	r3, [r6, #0]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	f015 0506 	ands.w	r5, r5, #6
 80066bc:	d106      	bne.n	80066cc <_printf_common+0x48>
 80066be:	f104 0a19 	add.w	sl, r4, #25
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	6832      	ldr	r2, [r6, #0]
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dc26      	bgt.n	800671a <_printf_common+0x96>
 80066cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066d0:	1e13      	subs	r3, r2, #0
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	bf18      	it	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	0692      	lsls	r2, r2, #26
 80066da:	d42b      	bmi.n	8006734 <_printf_common+0xb0>
 80066dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e0:	4649      	mov	r1, r9
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c0      	blx	r8
 80066e6:	3001      	adds	r0, #1
 80066e8:	d01e      	beq.n	8006728 <_printf_common+0xa4>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	68e5      	ldr	r5, [r4, #12]
 80066ee:	6832      	ldr	r2, [r6, #0]
 80066f0:	f003 0306 	and.w	r3, r3, #6
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	bf08      	it	eq
 80066f8:	1aad      	subeq	r5, r5, r2
 80066fa:	68a3      	ldr	r3, [r4, #8]
 80066fc:	6922      	ldr	r2, [r4, #16]
 80066fe:	bf0c      	ite	eq
 8006700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006704:	2500      	movne	r5, #0
 8006706:	4293      	cmp	r3, r2
 8006708:	bfc4      	itt	gt
 800670a:	1a9b      	subgt	r3, r3, r2
 800670c:	18ed      	addgt	r5, r5, r3
 800670e:	2600      	movs	r6, #0
 8006710:	341a      	adds	r4, #26
 8006712:	42b5      	cmp	r5, r6
 8006714:	d11a      	bne.n	800674c <_printf_common+0xc8>
 8006716:	2000      	movs	r0, #0
 8006718:	e008      	b.n	800672c <_printf_common+0xa8>
 800671a:	2301      	movs	r3, #1
 800671c:	4652      	mov	r2, sl
 800671e:	4649      	mov	r1, r9
 8006720:	4638      	mov	r0, r7
 8006722:	47c0      	blx	r8
 8006724:	3001      	adds	r0, #1
 8006726:	d103      	bne.n	8006730 <_printf_common+0xac>
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006730:	3501      	adds	r5, #1
 8006732:	e7c6      	b.n	80066c2 <_printf_common+0x3e>
 8006734:	18e1      	adds	r1, r4, r3
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	2030      	movs	r0, #48	; 0x30
 800673a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673e:	4422      	add	r2, r4
 8006740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006748:	3302      	adds	r3, #2
 800674a:	e7c7      	b.n	80066dc <_printf_common+0x58>
 800674c:	2301      	movs	r3, #1
 800674e:	4622      	mov	r2, r4
 8006750:	4649      	mov	r1, r9
 8006752:	4638      	mov	r0, r7
 8006754:	47c0      	blx	r8
 8006756:	3001      	adds	r0, #1
 8006758:	d0e6      	beq.n	8006728 <_printf_common+0xa4>
 800675a:	3601      	adds	r6, #1
 800675c:	e7d9      	b.n	8006712 <_printf_common+0x8e>
	...

08006760 <_printf_i>:
 8006760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	7e0f      	ldrb	r7, [r1, #24]
 8006766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006768:	2f78      	cmp	r7, #120	; 0x78
 800676a:	4691      	mov	r9, r2
 800676c:	4680      	mov	r8, r0
 800676e:	460c      	mov	r4, r1
 8006770:	469a      	mov	sl, r3
 8006772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006776:	d807      	bhi.n	8006788 <_printf_i+0x28>
 8006778:	2f62      	cmp	r7, #98	; 0x62
 800677a:	d80a      	bhi.n	8006792 <_printf_i+0x32>
 800677c:	2f00      	cmp	r7, #0
 800677e:	f000 80d8 	beq.w	8006932 <_printf_i+0x1d2>
 8006782:	2f58      	cmp	r7, #88	; 0x58
 8006784:	f000 80a3 	beq.w	80068ce <_printf_i+0x16e>
 8006788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800678c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006790:	e03a      	b.n	8006808 <_printf_i+0xa8>
 8006792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006796:	2b15      	cmp	r3, #21
 8006798:	d8f6      	bhi.n	8006788 <_printf_i+0x28>
 800679a:	a101      	add	r1, pc, #4	; (adr r1, 80067a0 <_printf_i+0x40>)
 800679c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a0:	080067f9 	.word	0x080067f9
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	08006789 	.word	0x08006789
 80067ac:	08006789 	.word	0x08006789
 80067b0:	08006789 	.word	0x08006789
 80067b4:	08006789 	.word	0x08006789
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006789 	.word	0x08006789
 80067c0:	08006789 	.word	0x08006789
 80067c4:	08006789 	.word	0x08006789
 80067c8:	08006789 	.word	0x08006789
 80067cc:	08006919 	.word	0x08006919
 80067d0:	0800683d 	.word	0x0800683d
 80067d4:	080068fb 	.word	0x080068fb
 80067d8:	08006789 	.word	0x08006789
 80067dc:	08006789 	.word	0x08006789
 80067e0:	0800693b 	.word	0x0800693b
 80067e4:	08006789 	.word	0x08006789
 80067e8:	0800683d 	.word	0x0800683d
 80067ec:	08006789 	.word	0x08006789
 80067f0:	08006789 	.word	0x08006789
 80067f4:	08006903 	.word	0x08006903
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	602a      	str	r2, [r5, #0]
 8006800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e0a3      	b.n	8006954 <_printf_i+0x1f4>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	6829      	ldr	r1, [r5, #0]
 8006810:	0606      	lsls	r6, r0, #24
 8006812:	f101 0304 	add.w	r3, r1, #4
 8006816:	d50a      	bpl.n	800682e <_printf_i+0xce>
 8006818:	680e      	ldr	r6, [r1, #0]
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	2e00      	cmp	r6, #0
 800681e:	da03      	bge.n	8006828 <_printf_i+0xc8>
 8006820:	232d      	movs	r3, #45	; 0x2d
 8006822:	4276      	negs	r6, r6
 8006824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006828:	485e      	ldr	r0, [pc, #376]	; (80069a4 <_printf_i+0x244>)
 800682a:	230a      	movs	r3, #10
 800682c:	e019      	b.n	8006862 <_printf_i+0x102>
 800682e:	680e      	ldr	r6, [r1, #0]
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006836:	bf18      	it	ne
 8006838:	b236      	sxthne	r6, r6
 800683a:	e7ef      	b.n	800681c <_printf_i+0xbc>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	1d19      	adds	r1, r3, #4
 8006842:	6029      	str	r1, [r5, #0]
 8006844:	0601      	lsls	r1, r0, #24
 8006846:	d501      	bpl.n	800684c <_printf_i+0xec>
 8006848:	681e      	ldr	r6, [r3, #0]
 800684a:	e002      	b.n	8006852 <_printf_i+0xf2>
 800684c:	0646      	lsls	r6, r0, #25
 800684e:	d5fb      	bpl.n	8006848 <_printf_i+0xe8>
 8006850:	881e      	ldrh	r6, [r3, #0]
 8006852:	4854      	ldr	r0, [pc, #336]	; (80069a4 <_printf_i+0x244>)
 8006854:	2f6f      	cmp	r7, #111	; 0x6f
 8006856:	bf0c      	ite	eq
 8006858:	2308      	moveq	r3, #8
 800685a:	230a      	movne	r3, #10
 800685c:	2100      	movs	r1, #0
 800685e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006862:	6865      	ldr	r5, [r4, #4]
 8006864:	60a5      	str	r5, [r4, #8]
 8006866:	2d00      	cmp	r5, #0
 8006868:	bfa2      	ittt	ge
 800686a:	6821      	ldrge	r1, [r4, #0]
 800686c:	f021 0104 	bicge.w	r1, r1, #4
 8006870:	6021      	strge	r1, [r4, #0]
 8006872:	b90e      	cbnz	r6, 8006878 <_printf_i+0x118>
 8006874:	2d00      	cmp	r5, #0
 8006876:	d04d      	beq.n	8006914 <_printf_i+0x1b4>
 8006878:	4615      	mov	r5, r2
 800687a:	fbb6 f1f3 	udiv	r1, r6, r3
 800687e:	fb03 6711 	mls	r7, r3, r1, r6
 8006882:	5dc7      	ldrb	r7, [r0, r7]
 8006884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006888:	4637      	mov	r7, r6
 800688a:	42bb      	cmp	r3, r7
 800688c:	460e      	mov	r6, r1
 800688e:	d9f4      	bls.n	800687a <_printf_i+0x11a>
 8006890:	2b08      	cmp	r3, #8
 8006892:	d10b      	bne.n	80068ac <_printf_i+0x14c>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	07de      	lsls	r6, r3, #31
 8006898:	d508      	bpl.n	80068ac <_printf_i+0x14c>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	6861      	ldr	r1, [r4, #4]
 800689e:	4299      	cmp	r1, r3
 80068a0:	bfde      	ittt	le
 80068a2:	2330      	movle	r3, #48	; 0x30
 80068a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ac:	1b52      	subs	r2, r2, r5
 80068ae:	6122      	str	r2, [r4, #16]
 80068b0:	f8cd a000 	str.w	sl, [sp]
 80068b4:	464b      	mov	r3, r9
 80068b6:	aa03      	add	r2, sp, #12
 80068b8:	4621      	mov	r1, r4
 80068ba:	4640      	mov	r0, r8
 80068bc:	f7ff fee2 	bl	8006684 <_printf_common>
 80068c0:	3001      	adds	r0, #1
 80068c2:	d14c      	bne.n	800695e <_printf_i+0x1fe>
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	b004      	add	sp, #16
 80068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ce:	4835      	ldr	r0, [pc, #212]	; (80069a4 <_printf_i+0x244>)
 80068d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068d4:	6829      	ldr	r1, [r5, #0]
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068dc:	6029      	str	r1, [r5, #0]
 80068de:	061d      	lsls	r5, r3, #24
 80068e0:	d514      	bpl.n	800690c <_printf_i+0x1ac>
 80068e2:	07df      	lsls	r7, r3, #31
 80068e4:	bf44      	itt	mi
 80068e6:	f043 0320 	orrmi.w	r3, r3, #32
 80068ea:	6023      	strmi	r3, [r4, #0]
 80068ec:	b91e      	cbnz	r6, 80068f6 <_printf_i+0x196>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	f023 0320 	bic.w	r3, r3, #32
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	2310      	movs	r3, #16
 80068f8:	e7b0      	b.n	800685c <_printf_i+0xfc>
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f043 0320 	orr.w	r3, r3, #32
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	2378      	movs	r3, #120	; 0x78
 8006904:	4828      	ldr	r0, [pc, #160]	; (80069a8 <_printf_i+0x248>)
 8006906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800690a:	e7e3      	b.n	80068d4 <_printf_i+0x174>
 800690c:	0659      	lsls	r1, r3, #25
 800690e:	bf48      	it	mi
 8006910:	b2b6      	uxthmi	r6, r6
 8006912:	e7e6      	b.n	80068e2 <_printf_i+0x182>
 8006914:	4615      	mov	r5, r2
 8006916:	e7bb      	b.n	8006890 <_printf_i+0x130>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	6826      	ldr	r6, [r4, #0]
 800691c:	6961      	ldr	r1, [r4, #20]
 800691e:	1d18      	adds	r0, r3, #4
 8006920:	6028      	str	r0, [r5, #0]
 8006922:	0635      	lsls	r5, r6, #24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	d501      	bpl.n	800692c <_printf_i+0x1cc>
 8006928:	6019      	str	r1, [r3, #0]
 800692a:	e002      	b.n	8006932 <_printf_i+0x1d2>
 800692c:	0670      	lsls	r0, r6, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0x1c8>
 8006930:	8019      	strh	r1, [r3, #0]
 8006932:	2300      	movs	r3, #0
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	4615      	mov	r5, r2
 8006938:	e7ba      	b.n	80068b0 <_printf_i+0x150>
 800693a:	682b      	ldr	r3, [r5, #0]
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	602a      	str	r2, [r5, #0]
 8006940:	681d      	ldr	r5, [r3, #0]
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	2100      	movs	r1, #0
 8006946:	4628      	mov	r0, r5
 8006948:	f7f9 fc52 	bl	80001f0 <memchr>
 800694c:	b108      	cbz	r0, 8006952 <_printf_i+0x1f2>
 800694e:	1b40      	subs	r0, r0, r5
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	2300      	movs	r3, #0
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800695c:	e7a8      	b.n	80068b0 <_printf_i+0x150>
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	462a      	mov	r2, r5
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	47d0      	blx	sl
 8006968:	3001      	adds	r0, #1
 800696a:	d0ab      	beq.n	80068c4 <_printf_i+0x164>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d413      	bmi.n	800699a <_printf_i+0x23a>
 8006972:	68e0      	ldr	r0, [r4, #12]
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	4298      	cmp	r0, r3
 8006978:	bfb8      	it	lt
 800697a:	4618      	movlt	r0, r3
 800697c:	e7a4      	b.n	80068c8 <_printf_i+0x168>
 800697e:	2301      	movs	r3, #1
 8006980:	4632      	mov	r2, r6
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d09b      	beq.n	80068c4 <_printf_i+0x164>
 800698c:	3501      	adds	r5, #1
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	9903      	ldr	r1, [sp, #12]
 8006992:	1a5b      	subs	r3, r3, r1
 8006994:	42ab      	cmp	r3, r5
 8006996:	dcf2      	bgt.n	800697e <_printf_i+0x21e>
 8006998:	e7eb      	b.n	8006972 <_printf_i+0x212>
 800699a:	2500      	movs	r5, #0
 800699c:	f104 0619 	add.w	r6, r4, #25
 80069a0:	e7f5      	b.n	800698e <_printf_i+0x22e>
 80069a2:	bf00      	nop
 80069a4:	08006b2d 	.word	0x08006b2d
 80069a8:	08006b3e 	.word	0x08006b3e

080069ac <memmove>:
 80069ac:	4288      	cmp	r0, r1
 80069ae:	b510      	push	{r4, lr}
 80069b0:	eb01 0402 	add.w	r4, r1, r2
 80069b4:	d902      	bls.n	80069bc <memmove+0x10>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4623      	mov	r3, r4
 80069ba:	d807      	bhi.n	80069cc <memmove+0x20>
 80069bc:	1e43      	subs	r3, r0, #1
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d008      	beq.n	80069d4 <memmove+0x28>
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0x12>
 80069cc:	4402      	add	r2, r0
 80069ce:	4601      	mov	r1, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d100      	bne.n	80069d6 <memmove+0x2a>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069de:	e7f7      	b.n	80069d0 <memmove+0x24>

080069e0 <_realloc_r>:
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	4680      	mov	r8, r0
 80069e6:	4614      	mov	r4, r2
 80069e8:	460e      	mov	r6, r1
 80069ea:	b921      	cbnz	r1, 80069f6 <_realloc_r+0x16>
 80069ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069f0:	4611      	mov	r1, r2
 80069f2:	f7ff bb85 	b.w	8006100 <_malloc_r>
 80069f6:	b92a      	cbnz	r2, 8006a04 <_realloc_r+0x24>
 80069f8:	f7ff fc9c 	bl	8006334 <_free_r>
 80069fc:	4625      	mov	r5, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a04:	f000 f81b 	bl	8006a3e <_malloc_usable_size_r>
 8006a08:	4284      	cmp	r4, r0
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	d802      	bhi.n	8006a14 <_realloc_r+0x34>
 8006a0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a12:	d812      	bhi.n	8006a3a <_realloc_r+0x5a>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4640      	mov	r0, r8
 8006a18:	f7ff fb72 	bl	8006100 <_malloc_r>
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d0ed      	beq.n	80069fe <_realloc_r+0x1e>
 8006a22:	42bc      	cmp	r4, r7
 8006a24:	4622      	mov	r2, r4
 8006a26:	4631      	mov	r1, r6
 8006a28:	bf28      	it	cs
 8006a2a:	463a      	movcs	r2, r7
 8006a2c:	f7ff fb32 	bl	8006094 <memcpy>
 8006a30:	4631      	mov	r1, r6
 8006a32:	4640      	mov	r0, r8
 8006a34:	f7ff fc7e 	bl	8006334 <_free_r>
 8006a38:	e7e1      	b.n	80069fe <_realloc_r+0x1e>
 8006a3a:	4635      	mov	r5, r6
 8006a3c:	e7df      	b.n	80069fe <_realloc_r+0x1e>

08006a3e <_malloc_usable_size_r>:
 8006a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a42:	1f18      	subs	r0, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bfbc      	itt	lt
 8006a48:	580b      	ldrlt	r3, [r1, r0]
 8006a4a:	18c0      	addlt	r0, r0, r3
 8006a4c:	4770      	bx	lr
	...

08006a50 <_init>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr

08006a5c <_fini>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr
