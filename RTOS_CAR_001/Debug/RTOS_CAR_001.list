
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b1c  08009b1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009b1c  08009b1c  00019b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b24  08009b24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004400  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004474  20004474  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001faea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000486b  00000000  00000000  0003fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001960  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00045d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad5  00000000  00000000  000474e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f93b  00000000  00000000  0006ffb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed658  00000000  00000000  0008f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017cf48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e84  00000000  00000000  0017cf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009780 	.word	0x08009780

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009780 	.word	0x08009780

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	200000d0 	.word	0x200000d0
 8000534:	20000184 	.word	0x20000184

08000538 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b08e      	sub	sp, #56	; 0x38
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  Motor_Init();
 800053e:	f001 f859 	bl	80015f4 <Motor_Init>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4829      	ldr	r0, [pc, #164]	; (80005ec <MX_FREERTOS_Init+0xb4>)
 8000546:	f003 ffdf 	bl	8004508 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4828      	ldr	r0, [pc, #160]	; (80005f0 <MX_FREERTOS_Init+0xb8>)
 800054e:	f003 ffdb 	bl	8004508 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000552:	2100      	movs	r1, #0
 8000554:	4827      	ldr	r0, [pc, #156]	; (80005f4 <MX_FREERTOS_Init+0xbc>)
 8000556:	f003 ffd7 	bl	8004508 <HAL_TIM_IC_Start_IT>

	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800055a:	2100      	movs	r1, #0
 800055c:	4826      	ldr	r0, [pc, #152]	; (80005f8 <MX_FREERTOS_Init+0xc0>)
 800055e:	f003 ffd3 	bl	8004508 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000562:	2104      	movs	r1, #4
 8000564:	4824      	ldr	r0, [pc, #144]	; (80005f8 <MX_FREERTOS_Init+0xc0>)
 8000566:	f003 ffcf 	bl	8004508 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_3);
 800056a:	2108      	movs	r1, #8
 800056c:	4822      	ldr	r0, [pc, #136]	; (80005f8 <MX_FREERTOS_Init+0xc0>)
 800056e:	f003 ffcb 	bl	8004508 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8000572:	210c      	movs	r1, #12
 8000574:	4820      	ldr	r0, [pc, #128]	; (80005f8 <MX_FREERTOS_Init+0xc0>)
 8000576:	f003 ffc7 	bl	8004508 <HAL_TIM_IC_Start_IT>

	  HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 800057a:	2201      	movs	r2, #1
 800057c:	491f      	ldr	r1, [pc, #124]	; (80005fc <MX_FREERTOS_Init+0xc4>)
 800057e:	4820      	ldr	r0, [pc, #128]	; (8000600 <MX_FREERTOS_Init+0xc8>)
 8000580:	f005 fa23 	bl	80059ca <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
 8000588:	2300      	movs	r3, #0
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 800058c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fa31 	bl	80069fa <osSemaphoreCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <MX_FREERTOS_Init+0xcc>)
 800059c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 8, uint8_t);
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_FREERTOS_Init+0xd0>)
 80005a0:	f107 0420 	add.w	r4, r7, #32
 80005a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fa54 	bl	8006a5e <osMessageCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <MX_FREERTOS_Init+0xd4>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_FREERTOS_Init+0xd8>)
 80005be:	1d3c      	adds	r4, r7, #4
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 f9b1 	bl	800693a <osThreadCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <MX_FREERTOS_Init+0xdc>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ThreadInit ();
 80005de:	f000 f98d 	bl	80008fc <ThreadInit>
  /* USER CODE END RTOS_THREADS */

}
 80005e2:	bf00      	nop
 80005e4:	3738      	adds	r7, #56	; 0x38
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bdb0      	pop	{r4, r5, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000494 	.word	0x20000494
 80005f0:	20000524 	.word	0x20000524
 80005f4:	2000056c 	.word	0x2000056c
 80005f8:	200005b4 	.word	0x200005b4
 80005fc:	200000c0 	.word	0x200000c0
 8000600:	200006c8 	.word	0x200006c8
 8000604:	200000cc 	.word	0x200000cc
 8000608:	08009804 	.word	0x08009804
 800060c:	200000c8 	.word	0x200000c8
 8000610:	08009814 	.word	0x08009814
 8000614:	200000c4 	.word	0x200000c4

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0'; // this value is what you receive
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <StartDefaultTask+0x5c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fe4e 	bl	80072d8 <xQueueReceiveFromISR>
 800063c:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d112      	bne.n	800066a <StartDefaultTask+0x52>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <StartDefaultTask+0x60>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f107 0210 	add.w	r2, r7, #16
 800064c:	f107 010f 	add.w	r1, r7, #15
 8000650:	4618      	mov	r0, r3
 8000652:	f006 fe41 	bl	80072d8 <xQueueReceiveFromISR>
 8000656:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d005      	beq.n	800066a <StartDefaultTask+0x52>
				// do something . . .
				Move(cByteRxed - '0');
 800065e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000662:	3b30      	subs	r3, #48	; 0x30
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fd69 	bl	800113c <Move>
			}
		}
		osDelay(50);
 800066a:	2032      	movs	r0, #50	; 0x32
 800066c:	f006 f9b1 	bl	80069d2 <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000670:	e7dc      	b.n	800062c <StartDefaultTask+0x14>
 8000672:	bf00      	nop
 8000674:	200000cc 	.word	0x200000cc
 8000678:	200000c8 	.word	0x200000c8

0800067c <odometryTask>:
 * Distance[2], Difference[2] = Right
 * */

// Task ---------------------------------------------------------------------------------------
void odometryTask (void const * argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

//		uint32_t temp_count[4];

		// check the safety maximun speed
		// and add some Algorithms
		for(int i = 0; i < 4; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e00f      	b.n	80006aa <odometryTask+0x2e>
			temp_count[i] = odo_count[i];
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <odometryTask+0x40>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <odometryTask+0x44>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if (odo_count[i] > 180) {

			}

			odo_count[i] = 0;
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <odometryTask+0x40>)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2100      	movs	r1, #0
 80006a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < 4; i++) {
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	ddec      	ble.n	800068a <odometryTask+0xe>
		}


		osDelay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f006 f98d 	bl	80069d2 <osDelay>
		for(int i = 0; i < 4; i++) {
 80006b8:	e7e4      	b.n	8000684 <odometryTask+0x8>
 80006ba:	bf00      	nop
 80006bc:	20000418 	.word	0x20000418
 80006c0:	20000098 	.word	0x20000098

080006c4 <CarLeftSide>:
	}
}

void CarLeftSide (void const * argument){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 80006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d0:	f006 f97f 	bl	80069d2 <osDelay>
 80006d4:	e7fa      	b.n	80006cc <CarLeftSide+0x8>

080006d6 <CarFrontSide>:
	}
}

void CarFrontSide (void const * argument){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f006 f976 	bl	80069d2 <osDelay>
 80006e6:	e7fa      	b.n	80006de <CarFrontSide+0x8>

080006e8 <CarRightSide>:
	}
}
void CarRightSide (void const * argument){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f006 f96d 	bl	80069d2 <osDelay>
 80006f8:	e7fa      	b.n	80006f0 <CarRightSide+0x8>
	...

080006fc <CheckingUartReceive>:


// ISR Checking-------------------------------------------------------------------------------

void CheckingUartReceive (void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000704:	2201      	movs	r2, #1
 8000706:	4904      	ldr	r1, [pc, #16]	; (8000718 <CheckingUartReceive+0x1c>)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <CheckingUartReceive+0x20>)
 800070a:	f005 f95e 	bl	80059ca <HAL_UART_Receive_IT>
    	osDelay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f006 f95f 	bl	80069d2 <osDelay>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000714:	e7f6      	b.n	8000704 <CheckingUartReceive+0x8>
 8000716:	bf00      	nop
 8000718:	200000c0 	.word	0x200000c0
 800071c:	200006c8 	.word	0x200006c8

08000720 <CheckingLeft>:
    }
}
void CheckingLeft (void const * argument) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 8000728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072c:	4903      	ldr	r1, [pc, #12]	; (800073c <CheckingLeft+0x1c>)
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <CheckingLeft+0x20>)
 8000730:	f000 fafc 	bl	8000d2c <HCSR04_Read>

    	osDelay(60);
 8000734:	203c      	movs	r0, #60	; 0x3c
 8000736:	f006 f94c 	bl	80069d2 <osDelay>
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 800073a:	e7f5      	b.n	8000728 <CheckingLeft+0x8>
 800073c:	40021400 	.word	0x40021400
 8000740:	20000494 	.word	0x20000494

08000744 <CheckingFront>:
    }
}
void CheckingFront (void const * argument) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 800074c:	2220      	movs	r2, #32
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <CheckingFront+0x1c>)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <CheckingFront+0x20>)
 8000752:	f000 faeb 	bl	8000d2c <HCSR04_Read>
    	osDelay(60);
 8000756:	203c      	movs	r0, #60	; 0x3c
 8000758:	f006 f93b 	bl	80069d2 <osDelay>
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 800075c:	e7f6      	b.n	800074c <CheckingFront+0x8>
 800075e:	bf00      	nop
 8000760:	40020000 	.word	0x40020000
 8000764:	20000524 	.word	0x20000524

08000768 <CheckingRight>:
    }
}
void CheckingRight (void const * argument) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000774:	4903      	ldr	r1, [pc, #12]	; (8000784 <CheckingRight+0x1c>)
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <CheckingRight+0x20>)
 8000778:	f000 fad8 	bl	8000d2c <HCSR04_Read>
    	osDelay(60);
 800077c:	203c      	movs	r0, #60	; 0x3c
 800077e:	f006 f928 	bl	80069d2 <osDelay>
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000782:	e7f5      	b.n	8000770 <CheckingRight+0x8>
 8000784:	40020c00 	.word	0x40020c00
 8000788:	2000056c 	.word	0x2000056c

0800078c <HAL_UART_RxCpltCallback>:
    }
}

// CallBack Session
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <HAL_UART_RxCpltCallback+0x70>)
 8000796:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_UART_RxCpltCallback+0x74>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d124      	bne.n	80007f4 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_UART_RxCpltCallback+0x78>)
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	f107 020c 	add.w	r2, r7, #12
 80007b2:	2300      	movs	r3, #0
 80007b4:	4914      	ldr	r1, [pc, #80]	; (8000808 <HAL_UART_RxCpltCallback+0x7c>)
 80007b6:	f006 fc67 	bl	8007088 <xQueueGenericSendFromISR>
 80007ba:	6138      	str	r0, [r7, #16]
		if(ret) {
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d008      	beq.n	80007d4 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_UART_RxCpltCallback+0x80>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f107 020c 	add.w	r2, r7, #12
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f006 fcf6 	bl	80071be <xQueueGiveFromISR>
 80007d2:	e00a      	b.n	80007ea <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f7ff fd0b 	bl	80001f0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	6979      	ldr	r1, [r7, #20]
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <HAL_UART_RxCpltCallback+0x84>)
 80007e6:	f005 f85e 	bl	80058a6 <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	4906      	ldr	r1, [pc, #24]	; (8000808 <HAL_UART_RxCpltCallback+0x7c>)
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <HAL_UART_RxCpltCallback+0x84>)
 80007f0:	f005 f8eb 	bl	80059ca <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08009830 	.word	0x08009830
 8000800:	40011400 	.word	0x40011400
 8000804:	200000c8 	.word	0x200000c8
 8000808:	200000c0 	.word	0x200000c0
 800080c:	200000cc 	.word	0x200000cc
 8000810:	200006c8 	.word	0x200006c8

08000814 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	//Checking the left Distance
	if (htim->Instance == TIM1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d107      	bne.n	8000836 <HAL_TIM_IC_CaptureCallback+0x22>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7f1b      	ldrb	r3, [r3, #28]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d103      	bne.n	8000836 <HAL_TIM_IC_CaptureCallback+0x22>
		{
			HC_SRO4_Dis(htim, 0);
 800082e:	2100      	movs	r1, #0
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 fa9f 	bl	8000d74 <HC_SRO4_Dis>
		}
	}

	//Checking the Front Distance
	if (htim->Instance == TIM3) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d107      	bne.n	8000850 <HAL_TIM_IC_CaptureCallback+0x3c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7f1b      	ldrb	r3, [r3, #28]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d103      	bne.n	8000850 <HAL_TIM_IC_CaptureCallback+0x3c>
		{
			HC_SRO4_Dis(htim, 1);
 8000848:	2101      	movs	r1, #1
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 fa92 	bl	8000d74 <HC_SRO4_Dis>
		}
	}

	//Checking the Right Distance
	if (htim->Instance == TIM4) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	; (80008ec <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d107      	bne.n	800086a <HAL_TIM_IC_CaptureCallback+0x56>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7f1b      	ldrb	r3, [r3, #28]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d103      	bne.n	800086a <HAL_TIM_IC_CaptureCallback+0x56>
		{
			HC_SRO4_Dis(htim, 2);
 8000862:	2102      	movs	r1, #2
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 fa85 	bl	8000d74 <HC_SRO4_Dis>
		}
	}

	//using the general purpose timer because i will use checking the signal only
	if (htim->Instance == TIM8) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d133      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0xc8>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7f1b      	ldrb	r3, [r3, #28]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d108      	bne.n	800088e <HAL_TIM_IC_CaptureCallback+0x7a>
			if (odo_flag[0] == 1) {
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <HAL_TIM_IC_CaptureCallback+0x7a>
				odo_count[0]++;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800088c:	6013      	str	r3, [r2, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7f1b      	ldrb	r3, [r3, #28]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d108      	bne.n	80008a8 <HAL_TIM_IC_CaptureCallback+0x94>
			if (odo_flag[1] == 1) {
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d104      	bne.n	80008a8 <HAL_TIM_IC_CaptureCallback+0x94>
				odo_count[1]++;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008a6:	6053      	str	r3, [r2, #4]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7f1b      	ldrb	r3, [r3, #28]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d108      	bne.n	80008c2 <HAL_TIM_IC_CaptureCallback+0xae>
			if (odo_flag[2] == 1) {
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80008b2:	789b      	ldrb	r3, [r3, #2]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d104      	bne.n	80008c2 <HAL_TIM_IC_CaptureCallback+0xae>
				odo_count[2]++;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008c0:	6093      	str	r3, [r2, #8]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7f1b      	ldrb	r3, [r3, #28]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d108      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0xc8>
			if (odo_flag[3] == 1) {
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80008cc:	78db      	ldrb	r3, [r3, #3]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0xc8>
				odo_count[3]++;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008da:	60d3      	str	r3, [r2, #12]
			}
		}
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40010000 	.word	0x40010000
 80008e8:	40000400 	.word	0x40000400
 80008ec:	40000800 	.word	0x40000800
 80008f0:	40010400 	.word	0x40010400
 80008f4:	20000414 	.word	0x20000414
 80008f8:	20000418 	.word	0x20000418

080008fc <ThreadInit>:

void ThreadInit () {
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b0c0      	sub	sp, #256	; 0x100
 8000900:	af00      	add	r7, sp, #0
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000902:	4b73      	ldr	r3, [pc, #460]	; (8000ad0 <ThreadInit+0x1d4>)
 8000904:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000908:	461d      	mov	r5, r3
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000916:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f006 f80c 	bl	800693a <osThreadCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a6b      	ldr	r2, [pc, #428]	; (8000ad4 <ThreadInit+0x1d8>)
 8000926:	6013      	str	r3, [r2, #0]


	  osThreadDef(UartCheck, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000928:	4b6b      	ldr	r3, [pc, #428]	; (8000ad8 <ThreadInit+0x1dc>)
 800092a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800092e:	461d      	mov	r5, r3
 8000930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000934:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task1Handle = osThreadCreate(osThread(UartCheck), NULL);
 800093c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fff9 	bl	800693a <osThreadCreate>
 8000948:	4603      	mov	r3, r0
 800094a:	4a64      	ldr	r2, [pc, #400]	; (8000adc <ThreadInit+0x1e0>)
 800094c:	6013      	str	r3, [r2, #0]
	  if(!Task1Handle)
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <ThreadInit+0x1e0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <ThreadInit+0x60>
		  printf("ERR : Console Task Creation Failure !\r\n");
 8000956:	4862      	ldr	r0, [pc, #392]	; (8000ae0 <ThreadInit+0x1e4>)
 8000958:	f008 fba4 	bl	80090a4 <puts>

	  osThreadDef(UartTask, odometryTask, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <ThreadInit+0x1e8>)
 800095e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000962:	461d      	mov	r5, r3
 8000964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task2Handle = osThreadCreate(osThread(UartTask), NULL);
 8000970:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f005 ffdf 	bl	800693a <osThreadCreate>
 800097c:	4603      	mov	r3, r0
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <ThreadInit+0x1ec>)
 8000980:	6013      	str	r3, [r2, #0]

	  if(!Task2Handle)
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <ThreadInit+0x1ec>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <ThreadInit+0x94>
	     printf("ERR : CLI Task Creation Failure !\r\n");
 800098a:	4858      	ldr	r0, [pc, #352]	; (8000aec <ThreadInit+0x1f0>)
 800098c:	f008 fb8a 	bl	80090a4 <puts>

	  // HC-SR04 LEFT -------------------------------------------------------------------------------------------------------
	  osThreadDef(LeftCheck, CheckingLeft, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000990:	4b57      	ldr	r3, [pc, #348]	; (8000af0 <ThreadInit+0x1f4>)
 8000992:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000996:	461d      	mov	r5, r3
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Checking = osThreadCreate(osThread(LeftCheck), NULL);
 80009a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 ffc5 	bl	800693a <osThreadCreate>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a50      	ldr	r2, [pc, #320]	; (8000af4 <ThreadInit+0x1f8>)
 80009b4:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Checking)
 80009b6:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <ThreadInit+0x1f8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d102      	bne.n	80009c4 <ThreadInit+0xc8>
		  printf("ERR : HS_SR04_left_Checking Creation Failure !\r\n");
 80009be:	484e      	ldr	r0, [pc, #312]	; (8000af8 <ThreadInit+0x1fc>)
 80009c0:	f008 fb70 	bl	80090a4 <puts>

	  osThreadDef(LeftTask, CarLeftSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80009c4:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <ThreadInit+0x200>)
 80009c6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Handle = osThreadCreate(osThread(LeftTask), NULL);
 80009d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 ffab 	bl	800693a <osThreadCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <ThreadInit+0x204>)
 80009e8:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Handle)
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <ThreadInit+0x204>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <ThreadInit+0xfc>
		  printf("ERR : HS_SR04_left_Handle Creation Failure !\r\n");
 80009f2:	4844      	ldr	r0, [pc, #272]	; (8000b04 <ThreadInit+0x208>)
 80009f4:	f008 fb56 	bl	80090a4 <puts>

	  // HC-SR04 FRONT -------------------------------------------------------------------------------------------------------
	  osThreadDef(FrontCheck, CheckingFront, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 80009f8:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <ThreadInit+0x20c>)
 80009fa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80009fe:	461d      	mov	r5, r3
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Checking = osThreadCreate(osThread(FrontCheck), NULL);
 8000a0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 ff91 	bl	800693a <osThreadCreate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <ThreadInit+0x210>)
 8000a1c:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Checking)
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <ThreadInit+0x210>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <ThreadInit+0x130>
		  printf("ERR : HS_SR04_Front_Checking Creation Failure !\r\n");
 8000a26:	483a      	ldr	r0, [pc, #232]	; (8000b10 <ThreadInit+0x214>)
 8000a28:	f008 fb3c 	bl	80090a4 <puts>

	  osThreadDef(FrontTask, CarFrontSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <ThreadInit+0x218>)
 8000a2e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Handle = osThreadCreate(osThread(FrontTask), NULL);
 8000a40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 ff77 	bl	800693a <osThreadCreate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <ThreadInit+0x21c>)
 8000a50:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Handle)
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <ThreadInit+0x21c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <ThreadInit+0x164>
		  printf("ERR : HS_SR04_Front_Handle Creation Failure !\r\n");
 8000a5a:	4830      	ldr	r0, [pc, #192]	; (8000b1c <ThreadInit+0x220>)
 8000a5c:	f008 fb22 	bl	80090a4 <puts>

	  // HC-SR04 RIGHT -------------------------------------------------------------------------------------------------------
	  osThreadDef(RightCheck, CheckingRight, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a60:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <ThreadInit+0x224>)
 8000a62:	f107 0420 	add.w	r4, r7, #32
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Checking = osThreadCreate(osThread(RightCheck), NULL);
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 ff5d 	bl	800693a <osThreadCreate>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <ThreadInit+0x228>)
 8000a84:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Checking)
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <ThreadInit+0x228>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <ThreadInit+0x198>
		  printf("ERR : HS_SR04_Right_Checking Creation Failure !\r\n");
 8000a8e:	4826      	ldr	r0, [pc, #152]	; (8000b28 <ThreadInit+0x22c>)
 8000a90:	f008 fb08 	bl	80090a4 <puts>

	  osThreadDef(RightTask, CarRightSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <ThreadInit+0x230>)
 8000a96:	1d3c      	adds	r4, r7, #4
 8000a98:	461d      	mov	r5, r3
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Handle = osThreadCreate(osThread(RightTask), NULL);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f005 ff45 	bl	800693a <osThreadCreate>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <ThreadInit+0x234>)
 8000ab4:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Handle)
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <ThreadInit+0x234>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <ThreadInit+0x1c8>
		  printf("ERR : HS_SR04_Right_Handle Creation Failure !\r\n");
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <ThreadInit+0x238>)
 8000ac0:	f008 faf0 	bl	80090a4 <puts>
}
 8000ac4:	bf00      	nop
 8000ac6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08009814 	.word	0x08009814
 8000ad4:	200000c4 	.word	0x200000c4
 8000ad8:	080099b8 	.word	0x080099b8
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	08009844 	.word	0x08009844
 8000ae4:	080099d4 	.word	0x080099d4
 8000ae8:	20000094 	.word	0x20000094
 8000aec:	0800986c 	.word	0x0800986c
 8000af0:	080099f0 	.word	0x080099f0
 8000af4:	200000a8 	.word	0x200000a8
 8000af8:	08009890 	.word	0x08009890
 8000afc:	08009a0c 	.word	0x08009a0c
 8000b00:	200000b4 	.word	0x200000b4
 8000b04:	080098c0 	.word	0x080098c0
 8000b08:	08009a28 	.word	0x08009a28
 8000b0c:	200000ac 	.word	0x200000ac
 8000b10:	080098f0 	.word	0x080098f0
 8000b14:	08009a44 	.word	0x08009a44
 8000b18:	200000b8 	.word	0x200000b8
 8000b1c:	08009924 	.word	0x08009924
 8000b20:	08009a60 	.word	0x08009a60
 8000b24:	200000b0 	.word	0x200000b0
 8000b28:	08009954 	.word	0x08009954
 8000b2c:	08009a7c 	.word	0x08009a7c
 8000b30:	200000bc 	.word	0x200000bc
 8000b34:	08009988 	.word	0x08009988

08000b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a63      	ldr	r2, [pc, #396]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b61      	ldr	r3, [pc, #388]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5c      	ldr	r2, [pc, #368]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a55      	ldr	r2, [pc, #340]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a47      	ldr	r2, [pc, #284]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 510e 	mov.w	r1, #9088	; 0x2380
 8000c18:	4833      	ldr	r0, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0x1b0>)
 8000c1a:	f002 f85b 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2120      	movs	r1, #32
 8000c22:	4832      	ldr	r0, [pc, #200]	; (8000cec <MX_GPIO_Init+0x1b4>)
 8000c24:	f002 f856 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c2e:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <MX_GPIO_Init+0x1b8>)
 8000c30:	f002 f850 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2102      	movs	r1, #2
 8000c38:	482e      	ldr	r0, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000c3a:	f002 f84b 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	482c      	ldr	r0, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000c46:	f002 f845 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000c4a:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4821      	ldr	r0, [pc, #132]	; (8000ce8 <MX_GPIO_Init+0x1b0>)
 8000c64:	f001 fe8a 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <MX_GPIO_Init+0x1b4>)
 8000c80:	f001 fe7c 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000c84:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <MX_GPIO_Init+0x1b8>)
 8000c9e:	f001 fe6d 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <MX_GPIO_Init+0x1bc>)
 8000cba:	f001 fe5f 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_GPIO_Init+0x1c0>)
 8000cd8:	f001 fe50 	bl	800297c <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40021800 	.word	0x40021800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <HCSR04_Delay>:
uint32_t Distance[3]  = {0};
int Is_First_Captured[3] = {0};
float refClock = TIMCLOCK/(PRESCALAR);

void HCSR04_Delay (uint16_t time, TIM_HandleTypeDef *htim)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim) < time);
 8000d10:	bf00      	nop
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3f9      	bcc.n	8000d12 <HCSR04_Delay+0x16>

}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HCSR04_Read>:

void HCSR04_Read (TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);	// pull the TRIG pin HIGH
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	68b8      	ldr	r0, [r7, #8]
 8000d42:	f001 ffc7 	bl	8002cd4 <HAL_GPIO_WritePin>
	HCSR04_Delay(10, htim);  // wait for 10 us
 8000d46:	68f9      	ldr	r1, [r7, #12]
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f7ff ffd7 	bl	8000cfc <HCSR04_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);  // pull the TRIG pin low
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	2200      	movs	r2, #0
 8000d52:	4619      	mov	r1, r3
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f001 ffbd 	bl	8002cd4 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1); // enable Interrupt
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0202 	orr.w	r2, r2, #2
 8000d68:	60da      	str	r2, [r3, #12]
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HC_SRO4_Dis>:


// calculate the distance of HC_SR04
uint32_t HC_SRO4_Dis(TIM_HandleTypeDef *htim, int num) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]

	if (Is_First_Captured[num] == 0) // if the first rising edge is not captured
 8000d7e:	4a3b      	ldr	r2, [pc, #236]	; (8000e6c <HC_SRO4_Dis+0xf8>)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d113      	bne.n	8000db2 <HC_SRO4_Dis+0x3e>
	{
		Is_First_Captured[num] = 1;  // set the first captured as true
 8000d8a:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <HC_SRO4_Dis+0xf8>)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		IC_Val1[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d94:	2100      	movs	r1, #0
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f004 f80c 	bl	8004db4 <HAL_TIM_ReadCapturedValue>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4934      	ldr	r1, [pc, #208]	; (8000e70 <HC_SRO4_Dis+0xfc>)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		IC_Val1[num] = htim->Instance->CNT; // read the first value
		IC_Val2[num] = 0;
 8000da6:	4a33      	ldr	r2, [pc, #204]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2100      	movs	r1, #0
 8000dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000db0:	e057      	b.n	8000e62 <HC_SRO4_Dis+0xee>
//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
	}

	else   // If the first rising edge is captured, now we will capture the second edge
	{
		IC_Val2[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000db2:	2100      	movs	r1, #0
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f003 fffd 	bl	8004db4 <HAL_TIM_ReadCapturedValue>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	492d      	ldr	r1, [pc, #180]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//IC_Val2[num] = htim->Instance->CNT;

		if (IC_Val2[num] > IC_Val1[num])
 8000dc4:	4a2b      	ldr	r2, [pc, #172]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dcc:	4928      	ldr	r1, [pc, #160]	; (8000e70 <HC_SRO4_Dis+0xfc>)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d90d      	bls.n	8000df4 <HC_SRO4_Dis+0x80>
		{
			Difference[num] = IC_Val2[num]-IC_Val1[num];
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000de0:	4923      	ldr	r1, [pc, #140]	; (8000e70 <HC_SRO4_Dis+0xfc>)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	4923      	ldr	r1, [pc, #140]	; (8000e78 <HC_SRO4_Dis+0x104>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000df2:	e019      	b.n	8000e28 <HC_SRO4_Dis+0xb4>
		}

		else if (IC_Val1[num] > IC_Val2[num])
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HC_SRO4_Dis+0xfc>)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfc:	491d      	ldr	r1, [pc, #116]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d90f      	bls.n	8000e28 <HC_SRO4_Dis+0xb4>
		{

			//TIM 1,3,4 is 16bit so overflow is occured when the cnt value is 0xffff
			Difference[num] = (0xffff + IC_Val2[num]) - IC_Val1[num];
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HC_SRO4_Dis+0x100>)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e10:	4917      	ldr	r1, [pc, #92]	; (8000e70 <HC_SRO4_Dis+0xfc>)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e1e:	33ff      	adds	r3, #255	; 0xff
 8000e20:	4915      	ldr	r1, [pc, #84]	; (8000e78 <HC_SRO4_Dis+0x104>)
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		}

//		frequency[num] = refClock/Difference[num];
		Distance[num] = Difference[num]*340/2000;
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HC_SRO4_Dis+0x104>)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HC_SRO4_Dis+0x108>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	09da      	lsrs	r2, r3, #7
 8000e40:	490f      	ldr	r1, [pc, #60]	; (8000e80 <HC_SRO4_Dis+0x10c>)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
//		htim->Instance->CNT = 0;

//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		Is_First_Captured[num] = 0; // set it back to false
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HC_SRO4_Dis+0xf8>)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//htim is address
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0202 	bic.w	r2, r2, #2
 8000e60:	60da      	str	r2, [r3, #12]
	}
}
 8000e62:	bf00      	nop
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200003b4 	.word	0x200003b4
 8000e70:	20000384 	.word	0x20000384
 8000e74:	20000390 	.word	0x20000390
 8000e78:	2000039c 	.word	0x2000039c
 8000e7c:	10624dd3 	.word	0x10624dd3
 8000e80:	200003a8 	.word	0x200003a8

08000e84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	; (8000efc <MX_I2C1_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e90:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x7c>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ec2:	f001 ff21 	bl	8002d08 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 f930 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ed4:	f002 f85c 	bl	8002f90 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ede:	f000 f927 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_I2C1_Init+0x74>)
 8000ee6:	f002 f88f 	bl	8003008 <HAL_I2CEx_ConfigDigitalFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f91e 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200003c0 	.word	0x200003c0
 8000efc:	40005400 	.word	0x40005400
 8000f00:	000186a0 	.word	0x000186a0

08000f04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_I2C_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12c      	bne.n	8000f80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f48:	2312      	movs	r3, #18
 8000f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f54:	2304      	movs	r3, #4
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <HAL_I2C_MspInit+0x8c>)
 8000f60:	f001 fd0c 	bl	800297c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f001 fb3a 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f820 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f7ff fdca 	bl	8000b38 <MX_GPIO_Init>
  MX_RTC_Init();
 8000fa4:	f000 fb42 	bl	800162c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000fa8:	f001 f968 	bl	800227c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fac:	f001 f990 	bl	80022d0 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8000fb0:	f001 f93a 	bl	8002228 <MX_UART7_Init>
  MX_I2C1_Init();
 8000fb4:	f7ff ff66 	bl	8000e84 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fb8:	f000 fdbc 	bl	8001b34 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000fbc:	f001 f9b2 	bl	8002324 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000fc0:	f000 fd44 	bl	8001a4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fc4:	f000 fe4c 	bl	8001c60 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc8:	f000 feba 	bl	8001d40 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000fcc:	f000 ff28 	bl	8001e20 <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fd0:	f000 f878 	bl	80010c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000fd4:	f7ff fab0 	bl	8000538 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f005 fca8 	bl	800692c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x48>
	...

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f007 ff4d 	bl	8008e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <SystemClock_Config+0xdc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <SystemClock_Config+0xdc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <SystemClock_Config+0xdc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <SystemClock_Config+0xe0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <SystemClock_Config+0xe0>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <SystemClock_Config+0xe0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800103c:	2306      	movs	r3, #6
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001054:	2308      	movs	r3, #8
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001058:	23b4      	movs	r3, #180	; 0xb4
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	4618      	mov	r0, r3
 800106a:	f002 f85d 	bl	8003128 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001074:	f000 f85c 	bl	8001130 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001078:	f002 f806 	bl	8003088 <HAL_PWREx_EnableOverDrive>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001082:	f000 f855 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2105      	movs	r1, #5
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fab7 	bl	8003618 <HAL_RCC_ClockConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80010b0:	f000 f83e 	bl	8001130 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3750      	adds	r7, #80	; 0x50
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2047      	movs	r0, #71	; 0x47
 80010ce:	f001 fb99 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010d2:	2047      	movs	r0, #71	; 0x47
 80010d4:	f001 fbb2 	bl	800283c <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	201b      	movs	r0, #27
 80010de:	f001 fb91 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010e2:	201b      	movs	r0, #27
 80010e4:	f001 fbaa 	bl	800283c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	201d      	movs	r0, #29
 80010ee:	f001 fb89 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010f2:	201d      	movs	r0, #29
 80010f4:	f001 fba2 	bl	800283c <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2105      	movs	r1, #5
 80010fc:	201e      	movs	r0, #30
 80010fe:	f001 fb81 	bl	8002804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001102:	201e      	movs	r0, #30
 8001104:	f001 fb9a 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f001 fa99 	bl	8002654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40000c00 	.word	0x40000c00

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <Move>:
#include "motor.h"

uint8_t odo_flag[4];
uint32_t odo_count[4];

void Move(int controlcmd){
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b06      	cmp	r3, #6
 8001148:	f200 80fe 	bhi.w	8001348 <Move+0x20c>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <Move+0x18>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	080012fd 	.word	0x080012fd
 8001158:	08001171 	.word	0x08001171
 800115c:	08001237 	.word	0x08001237
 8001160:	080011b3 	.word	0x080011b3
 8001164:	080011f5 	.word	0x080011f5
 8001168:	08001279 	.word	0x08001279
 800116c:	080012bb 	.word	0x080012bb
		case FORWARD:
			Forward();
 8001170:	f000 f90a 	bl	8001388 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2101      	movs	r1, #1
 8001178:	4880      	ldr	r0, [pc, #512]	; (800137c <Move+0x240>)
 800117a:	f001 fdab 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	487e      	ldr	r0, [pc, #504]	; (800137c <Move+0x240>)
 8001184:	f001 fda6 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118e:	487b      	ldr	r0, [pc, #492]	; (800137c <Move+0x240>)
 8001190:	f001 fda0 	bl	8002cd4 <HAL_GPIO_WritePin>

			for(int i = 0; i < 4; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
 8001198:	e007      	b.n	80011aa <Move+0x6e>
				odo_flag[i] = 1;
 800119a:	4a79      	ldr	r2, [pc, #484]	; (8001380 <Move+0x244>)
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	4413      	add	r3, r2
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	3301      	adds	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	ddf4      	ble.n	800119a <Move+0x5e>
			}
			break;
 80011b0:	e0e0      	b.n	8001374 <Move+0x238>
		case BACKWARD:
			Backward();
 80011b2:	f000 f919 	bl	80013e8 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2101      	movs	r1, #1
 80011ba:	4870      	ldr	r0, [pc, #448]	; (800137c <Move+0x240>)
 80011bc:	f001 fd8a 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	486d      	ldr	r0, [pc, #436]	; (800137c <Move+0x240>)
 80011c6:	f001 fd85 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	486a      	ldr	r0, [pc, #424]	; (800137c <Move+0x240>)
 80011d2:	f001 fd7f 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	e007      	b.n	80011ec <Move+0xb0>
				odo_flag[i] = 1;
 80011dc:	4a68      	ldr	r2, [pc, #416]	; (8001380 <Move+0x244>)
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	4413      	add	r3, r2
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	3301      	adds	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	ddf4      	ble.n	80011dc <Move+0xa0>
			}
			break;
 80011f2:	e0bf      	b.n	8001374 <Move+0x238>
		case LEFT:
			Left();
 80011f4:	f000 f958 	bl	80014a8 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	485f      	ldr	r0, [pc, #380]	; (800137c <Move+0x240>)
 80011fe:	f001 fd69 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	485d      	ldr	r0, [pc, #372]	; (800137c <Move+0x240>)
 8001208:	f001 fd64 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001212:	485a      	ldr	r0, [pc, #360]	; (800137c <Move+0x240>)
 8001214:	f001 fd5e 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	e007      	b.n	800122e <Move+0xf2>
				odo_flag[i] = 1;
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <Move+0x244>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	4413      	add	r3, r2
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	2b03      	cmp	r3, #3
 8001232:	ddf4      	ble.n	800121e <Move+0xe2>
			}
			break;
 8001234:	e09e      	b.n	8001374 <Move+0x238>
		case RIGHT:
			Right();
 8001236:	f000 f907 	bl	8001448 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2101      	movs	r1, #1
 800123e:	484f      	ldr	r0, [pc, #316]	; (800137c <Move+0x240>)
 8001240:	f001 fd48 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	484c      	ldr	r0, [pc, #304]	; (800137c <Move+0x240>)
 800124a:	f001 fd43 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001254:	4849      	ldr	r0, [pc, #292]	; (800137c <Move+0x240>)
 8001256:	f001 fd3d 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	e007      	b.n	8001270 <Move+0x134>
				odo_flag[i] = 1;
 8001260:	4a47      	ldr	r2, [pc, #284]	; (8001380 <Move+0x244>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	3301      	adds	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b03      	cmp	r3, #3
 8001274:	ddf4      	ble.n	8001260 <Move+0x124>
			}
			break;
 8001276:	e07d      	b.n	8001374 <Move+0x238>
		case CW:
			Cw();
 8001278:	f000 f946 	bl	8001508 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	2101      	movs	r1, #1
 8001280:	483e      	ldr	r0, [pc, #248]	; (800137c <Move+0x240>)
 8001282:	f001 fd27 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	483c      	ldr	r0, [pc, #240]	; (800137c <Move+0x240>)
 800128c:	f001 fd22 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	4839      	ldr	r0, [pc, #228]	; (800137c <Move+0x240>)
 8001298:	f001 fd1c 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e007      	b.n	80012b2 <Move+0x176>
				odo_flag[i] = 1;
 80012a2:	4a37      	ldr	r2, [pc, #220]	; (8001380 <Move+0x244>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	4413      	add	r3, r2
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	ddf4      	ble.n	80012a2 <Move+0x166>
			}
			break;
 80012b8:	e05c      	b.n	8001374 <Move+0x238>
		case CCW:
			Ccw();
 80012ba:	f000 f955 	bl	8001568 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80012be:	2201      	movs	r2, #1
 80012c0:	2101      	movs	r1, #1
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <Move+0x240>)
 80012c4:	f001 fd06 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	482b      	ldr	r0, [pc, #172]	; (800137c <Move+0x240>)
 80012ce:	f001 fd01 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d8:	4828      	ldr	r0, [pc, #160]	; (800137c <Move+0x240>)
 80012da:	f001 fcfb 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e007      	b.n	80012f4 <Move+0x1b8>
				odo_flag[i] = 1;
 80012e4:	4a26      	ldr	r2, [pc, #152]	; (8001380 <Move+0x244>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4413      	add	r3, r2
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3301      	adds	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	ddf4      	ble.n	80012e4 <Move+0x1a8>
			}
			break;
 80012fa:	e03b      	b.n	8001374 <Move+0x238>
		case STOP:
			Stop();
 80012fc:	f000 f964 	bl	80015c8 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2101      	movs	r1, #1
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <Move+0x240>)
 8001306:	f001 fce5 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <Move+0x240>)
 8001310:	f001 fce0 	bl	8002cd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131a:	4818      	ldr	r0, [pc, #96]	; (800137c <Move+0x240>)
 800131c:	f001 fcda 	bl	8002cd4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e00c      	b.n	8001340 <Move+0x204>
				odo_flag[i] = 0;
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <Move+0x244>)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <Move+0x248>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2100      	movs	r1, #0
 8001336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b03      	cmp	r3, #3
 8001344:	ddef      	ble.n	8001326 <Move+0x1ea>
			}
			break;
 8001346:	e015      	b.n	8001374 <Move+0x238>
		default:
			Stop();
 8001348:	f000 f93e 	bl	80015c8 <Stop>
			for(int i = 0; i < 4; i++) {
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e00c      	b.n	800136c <Move+0x230>
				odo_flag[i] = 0;
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <Move+0x244>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4413      	add	r3, r2
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 800135c:	4a09      	ldr	r2, [pc, #36]	; (8001384 <Move+0x248>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2100      	movs	r1, #0
 8001362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3301      	adds	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b03      	cmp	r3, #3
 8001370:	ddef      	ble.n	8001352 <Move+0x216>
			}
			break;
 8001372:	bf00      	nop
		}
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020400 	.word	0x40020400
 8001380:	20000414 	.word	0x20000414
 8001384:	20000418 	.word	0x20000418

08001388 <Forward>:

void Forward()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 800138c:	2200      	movs	r2, #0
 800138e:	2102      	movs	r1, #2
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <Forward+0x54>)
 8001392:	f001 fc9f 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <Forward+0x58>)
 800139e:	f001 fc99 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 80013a2:	2201      	movs	r2, #1
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	480e      	ldr	r0, [pc, #56]	; (80013e0 <Forward+0x58>)
 80013a8:	f001 fc94 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <Forward+0x58>)
 80013b4:	f001 fc8e 	bl	8002cd4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	480a      	ldr	r0, [pc, #40]	; (80013e4 <Forward+0x5c>)
 80013bc:	f002 ff12 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013c0:	2104      	movs	r1, #4
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <Forward+0x5c>)
 80013c4:	f002 ff0e 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80013c8:	2108      	movs	r1, #8
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <Forward+0x5c>)
 80013cc:	f002 ff0a 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80013d0:	210c      	movs	r1, #12
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <Forward+0x5c>)
 80013d4:	f002 ff06 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40021400 	.word	0x40021400
 80013e4:	200004dc 	.word	0x200004dc

080013e8 <Backward>:

void Backward()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2102      	movs	r1, #2
 80013f0:	4812      	ldr	r0, [pc, #72]	; (800143c <Backward+0x54>)
 80013f2:	f001 fc6f 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fc:	4810      	ldr	r0, [pc, #64]	; (8001440 <Backward+0x58>)
 80013fe:	f001 fc69 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <Backward+0x58>)
 8001408:	f001 fc64 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <Backward+0x58>)
 8001414:	f001 fc5e 	bl	8002cd4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <Backward+0x5c>)
 800141c:	f002 fee2 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001420:	2104      	movs	r1, #4
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <Backward+0x5c>)
 8001424:	f002 fede 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001428:	2108      	movs	r1, #8
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <Backward+0x5c>)
 800142c:	f002 feda 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001430:	210c      	movs	r1, #12
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <Backward+0x5c>)
 8001434:	f002 fed6 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021800 	.word	0x40021800
 8001440:	40021400 	.word	0x40021400
 8001444:	200004dc 	.word	0x200004dc

08001448 <Right>:

void Right()
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2102      	movs	r1, #2
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <Right+0x54>)
 8001452:	f001 fc3f 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <Right+0x58>)
 800145e:	f001 fc39 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <Right+0x58>)
 8001468:	f001 fc34 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <Right+0x58>)
 8001474:	f001 fc2e 	bl	8002cd4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <Right+0x5c>)
 800147c:	f002 feb2 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001480:	2104      	movs	r1, #4
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <Right+0x5c>)
 8001484:	f002 feae 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001488:	2108      	movs	r1, #8
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <Right+0x5c>)
 800148c:	f002 feaa 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001490:	210c      	movs	r1, #12
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <Right+0x5c>)
 8001494:	f002 fea6 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021400 	.word	0x40021400
 80014a4:	200004dc 	.word	0x200004dc

080014a8 <Left>:

void Left()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2102      	movs	r1, #2
 80014b0:	4812      	ldr	r0, [pc, #72]	; (80014fc <Left+0x54>)
 80014b2:	f001 fc0f 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014bc:	4810      	ldr	r0, [pc, #64]	; (8001500 <Left+0x58>)
 80014be:	f001 fc09 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <Left+0x58>)
 80014c8:	f001 fc04 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <Left+0x58>)
 80014d4:	f001 fbfe 	bl	8002cd4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014d8:	2100      	movs	r1, #0
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <Left+0x5c>)
 80014dc:	f002 fe82 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014e0:	2104      	movs	r1, #4
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <Left+0x5c>)
 80014e4:	f002 fe7e 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80014e8:	2108      	movs	r1, #8
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <Left+0x5c>)
 80014ec:	f002 fe7a 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80014f0:	210c      	movs	r1, #12
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <Left+0x5c>)
 80014f4:	f002 fe76 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021800 	.word	0x40021800
 8001500:	40021400 	.word	0x40021400
 8001504:	200004dc 	.word	0x200004dc

08001508 <Cw>:

void Cw()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2102      	movs	r1, #2
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <Cw+0x54>)
 8001512:	f001 fbdf 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <Cw+0x58>)
 800151e:	f001 fbd9 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <Cw+0x58>)
 8001528:	f001 fbd4 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <Cw+0x58>)
 8001534:	f001 fbce 	bl	8002cd4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001538:	2100      	movs	r1, #0
 800153a:	480a      	ldr	r0, [pc, #40]	; (8001564 <Cw+0x5c>)
 800153c:	f002 fe52 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001540:	2104      	movs	r1, #4
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <Cw+0x5c>)
 8001544:	f002 fe4e 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001548:	2108      	movs	r1, #8
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <Cw+0x5c>)
 800154c:	f002 fe4a 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001550:	210c      	movs	r1, #12
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <Cw+0x5c>)
 8001554:	f002 fe46 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021800 	.word	0x40021800
 8001560:	40021400 	.word	0x40021400
 8001564:	200004dc 	.word	0x200004dc

08001568 <Ccw>:

void Ccw()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2102      	movs	r1, #2
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <Ccw+0x54>)
 8001572:	f001 fbaf 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <Ccw+0x58>)
 800157e:	f001 fba9 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <Ccw+0x58>)
 8001588:	f001 fba4 	bl	8002cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <Ccw+0x58>)
 8001594:	f001 fb9e 	bl	8002cd4 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <Ccw+0x5c>)
 800159c:	f002 fe22 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015a0:	2104      	movs	r1, #4
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <Ccw+0x5c>)
 80015a4:	f002 fe1e 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80015a8:	2108      	movs	r1, #8
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <Ccw+0x5c>)
 80015ac:	f002 fe1a 	bl	80041e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80015b0:	210c      	movs	r1, #12
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <Ccw+0x5c>)
 80015b4:	f002 fe16 	bl	80041e4 <HAL_TIM_PWM_Start>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	200004dc 	.word	0x200004dc

080015c8 <Stop>:

void Stop()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80015cc:	2100      	movs	r1, #0
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <Stop+0x28>)
 80015d0:	f002 fed0 	bl	8004374 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <Stop+0x28>)
 80015d8:	f002 fecc 	bl	8004374 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80015dc:	2108      	movs	r1, #8
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <Stop+0x28>)
 80015e0:	f002 fec8 	bl	8004374 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80015e4:	210c      	movs	r1, #12
 80015e6:	4802      	ldr	r0, [pc, #8]	; (80015f0 <Stop+0x28>)
 80015e8:	f002 fec4 	bl	8004374 <HAL_TIM_PWM_Stop>


}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200004dc 	.word	0x200004dc

080015f4 <Motor_Init>:

void Motor_Init(){
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 80015f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 8001602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001606:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 800160c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001610:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 8001616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_RTC_Init+0x44>)
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <MX_RTC_Init+0x48>)
 8001634:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_RTC_Init+0x44>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_RTC_Init+0x44>)
 800163e:	227f      	movs	r2, #127	; 0x7f
 8001640:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_RTC_Init+0x44>)
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_RTC_Init+0x44>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_RTC_Init+0x44>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_RTC_Init+0x44>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_RTC_Init+0x44>)
 800165c:	f002 fbae 	bl	8003dbc <HAL_RTC_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001666:	f7ff fd63 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000428 	.word	0x20000428
 8001674:	40002800 	.word	0x40002800

08001678 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	2230      	movs	r2, #48	; 0x30
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f007 fc00 	bl	8008e8e <memset>
  if(rtcHandle->Instance==RTC)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_RTC_MspInit+0x4c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d111      	bne.n	80016bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001698:	2320      	movs	r3, #32
 800169a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f9c8 	bl	8003a3c <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016b2:	f7ff fd3d 	bl	8001130 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_RTC_MspInit+0x50>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	; 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40002800 	.word	0x40002800
 80016c8:	42470e3c 	.word	0x42470e3c

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_MspInit+0x54>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x54>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_MspInit+0x54>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_MspInit+0x54>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	210f      	movs	r1, #15
 800170e:	f06f 0001 	mvn.w	r0, #1
 8001712:	f001 f877 	bl	8002804 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2032      	movs	r0, #50	; 0x32
 800173a:	f001 f863 	bl	8002804 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800173e:	2032      	movs	r0, #50	; 0x32
 8001740:	f001 f87c 	bl	800283c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_InitTick+0xa4>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_InitTick+0xa4>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_InitTick+0xa4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001760:	f107 0210 	add.w	r2, r7, #16
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f002 f934 	bl	80039d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001770:	f002 f90a 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8001774:	4603      	mov	r3, r0
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_InitTick+0xa8>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	3b01      	subs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_InitTick+0xac>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <HAL_InitTick+0xb0>)
 800178c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_InitTick+0xac>)
 8001790:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001794:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_InitTick+0xac>)
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_InitTick+0xac>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_InitTick+0xac>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_InitTick+0xac>)
 80017aa:	f002 fc01 	bl	8003fb0 <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d104      	bne.n	80017be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_InitTick+0xac>)
 80017b6:	f002 fc4b 	bl	8004050 <HAL_TIM_Base_Start_IT>
 80017ba:	4603      	mov	r3, r0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	20000448 	.word	0x20000448
 80017d4:	40000c00 	.word	0x40000c00

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800180a:	f002 ffa5 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000494 	.word	0x20000494

08001818 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM1_CC_IRQHandler+0x10>)
 800181e:	f002 ff9b 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000494 	.word	0x20000494

0800182c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM3_IRQHandler+0x10>)
 8001832:	f002 ff91 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000524 	.word	0x20000524

08001840 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM4_IRQHandler+0x10>)
 8001846:	f002 ff87 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000056c 	.word	0x2000056c

08001854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART2_IRQHandler+0x10>)
 800185a:	f004 f8e7 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000640 	.word	0x20000640

08001868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <USART3_IRQHandler+0x10>)
 800186e:	f004 f8dd 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000684 	.word	0x20000684

0800187c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001882:	f002 ff69 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200005b4 	.word	0x200005b4

08001890 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM8_CC_IRQHandler+0x10>)
 8001896:	f002 ff5f 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200005b4 	.word	0x200005b4

080018a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM5_IRQHandler+0x10>)
 80018aa:	f002 ff55 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000448 	.word	0x20000448

080018b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <USART6_IRQHandler+0x10>)
 80018be:	f004 f8b5 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200006c8 	.word	0x200006c8

080018cc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <UART7_IRQHandler+0x10>)
 80018d2:	f004 f8ab 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200005fc 	.word	0x200005fc

080018e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
	}

return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf1      	blt.n	800192c <_write+0x12>
	}
	return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197a:	605a      	str	r2, [r3, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_isatty>:

int _isatty(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f007 f91e 	bl	8008c2c <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20030000 	.word	0x20030000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000490 	.word	0x20000490
 8001a24:	20004478 	.word	0x20004478

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a78:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <MX_TIM1_Init+0xe4>)
 8001a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a7e:	22b3      	movs	r2, #179	; 0xb3
 8001a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa2:	4822      	ldr	r0, [pc, #136]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001aa4:	f002 fa84 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001aae:	f7ff fb3f 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	4619      	mov	r1, r3
 8001abe:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001ac0:	f003 f8b0 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001aca:	f7ff fb31 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001ad0:	f002 fcc0 	bl	8004454 <HAL_TIM_IC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ada:	f7ff fb29 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4619      	mov	r1, r3
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001aee:	f003 fdfd 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001af8:	f7ff fb1a 	bl	8001130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001afc:	230a      	movs	r3, #10
 8001afe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b00:	2301      	movs	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <MX_TIM1_Init+0xe0>)
 8001b14:	f002 ff28 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b1e:	f7ff fb07 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000494 	.word	0x20000494
 8001b30:	40010000 	.word	0x40010000

08001b34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b64:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b6e:	2259      	movs	r2, #89	; 0x59
 8001b70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8c:	4833      	ldr	r0, [pc, #204]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001b8e:	f002 fa0f 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b98:	f7ff faca 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482c      	ldr	r0, [pc, #176]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001baa:	f003 f83b 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bb4:	f7ff fabc 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb8:	4828      	ldr	r0, [pc, #160]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001bba:	f002 fab9 	bl	8004130 <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bc4:	f7ff fab4 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4821      	ldr	r0, [pc, #132]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001bd8:	f003 fd88 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001be2:	f7ff faa5 	bl	8001130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001be6:	2370      	movs	r3, #112	; 0x70
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4817      	ldr	r0, [pc, #92]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001bfe:	f002 ff4f 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c08:	f7ff fa92 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001c14:	f002 ff44 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001c1e:	f7ff fa87 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2208      	movs	r2, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001c2a:	f002 ff39 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001c34:	f7ff fa7c 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001c40:	f002 ff2e 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001c4a:	f7ff fa71 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <MX_TIM2_Init+0x128>)
 8001c50:	f000 fa92 	bl	8002178 <HAL_TIM_MspPostInit>

}
 8001c54:	bf00      	nop
 8001c56:	3738      	adds	r7, #56	; 0x38
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200004dc 	.word	0x200004dc

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001c8c:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <MX_TIM3_Init+0xdc>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001c92:	2259      	movs	r2, #89	; 0x59
 8001c94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001c9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb0:	4821      	ldr	r0, [pc, #132]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001cb2:	f002 f97d 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f7ff fa38 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481a      	ldr	r0, [pc, #104]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001cce:	f002 ffa9 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cd8:	f7ff fa2a 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001cdc:	4816      	ldr	r0, [pc, #88]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001cde:	f002 fbb9 	bl	8004454 <HAL_TIM_IC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ce8:	f7ff fa22 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001cfc:	f003 fcf6 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d06:	f7ff fa13 	bl	8001130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001d16:	2305      	movs	r3, #5
 8001d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_TIM3_Init+0xd8>)
 8001d22:	f002 fe21 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001d2c:	f7ff fa00 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000524 	.word	0x20000524
 8001d3c:	40000400 	.word	0x40000400

08001d40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <MX_TIM4_Init+0xdc>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d72:	2259      	movs	r2, #89	; 0x59
 8001d74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d90:	4821      	ldr	r0, [pc, #132]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001d92:	f002 f90d 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f7ff f9c8 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	4619      	mov	r1, r3
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001dae:	f002 ff39 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f7ff f9ba 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001dbc:	4816      	ldr	r0, [pc, #88]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001dbe:	f002 fb49 	bl	8004454 <HAL_TIM_IC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001dc8:	f7ff f9b2 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001ddc:	f003 fc86 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001de6:	f7ff f9a3 	bl	8001130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dea:	230a      	movs	r3, #10
 8001dec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dee:	2301      	movs	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001df6:	2305      	movs	r3, #5
 8001df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_TIM4_Init+0xd8>)
 8001e02:	f002 fdb1 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001e0c:	f7ff f990 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	2000056c 	.word	0x2000056c
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e4a:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e4c:	4a3d      	ldr	r2, [pc, #244]	; (8001f44 <MX_TIM8_Init+0x124>)
 8001e4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e76:	4832      	ldr	r0, [pc, #200]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e78:	f002 f89a 	bl	8003fb0 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001e82:	f7ff f955 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	4619      	mov	r1, r3
 8001e92:	482b      	ldr	r0, [pc, #172]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001e94:	f002 fec6 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001e9e:	f7ff f947 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001ea2:	4827      	ldr	r0, [pc, #156]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001ea4:	f002 fad6 	bl	8004454 <HAL_TIM_IC_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001eae:	f7ff f93f 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481f      	ldr	r0, [pc, #124]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001ec2:	f003 fc13 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001ecc:	f7ff f930 	bl	8001130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4816      	ldr	r0, [pc, #88]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001ee8:	f002 fd3e 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001ef2:	f7ff f91d 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001efe:	f002 fd33 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001f08:	f7ff f912 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2208      	movs	r2, #8
 8001f10:	4619      	mov	r1, r3
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001f14:	f002 fd28 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8001f1e:	f7ff f907 	bl	8001130 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	220c      	movs	r2, #12
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM8_Init+0x120>)
 8001f2a:	f002 fd1d 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001f34:	f7ff f8fc 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200005b4 	.word	0x200005b4
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b090      	sub	sp, #64	; 0x40
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7b      	ldr	r2, [pc, #492]	; (8002154 <HAL_TIM_Base_MspInit+0x20c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d135      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a79      	ldr	r2, [pc, #484]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b77      	ldr	r3, [pc, #476]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a72      	ldr	r2, [pc, #456]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f90:	f043 0310 	orr.w	r3, r3, #16
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4867      	ldr	r0, [pc, #412]	; (800215c <HAL_TIM_Base_MspInit+0x214>)
 8001fc0:	f000 fcdc 	bl	800297c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2105      	movs	r1, #5
 8001fc8:	2018      	movs	r0, #24
 8001fca:	f000 fc1b 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fce:	2018      	movs	r0, #24
 8001fd0:	f000 fc34 	bl	800283c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fd4:	e0ba      	b.n	800214c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d10e      	bne.n	8001ffe <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
 8001fe4:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4a5b      	ldr	r2, [pc, #364]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff0:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8001ffc:	e0a6      	b.n	800214c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_TIM_Base_MspInit+0x218>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d12c      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	4b52      	ldr	r3, [pc, #328]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	6413      	str	r3, [r2, #64]	; 0x40
 8002018:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002050:	2302      	movs	r3, #2
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002058:	4619      	mov	r1, r3
 800205a:	4842      	ldr	r0, [pc, #264]	; (8002164 <HAL_TIM_Base_MspInit+0x21c>)
 800205c:	f000 fc8e 	bl	800297c <HAL_GPIO_Init>
}
 8002060:	e074      	b.n	800214c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <HAL_TIM_Base_MspInit+0x220>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d12d      	bne.n	80020c8 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6313      	str	r3, [r2, #48]	; 0x30
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020b6:	2302      	movs	r3, #2
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020be:	4619      	mov	r1, r3
 80020c0:	482a      	ldr	r0, [pc, #168]	; (800216c <HAL_TIM_Base_MspInit+0x224>)
 80020c2:	f000 fc5b 	bl	800297c <HAL_GPIO_Init>
}
 80020c6:	e041      	b.n	800214c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM8)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_TIM_Base_MspInit+0x228>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d13c      	bne.n	800214c <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_TIM_Base_MspInit+0x210>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800210a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800211c:	2303      	movs	r3, #3
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <HAL_TIM_Base_MspInit+0x22c>)
 8002128:	f000 fc28 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2105      	movs	r1, #5
 8002130:	202c      	movs	r0, #44	; 0x2c
 8002132:	f000 fb67 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002136:	202c      	movs	r0, #44	; 0x2c
 8002138:	f000 fb80 	bl	800283c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2105      	movs	r1, #5
 8002140:	202e      	movs	r0, #46	; 0x2e
 8002142:	f000 fb5f 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002146:	202e      	movs	r0, #46	; 0x2e
 8002148:	f000 fb78 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3740      	adds	r7, #64	; 0x40
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40010000 	.word	0x40010000
 8002158:	40023800 	.word	0x40023800
 800215c:	40021000 	.word	0x40021000
 8002160:	40000400 	.word	0x40000400
 8002164:	40020000 	.word	0x40020000
 8002168:	40000800 	.word	0x40000800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40010400 	.word	0x40010400
 8002174:	40020800 	.word	0x40020800

08002178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d13c      	bne.n	8002214 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a1e      	ldr	r2, [pc, #120]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_TIM_MspPostInit+0xa4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021d2:	2301      	movs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e2:	2301      	movs	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <HAL_TIM_MspPostInit+0xa8>)
 80021ee:	f000 fbc5 	bl	800297c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80021f2:	f640 4308 	movw	r3, #3080	; 0xc08
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_TIM_MspPostInit+0xac>)
 8002210:	f000 fbb4 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	; 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400

08002228 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_UART7_Init+0x4c>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_UART7_Init+0x50>)
 8002230:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_UART7_Init+0x4c>)
 8002234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002238:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_UART7_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_UART7_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <MX_UART7_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_UART7_Init+0x4c>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <MX_UART7_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_UART7_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_UART7_Init+0x4c>)
 8002260:	f003 fad4 	bl	800580c <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800226a:	f7fe ff61 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200005fc 	.word	0x200005fc
 8002278:	40007800 	.word	0x40007800

0800227c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <MX_USART2_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800228c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022b4:	f003 faaa 	bl	800580c <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7fe ff37 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000640 	.word	0x20000640
 80022cc:	40004400 	.word	0x40004400

080022d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <MX_USART3_UART_Init+0x50>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART3_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART3_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART3_UART_Init+0x4c>)
 8002308:	f003 fa80 	bl	800580c <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002312:	f7fe ff0d 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000684 	.word	0x20000684
 8002320:	40004800 	.word	0x40004800

08002324 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART6_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART6_UART_Init+0x4c>)
 800235c:	f003 fa56 	bl	800580c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f7fe fee3 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200006c8 	.word	0x200006c8
 8002374:	40011400 	.word	0x40011400

08002378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	; 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_UART_MspInit+0x220>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d135      	bne.n	8002406 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_UART_MspInit+0x224>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a7e      	ldr	r2, [pc, #504]	; (800259c <HAL_UART_MspInit+0x224>)
 80023a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b7c      	ldr	r3, [pc, #496]	; (800259c <HAL_UART_MspInit+0x224>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <HAL_UART_MspInit+0x224>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a77      	ldr	r2, [pc, #476]	; (800259c <HAL_UART_MspInit+0x224>)
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_UART_MspInit+0x224>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80023d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80023e4:	2308      	movs	r3, #8
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	486c      	ldr	r0, [pc, #432]	; (80025a0 <HAL_UART_MspInit+0x228>)
 80023f0:	f000 fac4 	bl	800297c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2105      	movs	r1, #5
 80023f8:	2052      	movs	r0, #82	; 0x52
 80023fa:	f000 fa03 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80023fe:	2052      	movs	r0, #82	; 0x52
 8002400:	f000 fa1c 	bl	800283c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002404:	e0c4      	b.n	8002590 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_UART_MspInit+0x22c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d152      	bne.n	80024b6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
 8002414:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_UART_MspInit+0x224>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a60      	ldr	r2, [pc, #384]	; (800259c <HAL_UART_MspInit+0x224>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	4b5e      	ldr	r3, [pc, #376]	; (800259c <HAL_UART_MspInit+0x224>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_UART_MspInit+0x224>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a59      	ldr	r2, [pc, #356]	; (800259c <HAL_UART_MspInit+0x224>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_UART_MspInit+0x224>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_UART_MspInit+0x224>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_UART_MspInit+0x224>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b50      	ldr	r3, [pc, #320]	; (800259c <HAL_UART_MspInit+0x224>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002464:	2308      	movs	r3, #8
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002474:	2307      	movs	r3, #7
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	484a      	ldr	r0, [pc, #296]	; (80025a8 <HAL_UART_MspInit+0x230>)
 8002480:	f000 fa7c 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002484:	2320      	movs	r3, #32
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002494:	2307      	movs	r3, #7
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249c:	4619      	mov	r1, r3
 800249e:	4843      	ldr	r0, [pc, #268]	; (80025ac <HAL_UART_MspInit+0x234>)
 80024a0:	f000 fa6c 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2105      	movs	r1, #5
 80024a8:	2026      	movs	r0, #38	; 0x26
 80024aa:	f000 f9ab 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ae:	2026      	movs	r0, #38	; 0x26
 80024b0:	f000 f9c4 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 80024b4:	e06c      	b.n	8002590 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_UART_MspInit+0x238>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d135      	bne.n	800252c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_UART_MspInit+0x224>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a34      	ldr	r2, [pc, #208]	; (800259c <HAL_UART_MspInit+0x224>)
 80024ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_UART_MspInit+0x224>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_UART_MspInit+0x224>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4a2d      	ldr	r2, [pc, #180]	; (800259c <HAL_UART_MspInit+0x224>)
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	6313      	str	r3, [r2, #48]	; 0x30
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_UART_MspInit+0x224>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800250a:	2307      	movs	r3, #7
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	4825      	ldr	r0, [pc, #148]	; (80025ac <HAL_UART_MspInit+0x234>)
 8002516:	f000 fa31 	bl	800297c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2105      	movs	r1, #5
 800251e:	2027      	movs	r0, #39	; 0x27
 8002520:	f000 f970 	bl	8002804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002524:	2027      	movs	r0, #39	; 0x27
 8002526:	f000 f989 	bl	800283c <HAL_NVIC_EnableIRQ>
}
 800252a:	e031      	b.n	8002590 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_UART_MspInit+0x23c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12c      	bne.n	8002590 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0x224>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_UART_MspInit+0x224>)
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	6453      	str	r3, [r2, #68]	; 0x44
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0x224>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_UART_MspInit+0x224>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_UART_MspInit+0x224>)
 800255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_UART_MspInit+0x224>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800256e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002580:	2308      	movs	r3, #8
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002588:	4619      	mov	r1, r3
 800258a:	480b      	ldr	r0, [pc, #44]	; (80025b8 <HAL_UART_MspInit+0x240>)
 800258c:	f000 f9f6 	bl	800297c <HAL_GPIO_Init>
}
 8002590:	bf00      	nop
 8002592:	3740      	adds	r7, #64	; 0x40
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007800 	.word	0x40007800
 800259c:	40023800 	.word	0x40023800
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40004800 	.word	0x40004800
 80025b4:	40011400 	.word	0x40011400
 80025b8:	40021800 	.word	0x40021800

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff fa1f 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f006 fc1b 	bl	8008e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fcd1 	bl	8000f94 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002600:	08009b2c 	.word	0x08009b2c
  ldr r2, =_sbss
 8002604:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002608:	20004474 	.word	0x20004474

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 f8d8 	bl	80027ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f7ff f870 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff f842 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	2000070c 	.word	0x2000070c

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	2000070c 	.word	0x2000070c

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4907      	ldr	r1, [pc, #28]	; (8002730 <__NVIC_EnableIRQ+0x38>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	; (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	; (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff4c 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002816:	f7ff ff61 	bl	80026dc <__NVIC_GetPriorityGrouping>
 800281a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7ff ffb1 	bl	8002788 <NVIC_EncodePriority>
 8002826:	4602      	mov	r2, r0
 8002828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff80 	bl	8002734 <__NVIC_SetPriority>
}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff54 	bl	80026f8 <__NVIC_EnableIRQ>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff ff09 	bl	800267c <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff fece 	bl	800267c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e177      	b.n	8002c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8166 	bne.w	8002c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80c0 	beq.w	8002c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	4a65      	ldr	r2, [pc, #404]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	6453      	str	r3, [r2, #68]	; 0x44
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_GPIO_Init+0x324>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_GPIO_Init+0x328>)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_GPIO_Init+0x32c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d037      	beq.n	8002bba <HAL_GPIO_Init+0x23e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_GPIO_Init+0x330>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d031      	beq.n	8002bb6 <HAL_GPIO_Init+0x23a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a56      	ldr	r2, [pc, #344]	; (8002cb0 <HAL_GPIO_Init+0x334>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d02b      	beq.n	8002bb2 <HAL_GPIO_Init+0x236>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_GPIO_Init+0x338>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d025      	beq.n	8002bae <HAL_GPIO_Init+0x232>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_GPIO_Init+0x33c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01f      	beq.n	8002baa <HAL_GPIO_Init+0x22e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <HAL_GPIO_Init+0x340>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d019      	beq.n	8002ba6 <HAL_GPIO_Init+0x22a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_GPIO_Init+0x344>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_GPIO_Init+0x226>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_GPIO_Init+0x348>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00d      	beq.n	8002b9e <HAL_GPIO_Init+0x222>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a50      	ldr	r2, [pc, #320]	; (8002cc8 <HAL_GPIO_Init+0x34c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <HAL_GPIO_Init+0x21e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_GPIO_Init+0x21a>
 8002b92:	2309      	movs	r3, #9
 8002b94:	e012      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002b96:	230a      	movs	r3, #10
 8002b98:	e010      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e00e      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00c      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00a      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x240>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_GPIO_Init+0x328>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfe:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c52:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <HAL_GPIO_Init+0x354>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f ae84 	bls.w	8002998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40021400 	.word	0x40021400
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40021c00 	.word	0x40021c00
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40022400 	.word	0x40022400
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce4:	787b      	ldrb	r3, [r7, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf0:	e003      	b.n	8002cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	619a      	str	r2, [r3, #24]
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e12b      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe f8e8 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2224      	movs	r2, #36	; 0x24
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f000 fe0c 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8002d70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a81      	ldr	r2, [pc, #516]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d807      	bhi.n	8002d8c <HAL_I2C_Init+0x84>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_I2C_Init+0x278>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bf94      	ite	ls
 8002d84:	2301      	movls	r3, #1
 8002d86:	2300      	movhi	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e006      	b.n	8002d9a <HAL_I2C_Init+0x92>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a7d      	ldr	r2, [pc, #500]	; (8002f84 <HAL_I2C_Init+0x27c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf94      	ite	ls
 8002d94:	2301      	movls	r3, #1
 8002d96:	2300      	movhi	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0e7      	b.n	8002f72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a78      	ldr	r2, [pc, #480]	; (8002f88 <HAL_I2C_Init+0x280>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d802      	bhi.n	8002ddc <HAL_I2C_Init+0xd4>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	e009      	b.n	8002df0 <HAL_I2C_Init+0xe8>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	4a69      	ldr	r2, [pc, #420]	; (8002f8c <HAL_I2C_Init+0x284>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	3301      	adds	r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	495c      	ldr	r1, [pc, #368]	; (8002f7c <HAL_I2C_Init+0x274>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d819      	bhi.n	8002e44 <HAL_I2C_Init+0x13c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e59      	subs	r1, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e24:	400b      	ands	r3, r1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_I2C_Init+0x138>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e59      	subs	r1, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3e:	e051      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e04f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <HAL_I2C_Init+0x168>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e012      	b.n	8002e96 <HAL_I2C_Init+0x18e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	0099      	lsls	r1, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x196>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e022      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_I2C_Init+0x1bc>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e58      	subs	r0, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	440b      	add	r3, r1
 8002eb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec2:	e00f      	b.n	8002ee4 <HAL_I2C_Init+0x1dc>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	0099      	lsls	r1, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	6809      	ldr	r1, [r1, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6911      	ldr	r1, [r2, #16]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	000186a0 	.word	0x000186a0
 8002f80:	001e847f 	.word	0x001e847f
 8002f84:	003d08ff 	.word	0x003d08ff
 8002f88:	431bde83 	.word	0x431bde83
 8002f8c:	10624dd3 	.word	0x10624dd3

08002f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d129      	bne.n	8002ffa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	; 0x24
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0210 	bic.w	r2, r2, #16
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	d12a      	bne.n	8003078 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	89fb      	ldrh	r3, [r7, #14]
 8003050:	4313      	orrs	r3, r2
 8003052:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	89fa      	ldrh	r2, [r7, #14]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_PWREx_EnableOverDrive+0x90>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_PWREx_EnableOverDrive+0x90>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_PWREx_EnableOverDrive+0x90>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_PWREx_EnableOverDrive+0x94>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b4:	f7ff fae2 	bl	800267c <HAL_GetTick>
 80030b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ba:	e009      	b.n	80030d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030bc:	f7ff fade 	bl	800267c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ca:	d901      	bls.n	80030d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e01f      	b.n	8003110 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_PWREx_EnableOverDrive+0x98>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d1ee      	bne.n	80030bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e4:	f7ff faca 	bl	800267c <HAL_GetTick>
 80030e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030ea:	e009      	b.n	8003100 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ec:	f7ff fac6 	bl	800267c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030fa:	d901      	bls.n	8003100 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e007      	b.n	8003110 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <HAL_PWREx_EnableOverDrive+0x98>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800310c:	d1ee      	bne.n	80030ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	420e0040 	.word	0x420e0040
 8003120:	40007000 	.word	0x40007000
 8003124:	420e0044 	.word	0x420e0044

08003128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e267      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b82      	ldr	r3, [pc, #520]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e242      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a75      	ldr	r2, [pc, #468]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b70      	ldr	r3, [pc, #448]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6f      	ldr	r2, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6c      	ldr	r2, [pc, #432]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff fa4c 	bl	800267c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7ff fa48 	bl	800267c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e207      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xc0>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7ff fa38 	bl	800267c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff fa34 	bl	800267c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1f3      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b51      	ldr	r3, [pc, #324]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0xe8>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1c7      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4937      	ldr	r1, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCC_OscConfig+0x244>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7ff f9ed 	bl	800267c <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7ff f9e9 	bl	800267c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1a8      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4925      	ldr	r1, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x244>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff f9cc 	bl	800267c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7ff f9c8 	bl	800267c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e187      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d036      	beq.n	8003380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_RCC_OscConfig+0x248>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff f9ac 	bl	800267c <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7ff f9a8 	bl	800267c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e167      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_OscConfig+0x240>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x200>
 8003346:	e01b      	b.n	8003380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_OscConfig+0x248>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7ff f995 	bl	800267c <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e00e      	b.n	8003374 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7ff f991 	bl	800267c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d907      	bls.n	8003374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e150      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
 8003368:	40023800 	.word	0x40023800
 800336c:	42470000 	.word	0x42470000
 8003370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	4b88      	ldr	r3, [pc, #544]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ea      	bne.n	8003356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8097 	beq.w	80034bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b81      	ldr	r3, [pc, #516]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	4b7d      	ldr	r3, [pc, #500]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a7c      	ldr	r2, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
 80033ae:	4b7a      	ldr	r3, [pc, #488]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ca:	4b74      	ldr	r3, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a73      	ldr	r2, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7ff f951 	bl	800267c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7ff f94d 	bl	800267c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e10c      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x474>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x2ea>
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a63      	ldr	r2, [pc, #396]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	e01c      	b.n	800344c <HAL_RCC_OscConfig+0x324>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0x30c>
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a5e      	ldr	r2, [pc, #376]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0x324>
 8003434:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a57      	ldr	r2, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	4b55      	ldr	r3, [pc, #340]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d015      	beq.n	8003480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7ff f912 	bl	800267c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7ff f90e 	bl	800267c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0cb      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	4b49      	ldr	r3, [pc, #292]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ee      	beq.n	800345c <HAL_RCC_OscConfig+0x334>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7ff f8fc 	bl	800267c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	e00a      	b.n	800349e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7ff f8f8 	bl	800267c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0b5      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	4b3e      	ldr	r3, [pc, #248]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ee      	bne.n	8003488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a1 	beq.w	8003608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d05c      	beq.n	800358c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d141      	bne.n	800355e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff f8cc 	bl	800267c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7ff f8c8 	bl	800267c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e087      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	3b01      	subs	r3, #1
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	491b      	ldr	r1, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7ff f8a1 	bl	800267c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353e:	f7ff f89d 	bl	800267c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e05c      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x416>
 800355c:	e054      	b.n	8003608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_OscConfig+0x478>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7ff f88a 	bl	800267c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7ff f886 	bl	800267c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e045      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_OscConfig+0x470>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x444>
 800358a:	e03d      	b.n	8003608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e038      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
 80035a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d028      	beq.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d121      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d11a      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	4293      	cmp	r3, r2
 80035de:	d111      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	3b01      	subs	r3, #1
 80035ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0cc      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90c      	bls.n	8003654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800368e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d044      	beq.n	8003738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d119      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e067      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4934      	ldr	r1, [pc, #208]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003708:	f7fe ffb8 	bl	800267c <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fe ffb4 	bl	800267c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d20c      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd ffb0 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08009aa0 	.word	0x08009aa0
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e8:	b090      	sub	sp, #64	; 0x40
 80037ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f4:	2300      	movs	r3, #0
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d00d      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 8003808:	2b08      	cmp	r3, #8
 800380a:	f200 80a1 	bhi.w	8003950 <HAL_RCC_GetSysClockFreq+0x16c>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x34>
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x3a>
 8003816:	e09b      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b53      	ldr	r3, [pc, #332]	; (8003968 <HAL_RCC_GetSysClockFreq+0x184>)
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800381c:	e09b      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800381e:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003822:	e098      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003824:	4b4f      	ldr	r3, [pc, #316]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800382e:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d028      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	627a      	str	r2, [r7, #36]	; 0x24
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800384c:	2100      	movs	r1, #0
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 8003850:	fb03 f201 	mul.w	r2, r3, r1
 8003854:	2300      	movs	r3, #0
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	4413      	add	r3, r2
 800385c:	4a43      	ldr	r2, [pc, #268]	; (800396c <HAL_RCC_GetSysClockFreq+0x188>)
 800385e:	fba0 1202 	umull	r1, r2, r0, r2
 8003862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003864:	460a      	mov	r2, r1
 8003866:	62ba      	str	r2, [r7, #40]	; 0x28
 8003868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386a:	4413      	add	r3, r2
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	2200      	movs	r2, #0
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	61fa      	str	r2, [r7, #28]
 8003876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800387e:	f7fc fcbf 	bl	8000200 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4613      	mov	r3, r2
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800388a:	e053      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	2200      	movs	r2, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	617a      	str	r2, [r7, #20]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800389e:	f04f 0b00 	mov.w	fp, #0
 80038a2:	4652      	mov	r2, sl
 80038a4:	465b      	mov	r3, fp
 80038a6:	f04f 0000 	mov.w	r0, #0
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	0159      	lsls	r1, r3, #5
 80038b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b4:	0150      	lsls	r0, r2, #5
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	ebb2 080a 	subs.w	r8, r2, sl
 80038be:	eb63 090b 	sbc.w	r9, r3, fp
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038d6:	ebb2 0408 	subs.w	r4, r2, r8
 80038da:	eb63 0509 	sbc.w	r5, r3, r9
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	00eb      	lsls	r3, r5, #3
 80038e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ec:	00e2      	lsls	r2, r4, #3
 80038ee:	4614      	mov	r4, r2
 80038f0:	461d      	mov	r5, r3
 80038f2:	eb14 030a 	adds.w	r3, r4, sl
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	eb45 030b 	adc.w	r3, r5, fp
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390a:	4629      	mov	r1, r5
 800390c:	028b      	lsls	r3, r1, #10
 800390e:	4621      	mov	r1, r4
 8003910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003914:	4621      	mov	r1, r4
 8003916:	028a      	lsls	r2, r1, #10
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391e:	2200      	movs	r2, #0
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	60fa      	str	r2, [r7, #12]
 8003924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003928:	f7fc fc6a 	bl	8000200 <__aeabi_uldivmod>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4613      	mov	r3, r2
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_GetSysClockFreq+0x180>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	3301      	adds	r3, #1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800394e:	e002      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetSysClockFreq+0x184>)
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003958:	4618      	mov	r0, r3
 800395a:	3740      	adds	r7, #64	; 0x40
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	00f42400 	.word	0x00f42400
 800396c:	017d7840 	.word	0x017d7840

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_RCC_GetHCLKFreq+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800398c:	f7ff fff0 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08009ab0 	.word	0x08009ab0

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039b4:	f7ff ffdc 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0b5b      	lsrs	r3, r3, #13
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08009ab0 	.word	0x08009ab0

080039d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	220f      	movs	r2, #15
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCC_GetClockConfig+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40023c00 	.word	0x40023c00

08003a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10b      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d075      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a70:	4b91      	ldr	r3, [pc, #580]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a76:	f7fe fe01 	bl	800267c <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a7e:	f7fe fdfd 	bl	800267c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e189      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a90:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	019a      	lsls	r2, r3, #6
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	071b      	lsls	r3, r3, #28
 8003ab4:	4981      	ldr	r1, [pc, #516]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01f      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac8:	4b7c      	ldr	r3, [pc, #496]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	071b      	lsls	r3, r3, #28
 8003ae8:	4974      	ldr	r1, [pc, #464]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af0:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af6:	f023 021f 	bic.w	r2, r3, #31
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	496e      	ldr	r1, [pc, #440]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	019a      	lsls	r2, r3, #6
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	071b      	lsls	r3, r3, #28
 8003b28:	4964      	ldr	r1, [pc, #400]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b30:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b36:	f7fe fda1 	bl	800267c <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b3e:	f7fe fd9d 	bl	800267c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e129      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d079      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b74:	4b52      	ldr	r3, [pc, #328]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7a:	f7fe fd7f 	bl	800267c <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b82:	f7fe fd7b 	bl	800267c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e107      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b94:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba0:	d0ef      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d020      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	0f1b      	lsrs	r3, r3, #28
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	019a      	lsls	r2, r3, #6
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	493b      	ldr	r1, [pc, #236]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	4934      	ldr	r1, [pc, #208]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	0e1b      	lsrs	r3, r3, #24
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	019a      	lsls	r2, r3, #6
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	071b      	lsls	r3, r3, #28
 8003c1c:	4927      	ldr	r1, [pc, #156]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	4922      	ldr	r1, [pc, #136]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fe fd1c 	bl	800267c <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c48:	f7fe fd18 	bl	800267c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0a4      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c66:	d1ef      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 808b 	beq.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a0f      	ldr	r2, [pc, #60]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9e:	f7fe fced 	bl	800267c <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ca4:	e010      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ca6:	f7fe fce9 	bl	800267c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d909      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e075      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003cb8:	42470068 	.word	0x42470068
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470070 	.word	0x42470070
 8003cc4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cc8:	4b38      	ldr	r3, [pc, #224]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0e8      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cdc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf2:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d02:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d08:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d0e:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d114      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fcaf 	bl	800267c <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe fcab 	bl	800267c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e035      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ee      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003d52:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d66:	4912      	ldr	r1, [pc, #72]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
 8003d6c:	e005      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d86:	490a      	ldr	r1, [pc, #40]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003da0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40007000 	.word	0x40007000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470e40 	.word	0x42470e40
 8003db8:	424711e0 	.word	0x424711e0

08003dbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e066      	b.n	8003ea0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7f5b      	ldrb	r3, [r3, #29]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fc48 	bl	8001678 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	22ca      	movs	r2, #202	; 0xca
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2253      	movs	r2, #83	; 0x53
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f87a 	bl	8003ef8 <RTC_EnterInitMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d12c      	bne.n	8003e68 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e20:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68d2      	ldr	r2, [r2, #12]
 8003e48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	041a      	lsls	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f881 	bl	8003f66 <RTC_ExitInitMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec4:	f7fe fbda 	bl	800267c <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003eca:	e009      	b.n	8003ee0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ecc:	f7fe fbd6 	bl	800267c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eda:	d901      	bls.n	8003ee0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e007      	b.n	8003ef0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ee      	beq.n	8003ecc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d122      	bne.n	8003f5c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fba9 	bl	800267c <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f2c:	e00c      	b.n	8003f48 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f2e:	f7fe fba5 	bl	800267c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3c:	d904      	bls.n	8003f48 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <RTC_EnterInitMode+0x64>
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d1e8      	bne.n	8003f2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f80:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff89 	bl	8003ea8 <HAL_RTC_WaitForSynchro>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e041      	b.n	8004046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd ffb6 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 ff42 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e04e      	b.n	8004106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_TIM_Base_Start_IT+0xc4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d022      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004092:	d01d      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_TIM_Base_Start_IT+0xc8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d018      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1e      	ldr	r2, [pc, #120]	; (800411c <HAL_TIM_Base_Start_IT+0xcc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_TIM_Base_Start_IT+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_TIM_Base_Start_IT+0xd8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIM_Base_Start_IT+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d111      	bne.n	80040f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d010      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f2:	e007      	b.n	8004104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40010400 	.word	0x40010400
 8004128:	40014000 	.word	0x40014000
 800412c:	40001800 	.word	0x40001800

08004130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e041      	b.n	80041c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f839 	bl	80041ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f000 fe82 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_TIM_PWM_Start+0x24>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e022      	b.n	800424e <HAL_TIM_PWM_Start+0x6a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d109      	bne.n	8004222 <HAL_TIM_PWM_Start+0x3e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e015      	b.n	800424e <HAL_TIM_PWM_Start+0x6a>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d109      	bne.n	800423c <HAL_TIM_PWM_Start+0x58>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e008      	b.n	800424e <HAL_TIM_PWM_Start+0x6a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07c      	b.n	8004350 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0x82>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	e013      	b.n	800428e <HAL_TIM_PWM_Start+0xaa>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d104      	bne.n	8004276 <HAL_TIM_PWM_Start+0x92>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	e00b      	b.n	800428e <HAL_TIM_PWM_Start+0xaa>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d104      	bne.n	8004286 <HAL_TIM_PWM_Start+0xa2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	e003      	b.n	800428e <HAL_TIM_PWM_Start+0xaa>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2201      	movs	r2, #1
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fa02 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <HAL_TIM_PWM_Start+0x174>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_TIM_PWM_Start+0xcc>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_TIM_PWM_Start+0x178>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <HAL_TIM_PWM_Start+0xd0>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_TIM_PWM_Start+0xd2>
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_TIM_PWM_Start+0x174>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d01d      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <HAL_TIM_PWM_Start+0x17c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_TIM_PWM_Start+0x180>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_TIM_PWM_Start+0x184>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIM_PWM_Start+0x178>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_TIM_PWM_Start+0x188>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIM_PWM_Start+0x136>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <HAL_TIM_PWM_Start+0x18c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d111      	bne.n	800433e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d010      	beq.n	800434e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433c:	e007      	b.n	800434e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40010000 	.word	0x40010000
 800435c:	40010400 	.word	0x40010400
 8004360:	40000400 	.word	0x40000400
 8004364:	40000800 	.word	0x40000800
 8004368:	40000c00 	.word	0x40000c00
 800436c:	40014000 	.word	0x40014000
 8004370:	40001800 	.word	0x40001800

08004374 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	6839      	ldr	r1, [r7, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f98a 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2e      	ldr	r2, [pc, #184]	; (800444c <HAL_TIM_PWM_Stop+0xd8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_PWM_Stop+0x2c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_TIM_PWM_Stop+0xdc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_PWM_Stop+0x30>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_PWM_Stop+0x32>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <HAL_TIM_PWM_Stop+0x66>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	f240 4344 	movw	r3, #1092	; 0x444
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_TIM_PWM_Stop+0x66>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_TIM_PWM_Stop+0x96>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	f240 4344 	movw	r3, #1092	; 0x444
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_TIM_PWM_Stop+0x96>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Stop+0xa6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	e013      	b.n	8004442 <HAL_TIM_PWM_Stop+0xce>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Stop+0xb6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	e00b      	b.n	8004442 <HAL_TIM_PWM_Stop+0xce>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d104      	bne.n	800443a <HAL_TIM_PWM_Stop+0xc6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	e003      	b.n	8004442 <HAL_TIM_PWM_Stop+0xce>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40010000 	.word	0x40010000
 8004450:	40010400 	.word	0x40010400

08004454 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f839 	bl	80044f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fcf0 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0x1e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e013      	b.n	800454e <HAL_TIM_IC_Start_IT+0x46>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0x2e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e00b      	b.n	800454e <HAL_TIM_IC_Start_IT+0x46>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0x3e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e003      	b.n	800454e <HAL_TIM_IC_Start_IT+0x46>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_TIM_IC_Start_IT+0x58>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e013      	b.n	8004588 <HAL_TIM_IC_Start_IT+0x80>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d104      	bne.n	8004570 <HAL_TIM_IC_Start_IT+0x68>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e00b      	b.n	8004588 <HAL_TIM_IC_Start_IT+0x80>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d104      	bne.n	8004580 <HAL_TIM_IC_Start_IT+0x78>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e003      	b.n	8004588 <HAL_TIM_IC_Start_IT+0x80>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004586:	b2db      	uxtb	r3, r3
 8004588:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d102      	bne.n	8004596 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004590:	7b7b      	ldrb	r3, [r7, #13]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0cc      	b.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <HAL_TIM_IC_Start_IT+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a8:	e013      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0xca>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_IC_Start_IT+0xb2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	e00b      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0xca>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d104      	bne.n	80045ca <HAL_TIM_IC_Start_IT+0xc2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	e003      	b.n	80045d2 <HAL_TIM_IC_Start_IT+0xca>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_IC_Start_IT+0xda>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e0:	e013      	b.n	800460a <HAL_TIM_IC_Start_IT+0x102>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_IC_Start_IT+0xea>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f0:	e00b      	b.n	800460a <HAL_TIM_IC_Start_IT+0x102>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_IC_Start_IT+0xfa>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	e003      	b.n	800460a <HAL_TIM_IC_Start_IT+0x102>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	d841      	bhi.n	8004694 <HAL_TIM_IC_Start_IT+0x18c>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <HAL_TIM_IC_Start_IT+0x110>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004695 	.word	0x08004695
 8004620:	08004695 	.word	0x08004695
 8004624:	08004695 	.word	0x08004695
 8004628:	0800465f 	.word	0x0800465f
 800462c:	08004695 	.word	0x08004695
 8004630:	08004695 	.word	0x08004695
 8004634:	08004695 	.word	0x08004695
 8004638:	08004671 	.word	0x08004671
 800463c:	08004695 	.word	0x08004695
 8004640:	08004695 	.word	0x08004695
 8004644:	08004695 	.word	0x08004695
 8004648:	08004683 	.word	0x08004683
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0202 	orr.w	r2, r2, #2
 800465a:	60da      	str	r2, [r3, #12]
      break;
 800465c:	e01d      	b.n	800469a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0204 	orr.w	r2, r2, #4
 800466c:	60da      	str	r2, [r3, #12]
      break;
 800466e:	e014      	b.n	800469a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	60da      	str	r2, [r3, #12]
      break;
 8004680:	e00b      	b.n	800469a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0210 	orr.w	r2, r2, #16
 8004690:	60da      	str	r2, [r3, #12]
      break;
 8004692:	e002      	b.n	800469a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      break;
 8004698:	bf00      	nop
  }

  if (status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d148      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	6839      	ldr	r1, [r7, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fff9 	bl	80056a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_TIM_IC_Start_IT+0x234>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01d      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_TIM_IC_Start_IT+0x238>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_TIM_IC_Start_IT+0x23c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <HAL_TIM_IC_Start_IT+0x240>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <HAL_TIM_IC_Start_IT+0x244>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_TIM_IC_Start_IT+0x248>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIM_IC_Start_IT+0x1f6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <HAL_TIM_IC_Start_IT+0x24c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d111      	bne.n	8004722 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d010      	beq.n	8004732 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	e007      	b.n	8004732 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0202 	mvn.w	r2, #2
 8004784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc f83a 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fb4a 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb51 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0204 	mvn.w	r2, #4
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc f810 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb20 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb27 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fb ffe6 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 faf6 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fafd 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b10      	cmp	r3, #16
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2208      	movs	r2, #8
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fb ffbc 	bl	8000814 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 facc 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fad3 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10e      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0201 	mvn.w	r2, #1
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fc18 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b80      	cmp	r3, #128	; 0x80
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 ff78 	bl	80057f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa98 	bl	8004e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b20      	cmp	r3, #32
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0220 	mvn.w	r2, #32
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 ff42 	bl	80057e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e088      	b.n	8004a98 <HAL_TIM_IC_ConfigChannel+0x130>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f000 fcb8 	bl	8005318 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 020c 	bic.w	r2, r2, #12
 80049b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6999      	ldr	r1, [r3, #24]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	619a      	str	r2, [r3, #24]
 80049ca:	e060      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d11c      	bne.n	8004a0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f000 fd3c 	bl	800545e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6999      	ldr	r1, [r3, #24]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	619a      	str	r2, [r3, #24]
 8004a0a:	e040      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11b      	bne.n	8004a4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f000 fd89 	bl	8005538 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 020c 	bic.w	r2, r2, #12
 8004a34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]
 8004a48:	e021      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d11c      	bne.n	8004a8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6819      	ldr	r1, [r3, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f000 fda6 	bl	80055b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69d9      	ldr	r1, [r3, #28]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	61da      	str	r2, [r3, #28]
 8004a88:	e001      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0ae      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	f200 809f 	bhi.w	8004c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004c0d 	.word	0x08004c0d
 8004adc:	08004c0d 	.word	0x08004c0d
 8004ae0:	08004c0d 	.word	0x08004c0d
 8004ae4:	08004b49 	.word	0x08004b49
 8004ae8:	08004c0d 	.word	0x08004c0d
 8004aec:	08004c0d 	.word	0x08004c0d
 8004af0:	08004c0d 	.word	0x08004c0d
 8004af4:	08004b8b 	.word	0x08004b8b
 8004af8:	08004c0d 	.word	0x08004c0d
 8004afc:	08004c0d 	.word	0x08004c0d
 8004b00:	08004c0d 	.word	0x08004c0d
 8004b04:	08004bcb 	.word	0x08004bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa52 	bl	8004fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6999      	ldr	r1, [r3, #24]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
      break;
 8004b46:	e064      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 faa2 	bl	8005098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
      break;
 8004b88:	e043      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 faf7 	bl	8005184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
      break;
 8004bc8:	e023      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb4b 	bl	800526c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	61da      	str	r2, [r3, #28]
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0x1c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e0b4      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x186>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	d03e      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	f200 8087 	bhi.w	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	f000 8086 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x172>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	d87f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b70      	cmp	r3, #112	; 0x70
 8004c92:	d01a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xa6>
 8004c94:	2b70      	cmp	r3, #112	; 0x70
 8004c96:	d87b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b60      	cmp	r3, #96	; 0x60
 8004c9a:	d050      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x11a>
 8004c9c:	2b60      	cmp	r3, #96	; 0x60
 8004c9e:	d877      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b50      	cmp	r3, #80	; 0x50
 8004ca2:	d03c      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ca4:	2b50      	cmp	r3, #80	; 0x50
 8004ca6:	d873      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d058      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x13a>
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d86f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b30      	cmp	r3, #48	; 0x30
 8004cb2:	d064      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b30      	cmp	r3, #48	; 0x30
 8004cb6:	d86b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d060      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d867      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d05c      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d05a      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	e062      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6899      	ldr	r1, [r3, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f000 fcc1 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
      break;
 8004cf6:	e04f      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f000 fcaa 	bl	8005660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1a:	609a      	str	r2, [r3, #8]
      break;
 8004d1c:	e03c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 fb68 	bl	8005400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2150      	movs	r1, #80	; 0x50
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fc77 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e02c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fbc4 	bl	80054d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2160      	movs	r1, #96	; 0x60
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc67 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e01c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 fb48 	bl	8005400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2140      	movs	r1, #64	; 0x40
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fc57 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e00c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 fc4e 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8004d8e:	e003      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e000      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d831      	bhi.n	8004e2c <HAL_TIM_ReadCapturedValue+0x78>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e2d 	.word	0x08004e2d
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e2d 	.word	0x08004e2d
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e2d 	.word	0x08004e2d
 8004e00:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	60fb      	str	r3, [r7, #12]

      break;
 8004e0c:	e00f      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	60fb      	str	r3, [r7, #12]

      break;
 8004e16:	e00a      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	60fb      	str	r3, [r7, #12]

      break;
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	60fb      	str	r3, [r7, #12]

      break;
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e2c:	bf00      	nop
  }

  return tmpreg;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3d      	ldr	r2, [pc, #244]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3c      	ldr	r2, [pc, #240]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3b      	ldr	r2, [pc, #236]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d027      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_Base_SetConfig+0x118>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d023      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_Base_SetConfig+0x11c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_Base_SetConfig+0x120>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <TIM_Base_SetConfig+0x128>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a27      	ldr	r2, [pc, #156]	; (8004fa4 <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <TIM_Base_SetConfig+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <TIM_Base_SetConfig+0x134>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <TIM_Base_SetConfig+0x138>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <TIM_Base_SetConfig+0x13c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <TIM_Base_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_Base_SetConfig+0xf8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <TIM_Base_SetConfig+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	40001800 	.word	0x40001800
 8004fb0:	40001c00 	.word	0x40001c00
 8004fb4:	40002000 	.word	0x40002000

08004fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0302 	bic.w	r3, r3, #2
 8005000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a20      	ldr	r2, [pc, #128]	; (8005090 <TIM_OC1_SetConfig+0xd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_OC1_SetConfig+0x64>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <TIM_OC1_SetConfig+0xdc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d10c      	bne.n	8005036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0308 	bic.w	r3, r3, #8
 8005022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f023 0304 	bic.w	r3, r3, #4
 8005034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a15      	ldr	r2, [pc, #84]	; (8005090 <TIM_OC1_SetConfig+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC1_SetConfig+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a14      	ldr	r2, [pc, #80]	; (8005094 <TIM_OC1_SetConfig+0xdc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800504c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40010000 	.word	0x40010000
 8005094:	40010400 	.word	0x40010400

08005098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0210 	bic.w	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0320 	bic.w	r3, r3, #32
 80050e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <TIM_OC2_SetConfig+0xe4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC2_SetConfig+0x68>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a21      	ldr	r2, [pc, #132]	; (8005180 <TIM_OC2_SetConfig+0xe8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10d      	bne.n	800511c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <TIM_OC2_SetConfig+0xe4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC2_SetConfig+0x94>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <TIM_OC2_SetConfig+0xe8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d113      	bne.n	8005154 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40010400 	.word	0x40010400

08005184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a21      	ldr	r2, [pc, #132]	; (8005264 <TIM_OC3_SetConfig+0xe0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_OC3_SetConfig+0x66>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a20      	ldr	r2, [pc, #128]	; (8005268 <TIM_OC3_SetConfig+0xe4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10d      	bne.n	8005206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC3_SetConfig+0xe0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_OC3_SetConfig+0x92>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC3_SetConfig+0xe4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d113      	bne.n	800523e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800521c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400

0800526c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a12      	ldr	r2, [pc, #72]	; (8005310 <TIM_OC4_SetConfig+0xa4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC4_SetConfig+0x68>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a11      	ldr	r2, [pc, #68]	; (8005314 <TIM_OC4_SetConfig+0xa8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <TIM_TI1_SetConfig+0xcc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01b      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d017      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <TIM_TI1_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <TIM_TI1_SetConfig+0xd4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00f      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_TI1_SetConfig+0xd8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00b      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <TIM_TI1_SetConfig+0xdc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a21      	ldr	r2, [pc, #132]	; (80053f8 <TIM_TI1_SetConfig+0xe0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_TI1_SetConfig+0x66>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a20      	ldr	r2, [pc, #128]	; (80053fc <TIM_TI1_SetConfig+0xe4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <TIM_TI1_SetConfig+0x6a>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <TIM_TI1_SetConfig+0x6c>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e003      	b.n	80053a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 030a 	and.w	r3, r3, #10
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40010400 	.word	0x40010400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40001800 	.word	0x40001800

08005400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f023 0210 	bic.w	r2, r3, #16
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0210 	bic.w	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005502:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005514:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 0303 	bic.w	r3, r3, #3
 8005564:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	b2db      	uxtb	r3, r3
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005588:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	031b      	lsls	r3, r3, #12
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005602:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	031b      	lsls	r3, r3, #12
 8005608:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	431a      	orrs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e05a      	b.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d022      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d01d      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d018      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1b      	ldr	r2, [pc, #108]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1a      	ldr	r2, [pc, #104]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d009      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10c      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800
 80057d4:	40000c00 	.word	0x40000c00
 80057d8:	40010400 	.word	0x40010400
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40001800 	.word	0x40001800

080057e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e03f      	b.n	800589e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fda0 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fddf 	bl	8006414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b08a      	sub	sp, #40	; 0x28
 80058aa:	af02      	add	r7, sp, #8
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d17c      	bne.n	80059c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_UART_Transmit+0x2c>
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e075      	b.n	80059c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit+0x3e>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e06e      	b.n	80059c2 <HAL_UART_Transmit+0x11c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2221      	movs	r2, #33	; 0x21
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fa:	f7fc febf 	bl	800267c <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d108      	bne.n	8005928 <HAL_UART_Transmit+0x82>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e003      	b.n	8005930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005938:	e02a      	b.n	8005990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fb1f 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e036      	b.n	80059c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3302      	adds	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e007      	b.n	8005982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cf      	bne.n	800593a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2140      	movs	r1, #64	; 0x40
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 faef 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e006      	b.n	80059c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e000      	b.n	80059c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	4613      	mov	r3, r2
 80059d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d11d      	bne.n	8005a20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Receive_IT+0x26>
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e016      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UART_Receive_IT+0x38>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e00f      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fb24 	bl	8006064 <UART_Start_Receive_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b0ba      	sub	sp, #232	; 0xe8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_UART_IRQHandler+0x66>
 8005a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fc07 	bl	800629e <UART_Receive_IT>
      return;
 8005a90:	e256      	b.n	8005f40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80de 	beq.w	8005c58 <HAL_UART_IRQHandler+0x22c>
 8005a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80d1 	beq.w	8005c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_UART_IRQHandler+0xae>
 8005ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <HAL_UART_IRQHandler+0xd2>
 8005ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <HAL_UART_IRQHandler+0xf6>
 8005b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f043 0204 	orr.w	r2, r3, #4
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <HAL_UART_IRQHandler+0x126>
 8005b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f043 0208 	orr.w	r2, r3, #8
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 81ed 	beq.w	8005f36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x14e>
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb92 	bl	800629e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x17a>
 8005b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d04f      	beq.n	8005c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa9a 	bl	80060e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d141      	bne.n	8005c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3314      	adds	r3, #20
 8005be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1d9      	bne.n	8005bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d013      	beq.n	8005c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	4a7d      	ldr	r2, [pc, #500]	; (8005e08 <HAL_UART_IRQHandler+0x3dc>)
 8005c14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fc fe8c 	bl	8002938 <HAL_DMA_Abort_IT>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c34:	e00e      	b.n	8005c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f990 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	e00a      	b.n	8005c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f98c 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	e006      	b.n	8005c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f988 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c52:	e170      	b.n	8005f36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	bf00      	nop
    return;
 8005c56:	e16e      	b.n	8005f36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 814a 	bne.w	8005ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8143 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 813c 	beq.w	8005ef6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	f040 80b4 	bne.w	8005e0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8140 	beq.w	8005f3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	f080 8139 	bcs.w	8005f3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cda:	f000 8088 	beq.w	8005dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1d9      	bne.n	8005cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e1      	bne.n	8005d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e3      	bne.n	8005d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbe:	f023 0310 	bic.w	r3, r3, #16
 8005dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e3      	bne.n	8005dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fc fd35 	bl	8002858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f8b6 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e04:	e099      	b.n	8005f3a <HAL_UART_IRQHandler+0x50e>
 8005e06:	bf00      	nop
 8005e08:	080061a7 	.word	0x080061a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 808b 	beq.w	8005f3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8086 	beq.w	8005f3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e56:	647a      	str	r2, [r7, #68]	; 0x44
 8005e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e3      	bne.n	8005e32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3314      	adds	r3, #20
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3314      	adds	r3, #20
 8005e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0310 	bic.w	r3, r3, #16
 8005ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e3      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f83e 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ef4:	e023      	b.n	8005f3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_UART_IRQHandler+0x4ea>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f95d 	bl	80061ce <UART_Transmit_IT>
    return;
 8005f14:	e014      	b.n	8005f40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <HAL_UART_IRQHandler+0x514>
 8005f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f99d 	bl	800626e <UART_EndTransmit_IT>
    return;
 8005f34:	e004      	b.n	8005f40 <HAL_UART_IRQHandler+0x514>
    return;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <HAL_UART_IRQHandler+0x514>
      return;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <HAL_UART_IRQHandler+0x514>
      return;
 8005f3e:	bf00      	nop
  }
}
 8005f40:	37e8      	adds	r7, #232	; 0xe8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop

08005f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b090      	sub	sp, #64	; 0x40
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	e050      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d04c      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa8:	f7fc fb68 	bl	800267c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d241      	bcs.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600c:	623a      	str	r2, [r7, #32]
 800600e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	61bb      	str	r3, [r7, #24]
   return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d09f      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2222      	movs	r2, #34	; 0x22
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0220 	orr.w	r2, r2, #32
 80060d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b095      	sub	sp, #84	; 0x54
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006108:	643a      	str	r2, [r7, #64]	; 0x40
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800610e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	61fb      	str	r3, [r7, #28]
   return(result);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	2b01      	cmp	r3, #1
 8006156:	d119      	bne.n	800618c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60bb      	str	r3, [r7, #8]
   return(result);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	647b      	str	r3, [r7, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006178:	61ba      	str	r2, [r7, #24]
 800617a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	613b      	str	r3, [r7, #16]
   return(result);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
}
 800619a:	bf00      	nop
 800619c:	3754      	adds	r7, #84	; 0x54
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fecb 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b21      	cmp	r3, #33	; 0x21
 80061e0:	d13e      	bne.n	8006260 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d114      	bne.n	8006216 <UART_Transmit_IT+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d110      	bne.n	8006216 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006208:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c9a      	adds	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]
 8006214:	e008      	b.n	8006228 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6211      	str	r1, [r2, #32]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29b      	uxth	r3, r3
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4619      	mov	r1, r3
 8006236:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10f      	bne.n	800625c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fe5a 	bl	8005f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b08c      	sub	sp, #48	; 0x30
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b22      	cmp	r3, #34	; 0x22
 80062b0:	f040 80ab 	bne.w	800640a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d117      	bne.n	80062ee <UART_Receive_IT+0x50>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d113      	bne.n	80062ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
 80062ec:	e026      	b.n	800633c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d007      	beq.n	8006312 <UART_Receive_IT+0x74>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <UART_Receive_IT+0x82>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e008      	b.n	8006332 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4619      	mov	r1, r3
 800634a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800634c:	2b00      	cmp	r3, #0
 800634e:	d15a      	bne.n	8006406 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0220 	bic.w	r2, r2, #32
 800635e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	2b01      	cmp	r3, #1
 800638e:	d135      	bne.n	80063fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	330c      	adds	r3, #12
 80063b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b6:	623a      	str	r2, [r7, #32]
 80063b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69f9      	ldr	r1, [r7, #28]
 80063bc:	6a3a      	ldr	r2, [r7, #32]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d10a      	bne.n	80063ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fdbb 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
 80063fa:	e002      	b.n	8006402 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fa f9c5 	bl	800078c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e002      	b.n	800640c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	; 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006418:	b0c0      	sub	sp, #256	; 0x100
 800641a:	af00      	add	r7, sp, #0
 800641c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	ea40 0301 	orr.w	r3, r0, r1
 800643c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	431a      	orrs	r2, r3
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	431a      	orrs	r2, r3
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800646c:	f021 010c 	bic.w	r1, r1, #12
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800647a:	430b      	orrs	r3, r1
 800647c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648e:	6999      	ldr	r1, [r3, #24]
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	ea40 0301 	orr.w	r3, r0, r1
 800649a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b8f      	ldr	r3, [pc, #572]	; (80066e0 <UART_SetConfig+0x2cc>)
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d005      	beq.n	80064b4 <UART_SetConfig+0xa0>
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b8d      	ldr	r3, [pc, #564]	; (80066e4 <UART_SetConfig+0x2d0>)
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d104      	bne.n	80064be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064b4:	f7fd fa7c 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 80064b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064bc:	e003      	b.n	80064c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064be:	f7fd fa63 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 80064c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d0:	f040 810c 	bne.w	80066ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	1891      	adds	r1, r2, r2
 80064ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80064ee:	415b      	adcs	r3, r3
 80064f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064f6:	4621      	mov	r1, r4
 80064f8:	eb12 0801 	adds.w	r8, r2, r1
 80064fc:	4629      	mov	r1, r5
 80064fe:	eb43 0901 	adc.w	r9, r3, r1
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800650e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006516:	4690      	mov	r8, r2
 8006518:	4699      	mov	r9, r3
 800651a:	4623      	mov	r3, r4
 800651c:	eb18 0303 	adds.w	r3, r8, r3
 8006520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006524:	462b      	mov	r3, r5
 8006526:	eb49 0303 	adc.w	r3, r9, r3
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800653a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800653e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006542:	460b      	mov	r3, r1
 8006544:	18db      	adds	r3, r3, r3
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	4613      	mov	r3, r2
 800654a:	eb42 0303 	adc.w	r3, r2, r3
 800654e:	657b      	str	r3, [r7, #84]	; 0x54
 8006550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006558:	f7f9 fe52 	bl	8000200 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <UART_SetConfig+0x2d4>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	011c      	lsls	r4, r3, #4
 800656a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	1891      	adds	r1, r2, r2
 8006582:	64b9      	str	r1, [r7, #72]	; 0x48
 8006584:	415b      	adcs	r3, r3
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800658c:	4641      	mov	r1, r8
 800658e:	eb12 0a01 	adds.w	sl, r2, r1
 8006592:	4649      	mov	r1, r9
 8006594:	eb43 0b01 	adc.w	fp, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ac:	4692      	mov	sl, r2
 80065ae:	469b      	mov	fp, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	eb1a 0303 	adds.w	r3, sl, r3
 80065b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ba:	464b      	mov	r3, r9
 80065bc:	eb4b 0303 	adc.w	r3, fp, r3
 80065c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	647b      	str	r3, [r7, #68]	; 0x44
 80065e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065ee:	f7f9 fe07 	bl	8000200 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <UART_SetConfig+0x2d4>)
 80065fa:	fba3 2301 	umull	r2, r3, r3, r1
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	2264      	movs	r2, #100	; 0x64
 8006602:	fb02 f303 	mul.w	r3, r2, r3
 8006606:	1acb      	subs	r3, r1, r3
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800660e:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <UART_SetConfig+0x2d4>)
 8006610:	fba3 2302 	umull	r2, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800661c:	441c      	add	r4, r3
 800661e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006622:	2200      	movs	r2, #0
 8006624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800662c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	1891      	adds	r1, r2, r2
 8006636:	63b9      	str	r1, [r7, #56]	; 0x38
 8006638:	415b      	adcs	r3, r3
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006640:	4641      	mov	r1, r8
 8006642:	1851      	adds	r1, r2, r1
 8006644:	6339      	str	r1, [r7, #48]	; 0x30
 8006646:	4649      	mov	r1, r9
 8006648:	414b      	adcs	r3, r1
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006658:	4659      	mov	r1, fp
 800665a:	00cb      	lsls	r3, r1, #3
 800665c:	4651      	mov	r1, sl
 800665e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006662:	4651      	mov	r1, sl
 8006664:	00ca      	lsls	r2, r1, #3
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	4603      	mov	r3, r0
 800666c:	4642      	mov	r2, r8
 800666e:	189b      	adds	r3, r3, r2
 8006670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006674:	464b      	mov	r3, r9
 8006676:	460a      	mov	r2, r1
 8006678:	eb42 0303 	adc.w	r3, r2, r3
 800667c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800668c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006694:	460b      	mov	r3, r1
 8006696:	18db      	adds	r3, r3, r3
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	4613      	mov	r3, r2
 800669c:	eb42 0303 	adc.w	r3, r2, r3
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066aa:	f7f9 fda9 	bl	8000200 <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <UART_SetConfig+0x2d4>)
 80066b4:	fba3 1302 	umull	r1, r3, r3, r2
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	2164      	movs	r1, #100	; 0x64
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	3332      	adds	r3, #50	; 0x32
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <UART_SetConfig+0x2d4>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f003 0207 	and.w	r2, r3, #7
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4422      	add	r2, r4
 80066da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066dc:	e105      	b.n	80068ea <UART_SetConfig+0x4d6>
 80066de:	bf00      	nop
 80066e0:	40011000 	.word	0x40011000
 80066e4:	40011400 	.word	0x40011400
 80066e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	1891      	adds	r1, r2, r2
 8006704:	6239      	str	r1, [r7, #32]
 8006706:	415b      	adcs	r3, r3
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670e:	4641      	mov	r1, r8
 8006710:	1854      	adds	r4, r2, r1
 8006712:	4649      	mov	r1, r9
 8006714:	eb43 0501 	adc.w	r5, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	00eb      	lsls	r3, r5, #3
 8006722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006726:	00e2      	lsls	r2, r4, #3
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
 800672c:	4643      	mov	r3, r8
 800672e:	18e3      	adds	r3, r4, r3
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006734:	464b      	mov	r3, r9
 8006736:	eb45 0303 	adc.w	r3, r5, r3
 800673a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800674a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800675a:	4629      	mov	r1, r5
 800675c:	008b      	lsls	r3, r1, #2
 800675e:	4621      	mov	r1, r4
 8006760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006764:	4621      	mov	r1, r4
 8006766:	008a      	lsls	r2, r1, #2
 8006768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800676c:	f7f9 fd48 	bl	8000200 <__aeabi_uldivmod>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006776:	fba3 2302 	umull	r2, r3, r3, r2
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	011c      	lsls	r4, r3, #4
 800677e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800678c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006790:	4642      	mov	r2, r8
 8006792:	464b      	mov	r3, r9
 8006794:	1891      	adds	r1, r2, r2
 8006796:	61b9      	str	r1, [r7, #24]
 8006798:	415b      	adcs	r3, r3
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a0:	4641      	mov	r1, r8
 80067a2:	1851      	adds	r1, r2, r1
 80067a4:	6139      	str	r1, [r7, #16]
 80067a6:	4649      	mov	r1, r9
 80067a8:	414b      	adcs	r3, r1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b8:	4659      	mov	r1, fp
 80067ba:	00cb      	lsls	r3, r1, #3
 80067bc:	4651      	mov	r1, sl
 80067be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c2:	4651      	mov	r1, sl
 80067c4:	00ca      	lsls	r2, r1, #3
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	4642      	mov	r2, r8
 80067ce:	189b      	adds	r3, r3, r2
 80067d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067d4:	464b      	mov	r3, r9
 80067d6:	460a      	mov	r2, r1
 80067d8:	eb42 0303 	adc.w	r3, r2, r3
 80067dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067f8:	4649      	mov	r1, r9
 80067fa:	008b      	lsls	r3, r1, #2
 80067fc:	4641      	mov	r1, r8
 80067fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006802:	4641      	mov	r1, r8
 8006804:	008a      	lsls	r2, r1, #2
 8006806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800680a:	f7f9 fcf9 	bl	8000200 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006814:	fba3 1302 	umull	r1, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	2164      	movs	r1, #100	; 0x64
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	3332      	adds	r3, #50	; 0x32
 8006826:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006832:	441c      	add	r4, r3
 8006834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006838:	2200      	movs	r2, #0
 800683a:	673b      	str	r3, [r7, #112]	; 0x70
 800683c:	677a      	str	r2, [r7, #116]	; 0x74
 800683e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006842:	4642      	mov	r2, r8
 8006844:	464b      	mov	r3, r9
 8006846:	1891      	adds	r1, r2, r2
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	415b      	adcs	r3, r3
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006852:	4641      	mov	r1, r8
 8006854:	1851      	adds	r1, r2, r1
 8006856:	6039      	str	r1, [r7, #0]
 8006858:	4649      	mov	r1, r9
 800685a:	414b      	adcs	r3, r1
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800686a:	4659      	mov	r1, fp
 800686c:	00cb      	lsls	r3, r1, #3
 800686e:	4651      	mov	r1, sl
 8006870:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006874:	4651      	mov	r1, sl
 8006876:	00ca      	lsls	r2, r1, #3
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	4603      	mov	r3, r0
 800687e:	4642      	mov	r2, r8
 8006880:	189b      	adds	r3, r3, r2
 8006882:	66bb      	str	r3, [r7, #104]	; 0x68
 8006884:	464b      	mov	r3, r9
 8006886:	460a      	mov	r2, r1
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	663b      	str	r3, [r7, #96]	; 0x60
 8006898:	667a      	str	r2, [r7, #100]	; 0x64
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068a6:	4649      	mov	r1, r9
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	4641      	mov	r1, r8
 80068ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b0:	4641      	mov	r1, r8
 80068b2:	008a      	lsls	r2, r1, #2
 80068b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068b8:	f7f9 fca2 	bl	8000200 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <UART_SetConfig+0x4e4>)
 80068c2:	fba3 1302 	umull	r1, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	2164      	movs	r1, #100	; 0x64
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	3332      	adds	r3, #50	; 0x32
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <UART_SetConfig+0x4e4>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4422      	add	r2, r4
 80068e8:	609a      	str	r2, [r3, #8]
}
 80068ea:	bf00      	nop
 80068ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068f0:	46bd      	mov	sp, r7
 80068f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f6:	bf00      	nop
 80068f8:	51eb851f 	.word	0x51eb851f

080068fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800690a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800690e:	2b84      	cmp	r3, #132	; 0x84
 8006910:	d005      	beq.n	800691e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	3303      	adds	r3, #3
 800691c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006930:	f001 f82a 	bl	8007988 <vTaskStartScheduler>
  
  return osOK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	bd80      	pop	{r7, pc}

0800693a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800693a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693c:	b089      	sub	sp, #36	; 0x24
 800693e:	af04      	add	r7, sp, #16
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d020      	beq.n	800698e <osThreadCreate+0x54>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01c      	beq.n	800698e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685c      	ldr	r4, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681d      	ldr	r5, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691e      	ldr	r6, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff ffc8 	bl	80068fc <makeFreeRtosPriority>
 800696c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006976:	9202      	str	r2, [sp, #8]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	9100      	str	r1, [sp, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4632      	mov	r2, r6
 8006980:	4629      	mov	r1, r5
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fe22 	bl	80075cc <xTaskCreateStatic>
 8006988:	4603      	mov	r3, r0
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e01c      	b.n	80069c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685c      	ldr	r4, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800699a:	b29e      	uxth	r6, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff ffaa 	bl	80068fc <makeFreeRtosPriority>
 80069a8:	4602      	mov	r2, r0
 80069aa:	f107 030c 	add.w	r3, r7, #12
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	9200      	str	r2, [sp, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	4632      	mov	r2, r6
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fe64 	bl	8007686 <xTaskCreate>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d001      	beq.n	80069c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069c8:	68fb      	ldr	r3, [r7, #12]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <osDelay+0x16>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	e000      	b.n	80069ea <osDelay+0x18>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 ff98 	bl	8007920 <vTaskDelay>
  
  return osOK;
 80069f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b086      	sub	sp, #24
 80069fe:	af02      	add	r7, sp, #8
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00f      	beq.n	8006a2c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10a      	bne.n	8006a28 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2203      	movs	r2, #3
 8006a18:	9200      	str	r2, [sp, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f000 f962 	bl	8006ce8 <xQueueGenericCreateStatic>
 8006a24:	4603      	mov	r3, r0
 8006a26:	e016      	b.n	8006a56 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e014      	b.n	8006a56 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d110      	bne.n	8006a54 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006a32:	2203      	movs	r2, #3
 8006a34:	2100      	movs	r1, #0
 8006a36:	2001      	movs	r0, #1
 8006a38:	f000 f9ce 	bl	8006dd8 <xQueueGenericCreate>
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <osSemaphoreCreate+0x56>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fa1e 	bl	8006e8c <xQueueGenericSend>
      return sema;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	e000      	b.n	8006a56 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006a54:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006a5e:	b590      	push	{r4, r7, lr}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af02      	add	r7, sp, #8
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d011      	beq.n	8006a94 <osMessageCreate+0x36>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00d      	beq.n	8006a94 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6859      	ldr	r1, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2400      	movs	r4, #0
 8006a8a:	9400      	str	r4, [sp, #0]
 8006a8c:	f000 f92c 	bl	8006ce8 <xQueueGenericCreateStatic>
 8006a90:	4603      	mov	r3, r0
 8006a92:	e008      	b.n	8006aa6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f000 f99a 	bl	8006dd8 <xQueueGenericCreate>
 8006aa4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd90      	pop	{r4, r7, pc}

08006aae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f103 0208 	add.w	r2, r3, #8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0208 	add.w	r2, r3, #8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f103 0208 	add.w	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
}
 8006b44:	bf00      	nop
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b66:	d103      	bne.n	8006b70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e00c      	b.n	8006b8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3308      	adds	r3, #8
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	e002      	b.n	8006b7e <vListInsert+0x2e>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d2f6      	bcs.n	8006b78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6892      	ldr	r2, [r2, #8]
 8006bd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6852      	ldr	r2, [r2, #4]
 8006be2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d103      	bne.n	8006bf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c42:	f001 fce7 	bl	8008614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c52:	fb01 f303 	mul.w	r3, r1, r3
 8006c56:	441a      	add	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	3b01      	subs	r3, #1
 8006c74:	68f9      	ldr	r1, [r7, #12]
 8006c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	441a      	add	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d114      	bne.n	8006cc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01a      	beq.n	8006cd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f8c1 	bl	8007e2c <xTaskRemoveFromEventList>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d012      	beq.n	8006cd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <xQueueGenericReset+0xcc>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e009      	b.n	8006cd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fef1 	bl	8006aae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3324      	adds	r3, #36	; 0x24
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff feec 	bl	8006aae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cd6:	f001 fccd 	bl	8008674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cda:	2301      	movs	r3, #1
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <xQueueGenericCreateStatic+0x52>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <xQueueGenericCreateStatic+0x56>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericCreateStatic+0x58>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	623b      	str	r3, [r7, #32]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <xQueueGenericCreateStatic+0x7e>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <xQueueGenericCreateStatic+0x82>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <xQueueGenericCreateStatic+0x84>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	61fb      	str	r3, [r7, #28]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d86:	2348      	movs	r3, #72	; 0x48
 8006d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b48      	cmp	r3, #72	; 0x48
 8006d8e:	d00a      	beq.n	8006da6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61bb      	str	r3, [r7, #24]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006da6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f83f 	bl	8006e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3730      	adds	r7, #48	; 0x30
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	613b      	str	r3, [r7, #16]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	fb02 f303 	mul.w	r3, r2, r3
 8006e0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3348      	adds	r3, #72	; 0x48
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 fd21 	bl	8008858 <pvPortMalloc>
 8006e16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3348      	adds	r3, #72	; 0x48
 8006e26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e30:	79fa      	ldrb	r2, [r7, #7]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4613      	mov	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f805 	bl	8006e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e42:	69bb      	ldr	r3, [r7, #24]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3720      	adds	r7, #32
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	69b8      	ldr	r0, [r7, #24]
 8006e7e:	f7ff fecb 	bl	8006c18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	; 0x38
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <xQueueGenericSend+0x32>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <xQueueGenericSend+0x40>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <xQueueGenericSend+0x44>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <xQueueGenericSend+0x46>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10a      	bne.n	8006eec <xQueueGenericSend+0x60>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x6e>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <xQueueGenericSend+0x72>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueGenericSend+0x74>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xQueueGenericSend+0x8e>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	623b      	str	r3, [r7, #32]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1a:	f001 f947 	bl	80081ac <xTaskGetSchedulerState>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xQueueGenericSend+0x9e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <xQueueGenericSend+0xa2>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueGenericSend+0xa4>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericSend+0xbe>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61fb      	str	r3, [r7, #28]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4a:	f001 fb63 	bl	8008614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <xQueueGenericSend+0xd4>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d129      	bne.n	8006fb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f66:	f000 fa37 	bl	80073d8 <prvCopyDataToQueue>
 8006f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	3324      	adds	r3, #36	; 0x24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 ff57 	bl	8007e2c <xTaskRemoveFromEventList>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f84:	4b3f      	ldr	r3, [pc, #252]	; (8007084 <xQueueGenericSend+0x1f8>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e00a      	b.n	8006fac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b39      	ldr	r3, [pc, #228]	; (8007084 <xQueueGenericSend+0x1f8>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fac:	f001 fb62 	bl	8008674 <vPortExitCritical>
				return pdPASS;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e063      	b.n	800707c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fba:	f001 fb5b 	bl	8008674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e05c      	b.n	800707c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ff8f 	bl	8007ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fd6:	f001 fb4d 	bl	8008674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fda:	f000 fd3f 	bl	8007a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fde:	f001 fb19 	bl	8008614 <vPortEnterCritical>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d103      	bne.n	8006ff8 <xQueueGenericSend+0x16c>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d103      	bne.n	800700e <xQueueGenericSend+0x182>
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800700e:	f001 fb31 	bl	8008674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f000 ff7e 	bl	8007f1c <xTaskCheckForTimeOut>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d124      	bne.n	8007070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007028:	f000 fab8 	bl	800759c <prvIsQueueFull>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d018      	beq.n	8007064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	3310      	adds	r3, #16
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fed2 	bl	8007de4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007042:	f000 fa59 	bl	80074f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007046:	f000 fd17 	bl	8007a78 <xTaskResumeAll>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f af7c 	bne.w	8006f4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <xQueueGenericSend+0x1f8>)
 8007054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	e772      	b.n	8006f4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007066:	f000 fa47 	bl	80074f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800706a:	f000 fd05 	bl	8007a78 <xTaskResumeAll>
 800706e:	e76c      	b.n	8006f4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007072:	f000 fa41 	bl	80074f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007076:	f000 fcff 	bl	8007a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800707a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800707c:	4618      	mov	r0, r3
 800707e:	3738      	adds	r7, #56	; 0x38
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b090      	sub	sp, #64	; 0x40
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <xQueueGenericSendFromISR+0x3c>
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <xQueueGenericSendFromISR+0x40>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <xQueueGenericSendFromISR+0x42>
 80070c8:	2300      	movs	r3, #0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d103      	bne.n	80070f2 <xQueueGenericSendFromISR+0x6a>
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <xQueueGenericSendFromISR+0x6e>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueGenericSendFromISR+0x70>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007112:	f001 fb61 	bl	80087d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007116:	f3ef 8211 	mrs	r2, BASEPRI
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	61fa      	str	r2, [r7, #28]
 800712c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800712e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	429a      	cmp	r2, r3
 800713c:	d302      	bcc.n	8007144 <xQueueGenericSendFromISR+0xbc>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b02      	cmp	r3, #2
 8007142:	d12f      	bne.n	80071a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800714a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800715a:	f000 f93d 	bl	80073d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800715e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d112      	bne.n	800718e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fe59 	bl	8007e2c <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00e      	beq.n	800719e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e007      	b.n	800719e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800718e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007192:	3301      	adds	r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	b25a      	sxtb	r2, r3
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800719e:	2301      	movs	r3, #1
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80071a2:	e001      	b.n	80071a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3740      	adds	r7, #64	; 0x40
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b08e      	sub	sp, #56	; 0x38
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	623b      	str	r3, [r7, #32]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <xQueueGiveFromISR+0x48>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61fb      	str	r3, [r7, #28]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <xQueueGiveFromISR+0x58>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <xQueueGiveFromISR+0x5c>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <xQueueGiveFromISR+0x5e>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	61bb      	str	r3, [r7, #24]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007236:	f001 facf 	bl	80087d8 <vPortValidateInterruptPriority>
	__asm volatile
 800723a:	f3ef 8211 	mrs	r2, BASEPRI
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617a      	str	r2, [r7, #20]
 8007250:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007252:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007262:	429a      	cmp	r2, r3
 8007264:	d22b      	bcs.n	80072be <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d112      	bne.n	80072a8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	3324      	adds	r3, #36	; 0x24
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fdcc 	bl	8007e2c <xTaskRemoveFromEventList>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00e      	beq.n	80072b8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e007      	b.n	80072b8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ac:	3301      	adds	r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	b25a      	sxtb	r2, r3
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
 80072bc:	e001      	b.n	80072c2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f383 8811 	msr	BASEPRI, r3
}
 80072cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3738      	adds	r7, #56	; 0x38
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	623b      	str	r3, [r7, #32]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <xQueueReceiveFromISR+0x3a>
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <xQueueReceiveFromISR+0x3e>
 8007312:	2301      	movs	r3, #1
 8007314:	e000      	b.n	8007318 <xQueueReceiveFromISR+0x40>
 8007316:	2300      	movs	r3, #0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	61fb      	str	r3, [r7, #28]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007332:	f001 fa51 	bl	80087d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007336:	f3ef 8211 	mrs	r2, BASEPRI
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	61ba      	str	r2, [r7, #24]
 800734c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800734e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	d02f      	beq.n	80073be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800736c:	f000 f89e 	bl	80074ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	1e5a      	subs	r2, r3, #1
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007378:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d112      	bne.n	80073a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	3310      	adds	r3, #16
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fd4c 	bl	8007e2c <xTaskRemoveFromEventList>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	e007      	b.n	80073b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ac:	3301      	adds	r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	b25a      	sxtb	r2, r3
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073b8:	2301      	movs	r3, #1
 80073ba:	637b      	str	r3, [r7, #52]	; 0x34
 80073bc:	e001      	b.n	80073c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f383 8811 	msr	BASEPRI, r3
}
 80073cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3738      	adds	r7, #56	; 0x38
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d14d      	bne.n	800749a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fef0 	bl	80081e8 <xTaskPriorityDisinherit>
 8007408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	e043      	b.n	800749a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d119      	bne.n	800744c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6858      	ldr	r0, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	461a      	mov	r2, r3
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	f001 fd25 	bl	8008e72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	d32b      	bcc.n	800749a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	e026      	b.n	800749a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68d8      	ldr	r0, [r3, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	461a      	mov	r2, r3
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	f001 fd0b 	bl	8008e72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	425b      	negs	r3, r3
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d207      	bcs.n	8007488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	425b      	negs	r3, r3
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d105      	bne.n	800749a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	3b01      	subs	r3, #1
 8007498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074a2:	697b      	ldr	r3, [r7, #20]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d018      	beq.n	80074f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	441a      	add	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d303      	bcc.n	80074e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68d9      	ldr	r1, [r3, #12]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	461a      	mov	r2, r3
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f001 fcc1 	bl	8008e72 <memcpy>
	}
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007500:	f001 f888 	bl	8008614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800750a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800750c:	e011      	b.n	8007532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d012      	beq.n	800753c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3324      	adds	r3, #36	; 0x24
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fc86 	bl	8007e2c <xTaskRemoveFromEventList>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007526:	f000 fd5b 	bl	8007fe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	3b01      	subs	r3, #1
 800752e:	b2db      	uxtb	r3, r3
 8007530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dce9      	bgt.n	800750e <prvUnlockQueue+0x16>
 800753a:	e000      	b.n	800753e <prvUnlockQueue+0x46>
					break;
 800753c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007546:	f001 f895 	bl	8008674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800754a:	f001 f863 	bl	8008614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007556:	e011      	b.n	800757c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d012      	beq.n	8007586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3310      	adds	r3, #16
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fc61 	bl	8007e2c <xTaskRemoveFromEventList>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007570:	f000 fd36 	bl	8007fe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	3b01      	subs	r3, #1
 8007578:	b2db      	uxtb	r3, r3
 800757a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800757c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dce9      	bgt.n	8007558 <prvUnlockQueue+0x60>
 8007584:	e000      	b.n	8007588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	22ff      	movs	r2, #255	; 0xff
 800758c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007590:	f001 f870 	bl	8008674 <vPortExitCritical>
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075a4:	f001 f836 	bl	8008614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d102      	bne.n	80075ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e001      	b.n	80075be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075be:	f001 f859 	bl	8008674 <vPortExitCritical>

	return xReturn;
 80075c2:	68fb      	ldr	r3, [r7, #12]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08e      	sub	sp, #56	; 0x38
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10a      	bne.n	80075f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	623b      	str	r3, [r7, #32]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xTaskCreateStatic+0x46>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	61fb      	str	r3, [r7, #28]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007612:	23b4      	movs	r3, #180	; 0xb4
 8007614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2bb4      	cmp	r3, #180	; 0xb4
 800761a:	d00a      	beq.n	8007632 <xTaskCreateStatic+0x66>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	61bb      	str	r3, [r7, #24]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01e      	beq.n	8007678 <xTaskCreateStatic+0xac>
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01b      	beq.n	8007678 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	2202      	movs	r2, #2
 800764e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007652:	2300      	movs	r3, #0
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	9302      	str	r3, [sp, #8]
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f850 	bl	8007710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007672:	f000 f8eb 	bl	800784c <prvAddNewTaskToReadyList>
 8007676:	e001      	b.n	800767c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800767c:	697b      	ldr	r3, [r7, #20]
	}
 800767e:	4618      	mov	r0, r3
 8007680:	3728      	adds	r7, #40	; 0x28
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007686:	b580      	push	{r7, lr}
 8007688:	b08c      	sub	sp, #48	; 0x30
 800768a:	af04      	add	r7, sp, #16
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4618      	mov	r0, r3
 800769c:	f001 f8dc 	bl	8008858 <pvPortMalloc>
 80076a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00e      	beq.n	80076c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076a8:	20b4      	movs	r0, #180	; 0xb4
 80076aa:	f001 f8d5 	bl	8008858 <pvPortMalloc>
 80076ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
 80076bc:	e005      	b.n	80076ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f001 f996 	bl	80089f0 <vPortFree>
 80076c4:	e001      	b.n	80076ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076d8:	88fa      	ldrh	r2, [r7, #6]
 80076da:	2300      	movs	r3, #0
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	9302      	str	r3, [sp, #8]
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 f80e 	bl	8007710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076f4:	69f8      	ldr	r0, [r7, #28]
 80076f6:	f000 f8a9 	bl	800784c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076fa:	2301      	movs	r3, #1
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	e002      	b.n	8007706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007700:	f04f 33ff 	mov.w	r3, #4294967295
 8007704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007706:	69bb      	ldr	r3, [r7, #24]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007728:	3b01      	subs	r3, #1
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	617b      	str	r3, [r7, #20]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01f      	beq.n	800779e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800775e:	2300      	movs	r3, #0
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e012      	b.n	800778a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	7819      	ldrb	r1, [r3, #0]
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	3334      	adds	r3, #52	; 0x34
 8007774:	460a      	mov	r2, r1
 8007776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3301      	adds	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b0f      	cmp	r3, #15
 800778e:	d9e9      	bls.n	8007764 <prvInitialiseNewTask+0x54>
 8007790:	e000      	b.n	8007794 <prvInitialiseNewTask+0x84>
			{
				break;
 8007792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800779c:	e003      	b.n	80077a6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	d901      	bls.n	80077b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077ac:	2306      	movs	r3, #6
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2200      	movs	r2, #0
 80077c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff f991 	bl	8006aee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	3318      	adds	r3, #24
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff f98c 	bl	8006aee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	f1c3 0207 	rsb	r2, r3, #7
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	334c      	adds	r3, #76	; 0x4c
 8007800:	2260      	movs	r2, #96	; 0x60
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f001 fb42 	bl	8008e8e <memset>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <prvInitialiseNewTask+0x130>)
 800780e:	651a      	str	r2, [r3, #80]	; 0x50
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <prvInitialiseNewTask+0x134>)
 8007814:	655a      	str	r2, [r3, #84]	; 0x54
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	4a0b      	ldr	r2, [pc, #44]	; (8007848 <prvInitialiseNewTask+0x138>)
 800781a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	69b8      	ldr	r0, [r7, #24]
 8007822:	f000 fdcd 	bl	80083c0 <pxPortInitialiseStack>
 8007826:	4602      	mov	r2, r0
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007838:	bf00      	nop
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	08009ad8 	.word	0x08009ad8
 8007844:	08009af8 	.word	0x08009af8
 8007848:	08009ab8 	.word	0x08009ab8

0800784c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007854:	f000 fede 	bl	8008614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007858:	4b2a      	ldr	r3, [pc, #168]	; (8007904 <prvAddNewTaskToReadyList+0xb8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a29      	ldr	r2, [pc, #164]	; (8007904 <prvAddNewTaskToReadyList+0xb8>)
 8007860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007862:	4b29      	ldr	r3, [pc, #164]	; (8007908 <prvAddNewTaskToReadyList+0xbc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800786a:	4a27      	ldr	r2, [pc, #156]	; (8007908 <prvAddNewTaskToReadyList+0xbc>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007870:	4b24      	ldr	r3, [pc, #144]	; (8007904 <prvAddNewTaskToReadyList+0xb8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d110      	bne.n	800789a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007878:	f000 fbd6 	bl	8008028 <prvInitialiseTaskLists>
 800787c:	e00d      	b.n	800789a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800787e:	4b23      	ldr	r3, [pc, #140]	; (800790c <prvAddNewTaskToReadyList+0xc0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007886:	4b20      	ldr	r3, [pc, #128]	; (8007908 <prvAddNewTaskToReadyList+0xbc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d802      	bhi.n	800789a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007894:	4a1c      	ldr	r2, [pc, #112]	; (8007908 <prvAddNewTaskToReadyList+0xbc>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <prvAddNewTaskToReadyList+0xc4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <prvAddNewTaskToReadyList+0xc4>)
 80078a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	4b19      	ldr	r3, [pc, #100]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <prvAddNewTaskToReadyList+0xc8>)
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4a15      	ldr	r2, [pc, #84]	; (8007918 <prvAddNewTaskToReadyList+0xcc>)
 80078c4:	441a      	add	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f7ff f91b 	bl	8006b08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078d2:	f000 fecf 	bl	8008674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <prvAddNewTaskToReadyList+0xc0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00e      	beq.n	80078fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <prvAddNewTaskToReadyList+0xbc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d207      	bcs.n	80078fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <prvAddNewTaskToReadyList+0xd0>)
 80078ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000810 	.word	0x20000810
 8007908:	20000710 	.word	0x20000710
 800790c:	2000081c 	.word	0x2000081c
 8007910:	2000082c 	.word	0x2000082c
 8007914:	20000818 	.word	0x20000818
 8007918:	20000714 	.word	0x20000714
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d017      	beq.n	8007962 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <vTaskDelay+0x60>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00a      	beq.n	8007950 <vTaskDelay+0x30>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	60bb      	str	r3, [r7, #8]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007950:	f000 f884 	bl	8007a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007954:	2100      	movs	r1, #0
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fccc 	bl	80082f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800795c:	f000 f88c 	bl	8007a78 <xTaskResumeAll>
 8007960:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d107      	bne.n	8007978 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <vTaskDelay+0x64>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000838 	.word	0x20000838
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007996:	463a      	mov	r2, r7
 8007998:	1d39      	adds	r1, r7, #4
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f8 fdb0 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	9202      	str	r2, [sp, #8]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	2300      	movs	r3, #0
 80079b4:	460a      	mov	r2, r1
 80079b6:	4921      	ldr	r1, [pc, #132]	; (8007a3c <vTaskStartScheduler+0xb4>)
 80079b8:	4821      	ldr	r0, [pc, #132]	; (8007a40 <vTaskStartScheduler+0xb8>)
 80079ba:	f7ff fe07 	bl	80075cc <xTaskCreateStatic>
 80079be:	4603      	mov	r3, r0
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <vTaskStartScheduler+0xbc>)
 80079c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079c4:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <vTaskStartScheduler+0xbc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e001      	b.n	80079d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d11b      	bne.n	8007a14 <vTaskStartScheduler+0x8c>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	613b      	str	r3, [r7, #16]
}
 80079ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079f0:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <vTaskStartScheduler+0xc0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	334c      	adds	r3, #76	; 0x4c
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <vTaskStartScheduler+0xc4>)
 80079f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <vTaskStartScheduler+0xc8>)
 80079fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a02:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <vTaskStartScheduler+0xcc>)
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a08:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <vTaskStartScheduler+0xd0>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a0e:	f000 fd5f 	bl	80084d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a12:	e00e      	b.n	8007a32 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d10a      	bne.n	8007a32 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60fb      	str	r3, [r7, #12]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <vTaskStartScheduler+0xa8>
}
 8007a32:	bf00      	nop
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08009a98 	.word	0x08009a98
 8007a40:	08007ff9 	.word	0x08007ff9
 8007a44:	20000834 	.word	0x20000834
 8007a48:	20000710 	.word	0x20000710
 8007a4c:	20000010 	.word	0x20000010
 8007a50:	20000830 	.word	0x20000830
 8007a54:	2000081c 	.word	0x2000081c
 8007a58:	20000814 	.word	0x20000814

08007a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a60:	4b04      	ldr	r3, [pc, #16]	; (8007a74 <vTaskSuspendAll+0x18>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a03      	ldr	r2, [pc, #12]	; (8007a74 <vTaskSuspendAll+0x18>)
 8007a68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a6a:	bf00      	nop
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20000838 	.word	0x20000838

08007a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <xTaskResumeAll+0x114>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	603b      	str	r3, [r7, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007aa4:	f000 fdb6 	bl	8008614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007aa8:	4b38      	ldr	r3, [pc, #224]	; (8007b8c <xTaskResumeAll+0x114>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a37      	ldr	r2, [pc, #220]	; (8007b8c <xTaskResumeAll+0x114>)
 8007ab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ab2:	4b36      	ldr	r3, [pc, #216]	; (8007b8c <xTaskResumeAll+0x114>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d161      	bne.n	8007b7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aba:	4b35      	ldr	r3, [pc, #212]	; (8007b90 <xTaskResumeAll+0x118>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d05d      	beq.n	8007b7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ac2:	e02e      	b.n	8007b22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac4:	4b33      	ldr	r3, [pc, #204]	; (8007b94 <xTaskResumeAll+0x11c>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff f876 	bl	8006bc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff f871 	bl	8006bc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <xTaskResumeAll+0x120>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <xTaskResumeAll+0x120>)
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4a27      	ldr	r2, [pc, #156]	; (8007b9c <xTaskResumeAll+0x124>)
 8007b00:	441a      	add	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3304      	adds	r3, #4
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7fe fffd 	bl	8006b08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b12:	4b23      	ldr	r3, [pc, #140]	; (8007ba0 <xTaskResumeAll+0x128>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <xTaskResumeAll+0x12c>)
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b22:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <xTaskResumeAll+0x11c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1cc      	bne.n	8007ac4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b30:	f000 fb1c 	bl	800816c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b34:	4b1c      	ldr	r3, [pc, #112]	; (8007ba8 <xTaskResumeAll+0x130>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b40:	f000 f836 	bl	8007bb0 <xTaskIncrementTick>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b4a:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <xTaskResumeAll+0x12c>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f1      	bne.n	8007b40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b5c:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <xTaskResumeAll+0x130>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b62:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <xTaskResumeAll+0x12c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b6e:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <xTaskResumeAll+0x134>)
 8007b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b7e:	f000 fd79 	bl	8008674 <vPortExitCritical>

	return xAlreadyYielded;
 8007b82:	68bb      	ldr	r3, [r7, #8]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000838 	.word	0x20000838
 8007b90:	20000810 	.word	0x20000810
 8007b94:	200007d0 	.word	0x200007d0
 8007b98:	20000818 	.word	0x20000818
 8007b9c:	20000714 	.word	0x20000714
 8007ba0:	20000710 	.word	0x20000710
 8007ba4:	20000824 	.word	0x20000824
 8007ba8:	20000820 	.word	0x20000820
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bba:	4b4e      	ldr	r3, [pc, #312]	; (8007cf4 <xTaskIncrementTick+0x144>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f040 808e 	bne.w	8007ce0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bc4:	4b4c      	ldr	r3, [pc, #304]	; (8007cf8 <xTaskIncrementTick+0x148>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bcc:	4a4a      	ldr	r2, [pc, #296]	; (8007cf8 <xTaskIncrementTick+0x148>)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d120      	bne.n	8007c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bd8:	4b48      	ldr	r3, [pc, #288]	; (8007cfc <xTaskIncrementTick+0x14c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	603b      	str	r3, [r7, #0]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <xTaskIncrementTick+0x46>
 8007bf8:	4b40      	ldr	r3, [pc, #256]	; (8007cfc <xTaskIncrementTick+0x14c>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	4b40      	ldr	r3, [pc, #256]	; (8007d00 <xTaskIncrementTick+0x150>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a3e      	ldr	r2, [pc, #248]	; (8007cfc <xTaskIncrementTick+0x14c>)
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4a3e      	ldr	r2, [pc, #248]	; (8007d00 <xTaskIncrementTick+0x150>)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b3d      	ldr	r3, [pc, #244]	; (8007d04 <xTaskIncrementTick+0x154>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <xTaskIncrementTick+0x154>)
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	f000 faa9 	bl	800816c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c1a:	4b3b      	ldr	r3, [pc, #236]	; (8007d08 <xTaskIncrementTick+0x158>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d348      	bcc.n	8007cb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c24:	4b35      	ldr	r3, [pc, #212]	; (8007cfc <xTaskIncrementTick+0x14c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <xTaskIncrementTick+0x158>)
 8007c30:	f04f 32ff 	mov.w	r2, #4294967295
 8007c34:	601a      	str	r2, [r3, #0]
					break;
 8007c36:	e03e      	b.n	8007cb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c38:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <xTaskIncrementTick+0x14c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d203      	bcs.n	8007c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c50:	4a2d      	ldr	r2, [pc, #180]	; (8007d08 <xTaskIncrementTick+0x158>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c56:	e02e      	b.n	8007cb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe ffb0 	bl	8006bc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	3318      	adds	r3, #24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe ffa7 	bl	8006bc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	4b23      	ldr	r3, [pc, #140]	; (8007d0c <xTaskIncrementTick+0x15c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <xTaskIncrementTick+0x15c>)
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <xTaskIncrementTick+0x160>)
 8007c94:	441a      	add	r2, r3
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7fe ff33 	bl	8006b08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <xTaskIncrementTick+0x164>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3b9      	bcc.n	8007c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb4:	e7b6      	b.n	8007c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <xTaskIncrementTick+0x164>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	4914      	ldr	r1, [pc, #80]	; (8007d10 <xTaskIncrementTick+0x160>)
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d901      	bls.n	8007cd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <xTaskIncrementTick+0x168>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e004      	b.n	8007cea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ce0:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <xTaskIncrementTick+0x16c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <xTaskIncrementTick+0x16c>)
 8007ce8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cea:	697b      	ldr	r3, [r7, #20]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000838 	.word	0x20000838
 8007cf8:	20000814 	.word	0x20000814
 8007cfc:	200007c8 	.word	0x200007c8
 8007d00:	200007cc 	.word	0x200007cc
 8007d04:	20000828 	.word	0x20000828
 8007d08:	20000830 	.word	0x20000830
 8007d0c:	20000818 	.word	0x20000818
 8007d10:	20000714 	.word	0x20000714
 8007d14:	20000710 	.word	0x20000710
 8007d18:	20000824 	.word	0x20000824
 8007d1c:	20000820 	.word	0x20000820

08007d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d26:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <vTaskSwitchContext+0xac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d2e:	4b28      	ldr	r3, [pc, #160]	; (8007dd0 <vTaskSwitchContext+0xb0>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d34:	e044      	b.n	8007dc0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007d36:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <vTaskSwitchContext+0xb0>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <vTaskSwitchContext+0xb4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	fab3 f383 	clz	r3, r3
 8007d48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	f1c3 031f 	rsb	r3, r3, #31
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	4921      	ldr	r1, [pc, #132]	; (8007dd8 <vTaskSwitchContext+0xb8>)
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	607b      	str	r3, [r7, #4]
}
 8007d78:	bf00      	nop
 8007d7a:	e7fe      	b.n	8007d7a <vTaskSwitchContext+0x5a>
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <vTaskSwitchContext+0xb8>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d104      	bne.n	8007dac <vTaskSwitchContext+0x8c>
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	605a      	str	r2, [r3, #4]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <vTaskSwitchContext+0xbc>)
 8007db4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <vTaskSwitchContext+0xbc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	334c      	adds	r3, #76	; 0x4c
 8007dbc:	4a08      	ldr	r2, [pc, #32]	; (8007de0 <vTaskSwitchContext+0xc0>)
 8007dbe:	6013      	str	r3, [r2, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	20000838 	.word	0x20000838
 8007dd0:	20000824 	.word	0x20000824
 8007dd4:	20000818 	.word	0x20000818
 8007dd8:	20000714 	.word	0x20000714
 8007ddc:	20000710 	.word	0x20000710
 8007de0:	20000010 	.word	0x20000010

08007de4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	60fb      	str	r3, [r7, #12]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <vTaskPlaceOnEventList+0x44>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3318      	adds	r3, #24
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fe fe9c 	bl	8006b50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f000 fa6a 	bl	80082f4 <prvAddCurrentTaskToDelayedList>
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000710 	.word	0x20000710

08007e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe feb0 	bl	8006bc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <xTaskRemoveFromEventList+0xac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d11c      	bne.n	8007ea4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fea7 	bl	8006bc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	2201      	movs	r2, #1
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <xTaskRemoveFromEventList+0xb0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	4a16      	ldr	r2, [pc, #88]	; (8007edc <xTaskRemoveFromEventList+0xb0>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <xTaskRemoveFromEventList+0xb4>)
 8007e94:	441a      	add	r2, r3
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fe fe33 	bl	8006b08 <vListInsertEnd>
 8007ea2:	e005      	b.n	8007eb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	480e      	ldr	r0, [pc, #56]	; (8007ee4 <xTaskRemoveFromEventList+0xb8>)
 8007eac:	f7fe fe2c 	bl	8006b08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <xTaskRemoveFromEventList+0xbc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d905      	bls.n	8007eca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <xTaskRemoveFromEventList+0xc0>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e001      	b.n	8007ece <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ece:	697b      	ldr	r3, [r7, #20]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000838 	.word	0x20000838
 8007edc:	20000818 	.word	0x20000818
 8007ee0:	20000714 	.word	0x20000714
 8007ee4:	200007d0 	.word	0x200007d0
 8007ee8:	20000710 	.word	0x20000710
 8007eec:	20000824 	.word	0x20000824

08007ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <vTaskInternalSetTimeOutState+0x24>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f00:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <vTaskInternalSetTimeOutState+0x28>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	605a      	str	r2, [r3, #4]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	20000828 	.word	0x20000828
 8007f18:	20000814 	.word	0x20000814

08007f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	613b      	str	r3, [r7, #16]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60fb      	str	r3, [r7, #12]
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f5e:	f000 fb59 	bl	8008614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f62:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <xTaskCheckForTimeOut+0xbc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7a:	d102      	bne.n	8007f82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e023      	b.n	8007fca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <xTaskCheckForTimeOut+0xc0>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d007      	beq.n	8007f9e <xTaskCheckForTimeOut+0x82>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d302      	bcc.n	8007f9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e015      	b.n	8007fca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d20b      	bcs.n	8007fc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff ff9b 	bl	8007ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e004      	b.n	8007fca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fca:	f000 fb53 	bl	8008674 <vPortExitCritical>

	return xReturn;
 8007fce:	69fb      	ldr	r3, [r7, #28]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000814 	.word	0x20000814
 8007fdc:	20000828 	.word	0x20000828

08007fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fe4:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <vTaskMissedYield+0x14>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000824 	.word	0x20000824

08007ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008000:	f000 f852 	bl	80080a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <prvIdleTask+0x28>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d9f9      	bls.n	8008000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <prvIdleTask+0x2c>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800801c:	e7f0      	b.n	8008000 <prvIdleTask+0x8>
 800801e:	bf00      	nop
 8008020:	20000714 	.word	0x20000714
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800802e:	2300      	movs	r3, #0
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	e00c      	b.n	800804e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a12      	ldr	r2, [pc, #72]	; (8008088 <prvInitialiseTaskLists+0x60>)
 8008040:	4413      	add	r3, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fd33 	bl	8006aae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b06      	cmp	r3, #6
 8008052:	d9ef      	bls.n	8008034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008054:	480d      	ldr	r0, [pc, #52]	; (800808c <prvInitialiseTaskLists+0x64>)
 8008056:	f7fe fd2a 	bl	8006aae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800805a:	480d      	ldr	r0, [pc, #52]	; (8008090 <prvInitialiseTaskLists+0x68>)
 800805c:	f7fe fd27 	bl	8006aae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008060:	480c      	ldr	r0, [pc, #48]	; (8008094 <prvInitialiseTaskLists+0x6c>)
 8008062:	f7fe fd24 	bl	8006aae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008066:	480c      	ldr	r0, [pc, #48]	; (8008098 <prvInitialiseTaskLists+0x70>)
 8008068:	f7fe fd21 	bl	8006aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800806c:	480b      	ldr	r0, [pc, #44]	; (800809c <prvInitialiseTaskLists+0x74>)
 800806e:	f7fe fd1e 	bl	8006aae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008072:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <prvInitialiseTaskLists+0x78>)
 8008074:	4a05      	ldr	r2, [pc, #20]	; (800808c <prvInitialiseTaskLists+0x64>)
 8008076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvInitialiseTaskLists+0x7c>)
 800807a:	4a05      	ldr	r2, [pc, #20]	; (8008090 <prvInitialiseTaskLists+0x68>)
 800807c:	601a      	str	r2, [r3, #0]
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000714 	.word	0x20000714
 800808c:	200007a0 	.word	0x200007a0
 8008090:	200007b4 	.word	0x200007b4
 8008094:	200007d0 	.word	0x200007d0
 8008098:	200007e4 	.word	0x200007e4
 800809c:	200007fc 	.word	0x200007fc
 80080a0:	200007c8 	.word	0x200007c8
 80080a4:	200007cc 	.word	0x200007cc

080080a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ae:	e019      	b.n	80080e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080b0:	f000 fab0 	bl	8008614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b4:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <prvCheckTasksWaitingTermination+0x50>)
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe fd7e 	bl	8006bc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <prvCheckTasksWaitingTermination+0x54>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	4a0b      	ldr	r2, [pc, #44]	; (80080fc <prvCheckTasksWaitingTermination+0x54>)
 80080ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080da:	f000 facb 	bl	8008674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f810 	bl	8008104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e1      	bne.n	80080b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200007e4 	.word	0x200007e4
 80080fc:	20000810 	.word	0x20000810
 8008100:	200007f8 	.word	0x200007f8

08008104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	334c      	adds	r3, #76	; 0x4c
 8008110:	4618      	mov	r0, r3
 8008112:	f000 ffdd 	bl	80090d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fc63 	bl	80089f0 <vPortFree>
				vPortFree( pxTCB );
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc60 	bl	80089f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008130:	e018      	b.n	8008164 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d103      	bne.n	8008144 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fc57 	bl	80089f0 <vPortFree>
	}
 8008142:	e00f      	b.n	8008164 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800814a:	2b02      	cmp	r3, #2
 800814c:	d00a      	beq.n	8008164 <prvDeleteTCB+0x60>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <prvDeleteTCB+0x5e>
	}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008172:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <prvResetNextTaskUnblockTime+0x38>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <prvResetNextTaskUnblockTime+0x3c>)
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008184:	e008      	b.n	8008198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <prvResetNextTaskUnblockTime+0x38>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4a04      	ldr	r2, [pc, #16]	; (80081a8 <prvResetNextTaskUnblockTime+0x3c>)
 8008196:	6013      	str	r3, [r2, #0]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	200007c8 	.word	0x200007c8
 80081a8:	20000830 	.word	0x20000830

080081ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <xTaskGetSchedulerState+0x34>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081ba:	2301      	movs	r3, #1
 80081bc:	607b      	str	r3, [r7, #4]
 80081be:	e008      	b.n	80081d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081c0:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <xTaskGetSchedulerState+0x38>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081c8:	2302      	movs	r3, #2
 80081ca:	607b      	str	r3, [r7, #4]
 80081cc:	e001      	b.n	80081d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ce:	2300      	movs	r3, #0
 80081d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081d2:	687b      	ldr	r3, [r7, #4]
	}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	2000081c 	.word	0x2000081c
 80081e4:	20000838 	.word	0x20000838

080081e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d06e      	beq.n	80082dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081fe:	4b3a      	ldr	r3, [pc, #232]	; (80082e8 <xTaskPriorityDisinherit+0x100>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	429a      	cmp	r2, r3
 8008206:	d00a      	beq.n	800821e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	60fb      	str	r3, [r7, #12]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	60bb      	str	r3, [r7, #8]
}
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008240:	1e5a      	subs	r2, r3, #1
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824e:	429a      	cmp	r2, r3
 8008250:	d044      	beq.n	80082dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008256:	2b00      	cmp	r3, #0
 8008258:	d140      	bne.n	80082dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fcaf 	bl	8006bc2 <uxListRemove>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d115      	bne.n	8008296 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826e:	491f      	ldr	r1, [pc, #124]	; (80082ec <xTaskPriorityDisinherit+0x104>)
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xTaskPriorityDisinherit+0xae>
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2201      	movs	r2, #1
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43da      	mvns	r2, r3
 800828c:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <xTaskPriorityDisinherit+0x108>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4013      	ands	r3, r2
 8008292:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <xTaskPriorityDisinherit+0x108>)
 8008294:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	f1c3 0207 	rsb	r2, r3, #7
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	2201      	movs	r2, #1
 80082b0:	409a      	lsls	r2, r3
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <xTaskPriorityDisinherit+0x108>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <xTaskPriorityDisinherit+0x108>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <xTaskPriorityDisinherit+0x104>)
 80082ca:	441a      	add	r2, r3
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7fe fc18 	bl	8006b08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082dc:	697b      	ldr	r3, [r7, #20]
	}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000710 	.word	0x20000710
 80082ec:	20000714 	.word	0x20000714
 80082f0:	20000818 	.word	0x20000818

080082f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082fe:	4b29      	ldr	r3, [pc, #164]	; (80083a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008304:	4b28      	ldr	r3, [pc, #160]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3304      	adds	r3, #4
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fc59 	bl	8006bc2 <uxListRemove>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	2201      	movs	r2, #1
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	43da      	mvns	r2, r3
 8008324:	4b21      	ldr	r3, [pc, #132]	; (80083ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4013      	ands	r3, r2
 800832a:	4a20      	ldr	r2, [pc, #128]	; (80083ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800832c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d10a      	bne.n	800834c <prvAddCurrentTaskToDelayedList+0x58>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	481a      	ldr	r0, [pc, #104]	; (80083b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008346:	f7fe fbdf 	bl	8006b08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800834a:	e026      	b.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008354:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	429a      	cmp	r2, r3
 8008362:	d209      	bcs.n	8008378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008364:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3304      	adds	r3, #4
 800836e:	4619      	mov	r1, r3
 8008370:	4610      	mov	r0, r2
 8008372:	f7fe fbed 	bl	8006b50 <vListInsert>
}
 8008376:	e010      	b.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008378:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3304      	adds	r3, #4
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7fe fbe3 	bl	8006b50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d202      	bcs.n	800839a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008394:	4a09      	ldr	r2, [pc, #36]	; (80083bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6013      	str	r3, [r2, #0]
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000814 	.word	0x20000814
 80083a8:	20000710 	.word	0x20000710
 80083ac:	20000818 	.word	0x20000818
 80083b0:	200007fc 	.word	0x200007fc
 80083b4:	200007cc 	.word	0x200007cc
 80083b8:	200007c8 	.word	0x200007c8
 80083bc:	20000830 	.word	0x20000830

080083c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3b04      	subs	r3, #4
 80083d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3b04      	subs	r3, #4
 80083de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 0201 	bic.w	r2, r3, #1
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3b04      	subs	r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083f0:	4a0c      	ldr	r2, [pc, #48]	; (8008424 <pxPortInitialiseStack+0x64>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3b14      	subs	r3, #20
 80083fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3b04      	subs	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f06f 0202 	mvn.w	r2, #2
 800840e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3b20      	subs	r3, #32
 8008414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	08008429 	.word	0x08008429

08008428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008432:	4b12      	ldr	r3, [pc, #72]	; (800847c <prvTaskExitError+0x54>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843a:	d00a      	beq.n	8008452 <prvTaskExitError+0x2a>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <prvTaskExitError+0x28>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	60bb      	str	r3, [r7, #8]
}
 8008464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008466:	bf00      	nop
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0fc      	beq.n	8008468 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	2000000c 	.word	0x2000000c

08008480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <pxCurrentTCBConst2>)
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	6808      	ldr	r0, [r1, #0]
 8008486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	f380 8809 	msr	PSP, r0
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	4770      	bx	lr
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst2>:
 80084a0:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084a8:	4808      	ldr	r0, [pc, #32]	; (80084cc <prvPortStartFirstTask+0x24>)
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	6800      	ldr	r0, [r0, #0]
 80084ae:	f380 8808 	msr	MSP, r0
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8814 	msr	CONTROL, r0
 80084ba:	b662      	cpsie	i
 80084bc:	b661      	cpsie	f
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	df00      	svc	0
 80084c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ca:	bf00      	nop
 80084cc:	e000ed08 	.word	0xe000ed08

080084d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084d6:	4b46      	ldr	r3, [pc, #280]	; (80085f0 <xPortStartScheduler+0x120>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a46      	ldr	r2, [pc, #280]	; (80085f4 <xPortStartScheduler+0x124>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10a      	bne.n	80084f6 <xPortStartScheduler+0x26>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	613b      	str	r3, [r7, #16]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084f6:	4b3e      	ldr	r3, [pc, #248]	; (80085f0 <xPortStartScheduler+0x120>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a3f      	ldr	r2, [pc, #252]	; (80085f8 <xPortStartScheduler+0x128>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10a      	bne.n	8008516 <xPortStartScheduler+0x46>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008516:	4b39      	ldr	r3, [pc, #228]	; (80085fc <xPortStartScheduler+0x12c>)
 8008518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	22ff      	movs	r2, #255	; 0xff
 8008526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008538:	b2da      	uxtb	r2, r3
 800853a:	4b31      	ldr	r3, [pc, #196]	; (8008600 <xPortStartScheduler+0x130>)
 800853c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800853e:	4b31      	ldr	r3, [pc, #196]	; (8008604 <xPortStartScheduler+0x134>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008544:	e009      	b.n	800855a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008546:	4b2f      	ldr	r3, [pc, #188]	; (8008604 <xPortStartScheduler+0x134>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3b01      	subs	r3, #1
 800854c:	4a2d      	ldr	r2, [pc, #180]	; (8008604 <xPortStartScheduler+0x134>)
 800854e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	b2db      	uxtb	r3, r3
 8008558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d0ef      	beq.n	8008546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008566:	4b27      	ldr	r3, [pc, #156]	; (8008604 <xPortStartScheduler+0x134>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1c3 0307 	rsb	r3, r3, #7
 800856e:	2b04      	cmp	r3, #4
 8008570:	d00a      	beq.n	8008588 <xPortStartScheduler+0xb8>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60bb      	str	r3, [r7, #8]
}
 8008584:	bf00      	nop
 8008586:	e7fe      	b.n	8008586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008588:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <xPortStartScheduler+0x134>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	021b      	lsls	r3, r3, #8
 800858e:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <xPortStartScheduler+0x134>)
 8008590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <xPortStartScheduler+0x134>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800859a:	4a1a      	ldr	r2, [pc, #104]	; (8008604 <xPortStartScheduler+0x134>)
 800859c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085a6:	4b18      	ldr	r3, [pc, #96]	; (8008608 <xPortStartScheduler+0x138>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <xPortStartScheduler+0x138>)
 80085ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80085b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <xPortStartScheduler+0x138>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a14      	ldr	r2, [pc, #80]	; (8008608 <xPortStartScheduler+0x138>)
 80085b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80085bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085be:	f000 f8dd 	bl	800877c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <xPortStartScheduler+0x13c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085c8:	f000 f8fc 	bl	80087c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085cc:	4b10      	ldr	r3, [pc, #64]	; (8008610 <xPortStartScheduler+0x140>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0f      	ldr	r2, [pc, #60]	; (8008610 <xPortStartScheduler+0x140>)
 80085d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085d8:	f7ff ff66 	bl	80084a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085dc:	f7ff fba0 	bl	8007d20 <vTaskSwitchContext>
	prvTaskExitError();
 80085e0:	f7ff ff22 	bl	8008428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed00 	.word	0xe000ed00
 80085f4:	410fc271 	.word	0x410fc271
 80085f8:	410fc270 	.word	0x410fc270
 80085fc:	e000e400 	.word	0xe000e400
 8008600:	2000083c 	.word	0x2000083c
 8008604:	20000840 	.word	0x20000840
 8008608:	e000ed20 	.word	0xe000ed20
 800860c:	2000000c 	.word	0x2000000c
 8008610:	e000ef34 	.word	0xe000ef34

08008614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	607b      	str	r3, [r7, #4]
}
 800862c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <vPortEnterCritical+0x58>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	4a0d      	ldr	r2, [pc, #52]	; (800866c <vPortEnterCritical+0x58>)
 8008636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <vPortEnterCritical+0x58>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d10f      	bne.n	8008660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <vPortEnterCritical+0x5c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <vPortEnterCritical+0x4c>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	603b      	str	r3, [r7, #0]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <vPortEnterCritical+0x4a>
	}
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	2000000c 	.word	0x2000000c
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800867a:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <vPortExitCritical+0x50>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <vPortExitCritical+0x24>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	607b      	str	r3, [r7, #4]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <vPortExitCritical+0x50>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3b01      	subs	r3, #1
 800869e:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <vPortExitCritical+0x50>)
 80086a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <vPortExitCritical+0x50>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <vPortExitCritical+0x42>
 80086aa:	2300      	movs	r3, #0
 80086ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f383 8811 	msr	BASEPRI, r3
}
 80086b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	2000000c 	.word	0x2000000c
	...

080086d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086d0:	f3ef 8009 	mrs	r0, PSP
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	4b15      	ldr	r3, [pc, #84]	; (8008730 <pxCurrentTCBConst>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f01e 0f10 	tst.w	lr, #16
 80086e0:	bf08      	it	eq
 80086e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80086e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	6010      	str	r0, [r2, #0]
 80086ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086f4:	f380 8811 	msr	BASEPRI, r0
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f7ff fb0e 	bl	8007d20 <vTaskSwitchContext>
 8008704:	f04f 0000 	mov.w	r0, #0
 8008708:	f380 8811 	msr	BASEPRI, r0
 800870c:	bc09      	pop	{r0, r3}
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	6808      	ldr	r0, [r1, #0]
 8008712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008716:	f01e 0f10 	tst.w	lr, #16
 800871a:	bf08      	it	eq
 800871c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008720:	f380 8809 	msr	PSP, r0
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w

08008730 <pxCurrentTCBConst>:
 8008730:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop

08008738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
}
 8008750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008752:	f7ff fa2d 	bl	8007bb0 <xTaskIncrementTick>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <SysTick_Handler+0x40>)
 800875e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f383 8811 	msr	BASEPRI, r3
}
 800876e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	e000ed04 	.word	0xe000ed04

0800877c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <vPortSetupTimerInterrupt+0x34>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <vPortSetupTimerInterrupt+0x38>)
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800878c:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <vPortSetupTimerInterrupt+0x3c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a0a      	ldr	r2, [pc, #40]	; (80087bc <vPortSetupTimerInterrupt+0x40>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	099b      	lsrs	r3, r3, #6
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <vPortSetupTimerInterrupt+0x44>)
 800879a:	3b01      	subs	r3, #1
 800879c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800879e:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <vPortSetupTimerInterrupt+0x34>)
 80087a0:	2207      	movs	r2, #7
 80087a2:	601a      	str	r2, [r3, #0]
}
 80087a4:	bf00      	nop
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	e000e010 	.word	0xe000e010
 80087b4:	e000e018 	.word	0xe000e018
 80087b8:	20000000 	.word	0x20000000
 80087bc:	10624dd3 	.word	0x10624dd3
 80087c0:	e000e014 	.word	0xe000e014

080087c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087d4 <vPortEnableVFP+0x10>
 80087c8:	6801      	ldr	r1, [r0, #0]
 80087ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087ce:	6001      	str	r1, [r0, #0]
 80087d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087d2:	bf00      	nop
 80087d4:	e000ed88 	.word	0xe000ed88

080087d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d914      	bls.n	8008814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087ea:	4a17      	ldr	r2, [pc, #92]	; (8008848 <vPortValidateInterruptPriority+0x70>)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087f4:	4b15      	ldr	r3, [pc, #84]	; (800884c <vPortValidateInterruptPriority+0x74>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	7afa      	ldrb	r2, [r7, #11]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d20a      	bcs.n	8008814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008814:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <vPortValidateInterruptPriority+0x78>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800881c:	4b0d      	ldr	r3, [pc, #52]	; (8008854 <vPortValidateInterruptPriority+0x7c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	429a      	cmp	r2, r3
 8008822:	d90a      	bls.n	800883a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	603b      	str	r3, [r7, #0]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vPortValidateInterruptPriority+0x60>
	}
 800883a:	bf00      	nop
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	e000e3f0 	.word	0xe000e3f0
 800884c:	2000083c 	.word	0x2000083c
 8008850:	e000ed0c 	.word	0xe000ed0c
 8008854:	20000840 	.word	0x20000840

08008858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008864:	f7ff f8fa 	bl	8007a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008868:	4b5b      	ldr	r3, [pc, #364]	; (80089d8 <pvPortMalloc+0x180>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008870:	f000 f920 	bl	8008ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008874:	4b59      	ldr	r3, [pc, #356]	; (80089dc <pvPortMalloc+0x184>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 8093 	bne.w	80089a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01d      	beq.n	80088c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008888:	2208      	movs	r2, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4413      	add	r3, r2
 800888e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	2b00      	cmp	r3, #0
 8008898:	d014      	beq.n	80088c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f023 0307 	bic.w	r3, r3, #7
 80088a0:	3308      	adds	r3, #8
 80088a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <pvPortMalloc+0x6c>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	617b      	str	r3, [r7, #20]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d06e      	beq.n	80089a8 <pvPortMalloc+0x150>
 80088ca:	4b45      	ldr	r3, [pc, #276]	; (80089e0 <pvPortMalloc+0x188>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d869      	bhi.n	80089a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088d4:	4b43      	ldr	r3, [pc, #268]	; (80089e4 <pvPortMalloc+0x18c>)
 80088d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088d8:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <pvPortMalloc+0x18c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088de:	e004      	b.n	80088ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d903      	bls.n	80088fc <pvPortMalloc+0xa4>
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f1      	bne.n	80088e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088fc:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <pvPortMalloc+0x180>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008902:	429a      	cmp	r2, r3
 8008904:	d050      	beq.n	80089a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2208      	movs	r2, #8
 800890c:	4413      	add	r3, r2
 800890e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	2308      	movs	r3, #8
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	429a      	cmp	r2, r3
 8008926:	d91f      	bls.n	8008968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <pvPortMalloc+0xf8>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	613b      	str	r3, [r7, #16]
}
 800894c:	bf00      	nop
 800894e:	e7fe      	b.n	800894e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008962:	69b8      	ldr	r0, [r7, #24]
 8008964:	f000 f908 	bl	8008b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <pvPortMalloc+0x188>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	4a1b      	ldr	r2, [pc, #108]	; (80089e0 <pvPortMalloc+0x188>)
 8008974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008976:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <pvPortMalloc+0x188>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <pvPortMalloc+0x190>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d203      	bcs.n	800898a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008982:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <pvPortMalloc+0x188>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <pvPortMalloc+0x190>)
 8008988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <pvPortMalloc+0x184>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	431a      	orrs	r2, r3
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800899e:	4b13      	ldr	r3, [pc, #76]	; (80089ec <pvPortMalloc+0x194>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	4a11      	ldr	r2, [pc, #68]	; (80089ec <pvPortMalloc+0x194>)
 80089a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089a8:	f7ff f866 	bl	8007a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <pvPortMalloc+0x174>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	60fb      	str	r3, [r7, #12]
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <pvPortMalloc+0x172>
	return pvReturn;
 80089cc:	69fb      	ldr	r3, [r7, #28]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3728      	adds	r7, #40	; 0x28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	2000444c 	.word	0x2000444c
 80089dc:	20004460 	.word	0x20004460
 80089e0:	20004450 	.word	0x20004450
 80089e4:	20004444 	.word	0x20004444
 80089e8:	20004454 	.word	0x20004454
 80089ec:	20004458 	.word	0x20004458

080089f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d04d      	beq.n	8008a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a02:	2308      	movs	r3, #8
 8008a04:	425b      	negs	r3, r3
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4413      	add	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	4b24      	ldr	r3, [pc, #144]	; (8008aa8 <vPortFree+0xb8>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <vPortFree+0x44>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60fb      	str	r3, [r7, #12]
}
 8008a30:	bf00      	nop
 8008a32:	e7fe      	b.n	8008a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <vPortFree+0x62>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	60bb      	str	r3, [r7, #8]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <vPortFree+0xb8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01e      	beq.n	8008a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d11a      	bne.n	8008a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <vPortFree+0xb8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	43db      	mvns	r3, r3
 8008a72:	401a      	ands	r2, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a78:	f7fe fff0 	bl	8007a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <vPortFree+0xbc>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4413      	add	r3, r2
 8008a86:	4a09      	ldr	r2, [pc, #36]	; (8008aac <vPortFree+0xbc>)
 8008a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a8a:	6938      	ldr	r0, [r7, #16]
 8008a8c:	f000 f874 	bl	8008b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <vPortFree+0xc0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	4a06      	ldr	r2, [pc, #24]	; (8008ab0 <vPortFree+0xc0>)
 8008a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a9a:	f7fe ffed 	bl	8007a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a9e:	bf00      	nop
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20004460 	.word	0x20004460
 8008aac:	20004450 	.word	0x20004450
 8008ab0:	2000445c 	.word	0x2000445c

08008ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ac0:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <prvHeapInit+0xac>)
 8008ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3307      	adds	r3, #7
 8008ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0307 	bic.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	4a1f      	ldr	r2, [pc, #124]	; (8008b60 <prvHeapInit+0xac>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008aec:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <prvHeapInit+0xb0>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <prvHeapInit+0xb0>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4413      	add	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b00:	2208      	movs	r2, #8
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0307 	bic.w	r3, r3, #7
 8008b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <prvHeapInit+0xb4>)
 8008b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b16:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <prvHeapInit+0xb4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <prvHeapInit+0xb4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <prvHeapInit+0xb4>)
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <prvHeapInit+0xb8>)
 8008b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <prvHeapInit+0xbc>)
 8008b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b4c:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <prvHeapInit+0xc0>)
 8008b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b52:	601a      	str	r2, [r3, #0]
}
 8008b54:	bf00      	nop
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	20000844 	.word	0x20000844
 8008b64:	20004444 	.word	0x20004444
 8008b68:	2000444c 	.word	0x2000444c
 8008b6c:	20004454 	.word	0x20004454
 8008b70:	20004450 	.word	0x20004450
 8008b74:	20004460 	.word	0x20004460

08008b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b80:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <prvInsertBlockIntoFreeList+0xac>)
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e002      	b.n	8008b8c <prvInsertBlockIntoFreeList+0x14>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d8f7      	bhi.n	8008b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d108      	bne.n	8008bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	441a      	add	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d118      	bne.n	8008c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <prvInsertBlockIntoFreeList+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d00d      	beq.n	8008bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	441a      	add	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	e008      	b.n	8008c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <prvInsertBlockIntoFreeList+0xb0>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	e003      	b.n	8008c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d002      	beq.n	8008c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	20004444 	.word	0x20004444
 8008c28:	2000444c 	.word	0x2000444c

08008c2c <__errno>:
 8008c2c:	4b01      	ldr	r3, [pc, #4]	; (8008c34 <__errno+0x8>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000010 	.word	0x20000010

08008c38 <std>:
 8008c38:	2300      	movs	r3, #0
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c46:	6083      	str	r3, [r0, #8]
 8008c48:	8181      	strh	r1, [r0, #12]
 8008c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c4c:	81c2      	strh	r2, [r0, #14]
 8008c4e:	6183      	str	r3, [r0, #24]
 8008c50:	4619      	mov	r1, r3
 8008c52:	2208      	movs	r2, #8
 8008c54:	305c      	adds	r0, #92	; 0x5c
 8008c56:	f000 f91a 	bl	8008e8e <memset>
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <std+0x38>)
 8008c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x3c>)
 8008c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <std+0x40>)
 8008c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x44>)
 8008c68:	6224      	str	r4, [r4, #32]
 8008c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	bf00      	nop
 8008c70:	080091a9 	.word	0x080091a9
 8008c74:	080091cb 	.word	0x080091cb
 8008c78:	08009203 	.word	0x08009203
 8008c7c:	08009227 	.word	0x08009227

08008c80 <_cleanup_r>:
 8008c80:	4901      	ldr	r1, [pc, #4]	; (8008c88 <_cleanup_r+0x8>)
 8008c82:	f000 b8af 	b.w	8008de4 <_fwalk_reent>
 8008c86:	bf00      	nop
 8008c88:	08009501 	.word	0x08009501

08008c8c <__sfmoreglue>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	2268      	movs	r2, #104	; 0x68
 8008c90:	1e4d      	subs	r5, r1, #1
 8008c92:	4355      	muls	r5, r2
 8008c94:	460e      	mov	r6, r1
 8008c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c9a:	f000 f921 	bl	8008ee0 <_malloc_r>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	b140      	cbz	r0, 8008cb4 <__sfmoreglue+0x28>
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ca8:	300c      	adds	r0, #12
 8008caa:	60a0      	str	r0, [r4, #8]
 8008cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cb0:	f000 f8ed 	bl	8008e8e <memset>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}

08008cb8 <__sfp_lock_acquire>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__sfp_lock_acquire+0x8>)
 8008cba:	f000 b8d8 	b.w	8008e6e <__retarget_lock_acquire_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20004465 	.word	0x20004465

08008cc4 <__sfp_lock_release>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__sfp_lock_release+0x8>)
 8008cc6:	f000 b8d3 	b.w	8008e70 <__retarget_lock_release_recursive>
 8008cca:	bf00      	nop
 8008ccc:	20004465 	.word	0x20004465

08008cd0 <__sinit_lock_acquire>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__sinit_lock_acquire+0x8>)
 8008cd2:	f000 b8cc 	b.w	8008e6e <__retarget_lock_acquire_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	20004466 	.word	0x20004466

08008cdc <__sinit_lock_release>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__sinit_lock_release+0x8>)
 8008cde:	f000 b8c7 	b.w	8008e70 <__retarget_lock_release_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	20004466 	.word	0x20004466

08008ce8 <__sinit>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4604      	mov	r4, r0
 8008cec:	f7ff fff0 	bl	8008cd0 <__sinit_lock_acquire>
 8008cf0:	69a3      	ldr	r3, [r4, #24]
 8008cf2:	b11b      	cbz	r3, 8008cfc <__sinit+0x14>
 8008cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf8:	f7ff bff0 	b.w	8008cdc <__sinit_lock_release>
 8008cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d00:	6523      	str	r3, [r4, #80]	; 0x50
 8008d02:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <__sinit+0x68>)
 8008d04:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <__sinit+0x6c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d0a:	42a3      	cmp	r3, r4
 8008d0c:	bf04      	itt	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	61a3      	streq	r3, [r4, #24]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f820 	bl	8008d58 <__sfp>
 8008d18:	6060      	str	r0, [r4, #4]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 f81c 	bl	8008d58 <__sfp>
 8008d20:	60a0      	str	r0, [r4, #8]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f818 	bl	8008d58 <__sfp>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	60e0      	str	r0, [r4, #12]
 8008d2c:	2104      	movs	r1, #4
 8008d2e:	6860      	ldr	r0, [r4, #4]
 8008d30:	f7ff ff82 	bl	8008c38 <std>
 8008d34:	68a0      	ldr	r0, [r4, #8]
 8008d36:	2201      	movs	r2, #1
 8008d38:	2109      	movs	r1, #9
 8008d3a:	f7ff ff7d 	bl	8008c38 <std>
 8008d3e:	68e0      	ldr	r0, [r4, #12]
 8008d40:	2202      	movs	r2, #2
 8008d42:	2112      	movs	r1, #18
 8008d44:	f7ff ff78 	bl	8008c38 <std>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	61a3      	str	r3, [r4, #24]
 8008d4c:	e7d2      	b.n	8008cf4 <__sinit+0xc>
 8008d4e:	bf00      	nop
 8008d50:	08009b18 	.word	0x08009b18
 8008d54:	08008c81 	.word	0x08008c81

08008d58 <__sfp>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	f7ff ffac 	bl	8008cb8 <__sfp_lock_acquire>
 8008d60:	4b1e      	ldr	r3, [pc, #120]	; (8008ddc <__sfp+0x84>)
 8008d62:	681e      	ldr	r6, [r3, #0]
 8008d64:	69b3      	ldr	r3, [r6, #24]
 8008d66:	b913      	cbnz	r3, 8008d6e <__sfp+0x16>
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffbd 	bl	8008ce8 <__sinit>
 8008d6e:	3648      	adds	r6, #72	; 0x48
 8008d70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	d503      	bpl.n	8008d80 <__sfp+0x28>
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	b30b      	cbz	r3, 8008dc0 <__sfp+0x68>
 8008d7c:	6836      	ldr	r6, [r6, #0]
 8008d7e:	e7f7      	b.n	8008d70 <__sfp+0x18>
 8008d80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d84:	b9d5      	cbnz	r5, 8008dbc <__sfp+0x64>
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <__sfp+0x88>)
 8008d88:	60e3      	str	r3, [r4, #12]
 8008d8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d8e:	6665      	str	r5, [r4, #100]	; 0x64
 8008d90:	f000 f86c 	bl	8008e6c <__retarget_lock_init_recursive>
 8008d94:	f7ff ff96 	bl	8008cc4 <__sfp_lock_release>
 8008d98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008da0:	6025      	str	r5, [r4, #0]
 8008da2:	61a5      	str	r5, [r4, #24]
 8008da4:	2208      	movs	r2, #8
 8008da6:	4629      	mov	r1, r5
 8008da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dac:	f000 f86f 	bl	8008e8e <memset>
 8008db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008db8:	4620      	mov	r0, r4
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	3468      	adds	r4, #104	; 0x68
 8008dbe:	e7d9      	b.n	8008d74 <__sfp+0x1c>
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f7ff ff62 	bl	8008c8c <__sfmoreglue>
 8008dc8:	4604      	mov	r4, r0
 8008dca:	6030      	str	r0, [r6, #0]
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d1d5      	bne.n	8008d7c <__sfp+0x24>
 8008dd0:	f7ff ff78 	bl	8008cc4 <__sfp_lock_release>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	e7ee      	b.n	8008db8 <__sfp+0x60>
 8008dda:	bf00      	nop
 8008ddc:	08009b18 	.word	0x08009b18
 8008de0:	ffff0001 	.word	0xffff0001

08008de4 <_fwalk_reent>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4606      	mov	r6, r0
 8008dea:	4688      	mov	r8, r1
 8008dec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008df0:	2700      	movs	r7, #0
 8008df2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df6:	f1b9 0901 	subs.w	r9, r9, #1
 8008dfa:	d505      	bpl.n	8008e08 <_fwalk_reent+0x24>
 8008dfc:	6824      	ldr	r4, [r4, #0]
 8008dfe:	2c00      	cmp	r4, #0
 8008e00:	d1f7      	bne.n	8008df2 <_fwalk_reent+0xe>
 8008e02:	4638      	mov	r0, r7
 8008e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e08:	89ab      	ldrh	r3, [r5, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d907      	bls.n	8008e1e <_fwalk_reent+0x3a>
 8008e0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e12:	3301      	adds	r3, #1
 8008e14:	d003      	beq.n	8008e1e <_fwalk_reent+0x3a>
 8008e16:	4629      	mov	r1, r5
 8008e18:	4630      	mov	r0, r6
 8008e1a:	47c0      	blx	r8
 8008e1c:	4307      	orrs	r7, r0
 8008e1e:	3568      	adds	r5, #104	; 0x68
 8008e20:	e7e9      	b.n	8008df6 <_fwalk_reent+0x12>
	...

08008e24 <__libc_init_array>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4d0d      	ldr	r5, [pc, #52]	; (8008e5c <__libc_init_array+0x38>)
 8008e28:	4c0d      	ldr	r4, [pc, #52]	; (8008e60 <__libc_init_array+0x3c>)
 8008e2a:	1b64      	subs	r4, r4, r5
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	2600      	movs	r6, #0
 8008e30:	42a6      	cmp	r6, r4
 8008e32:	d109      	bne.n	8008e48 <__libc_init_array+0x24>
 8008e34:	4d0b      	ldr	r5, [pc, #44]	; (8008e64 <__libc_init_array+0x40>)
 8008e36:	4c0c      	ldr	r4, [pc, #48]	; (8008e68 <__libc_init_array+0x44>)
 8008e38:	f000 fca2 	bl	8009780 <_init>
 8008e3c:	1b64      	subs	r4, r4, r5
 8008e3e:	10a4      	asrs	r4, r4, #2
 8008e40:	2600      	movs	r6, #0
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	d105      	bne.n	8008e52 <__libc_init_array+0x2e>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
 8008e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4c:	4798      	blx	r3
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7ee      	b.n	8008e30 <__libc_init_array+0xc>
 8008e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e56:	4798      	blx	r3
 8008e58:	3601      	adds	r6, #1
 8008e5a:	e7f2      	b.n	8008e42 <__libc_init_array+0x1e>
 8008e5c:	08009b24 	.word	0x08009b24
 8008e60:	08009b24 	.word	0x08009b24
 8008e64:	08009b24 	.word	0x08009b24
 8008e68:	08009b28 	.word	0x08009b28

08008e6c <__retarget_lock_init_recursive>:
 8008e6c:	4770      	bx	lr

08008e6e <__retarget_lock_acquire_recursive>:
 8008e6e:	4770      	bx	lr

08008e70 <__retarget_lock_release_recursive>:
 8008e70:	4770      	bx	lr

08008e72 <memcpy>:
 8008e72:	440a      	add	r2, r1
 8008e74:	4291      	cmp	r1, r2
 8008e76:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e7a:	d100      	bne.n	8008e7e <memcpy+0xc>
 8008e7c:	4770      	bx	lr
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e88:	4291      	cmp	r1, r2
 8008e8a:	d1f9      	bne.n	8008e80 <memcpy+0xe>
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <memset>:
 8008e8e:	4402      	add	r2, r0
 8008e90:	4603      	mov	r3, r0
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d100      	bne.n	8008e98 <memset+0xa>
 8008e96:	4770      	bx	lr
 8008e98:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9c:	e7f9      	b.n	8008e92 <memset+0x4>
	...

08008ea0 <sbrk_aligned>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	4e0e      	ldr	r6, [pc, #56]	; (8008edc <sbrk_aligned+0x3c>)
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	6831      	ldr	r1, [r6, #0]
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	b911      	cbnz	r1, 8008eb2 <sbrk_aligned+0x12>
 8008eac:	f000 f96c 	bl	8009188 <_sbrk_r>
 8008eb0:	6030      	str	r0, [r6, #0]
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	f000 f967 	bl	8009188 <_sbrk_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	d00a      	beq.n	8008ed4 <sbrk_aligned+0x34>
 8008ebe:	1cc4      	adds	r4, r0, #3
 8008ec0:	f024 0403 	bic.w	r4, r4, #3
 8008ec4:	42a0      	cmp	r0, r4
 8008ec6:	d007      	beq.n	8008ed8 <sbrk_aligned+0x38>
 8008ec8:	1a21      	subs	r1, r4, r0
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 f95c 	bl	8009188 <_sbrk_r>
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d101      	bne.n	8008ed8 <sbrk_aligned+0x38>
 8008ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	2000446c 	.word	0x2000446c

08008ee0 <_malloc_r>:
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	1ccd      	adds	r5, r1, #3
 8008ee6:	f025 0503 	bic.w	r5, r5, #3
 8008eea:	3508      	adds	r5, #8
 8008eec:	2d0c      	cmp	r5, #12
 8008eee:	bf38      	it	cc
 8008ef0:	250c      	movcc	r5, #12
 8008ef2:	2d00      	cmp	r5, #0
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	db01      	blt.n	8008efc <_malloc_r+0x1c>
 8008ef8:	42a9      	cmp	r1, r5
 8008efa:	d905      	bls.n	8008f08 <_malloc_r+0x28>
 8008efc:	230c      	movs	r3, #12
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	2600      	movs	r6, #0
 8008f02:	4630      	mov	r0, r6
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	4e2e      	ldr	r6, [pc, #184]	; (8008fc4 <_malloc_r+0xe4>)
 8008f0a:	f000 fbad 	bl	8009668 <__malloc_lock>
 8008f0e:	6833      	ldr	r3, [r6, #0]
 8008f10:	461c      	mov	r4, r3
 8008f12:	bb34      	cbnz	r4, 8008f62 <_malloc_r+0x82>
 8008f14:	4629      	mov	r1, r5
 8008f16:	4638      	mov	r0, r7
 8008f18:	f7ff ffc2 	bl	8008ea0 <sbrk_aligned>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	4604      	mov	r4, r0
 8008f20:	d14d      	bne.n	8008fbe <_malloc_r+0xde>
 8008f22:	6834      	ldr	r4, [r6, #0]
 8008f24:	4626      	mov	r6, r4
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d140      	bne.n	8008fac <_malloc_r+0xcc>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4638      	mov	r0, r7
 8008f30:	eb04 0803 	add.w	r8, r4, r3
 8008f34:	f000 f928 	bl	8009188 <_sbrk_r>
 8008f38:	4580      	cmp	r8, r0
 8008f3a:	d13a      	bne.n	8008fb2 <_malloc_r+0xd2>
 8008f3c:	6821      	ldr	r1, [r4, #0]
 8008f3e:	3503      	adds	r5, #3
 8008f40:	1a6d      	subs	r5, r5, r1
 8008f42:	f025 0503 	bic.w	r5, r5, #3
 8008f46:	3508      	adds	r5, #8
 8008f48:	2d0c      	cmp	r5, #12
 8008f4a:	bf38      	it	cc
 8008f4c:	250c      	movcc	r5, #12
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4638      	mov	r0, r7
 8008f52:	f7ff ffa5 	bl	8008ea0 <sbrk_aligned>
 8008f56:	3001      	adds	r0, #1
 8008f58:	d02b      	beq.n	8008fb2 <_malloc_r+0xd2>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	442b      	add	r3, r5
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	e00e      	b.n	8008f80 <_malloc_r+0xa0>
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	1b52      	subs	r2, r2, r5
 8008f66:	d41e      	bmi.n	8008fa6 <_malloc_r+0xc6>
 8008f68:	2a0b      	cmp	r2, #11
 8008f6a:	d916      	bls.n	8008f9a <_malloc_r+0xba>
 8008f6c:	1961      	adds	r1, r4, r5
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	6025      	str	r5, [r4, #0]
 8008f72:	bf18      	it	ne
 8008f74:	6059      	strne	r1, [r3, #4]
 8008f76:	6863      	ldr	r3, [r4, #4]
 8008f78:	bf08      	it	eq
 8008f7a:	6031      	streq	r1, [r6, #0]
 8008f7c:	5162      	str	r2, [r4, r5]
 8008f7e:	604b      	str	r3, [r1, #4]
 8008f80:	4638      	mov	r0, r7
 8008f82:	f104 060b 	add.w	r6, r4, #11
 8008f86:	f000 fb75 	bl	8009674 <__malloc_unlock>
 8008f8a:	f026 0607 	bic.w	r6, r6, #7
 8008f8e:	1d23      	adds	r3, r4, #4
 8008f90:	1af2      	subs	r2, r6, r3
 8008f92:	d0b6      	beq.n	8008f02 <_malloc_r+0x22>
 8008f94:	1b9b      	subs	r3, r3, r6
 8008f96:	50a3      	str	r3, [r4, r2]
 8008f98:	e7b3      	b.n	8008f02 <_malloc_r+0x22>
 8008f9a:	6862      	ldr	r2, [r4, #4]
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	bf0c      	ite	eq
 8008fa0:	6032      	streq	r2, [r6, #0]
 8008fa2:	605a      	strne	r2, [r3, #4]
 8008fa4:	e7ec      	b.n	8008f80 <_malloc_r+0xa0>
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	6864      	ldr	r4, [r4, #4]
 8008faa:	e7b2      	b.n	8008f12 <_malloc_r+0x32>
 8008fac:	4634      	mov	r4, r6
 8008fae:	6876      	ldr	r6, [r6, #4]
 8008fb0:	e7b9      	b.n	8008f26 <_malloc_r+0x46>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	603b      	str	r3, [r7, #0]
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f000 fb5c 	bl	8009674 <__malloc_unlock>
 8008fbc:	e7a1      	b.n	8008f02 <_malloc_r+0x22>
 8008fbe:	6025      	str	r5, [r4, #0]
 8008fc0:	e7de      	b.n	8008f80 <_malloc_r+0xa0>
 8008fc2:	bf00      	nop
 8008fc4:	20004468 	.word	0x20004468

08008fc8 <_puts_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	460e      	mov	r6, r1
 8008fcc:	4605      	mov	r5, r0
 8008fce:	b118      	cbz	r0, 8008fd8 <_puts_r+0x10>
 8008fd0:	6983      	ldr	r3, [r0, #24]
 8008fd2:	b90b      	cbnz	r3, 8008fd8 <_puts_r+0x10>
 8008fd4:	f7ff fe88 	bl	8008ce8 <__sinit>
 8008fd8:	69ab      	ldr	r3, [r5, #24]
 8008fda:	68ac      	ldr	r4, [r5, #8]
 8008fdc:	b913      	cbnz	r3, 8008fe4 <_puts_r+0x1c>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f7ff fe82 	bl	8008ce8 <__sinit>
 8008fe4:	4b2c      	ldr	r3, [pc, #176]	; (8009098 <_puts_r+0xd0>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d120      	bne.n	800902c <_puts_r+0x64>
 8008fea:	686c      	ldr	r4, [r5, #4]
 8008fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fee:	07db      	lsls	r3, r3, #31
 8008ff0:	d405      	bmi.n	8008ffe <_puts_r+0x36>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	0598      	lsls	r0, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_puts_r+0x36>
 8008ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ffa:	f7ff ff38 	bl	8008e6e <__retarget_lock_acquire_recursive>
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	0719      	lsls	r1, r3, #28
 8009002:	d51d      	bpl.n	8009040 <_puts_r+0x78>
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	b1db      	cbz	r3, 8009040 <_puts_r+0x78>
 8009008:	3e01      	subs	r6, #1
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009010:	3b01      	subs	r3, #1
 8009012:	60a3      	str	r3, [r4, #8]
 8009014:	bb39      	cbnz	r1, 8009066 <_puts_r+0x9e>
 8009016:	2b00      	cmp	r3, #0
 8009018:	da38      	bge.n	800908c <_puts_r+0xc4>
 800901a:	4622      	mov	r2, r4
 800901c:	210a      	movs	r1, #10
 800901e:	4628      	mov	r0, r5
 8009020:	f000 f906 	bl	8009230 <__swbuf_r>
 8009024:	3001      	adds	r0, #1
 8009026:	d011      	beq.n	800904c <_puts_r+0x84>
 8009028:	250a      	movs	r5, #10
 800902a:	e011      	b.n	8009050 <_puts_r+0x88>
 800902c:	4b1b      	ldr	r3, [pc, #108]	; (800909c <_puts_r+0xd4>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <_puts_r+0x6e>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7da      	b.n	8008fec <_puts_r+0x24>
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <_puts_r+0xd8>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7d5      	b.n	8008fec <_puts_r+0x24>
 8009040:	4621      	mov	r1, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f958 	bl	80092f8 <__swsetup_r>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0dd      	beq.n	8009008 <_puts_r+0x40>
 800904c:	f04f 35ff 	mov.w	r5, #4294967295
 8009050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009052:	07da      	lsls	r2, r3, #31
 8009054:	d405      	bmi.n	8009062 <_puts_r+0x9a>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d402      	bmi.n	8009062 <_puts_r+0x9a>
 800905c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905e:	f7ff ff07 	bl	8008e70 <__retarget_lock_release_recursive>
 8009062:	4628      	mov	r0, r5
 8009064:	bd70      	pop	{r4, r5, r6, pc}
 8009066:	2b00      	cmp	r3, #0
 8009068:	da04      	bge.n	8009074 <_puts_r+0xac>
 800906a:	69a2      	ldr	r2, [r4, #24]
 800906c:	429a      	cmp	r2, r3
 800906e:	dc06      	bgt.n	800907e <_puts_r+0xb6>
 8009070:	290a      	cmp	r1, #10
 8009072:	d004      	beq.n	800907e <_puts_r+0xb6>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	6022      	str	r2, [r4, #0]
 800907a:	7019      	strb	r1, [r3, #0]
 800907c:	e7c5      	b.n	800900a <_puts_r+0x42>
 800907e:	4622      	mov	r2, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f8d5 	bl	8009230 <__swbuf_r>
 8009086:	3001      	adds	r0, #1
 8009088:	d1bf      	bne.n	800900a <_puts_r+0x42>
 800908a:	e7df      	b.n	800904c <_puts_r+0x84>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	250a      	movs	r5, #10
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	6022      	str	r2, [r4, #0]
 8009094:	701d      	strb	r5, [r3, #0]
 8009096:	e7db      	b.n	8009050 <_puts_r+0x88>
 8009098:	08009ad8 	.word	0x08009ad8
 800909c:	08009af8 	.word	0x08009af8
 80090a0:	08009ab8 	.word	0x08009ab8

080090a4 <puts>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <puts+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f7ff bf8d 	b.w	8008fc8 <_puts_r>
 80090ae:	bf00      	nop
 80090b0:	20000010 	.word	0x20000010

080090b4 <cleanup_glue>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	6809      	ldr	r1, [r1, #0]
 80090ba:	4605      	mov	r5, r0
 80090bc:	b109      	cbz	r1, 80090c2 <cleanup_glue+0xe>
 80090be:	f7ff fff9 	bl	80090b4 <cleanup_glue>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 bad9 	b.w	8009680 <_free_r>
	...

080090d0 <_reclaim_reent>:
 80090d0:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <_reclaim_reent+0xb4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4283      	cmp	r3, r0
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	4604      	mov	r4, r0
 80090da:	d051      	beq.n	8009180 <_reclaim_reent+0xb0>
 80090dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090de:	b143      	cbz	r3, 80090f2 <_reclaim_reent+0x22>
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d14a      	bne.n	800917c <_reclaim_reent+0xac>
 80090e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	b111      	cbz	r1, 80090f2 <_reclaim_reent+0x22>
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 fac7 	bl	8009680 <_free_r>
 80090f2:	6961      	ldr	r1, [r4, #20]
 80090f4:	b111      	cbz	r1, 80090fc <_reclaim_reent+0x2c>
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 fac2 	bl	8009680 <_free_r>
 80090fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090fe:	b111      	cbz	r1, 8009106 <_reclaim_reent+0x36>
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fabd 	bl	8009680 <_free_r>
 8009106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009108:	b111      	cbz	r1, 8009110 <_reclaim_reent+0x40>
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fab8 	bl	8009680 <_free_r>
 8009110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009112:	b111      	cbz	r1, 800911a <_reclaim_reent+0x4a>
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fab3 	bl	8009680 <_free_r>
 800911a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800911c:	b111      	cbz	r1, 8009124 <_reclaim_reent+0x54>
 800911e:	4620      	mov	r0, r4
 8009120:	f000 faae 	bl	8009680 <_free_r>
 8009124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009126:	b111      	cbz	r1, 800912e <_reclaim_reent+0x5e>
 8009128:	4620      	mov	r0, r4
 800912a:	f000 faa9 	bl	8009680 <_free_r>
 800912e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009130:	b111      	cbz	r1, 8009138 <_reclaim_reent+0x68>
 8009132:	4620      	mov	r0, r4
 8009134:	f000 faa4 	bl	8009680 <_free_r>
 8009138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913a:	b111      	cbz	r1, 8009142 <_reclaim_reent+0x72>
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fa9f 	bl	8009680 <_free_r>
 8009142:	69a3      	ldr	r3, [r4, #24]
 8009144:	b1e3      	cbz	r3, 8009180 <_reclaim_reent+0xb0>
 8009146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009148:	4620      	mov	r0, r4
 800914a:	4798      	blx	r3
 800914c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800914e:	b1b9      	cbz	r1, 8009180 <_reclaim_reent+0xb0>
 8009150:	4620      	mov	r0, r4
 8009152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009156:	f7ff bfad 	b.w	80090b4 <cleanup_glue>
 800915a:	5949      	ldr	r1, [r1, r5]
 800915c:	b941      	cbnz	r1, 8009170 <_reclaim_reent+0xa0>
 800915e:	3504      	adds	r5, #4
 8009160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009162:	2d80      	cmp	r5, #128	; 0x80
 8009164:	68d9      	ldr	r1, [r3, #12]
 8009166:	d1f8      	bne.n	800915a <_reclaim_reent+0x8a>
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fa89 	bl	8009680 <_free_r>
 800916e:	e7ba      	b.n	80090e6 <_reclaim_reent+0x16>
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fa84 	bl	8009680 <_free_r>
 8009178:	4631      	mov	r1, r6
 800917a:	e7ef      	b.n	800915c <_reclaim_reent+0x8c>
 800917c:	2500      	movs	r5, #0
 800917e:	e7ef      	b.n	8009160 <_reclaim_reent+0x90>
 8009180:	bd70      	pop	{r4, r5, r6, pc}
 8009182:	bf00      	nop
 8009184:	20000010 	.word	0x20000010

08009188 <_sbrk_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	; (80091a4 <_sbrk_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f8 fc12 	bl	80019bc <_sbrk>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_sbrk_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_sbrk_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	20004470 	.word	0x20004470

080091a8 <__sread>:
 80091a8:	b510      	push	{r4, lr}
 80091aa:	460c      	mov	r4, r1
 80091ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b0:	f000 fab2 	bl	8009718 <_read_r>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	bfab      	itete	ge
 80091b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ba:	89a3      	ldrhlt	r3, [r4, #12]
 80091bc:	181b      	addge	r3, r3, r0
 80091be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091c2:	bfac      	ite	ge
 80091c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80091c6:	81a3      	strhlt	r3, [r4, #12]
 80091c8:	bd10      	pop	{r4, pc}

080091ca <__swrite>:
 80091ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	461f      	mov	r7, r3
 80091d0:	898b      	ldrh	r3, [r1, #12]
 80091d2:	05db      	lsls	r3, r3, #23
 80091d4:	4605      	mov	r5, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	4616      	mov	r6, r2
 80091da:	d505      	bpl.n	80091e8 <__swrite+0x1e>
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	2302      	movs	r3, #2
 80091e2:	2200      	movs	r2, #0
 80091e4:	f000 f9c8 	bl	8009578 <_lseek_r>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	4632      	mov	r2, r6
 80091f6:	463b      	mov	r3, r7
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	f000 b869 	b.w	80092d4 <_write_r>

08009202 <__sseek>:
 8009202:	b510      	push	{r4, lr}
 8009204:	460c      	mov	r4, r1
 8009206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920a:	f000 f9b5 	bl	8009578 <_lseek_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	bf15      	itete	ne
 8009214:	6560      	strne	r0, [r4, #84]	; 0x54
 8009216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800921a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800921e:	81a3      	strheq	r3, [r4, #12]
 8009220:	bf18      	it	ne
 8009222:	81a3      	strhne	r3, [r4, #12]
 8009224:	bd10      	pop	{r4, pc}

08009226 <__sclose>:
 8009226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922a:	f000 b8d3 	b.w	80093d4 <_close_r>
	...

08009230 <__swbuf_r>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	460e      	mov	r6, r1
 8009234:	4614      	mov	r4, r2
 8009236:	4605      	mov	r5, r0
 8009238:	b118      	cbz	r0, 8009242 <__swbuf_r+0x12>
 800923a:	6983      	ldr	r3, [r0, #24]
 800923c:	b90b      	cbnz	r3, 8009242 <__swbuf_r+0x12>
 800923e:	f7ff fd53 	bl	8008ce8 <__sinit>
 8009242:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <__swbuf_r+0x98>)
 8009244:	429c      	cmp	r4, r3
 8009246:	d12b      	bne.n	80092a0 <__swbuf_r+0x70>
 8009248:	686c      	ldr	r4, [r5, #4]
 800924a:	69a3      	ldr	r3, [r4, #24]
 800924c:	60a3      	str	r3, [r4, #8]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	071a      	lsls	r2, r3, #28
 8009252:	d52f      	bpl.n	80092b4 <__swbuf_r+0x84>
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	b36b      	cbz	r3, 80092b4 <__swbuf_r+0x84>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	6820      	ldr	r0, [r4, #0]
 800925c:	1ac0      	subs	r0, r0, r3
 800925e:	6963      	ldr	r3, [r4, #20]
 8009260:	b2f6      	uxtb	r6, r6
 8009262:	4283      	cmp	r3, r0
 8009264:	4637      	mov	r7, r6
 8009266:	dc04      	bgt.n	8009272 <__swbuf_r+0x42>
 8009268:	4621      	mov	r1, r4
 800926a:	4628      	mov	r0, r5
 800926c:	f000 f948 	bl	8009500 <_fflush_r>
 8009270:	bb30      	cbnz	r0, 80092c0 <__swbuf_r+0x90>
 8009272:	68a3      	ldr	r3, [r4, #8]
 8009274:	3b01      	subs	r3, #1
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	6022      	str	r2, [r4, #0]
 800927e:	701e      	strb	r6, [r3, #0]
 8009280:	6963      	ldr	r3, [r4, #20]
 8009282:	3001      	adds	r0, #1
 8009284:	4283      	cmp	r3, r0
 8009286:	d004      	beq.n	8009292 <__swbuf_r+0x62>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	07db      	lsls	r3, r3, #31
 800928c:	d506      	bpl.n	800929c <__swbuf_r+0x6c>
 800928e:	2e0a      	cmp	r6, #10
 8009290:	d104      	bne.n	800929c <__swbuf_r+0x6c>
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 f933 	bl	8009500 <_fflush_r>
 800929a:	b988      	cbnz	r0, 80092c0 <__swbuf_r+0x90>
 800929c:	4638      	mov	r0, r7
 800929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <__swbuf_r+0x9c>)
 80092a2:	429c      	cmp	r4, r3
 80092a4:	d101      	bne.n	80092aa <__swbuf_r+0x7a>
 80092a6:	68ac      	ldr	r4, [r5, #8]
 80092a8:	e7cf      	b.n	800924a <__swbuf_r+0x1a>
 80092aa:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <__swbuf_r+0xa0>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	bf08      	it	eq
 80092b0:	68ec      	ldreq	r4, [r5, #12]
 80092b2:	e7ca      	b.n	800924a <__swbuf_r+0x1a>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4628      	mov	r0, r5
 80092b8:	f000 f81e 	bl	80092f8 <__swsetup_r>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d0cb      	beq.n	8009258 <__swbuf_r+0x28>
 80092c0:	f04f 37ff 	mov.w	r7, #4294967295
 80092c4:	e7ea      	b.n	800929c <__swbuf_r+0x6c>
 80092c6:	bf00      	nop
 80092c8:	08009ad8 	.word	0x08009ad8
 80092cc:	08009af8 	.word	0x08009af8
 80092d0:	08009ab8 	.word	0x08009ab8

080092d4 <_write_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_write_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 fb19 	bl	800191a <_write>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_write_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_write_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20004470 	.word	0x20004470

080092f8 <__swsetup_r>:
 80092f8:	4b32      	ldr	r3, [pc, #200]	; (80093c4 <__swsetup_r+0xcc>)
 80092fa:	b570      	push	{r4, r5, r6, lr}
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	4606      	mov	r6, r0
 8009300:	460c      	mov	r4, r1
 8009302:	b125      	cbz	r5, 800930e <__swsetup_r+0x16>
 8009304:	69ab      	ldr	r3, [r5, #24]
 8009306:	b913      	cbnz	r3, 800930e <__swsetup_r+0x16>
 8009308:	4628      	mov	r0, r5
 800930a:	f7ff fced 	bl	8008ce8 <__sinit>
 800930e:	4b2e      	ldr	r3, [pc, #184]	; (80093c8 <__swsetup_r+0xd0>)
 8009310:	429c      	cmp	r4, r3
 8009312:	d10f      	bne.n	8009334 <__swsetup_r+0x3c>
 8009314:	686c      	ldr	r4, [r5, #4]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800931c:	0719      	lsls	r1, r3, #28
 800931e:	d42c      	bmi.n	800937a <__swsetup_r+0x82>
 8009320:	06dd      	lsls	r5, r3, #27
 8009322:	d411      	bmi.n	8009348 <__swsetup_r+0x50>
 8009324:	2309      	movs	r3, #9
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	f04f 30ff 	mov.w	r0, #4294967295
 8009332:	e03e      	b.n	80093b2 <__swsetup_r+0xba>
 8009334:	4b25      	ldr	r3, [pc, #148]	; (80093cc <__swsetup_r+0xd4>)
 8009336:	429c      	cmp	r4, r3
 8009338:	d101      	bne.n	800933e <__swsetup_r+0x46>
 800933a:	68ac      	ldr	r4, [r5, #8]
 800933c:	e7eb      	b.n	8009316 <__swsetup_r+0x1e>
 800933e:	4b24      	ldr	r3, [pc, #144]	; (80093d0 <__swsetup_r+0xd8>)
 8009340:	429c      	cmp	r4, r3
 8009342:	bf08      	it	eq
 8009344:	68ec      	ldreq	r4, [r5, #12]
 8009346:	e7e6      	b.n	8009316 <__swsetup_r+0x1e>
 8009348:	0758      	lsls	r0, r3, #29
 800934a:	d512      	bpl.n	8009372 <__swsetup_r+0x7a>
 800934c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800934e:	b141      	cbz	r1, 8009362 <__swsetup_r+0x6a>
 8009350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009354:	4299      	cmp	r1, r3
 8009356:	d002      	beq.n	800935e <__swsetup_r+0x66>
 8009358:	4630      	mov	r0, r6
 800935a:	f000 f991 	bl	8009680 <_free_r>
 800935e:	2300      	movs	r3, #0
 8009360:	6363      	str	r3, [r4, #52]	; 0x34
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	2300      	movs	r3, #0
 800936c:	6063      	str	r3, [r4, #4]
 800936e:	6923      	ldr	r3, [r4, #16]
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	f043 0308 	orr.w	r3, r3, #8
 8009378:	81a3      	strh	r3, [r4, #12]
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	b94b      	cbnz	r3, 8009392 <__swsetup_r+0x9a>
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009388:	d003      	beq.n	8009392 <__swsetup_r+0x9a>
 800938a:	4621      	mov	r1, r4
 800938c:	4630      	mov	r0, r6
 800938e:	f000 f92b 	bl	80095e8 <__smakebuf_r>
 8009392:	89a0      	ldrh	r0, [r4, #12]
 8009394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009398:	f010 0301 	ands.w	r3, r0, #1
 800939c:	d00a      	beq.n	80093b4 <__swsetup_r+0xbc>
 800939e:	2300      	movs	r3, #0
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	6963      	ldr	r3, [r4, #20]
 80093a4:	425b      	negs	r3, r3
 80093a6:	61a3      	str	r3, [r4, #24]
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	b943      	cbnz	r3, 80093be <__swsetup_r+0xc6>
 80093ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093b0:	d1ba      	bne.n	8009328 <__swsetup_r+0x30>
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	0781      	lsls	r1, r0, #30
 80093b6:	bf58      	it	pl
 80093b8:	6963      	ldrpl	r3, [r4, #20]
 80093ba:	60a3      	str	r3, [r4, #8]
 80093bc:	e7f4      	b.n	80093a8 <__swsetup_r+0xb0>
 80093be:	2000      	movs	r0, #0
 80093c0:	e7f7      	b.n	80093b2 <__swsetup_r+0xba>
 80093c2:	bf00      	nop
 80093c4:	20000010 	.word	0x20000010
 80093c8:	08009ad8 	.word	0x08009ad8
 80093cc:	08009af8 	.word	0x08009af8
 80093d0:	08009ab8 	.word	0x08009ab8

080093d4 <_close_r>:
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4d06      	ldr	r5, [pc, #24]	; (80093f0 <_close_r+0x1c>)
 80093d8:	2300      	movs	r3, #0
 80093da:	4604      	mov	r4, r0
 80093dc:	4608      	mov	r0, r1
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7f8 fab7 	bl	8001952 <_close>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d102      	bne.n	80093ee <_close_r+0x1a>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	b103      	cbz	r3, 80093ee <_close_r+0x1a>
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	bd38      	pop	{r3, r4, r5, pc}
 80093f0:	20004470 	.word	0x20004470

080093f4 <__sflush_r>:
 80093f4:	898a      	ldrh	r2, [r1, #12]
 80093f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	4605      	mov	r5, r0
 80093fc:	0710      	lsls	r0, r2, #28
 80093fe:	460c      	mov	r4, r1
 8009400:	d458      	bmi.n	80094b4 <__sflush_r+0xc0>
 8009402:	684b      	ldr	r3, [r1, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dc05      	bgt.n	8009414 <__sflush_r+0x20>
 8009408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	dc02      	bgt.n	8009414 <__sflush_r+0x20>
 800940e:	2000      	movs	r0, #0
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009416:	2e00      	cmp	r6, #0
 8009418:	d0f9      	beq.n	800940e <__sflush_r+0x1a>
 800941a:	2300      	movs	r3, #0
 800941c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009420:	682f      	ldr	r7, [r5, #0]
 8009422:	602b      	str	r3, [r5, #0]
 8009424:	d032      	beq.n	800948c <__sflush_r+0x98>
 8009426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	075a      	lsls	r2, r3, #29
 800942c:	d505      	bpl.n	800943a <__sflush_r+0x46>
 800942e:	6863      	ldr	r3, [r4, #4]
 8009430:	1ac0      	subs	r0, r0, r3
 8009432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009434:	b10b      	cbz	r3, 800943a <__sflush_r+0x46>
 8009436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009438:	1ac0      	subs	r0, r0, r3
 800943a:	2300      	movs	r3, #0
 800943c:	4602      	mov	r2, r0
 800943e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009440:	6a21      	ldr	r1, [r4, #32]
 8009442:	4628      	mov	r0, r5
 8009444:	47b0      	blx	r6
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	d106      	bne.n	800945a <__sflush_r+0x66>
 800944c:	6829      	ldr	r1, [r5, #0]
 800944e:	291d      	cmp	r1, #29
 8009450:	d82c      	bhi.n	80094ac <__sflush_r+0xb8>
 8009452:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <__sflush_r+0x108>)
 8009454:	40ca      	lsrs	r2, r1
 8009456:	07d6      	lsls	r6, r2, #31
 8009458:	d528      	bpl.n	80094ac <__sflush_r+0xb8>
 800945a:	2200      	movs	r2, #0
 800945c:	6062      	str	r2, [r4, #4]
 800945e:	04d9      	lsls	r1, r3, #19
 8009460:	6922      	ldr	r2, [r4, #16]
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	d504      	bpl.n	8009470 <__sflush_r+0x7c>
 8009466:	1c42      	adds	r2, r0, #1
 8009468:	d101      	bne.n	800946e <__sflush_r+0x7a>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	b903      	cbnz	r3, 8009470 <__sflush_r+0x7c>
 800946e:	6560      	str	r0, [r4, #84]	; 0x54
 8009470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009472:	602f      	str	r7, [r5, #0]
 8009474:	2900      	cmp	r1, #0
 8009476:	d0ca      	beq.n	800940e <__sflush_r+0x1a>
 8009478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800947c:	4299      	cmp	r1, r3
 800947e:	d002      	beq.n	8009486 <__sflush_r+0x92>
 8009480:	4628      	mov	r0, r5
 8009482:	f000 f8fd 	bl	8009680 <_free_r>
 8009486:	2000      	movs	r0, #0
 8009488:	6360      	str	r0, [r4, #52]	; 0x34
 800948a:	e7c1      	b.n	8009410 <__sflush_r+0x1c>
 800948c:	6a21      	ldr	r1, [r4, #32]
 800948e:	2301      	movs	r3, #1
 8009490:	4628      	mov	r0, r5
 8009492:	47b0      	blx	r6
 8009494:	1c41      	adds	r1, r0, #1
 8009496:	d1c7      	bne.n	8009428 <__sflush_r+0x34>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c4      	beq.n	8009428 <__sflush_r+0x34>
 800949e:	2b1d      	cmp	r3, #29
 80094a0:	d001      	beq.n	80094a6 <__sflush_r+0xb2>
 80094a2:	2b16      	cmp	r3, #22
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0xb6>
 80094a6:	602f      	str	r7, [r5, #0]
 80094a8:	e7b1      	b.n	800940e <__sflush_r+0x1a>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7ad      	b.n	8009410 <__sflush_r+0x1c>
 80094b4:	690f      	ldr	r7, [r1, #16]
 80094b6:	2f00      	cmp	r7, #0
 80094b8:	d0a9      	beq.n	800940e <__sflush_r+0x1a>
 80094ba:	0793      	lsls	r3, r2, #30
 80094bc:	680e      	ldr	r6, [r1, #0]
 80094be:	bf08      	it	eq
 80094c0:	694b      	ldreq	r3, [r1, #20]
 80094c2:	600f      	str	r7, [r1, #0]
 80094c4:	bf18      	it	ne
 80094c6:	2300      	movne	r3, #0
 80094c8:	eba6 0807 	sub.w	r8, r6, r7
 80094cc:	608b      	str	r3, [r1, #8]
 80094ce:	f1b8 0f00 	cmp.w	r8, #0
 80094d2:	dd9c      	ble.n	800940e <__sflush_r+0x1a>
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d8:	4643      	mov	r3, r8
 80094da:	463a      	mov	r2, r7
 80094dc:	4628      	mov	r0, r5
 80094de:	47b0      	blx	r6
 80094e0:	2800      	cmp	r0, #0
 80094e2:	dc06      	bgt.n	80094f2 <__sflush_r+0xfe>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	e78e      	b.n	8009410 <__sflush_r+0x1c>
 80094f2:	4407      	add	r7, r0
 80094f4:	eba8 0800 	sub.w	r8, r8, r0
 80094f8:	e7e9      	b.n	80094ce <__sflush_r+0xda>
 80094fa:	bf00      	nop
 80094fc:	20400001 	.word	0x20400001

08009500 <_fflush_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	4605      	mov	r5, r0
 8009506:	460c      	mov	r4, r1
 8009508:	b913      	cbnz	r3, 8009510 <_fflush_r+0x10>
 800950a:	2500      	movs	r5, #0
 800950c:	4628      	mov	r0, r5
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	b118      	cbz	r0, 800951a <_fflush_r+0x1a>
 8009512:	6983      	ldr	r3, [r0, #24]
 8009514:	b90b      	cbnz	r3, 800951a <_fflush_r+0x1a>
 8009516:	f7ff fbe7 	bl	8008ce8 <__sinit>
 800951a:	4b14      	ldr	r3, [pc, #80]	; (800956c <_fflush_r+0x6c>)
 800951c:	429c      	cmp	r4, r3
 800951e:	d11b      	bne.n	8009558 <_fflush_r+0x58>
 8009520:	686c      	ldr	r4, [r5, #4]
 8009522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0ef      	beq.n	800950a <_fflush_r+0xa>
 800952a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800952c:	07d0      	lsls	r0, r2, #31
 800952e:	d404      	bmi.n	800953a <_fflush_r+0x3a>
 8009530:	0599      	lsls	r1, r3, #22
 8009532:	d402      	bmi.n	800953a <_fflush_r+0x3a>
 8009534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009536:	f7ff fc9a 	bl	8008e6e <__retarget_lock_acquire_recursive>
 800953a:	4628      	mov	r0, r5
 800953c:	4621      	mov	r1, r4
 800953e:	f7ff ff59 	bl	80093f4 <__sflush_r>
 8009542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009544:	07da      	lsls	r2, r3, #31
 8009546:	4605      	mov	r5, r0
 8009548:	d4e0      	bmi.n	800950c <_fflush_r+0xc>
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	059b      	lsls	r3, r3, #22
 800954e:	d4dd      	bmi.n	800950c <_fflush_r+0xc>
 8009550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009552:	f7ff fc8d 	bl	8008e70 <__retarget_lock_release_recursive>
 8009556:	e7d9      	b.n	800950c <_fflush_r+0xc>
 8009558:	4b05      	ldr	r3, [pc, #20]	; (8009570 <_fflush_r+0x70>)
 800955a:	429c      	cmp	r4, r3
 800955c:	d101      	bne.n	8009562 <_fflush_r+0x62>
 800955e:	68ac      	ldr	r4, [r5, #8]
 8009560:	e7df      	b.n	8009522 <_fflush_r+0x22>
 8009562:	4b04      	ldr	r3, [pc, #16]	; (8009574 <_fflush_r+0x74>)
 8009564:	429c      	cmp	r4, r3
 8009566:	bf08      	it	eq
 8009568:	68ec      	ldreq	r4, [r5, #12]
 800956a:	e7da      	b.n	8009522 <_fflush_r+0x22>
 800956c:	08009ad8 	.word	0x08009ad8
 8009570:	08009af8 	.word	0x08009af8
 8009574:	08009ab8 	.word	0x08009ab8

08009578 <_lseek_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	; (8009598 <_lseek_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f8 fa0a 	bl	80019a0 <_lseek>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_lseek_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_lseek_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20004470 	.word	0x20004470

0800959c <__swhatbuf_r>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	460e      	mov	r6, r1
 80095a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a4:	2900      	cmp	r1, #0
 80095a6:	b096      	sub	sp, #88	; 0x58
 80095a8:	4614      	mov	r4, r2
 80095aa:	461d      	mov	r5, r3
 80095ac:	da08      	bge.n	80095c0 <__swhatbuf_r+0x24>
 80095ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	602a      	str	r2, [r5, #0]
 80095b6:	061a      	lsls	r2, r3, #24
 80095b8:	d410      	bmi.n	80095dc <__swhatbuf_r+0x40>
 80095ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095be:	e00e      	b.n	80095de <__swhatbuf_r+0x42>
 80095c0:	466a      	mov	r2, sp
 80095c2:	f000 f8bb 	bl	800973c <_fstat_r>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	dbf1      	blt.n	80095ae <__swhatbuf_r+0x12>
 80095ca:	9a01      	ldr	r2, [sp, #4]
 80095cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095d4:	425a      	negs	r2, r3
 80095d6:	415a      	adcs	r2, r3
 80095d8:	602a      	str	r2, [r5, #0]
 80095da:	e7ee      	b.n	80095ba <__swhatbuf_r+0x1e>
 80095dc:	2340      	movs	r3, #64	; 0x40
 80095de:	2000      	movs	r0, #0
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	b016      	add	sp, #88	; 0x58
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095e8 <__smakebuf_r>:
 80095e8:	898b      	ldrh	r3, [r1, #12]
 80095ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095ec:	079d      	lsls	r5, r3, #30
 80095ee:	4606      	mov	r6, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	d507      	bpl.n	8009604 <__smakebuf_r+0x1c>
 80095f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	2301      	movs	r3, #1
 80095fe:	6163      	str	r3, [r4, #20]
 8009600:	b002      	add	sp, #8
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	ab01      	add	r3, sp, #4
 8009606:	466a      	mov	r2, sp
 8009608:	f7ff ffc8 	bl	800959c <__swhatbuf_r>
 800960c:	9900      	ldr	r1, [sp, #0]
 800960e:	4605      	mov	r5, r0
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff fc65 	bl	8008ee0 <_malloc_r>
 8009616:	b948      	cbnz	r0, 800962c <__smakebuf_r+0x44>
 8009618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800961c:	059a      	lsls	r2, r3, #22
 800961e:	d4ef      	bmi.n	8009600 <__smakebuf_r+0x18>
 8009620:	f023 0303 	bic.w	r3, r3, #3
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	e7e3      	b.n	80095f4 <__smakebuf_r+0xc>
 800962c:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <__smakebuf_r+0x7c>)
 800962e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	6020      	str	r0, [r4, #0]
 8009634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	6163      	str	r3, [r4, #20]
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	6120      	str	r0, [r4, #16]
 8009642:	b15b      	cbz	r3, 800965c <__smakebuf_r+0x74>
 8009644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f889 	bl	8009760 <_isatty_r>
 800964e:	b128      	cbz	r0, 800965c <__smakebuf_r+0x74>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	89a0      	ldrh	r0, [r4, #12]
 800965e:	4305      	orrs	r5, r0
 8009660:	81a5      	strh	r5, [r4, #12]
 8009662:	e7cd      	b.n	8009600 <__smakebuf_r+0x18>
 8009664:	08008c81 	.word	0x08008c81

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__malloc_lock+0x8>)
 800966a:	f7ff bc00 	b.w	8008e6e <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	20004464 	.word	0x20004464

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__malloc_unlock+0x8>)
 8009676:	f7ff bbfb 	b.w	8008e70 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	20004464 	.word	0x20004464

08009680 <_free_r>:
 8009680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009682:	2900      	cmp	r1, #0
 8009684:	d044      	beq.n	8009710 <_free_r+0x90>
 8009686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800968a:	9001      	str	r0, [sp, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f1a1 0404 	sub.w	r4, r1, #4
 8009692:	bfb8      	it	lt
 8009694:	18e4      	addlt	r4, r4, r3
 8009696:	f7ff ffe7 	bl	8009668 <__malloc_lock>
 800969a:	4a1e      	ldr	r2, [pc, #120]	; (8009714 <_free_r+0x94>)
 800969c:	9801      	ldr	r0, [sp, #4]
 800969e:	6813      	ldr	r3, [r2, #0]
 80096a0:	b933      	cbnz	r3, 80096b0 <_free_r+0x30>
 80096a2:	6063      	str	r3, [r4, #4]
 80096a4:	6014      	str	r4, [r2, #0]
 80096a6:	b003      	add	sp, #12
 80096a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ac:	f7ff bfe2 	b.w	8009674 <__malloc_unlock>
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	d908      	bls.n	80096c6 <_free_r+0x46>
 80096b4:	6825      	ldr	r5, [r4, #0]
 80096b6:	1961      	adds	r1, r4, r5
 80096b8:	428b      	cmp	r3, r1
 80096ba:	bf01      	itttt	eq
 80096bc:	6819      	ldreq	r1, [r3, #0]
 80096be:	685b      	ldreq	r3, [r3, #4]
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	e7ed      	b.n	80096a2 <_free_r+0x22>
 80096c6:	461a      	mov	r2, r3
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	b10b      	cbz	r3, 80096d0 <_free_r+0x50>
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	d9fa      	bls.n	80096c6 <_free_r+0x46>
 80096d0:	6811      	ldr	r1, [r2, #0]
 80096d2:	1855      	adds	r5, r2, r1
 80096d4:	42a5      	cmp	r5, r4
 80096d6:	d10b      	bne.n	80096f0 <_free_r+0x70>
 80096d8:	6824      	ldr	r4, [r4, #0]
 80096da:	4421      	add	r1, r4
 80096dc:	1854      	adds	r4, r2, r1
 80096de:	42a3      	cmp	r3, r4
 80096e0:	6011      	str	r1, [r2, #0]
 80096e2:	d1e0      	bne.n	80096a6 <_free_r+0x26>
 80096e4:	681c      	ldr	r4, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	6053      	str	r3, [r2, #4]
 80096ea:	4421      	add	r1, r4
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	e7da      	b.n	80096a6 <_free_r+0x26>
 80096f0:	d902      	bls.n	80096f8 <_free_r+0x78>
 80096f2:	230c      	movs	r3, #12
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	e7d6      	b.n	80096a6 <_free_r+0x26>
 80096f8:	6825      	ldr	r5, [r4, #0]
 80096fa:	1961      	adds	r1, r4, r5
 80096fc:	428b      	cmp	r3, r1
 80096fe:	bf04      	itt	eq
 8009700:	6819      	ldreq	r1, [r3, #0]
 8009702:	685b      	ldreq	r3, [r3, #4]
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	bf04      	itt	eq
 8009708:	1949      	addeq	r1, r1, r5
 800970a:	6021      	streq	r1, [r4, #0]
 800970c:	6054      	str	r4, [r2, #4]
 800970e:	e7ca      	b.n	80096a6 <_free_r+0x26>
 8009710:	b003      	add	sp, #12
 8009712:	bd30      	pop	{r4, r5, pc}
 8009714:	20004468 	.word	0x20004468

08009718 <_read_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	; (8009738 <_read_r+0x20>)
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	602a      	str	r2, [r5, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7f8 f8da 	bl	80018e0 <_read>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_read_r+0x1e>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_read_r+0x1e>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	20004470 	.word	0x20004470

0800973c <_fstat_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_fstat_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f8 f90e 	bl	800196a <_fstat>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_fstat_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_fstat_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	20004470 	.word	0x20004470

08009760 <_isatty_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_isatty_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 f90d 	bl	800198a <_isatty>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_isatty_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_isatty_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20004470 	.word	0x20004470

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
