
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008864  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd4  08008bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bdc  08008bdc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004268  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042dc  200042dc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e350  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000458f  00000000  00000000  0003e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  00042988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d0  00000000  00000000  00044228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028795  00000000  00000000  000458f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f112  00000000  00000000  0006e08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed313  00000000  00000000  0008d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017a4b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d3c  00000000  00000000  0017a504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089fc 	.word	0x080089fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080089fc 	.word	0x080089fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, &ch, 1, 1000);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <__io_putchar+0x20>)
 80005b6:	f003 ffaa 	bl	800450e <HAL_UART_Transmit>
    return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000530 	.word	0x20000530

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000a8 	.word	0x200000a8
 80005f8:	2000015c 	.word	0x2000015c

080005fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000602:	2300      	movs	r3, #0
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
 8000606:	2300      	movs	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 800060a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f005 f826 	bl	8005662 <osSemaphoreCreate>
 8000616:	4603      	mov	r3, r0
 8000618:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <MX_FREERTOS_Init+0xd0>)
 800061a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 5, uint8_t);
 800061c:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <MX_FREERTOS_Init+0xd4>)
 800061e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8000628:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 f849 	bl	80056c6 <osMessageCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <MX_FREERTOS_Init+0xd8>)
 8000638:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_FREERTOS_Init+0xdc>)
 800063c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f004 ffa4 	bl	80055a2 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <MX_FREERTOS_Init+0xe0>)
 800065e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(tasktest1, task1, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_FREERTOS_Init+0xe4>)
 8000662:	f107 0420 	add.w	r4, r7, #32
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(tasktest1), NULL);
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 ff91 	bl	80055a2 <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_FREERTOS_Init+0xe8>)
 8000684:	6013      	str	r3, [r2, #0]
  if(!Task1Handle)
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_FREERTOS_Init+0xe8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <MX_FREERTOS_Init+0x98>
	  printf("ERR : Console Task Creation Failure !\r\n");
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <MX_FREERTOS_Init+0xec>)
 8000690:	f007 fb58 	bl	8007d44 <puts>

  osThreadDef(tasktest2, task2, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_FREERTOS_Init+0xf0>)
 8000696:	1d3c      	adds	r4, r7, #4
 8000698:	461d      	mov	r5, r3
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(tasktest2), NULL);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 ff79 	bl	80055a2 <osThreadCreate>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_FREERTOS_Init+0xf4>)
 80006b4:	6013      	str	r3, [r2, #0]

  if(!Task2Handle)
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_FREERTOS_Init+0xf4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <MX_FREERTOS_Init+0xc8>
     printf("ERR : CLI Task Creation Failure !\r\n");
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_FREERTOS_Init+0xf8>)
 80006c0:	f007 fb40 	bl	8007d44 <puts>

  /* USER CODE END RTOS_THREADS */

}
 80006c4:	bf00      	nop
 80006c6:	3770      	adds	r7, #112	; 0x70
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bdb0      	pop	{r4, r5, r7, pc}
 80006cc:	200000a4 	.word	0x200000a4
 80006d0:	08008a84 	.word	0x08008a84
 80006d4:	200000a0 	.word	0x200000a0
 80006d8:	08008a94 	.word	0x08008a94
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	08008ab0 	.word	0x08008ab0
 80006e4:	20000090 	.word	0x20000090
 80006e8:	08008a38 	.word	0x08008a38
 80006ec:	08008acc 	.word	0x08008acc
 80006f0:	20000094 	.word	0x20000094
 80006f4:	08008a60 	.word	0x08008a60

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0';
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <StartDefaultTask+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 fc12 	bl	8005f40 <xQueueReceiveFromISR>
 800071c:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d112      	bne.n	800074a <StartDefaultTask+0x52>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <StartDefaultTask+0x60>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	f107 010f 	add.w	r1, r7, #15
 8000730:	4618      	mov	r0, r3
 8000732:	f005 fc05 	bl	8005f40 <xQueueReceiveFromISR>
 8000736:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d005      	beq.n	800074a <StartDefaultTask+0x52>
				// do something . . .
				Move(cByteRxed - '0');
 800073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000742:	3b30      	subs	r3, #48	; 0x30
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa65 	bl	8000c14 <Move>
			}
		}

		osDelay(50);
 800074a:	2032      	movs	r0, #50	; 0x32
 800074c:	f004 ff75 	bl	800563a <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000750:	e7dc      	b.n	800070c <StartDefaultTask+0x14>
 8000752:	bf00      	nop
 8000754:	200000a4 	.word	0x200000a4
 8000758:	200000a0 	.word	0x200000a0

0800075c <task1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task1 (void const * argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000764:	2201      	movs	r2, #1
 8000766:	4904      	ldr	r1, [pc, #16]	; (8000778 <task1+0x1c>)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <task1+0x20>)
 800076a:	f003 ff62 	bl	8004632 <HAL_UART_Receive_IT>
    	osDelay(10);
 800076e:	200a      	movs	r0, #10
 8000770:	f004 ff63 	bl	800563a <osDelay>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000774:	e7f6      	b.n	8000764 <task1+0x8>
 8000776:	bf00      	nop
 8000778:	20000098 	.word	0x20000098
 800077c:	20000530 	.word	0x20000530

08000780 <task2>:
    }
}
void task2 (void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    unsigned short cnt=0;
 8000788:	2300      	movs	r3, #0
 800078a:	81fb      	strh	r3, [r7, #14]

    /* Infinite loop */
    for(;;)
    {
  	  printf("Task 2 is running ======> (%d)\n", cnt++);
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	81fa      	strh	r2, [r7, #14]
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <task2+0x24>)
 8000796:	f007 fa4f 	bl	8007c38 <iprintf>
         osDelay(3000);
 800079a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800079e:	f004 ff4c 	bl	800563a <osDelay>
    {
 80007a2:	e7f3      	b.n	800078c <task2+0xc>
 80007a4:	08008ae8 	.word	0x08008ae8

080007a8 <HAL_UART_RxCpltCallback>:
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UART_RxCpltCallback+0x70>)
 80007b2:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_UART_RxCpltCallback+0x74>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d124      	bne.n	8000810 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_UART_RxCpltCallback+0x78>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	2300      	movs	r3, #0
 80007d0:	4914      	ldr	r1, [pc, #80]	; (8000824 <HAL_UART_RxCpltCallback+0x7c>)
 80007d2:	f005 fa8d 	bl	8005cf0 <xQueueGenericSendFromISR>
 80007d6:	6138      	str	r0, [r7, #16]
		if(ret) {
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_UART_RxCpltCallback+0x80>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f107 020c 	add.w	r2, r7, #12
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 fb1c 	bl	8005e26 <xQueueGiveFromISR>
 80007ee:	e00a      	b.n	8000806 <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 80007f0:	6978      	ldr	r0, [r7, #20]
 80007f2:	f7ff fcfd 	bl	80001f0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	6979      	ldr	r1, [r7, #20]
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <HAL_UART_RxCpltCallback+0x84>)
 8000802:	f003 fe84 	bl	800450e <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000806:	2201      	movs	r2, #1
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <HAL_UART_RxCpltCallback+0x7c>)
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <HAL_UART_RxCpltCallback+0x84>)
 800080c:	f003 ff11 	bl	8004632 <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08008b08 	.word	0x08008b08
 800081c:	40011400 	.word	0x40011400
 8000820:	200000a0 	.word	0x200000a0
 8000824:	20000098 	.word	0x20000098
 8000828:	200000a4 	.word	0x200000a4
 800082c:	20000530 	.word	0x20000530

08000830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b50      	ldr	r3, [pc, #320]	; (800098c <MX_GPIO_Init+0x15c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a4f      	ldr	r2, [pc, #316]	; (800098c <MX_GPIO_Init+0x15c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b4d      	ldr	r3, [pc, #308]	; (800098c <MX_GPIO_Init+0x15c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b49      	ldr	r3, [pc, #292]	; (800098c <MX_GPIO_Init+0x15c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a48      	ldr	r2, [pc, #288]	; (800098c <MX_GPIO_Init+0x15c>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b46      	ldr	r3, [pc, #280]	; (800098c <MX_GPIO_Init+0x15c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b42      	ldr	r3, [pc, #264]	; (800098c <MX_GPIO_Init+0x15c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a41      	ldr	r2, [pc, #260]	; (800098c <MX_GPIO_Init+0x15c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3f      	ldr	r3, [pc, #252]	; (800098c <MX_GPIO_Init+0x15c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b3b      	ldr	r3, [pc, #236]	; (800098c <MX_GPIO_Init+0x15c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3a      	ldr	r2, [pc, #232]	; (800098c <MX_GPIO_Init+0x15c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b38      	ldr	r3, [pc, #224]	; (800098c <MX_GPIO_Init+0x15c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b34      	ldr	r3, [pc, #208]	; (800098c <MX_GPIO_Init+0x15c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <MX_GPIO_Init+0x15c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <MX_GPIO_Init+0x15c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b2d      	ldr	r3, [pc, #180]	; (800098c <MX_GPIO_Init+0x15c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a2c      	ldr	r2, [pc, #176]	; (800098c <MX_GPIO_Init+0x15c>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <MX_GPIO_Init+0x15c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_GPIO_Init+0x15c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a25      	ldr	r2, [pc, #148]	; (800098c <MX_GPIO_Init+0x15c>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_GPIO_Init+0x15c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <MX_GPIO_Init+0x160>)
 8000912:	f001 fb95 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f244 0181 	movw	r1, #16513	; 0x4081
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <MX_GPIO_Init+0x164>)
 800091e:	f001 fb8f 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_GPIO_Init+0x168>)
 8000928:	f001 fb8a 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800092c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4812      	ldr	r0, [pc, #72]	; (8000990 <MX_GPIO_Init+0x160>)
 8000946:	f001 f9cf 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800094a:	f244 0381 	movw	r3, #16513	; 0x4081
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0x164>)
 8000964:	f001 f9c0 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_GPIO_Init+0x168>)
 8000980:	f001 f9b2 	bl	8001ce8 <HAL_GPIO_Init>

}
 8000984:	bf00      	nop
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40021400 	.word	0x40021400
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800

0800099c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009da:	f001 fb4b 	bl	8002074 <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 f910 	bl	8000c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ec:	f001 fc86 	bl	80022fc <HAL_I2CEx_ConfigAnalogFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009f6:	f000 f907 	bl	8000c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009fe:	f001 fcb9 	bl	8002374 <HAL_I2CEx_ConfigDigitalFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f8fe 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000035c 	.word	0x2000035c
 8000a14:	40005400 	.word	0x40005400
 8000a18:	000186a0 	.word	0x000186a0

08000a1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_I2C_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12c      	bne.n	8000a98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a60:	2312      	movs	r3, #18
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_I2C_MspInit+0x8c>)
 8000a78:	f001 f936 	bl	8001ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 ff64 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f818 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f7ff feba 	bl	8000830 <MX_GPIO_Init>
  MX_RTC_Init();
 8000abc:	f000 fa88 	bl	8000fd0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000ac0:	f000 fd92 	bl	80015e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ac4:	f000 fdba 	bl	800163c <MX_USART3_UART_Init>
  MX_UART7_Init();
 8000ac8:	f000 fd64 	bl	8001594 <MX_UART7_Init>
  MX_I2C1_Init();
 8000acc:	f7ff ff66 	bl	800099c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ad0:	f000 fc52 	bl	8001378 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000ad4:	f000 fddc 	bl	8001690 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ad8:	f000 f878 	bl	8000bcc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000adc:	f7ff fd8e 	bl	80005fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ae0:	f004 fd58 	bl	8005594 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <main+0x38>
	...

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2230      	movs	r2, #48	; 0x30
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 f801 	bl	8007afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000b44:	2306      	movs	r3, #6
 8000b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b50:	2310      	movs	r3, #16
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b60:	23b4      	movs	r3, #180	; 0xb4
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fc8f 	bl	8002494 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b7c:	f000 f844 	bl	8000c08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b80:	f001 fc38 	bl	80023f4 <HAL_PWREx_EnableOverDrive>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b8a:	f000 f83d 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2302      	movs	r3, #2
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2105      	movs	r1, #5
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fee9 	bl	8002984 <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bb8:	f000 f826 	bl	8000c08 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	2047      	movs	r0, #71	; 0x47
 8000bd6:	f000 ffcb 	bl	8001b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000bda:	2047      	movs	r0, #71	; 0x47
 8000bdc:	f000 ffe4 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fee3 	bl	80019c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40000c00 	.word	0x40000c00

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <Move>:
 *  Created on: Jun 30, 2022
 *      Author: cjhno
 */
#include "motor.h"

void Move(int controlcmd){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	f200 8097 	bhi.w	8000d52 <Move+0x13e>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <Move+0x18>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000d2d 	.word	0x08000d2d
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000cbb 	.word	0x08000cbb
 8000c38:	08000c6f 	.word	0x08000c6f
 8000c3c:	08000c95 	.word	0x08000c95
 8000c40:	08000ce1 	.word	0x08000ce1
 8000c44:	08000d07 	.word	0x08000d07
		case FORWARD:
			Forward();
 8000c48:	f000 f88c 	bl	8000d64 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4843      	ldr	r0, [pc, #268]	; (8000d60 <Move+0x14c>)
 8000c52:	f001 f9f5 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4841      	ldr	r0, [pc, #260]	; (8000d60 <Move+0x14c>)
 8000c5c:	f001 f9f0 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c66:	483e      	ldr	r0, [pc, #248]	; (8000d60 <Move+0x14c>)
 8000c68:	f001 f9ea 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000c6c:	e074      	b.n	8000d58 <Move+0x144>
		case BACKWARD:
			Backward();
 8000c6e:	f000 f8a9 	bl	8000dc4 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	483a      	ldr	r0, [pc, #232]	; (8000d60 <Move+0x14c>)
 8000c78:	f001 f9e2 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4837      	ldr	r0, [pc, #220]	; (8000d60 <Move+0x14c>)
 8000c82:	f001 f9dd 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	4834      	ldr	r0, [pc, #208]	; (8000d60 <Move+0x14c>)
 8000c8e:	f001 f9d7 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000c92:	e061      	b.n	8000d58 <Move+0x144>
		case LEFT:
			Left();
 8000c94:	f000 f8f6 	bl	8000e84 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4830      	ldr	r0, [pc, #192]	; (8000d60 <Move+0x14c>)
 8000c9e:	f001 f9cf 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	482e      	ldr	r0, [pc, #184]	; (8000d60 <Move+0x14c>)
 8000ca8:	f001 f9ca 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <Move+0x14c>)
 8000cb4:	f001 f9c4 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000cb8:	e04e      	b.n	8000d58 <Move+0x144>
		case RIGHT:
			Right();
 8000cba:	f000 f8b3 	bl	8000e24 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4827      	ldr	r0, [pc, #156]	; (8000d60 <Move+0x14c>)
 8000cc4:	f001 f9bc 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4824      	ldr	r0, [pc, #144]	; (8000d60 <Move+0x14c>)
 8000cce:	f001 f9b7 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <Move+0x14c>)
 8000cda:	f001 f9b1 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000cde:	e03b      	b.n	8000d58 <Move+0x144>
		case CW:
			Cw();
 8000ce0:	f000 f900 	bl	8000ee4 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	481d      	ldr	r0, [pc, #116]	; (8000d60 <Move+0x14c>)
 8000cea:	f001 f9a9 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	481b      	ldr	r0, [pc, #108]	; (8000d60 <Move+0x14c>)
 8000cf4:	f001 f9a4 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4818      	ldr	r0, [pc, #96]	; (8000d60 <Move+0x14c>)
 8000d00:	f001 f99e 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000d04:	e028      	b.n	8000d58 <Move+0x144>
		case CCW:
			Ccw();
 8000d06:	f000 f91d 	bl	8000f44 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <Move+0x14c>)
 8000d10:	f001 f996 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <Move+0x14c>)
 8000d1a:	f001 f991 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <Move+0x14c>)
 8000d26:	f001 f98b 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000d2a:	e015      	b.n	8000d58 <Move+0x144>
		case STOP:
			Stop();
 8000d2c:	f000 f93a 	bl	8000fa4 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <Move+0x14c>)
 8000d36:	f001 f983 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <Move+0x14c>)
 8000d40:	f001 f97e 	bl	8002040 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <Move+0x14c>)
 8000d4c:	f001 f978 	bl	8002040 <HAL_GPIO_WritePin>
			break;
 8000d50:	e002      	b.n	8000d58 <Move+0x144>
		default:
			Stop();
 8000d52:	f000 f927 	bl	8000fa4 <Stop>
			break;
 8000d56:	bf00      	nop
		}
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40020400 	.word	0x40020400

08000d64 <Forward>:

void Forward()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <Forward+0x54>)
 8000d6e:	f001 f967 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <Forward+0x58>)
 8000d7a:	f001 f961 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <Forward+0x58>)
 8000d84:	f001 f95c 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <Forward+0x58>)
 8000d90:	f001 f956 	bl	8002040 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <Forward+0x5c>)
 8000d98:	f002 fbda 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <Forward+0x5c>)
 8000da0:	f002 fbd6 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000da4:	2108      	movs	r1, #8
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <Forward+0x5c>)
 8000da8:	f002 fbd2 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000dac:	210c      	movs	r1, #12
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <Forward+0x5c>)
 8000db0:	f002 fbce 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40021400 	.word	0x40021400
 8000dc0:	2000041c 	.word	0x2000041c

08000dc4 <Backward>:

void Backward()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <Backward+0x54>)
 8000dce:	f001 f937 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <Backward+0x58>)
 8000dda:	f001 f931 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <Backward+0x58>)
 8000de4:	f001 f92c 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <Backward+0x58>)
 8000df0:	f001 f926 	bl	8002040 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <Backward+0x5c>)
 8000df8:	f002 fbaa 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <Backward+0x5c>)
 8000e00:	f002 fba6 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e04:	2108      	movs	r1, #8
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <Backward+0x5c>)
 8000e08:	f002 fba2 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <Backward+0x5c>)
 8000e10:	f002 fb9e 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	2000041c 	.word	0x2000041c

08000e24 <Right>:

void Right()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4812      	ldr	r0, [pc, #72]	; (8000e78 <Right+0x54>)
 8000e2e:	f001 f907 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e38:	4810      	ldr	r0, [pc, #64]	; (8000e7c <Right+0x58>)
 8000e3a:	f001 f901 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <Right+0x58>)
 8000e44:	f001 f8fc 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <Right+0x58>)
 8000e50:	f001 f8f6 	bl	8002040 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e54:	2100      	movs	r1, #0
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <Right+0x5c>)
 8000e58:	f002 fb7a 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <Right+0x5c>)
 8000e60:	f002 fb76 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e64:	2108      	movs	r1, #8
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <Right+0x5c>)
 8000e68:	f002 fb72 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <Right+0x5c>)
 8000e70:	f002 fb6e 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021800 	.word	0x40021800
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	2000041c 	.word	0x2000041c

08000e84 <Left>:

void Left()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <Left+0x54>)
 8000e8e:	f001 f8d7 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <Left+0x58>)
 8000e9a:	f001 f8d1 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <Left+0x58>)
 8000ea4:	f001 f8cc 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <Left+0x58>)
 8000eb0:	f001 f8c6 	bl	8002040 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <Left+0x5c>)
 8000eb8:	f002 fb4a 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <Left+0x5c>)
 8000ec0:	f002 fb46 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <Left+0x5c>)
 8000ec8:	f002 fb42 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ecc:	210c      	movs	r1, #12
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <Left+0x5c>)
 8000ed0:	f002 fb3e 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	2000041c 	.word	0x2000041c

08000ee4 <Cw>:

void Cw()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	4812      	ldr	r0, [pc, #72]	; (8000f38 <Cw+0x54>)
 8000eee:	f001 f8a7 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <Cw+0x58>)
 8000efa:	f001 f8a1 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <Cw+0x58>)
 8000f04:	f001 f89c 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <Cw+0x58>)
 8000f10:	f001 f896 	bl	8002040 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f14:	2100      	movs	r1, #0
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <Cw+0x5c>)
 8000f18:	f002 fb1a 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f1c:	2104      	movs	r1, #4
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <Cw+0x5c>)
 8000f20:	f002 fb16 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f24:	2108      	movs	r1, #8
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <Cw+0x5c>)
 8000f28:	f002 fb12 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f2c:	210c      	movs	r1, #12
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <Cw+0x5c>)
 8000f30:	f002 fb0e 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	2000041c 	.word	0x2000041c

08000f44 <Ccw>:

void Ccw()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4812      	ldr	r0, [pc, #72]	; (8000f98 <Ccw+0x54>)
 8000f4e:	f001 f877 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <Ccw+0x58>)
 8000f5a:	f001 f871 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <Ccw+0x58>)
 8000f64:	f001 f86c 	bl	8002040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <Ccw+0x58>)
 8000f70:	f001 f866 	bl	8002040 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <Ccw+0x5c>)
 8000f78:	f002 faea 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <Ccw+0x5c>)
 8000f80:	f002 fae6 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <Ccw+0x5c>)
 8000f88:	f002 fae2 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <Ccw+0x5c>)
 8000f90:	f002 fade 	bl	8003550 <HAL_TIM_PWM_Start>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	2000041c 	.word	0x2000041c

08000fa4 <Stop>:

void Stop()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <Stop+0x28>)
 8000fac:	f002 fb98 	bl	80036e0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <Stop+0x28>)
 8000fb4:	f002 fb94 	bl	80036e0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <Stop+0x28>)
 8000fbc:	f002 fb90 	bl	80036e0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000fc0:	210c      	movs	r1, #12
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <Stop+0x28>)
 8000fc4:	f002 fb8c 	bl	80036e0 <HAL_TIM_PWM_Stop>


}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000041c 	.word	0x2000041c

08000fd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_RTC_Init+0x44>)
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <MX_RTC_Init+0x48>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_RTC_Init+0x44>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_RTC_Init+0x44>)
 8000fe2:	227f      	movs	r2, #127	; 0x7f
 8000fe4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_RTC_Init+0x44>)
 8000fe8:	22ff      	movs	r2, #255	; 0xff
 8000fea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_RTC_Init+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_RTC_Init+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_RTC_Init+0x44>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_RTC_Init+0x44>)
 8001000:	f002 f892 	bl	8003128 <HAL_RTC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800100a:	f7ff fdfd 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200003b0 	.word	0x200003b0
 8001018:	40002800 	.word	0x40002800

0800101c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2230      	movs	r2, #48	; 0x30
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fd66 	bl	8007afe <memset>
  if(rtcHandle->Instance==RTC)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_RTC_MspInit+0x4c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d111      	bne.n	8001060 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800103c:	2320      	movs	r3, #32
 800103e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4618      	mov	r0, r3
 800104c:	f001 feac 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001056:	f7ff fdd7 	bl	8000c08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_RTC_MspInit+0x50>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	3738      	adds	r7, #56	; 0x38
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40002800 	.word	0x40002800
 800106c:	42470e3c 	.word	0x42470e3c

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_MspInit+0x54>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_MspInit+0x54>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_MspInit+0x54>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_MspInit+0x54>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_MspInit+0x54>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_MspInit+0x54>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	210f      	movs	r1, #15
 80010b2:	f06f 0001 	mvn.w	r0, #1
 80010b6:	f000 fd5b 	bl	8001b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f000 fd47 	bl	8001b70 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010e2:	2032      	movs	r0, #50	; 0x32
 80010e4:	f000 fd60 	bl	8001ba8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_InitTick+0xa4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a1e      	ldr	r2, [pc, #120]	; (800116c <HAL_InitTick+0xa4>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_InitTick+0xa4>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001104:	f107 0210 	add.w	r2, r7, #16
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fe18 	bl	8002d44 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001114:	f001 fdee 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8001118:	4603      	mov	r3, r0
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_InitTick+0xa8>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9b      	lsrs	r3, r3, #18
 8001128:	3b01      	subs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_InitTick+0xac>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_InitTick+0xb0>)
 8001130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_InitTick+0xac>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_InitTick+0xac>)
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_InitTick+0xac>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_InitTick+0xac>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_InitTick+0xac>)
 800114e:	f002 f8e5 	bl	800331c <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_InitTick+0xac>)
 800115a:	f002 f92f 	bl	80033bc <HAL_TIM_Base_Start_IT>
 800115e:	4603      	mov	r3, r0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	431bde83 	.word	0x431bde83
 8001174:	200003d0 	.word	0x200003d0
 8001178:	40000c00 	.word	0x40000c00

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f003 fa71 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200004a8 	.word	0x200004a8

080011bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART3_IRQHandler+0x10>)
 80011c2:	f003 fa67 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200004ec 	.word	0x200004ec

080011d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM5_IRQHandler+0x10>)
 80011d6:	f002 faf3 	bl	80037c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200003d0 	.word	0x200003d0

080011e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART6_IRQHandler+0x10>)
 80011ea:	f003 fa53 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000530 	.word	0x20000530

080011f8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <UART7_IRQHandler+0x10>)
 80011fe:	f003 fa49 	bl	8004694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000464 	.word	0x20000464

0800120c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
	}

return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f99f 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
	}
	return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f006 fac0 	bl	800789c <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20030000 	.word	0x20030000
 8001348:	00000400 	.word	0x00000400
 800134c:	20000418 	.word	0x20000418
 8001350:	200042e0 	.word	0x200042e0

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013b2:	2259      	movs	r2, #89	; 0x59
 80013b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013bc:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013d2:	f001 ffa3 	bl	800331c <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013dc:	f7ff fc14 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013ee:	f002 fbb1 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013f8:	f7ff fc06 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013fc:	4828      	ldr	r0, [pc, #160]	; (80014a0 <MX_TIM2_Init+0x128>)
 80013fe:	f002 f84d 	bl	800349c <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001408:	f7ff fbfe 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001414:	f107 0320 	add.w	r3, r7, #32
 8001418:	4619      	mov	r1, r3
 800141a:	4821      	ldr	r0, [pc, #132]	; (80014a0 <MX_TIM2_Init+0x128>)
 800141c:	f002 ff9a 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001426:	f7ff fbef 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800142a:	2370      	movs	r3, #112	; 0x70
 800142c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_TIM2_Init+0x128>)
 8001442:	f002 fac5 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800144c:	f7ff fbdc 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2204      	movs	r2, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4812      	ldr	r0, [pc, #72]	; (80014a0 <MX_TIM2_Init+0x128>)
 8001458:	f002 faba 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001462:	f7ff fbd1 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2208      	movs	r2, #8
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM2_Init+0x128>)
 800146e:	f002 faaf 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001478:	f7ff fbc6 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	220c      	movs	r2, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM2_Init+0x128>)
 8001484:	f002 faa4 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800148e:	f7ff fbbb 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM2_Init+0x128>)
 8001494:	f000 f826 	bl	80014e4 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	; 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000041c 	.word	0x2000041c

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d10d      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_TIM_Base_MspInit+0x3c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_TIM_Base_MspInit+0x3c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_TIM_Base_MspInit+0x3c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001504:	d13c      	bne.n	8001580 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_TIM_MspPostInit+0xa4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154e:	2301      	movs	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_TIM_MspPostInit+0xa8>)
 800155a:	f000 fbc5 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800155e:	f640 4308 	movw	r3, #3080	; 0xc08
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001570:	2301      	movs	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_TIM_MspPostInit+0xac>)
 800157c:	f000 fbb4 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400

08001594 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_UART7_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_UART7_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015a4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_UART7_Init+0x4c>)
 80015cc:	f002 ff52 	bl	8004474 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80015d6:	f7ff fb17 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000464 	.word	0x20000464
 80015e4:	40007800 	.word	0x40007800

080015e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_USART2_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART2_UART_Init+0x4c>)
 8001620:	f002 ff28 	bl	8004474 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f7ff faed 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200004a8 	.word	0x200004a8
 8001638:	40004400 	.word	0x40004400

0800163c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART3_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART3_UART_Init+0x4c>)
 8001674:	f002 fefe 	bl	8004474 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fac3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200004ec 	.word	0x200004ec
 800168c:	40004800 	.word	0x40004800

08001690 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART6_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 800169c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80016a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART6_UART_Init+0x4c>)
 80016c8:	f002 fed4 	bl	8004474 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fa99 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000530 	.word	0x20000530
 80016e0:	40011400 	.word	0x40011400

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b090      	sub	sp, #64	; 0x40
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a80      	ldr	r2, [pc, #512]	; (8001904 <HAL_UART_MspInit+0x220>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d135      	bne.n	8001772 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
 800170a:	4b7f      	ldr	r3, [pc, #508]	; (8001908 <HAL_UART_MspInit+0x224>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a7e      	ldr	r2, [pc, #504]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a77      	ldr	r2, [pc, #476]	; (8001908 <HAL_UART_MspInit+0x224>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800173e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001750:	2308      	movs	r3, #8
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001758:	4619      	mov	r1, r3
 800175a:	486c      	ldr	r0, [pc, #432]	; (800190c <HAL_UART_MspInit+0x228>)
 800175c:	f000 fac4 	bl	8001ce8 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	2052      	movs	r0, #82	; 0x52
 8001766:	f000 fa03 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800176a:	2052      	movs	r0, #82	; 0x52
 800176c:	f000 fa1c 	bl	8001ba8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001770:	e0c4      	b.n	80018fc <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <HAL_UART_MspInit+0x22c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d152      	bne.n	8001822 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	4b61      	ldr	r3, [pc, #388]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a60      	ldr	r2, [pc, #384]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <HAL_UART_MspInit+0x224>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_UART_MspInit+0x224>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a59      	ldr	r2, [pc, #356]	; (8001908 <HAL_UART_MspInit+0x224>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_UART_MspInit+0x224>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_UART_MspInit+0x224>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_UART_MspInit+0x224>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_UART_MspInit+0x224>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d0:	2308      	movs	r3, #8
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e0:	2307      	movs	r3, #7
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	484a      	ldr	r0, [pc, #296]	; (8001914 <HAL_UART_MspInit+0x230>)
 80017ec:	f000 fa7c 	bl	8001ce8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f0:	2320      	movs	r3, #32
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4843      	ldr	r0, [pc, #268]	; (8001918 <HAL_UART_MspInit+0x234>)
 800180c:	f000 fa6c 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2105      	movs	r1, #5
 8001814:	2026      	movs	r0, #38	; 0x26
 8001816:	f000 f9ab 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800181a:	2026      	movs	r0, #38	; 0x26
 800181c:	f000 f9c4 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
}
 8001820:	e06c      	b.n	80018fc <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_UART_MspInit+0x238>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d135      	bne.n	8001898 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a34      	ldr	r2, [pc, #208]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_UART_MspInit+0x224>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_UART_MspInit+0x224>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <HAL_UART_MspInit+0x224>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_UART_MspInit+0x224>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001864:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001876:	2307      	movs	r3, #7
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <HAL_UART_MspInit+0x234>)
 8001882:	f000 fa31 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2027      	movs	r0, #39	; 0x27
 800188c:	f000 f970 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001890:	2027      	movs	r0, #39	; 0x27
 8001892:	f000 f989 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
}
 8001896:	e031      	b.n	80018fc <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_UART_MspInit+0x23c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12c      	bne.n	80018fc <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f003 0320 	and.w	r3, r3, #32
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_MspInit+0x224>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80018da:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018ec:	2308      	movs	r3, #8
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	480b      	ldr	r0, [pc, #44]	; (8001924 <HAL_UART_MspInit+0x240>)
 80018f8:	f000 f9f6 	bl	8001ce8 <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3740      	adds	r7, #64	; 0x40
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40007800 	.word	0x40007800
 8001908:	40023800 	.word	0x40023800
 800190c:	40021000 	.word	0x40021000
 8001910:	40004400 	.word	0x40004400
 8001914:	40020000 	.word	0x40020000
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40004800 	.word	0x40004800
 8001920:	40011400 	.word	0x40011400
 8001924:	40021800 	.word	0x40021800

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f7ff fcff 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f006 f89d 	bl	8007a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff f8a7 	bl	8000aac <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001960:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800196c:	08008be4 	.word	0x08008be4
  ldr r2, =_sbss
 8001970:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001974:	200042dc 	.word	0x200042dc

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f8d8 	bl	8001b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f7ff fb8c 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fb5e 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000574 	.word	0x20000574

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000574 	.word	0x20000574

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff4c 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b82:	f7ff ff61 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ffb1 	bl	8001af4 <NVIC_EncodePriority>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff80 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff54 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd2:	f7ff ff09 	bl	80019e8 <HAL_GetTick>
 8001bd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e052      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0216 	bic.w	r2, r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_DMA_Abort+0x62>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0208 	bic.w	r2, r2, #8
 8001c34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c46:	e013      	b.n	8001c70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c48:	f7ff fece 	bl	80019e8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d90c      	bls.n	8001c70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e015      	b.n	8001c9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1e4      	bne.n	8001c48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	223f      	movs	r2, #63	; 0x3f
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00c      	b.n	8001cdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e177      	b.n	8001ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 8166 	bne.w	8001fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d005      	beq.n	8001d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d130      	bne.n	8001d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0201 	and.w	r2, r3, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d017      	beq.n	8001dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d123      	bne.n	8001e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80c0 	beq.w	8001fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_GPIO_Init+0x324>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_GPIO_Init+0x324>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_GPIO_Init+0x324>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8a:	4a61      	ldr	r2, [pc, #388]	; (8002010 <HAL_GPIO_Init+0x328>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_GPIO_Init+0x32c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d037      	beq.n	8001f26 <HAL_GPIO_Init+0x23e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d031      	beq.n	8001f22 <HAL_GPIO_Init+0x23a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a56      	ldr	r2, [pc, #344]	; (800201c <HAL_GPIO_Init+0x334>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x236>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a55      	ldr	r2, [pc, #340]	; (8002020 <HAL_GPIO_Init+0x338>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x232>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a54      	ldr	r2, [pc, #336]	; (8002024 <HAL_GPIO_Init+0x33c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x22e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a53      	ldr	r2, [pc, #332]	; (8002028 <HAL_GPIO_Init+0x340>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x22a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_GPIO_Init+0x344>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	; (8002030 <HAL_GPIO_Init+0x348>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	; (8002034 <HAL_GPIO_Init+0x34c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x350>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001efe:	2309      	movs	r3, #9
 8001f00:	e012      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f02:	230a      	movs	r3, #10
 8001f04:	e010      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00e      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	; (8002010 <HAL_GPIO_Init+0x328>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_GPIO_Init+0x354>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_GPIO_Init+0x354>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b32      	ldr	r3, [pc, #200]	; (800203c <HAL_GPIO_Init+0x354>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a29      	ldr	r2, [pc, #164]	; (800203c <HAL_GPIO_Init+0x354>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_GPIO_Init+0x354>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_GPIO_Init+0x354>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_GPIO_Init+0x354>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_GPIO_Init+0x354>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f ae84 	bls.w	8001d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40022000 	.word	0x40022000
 8002038:	40022400 	.word	0x40022400
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e12b      	b.n	80022de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fcbe 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d8:	f000 fe0c 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80020dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4a81      	ldr	r2, [pc, #516]	; (80022e8 <HAL_I2C_Init+0x274>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d807      	bhi.n	80020f8 <HAL_I2C_Init+0x84>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4a80      	ldr	r2, [pc, #512]	; (80022ec <HAL_I2C_Init+0x278>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	bf94      	ite	ls
 80020f0:	2301      	movls	r3, #1
 80020f2:	2300      	movhi	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e006      	b.n	8002106 <HAL_I2C_Init+0x92>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a7d      	ldr	r2, [pc, #500]	; (80022f0 <HAL_I2C_Init+0x27c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bf94      	ite	ls
 8002100:	2301      	movls	r3, #1
 8002102:	2300      	movhi	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0e7      	b.n	80022de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4a78      	ldr	r2, [pc, #480]	; (80022f4 <HAL_I2C_Init+0x280>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_I2C_Init+0x274>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d802      	bhi.n	8002148 <HAL_I2C_Init+0xd4>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	e009      	b.n	800215c <HAL_I2C_Init+0xe8>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <HAL_I2C_Init+0x284>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	3301      	adds	r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800216e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	495c      	ldr	r1, [pc, #368]	; (80022e8 <HAL_I2C_Init+0x274>)
 8002178:	428b      	cmp	r3, r1
 800217a:	d819      	bhi.n	80021b0 <HAL_I2C_Init+0x13c>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e59      	subs	r1, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fbb1 f3f3 	udiv	r3, r1, r3
 800218a:	1c59      	adds	r1, r3, #1
 800218c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002190:	400b      	ands	r3, r1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_I2C_Init+0x138>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e59      	subs	r1, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021aa:	e051      	b.n	8002250 <HAL_I2C_Init+0x1dc>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e04f      	b.n	8002250 <HAL_I2C_Init+0x1dc>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <HAL_I2C_Init+0x168>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e012      	b.n	8002202 <HAL_I2C_Init+0x18e>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e58      	subs	r0, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	0099      	lsls	r1, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Init+0x196>
 8002206:	2301      	movs	r3, #1
 8002208:	e022      	b.n	8002250 <HAL_I2C_Init+0x1dc>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10e      	bne.n	8002230 <HAL_I2C_Init+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1e58      	subs	r0, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	440b      	add	r3, r1
 8002220:	fbb0 f3f3 	udiv	r3, r0, r3
 8002224:	3301      	adds	r3, #1
 8002226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	e00f      	b.n	8002250 <HAL_I2C_Init+0x1dc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e58      	subs	r0, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	0099      	lsls	r1, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	fbb0 f3f3 	udiv	r3, r0, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	6809      	ldr	r1, [r1, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69da      	ldr	r2, [r3, #28]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800227e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6911      	ldr	r1, [r2, #16]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68d2      	ldr	r2, [r2, #12]
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430b      	orrs	r3, r1
 8002292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	000186a0 	.word	0x000186a0
 80022ec:	001e847f 	.word	0x001e847f
 80022f0:	003d08ff 	.word	0x003d08ff
 80022f4:	431bde83 	.word	0x431bde83
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d129      	bne.n	8002366 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2224      	movs	r2, #36	; 0x24
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0210 	bic.w	r2, r2, #16
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002366:	2302      	movs	r3, #2
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	d12a      	bne.n	80023e4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2224      	movs	r2, #36	; 0x24
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80023ae:	89fb      	ldrh	r3, [r7, #14]
 80023b0:	f023 030f 	bic.w	r3, r3, #15
 80023b4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	4313      	orrs	r3, r2
 80023be:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	89fa      	ldrh	r2, [r7, #14]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_PWREx_EnableOverDrive+0x90>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_PWREx_EnableOverDrive+0x90>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_PWREx_EnableOverDrive+0x90>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_PWREx_EnableOverDrive+0x94>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff fae2 	bl	80019e8 <HAL_GetTick>
 8002424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002426:	e009      	b.n	800243c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002428:	f7ff fade 	bl	80019e8 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002436:	d901      	bls.n	800243c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e01f      	b.n	800247c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_PWREx_EnableOverDrive+0x98>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d1ee      	bne.n	8002428 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002450:	f7ff faca 	bl	80019e8 <HAL_GetTick>
 8002454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002456:	e009      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002458:	f7ff fac6 	bl	80019e8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002466:	d901      	bls.n	800246c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e007      	b.n	800247c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_PWREx_EnableOverDrive+0x98>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002478:	d1ee      	bne.n	8002458 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	420e0040 	.word	0x420e0040
 800248c:	40007000 	.word	0x40007000
 8002490:	420e0044 	.word	0x420e0044

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e267      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b7e      	ldr	r3, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e242      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6f      	ldr	r2, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6c      	ldr	r2, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b69      	ldr	r3, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fa4c 	bl	80019e8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fa48 	bl	80019e8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e207      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa38 	bl	80019e8 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fa34 	bl	80019e8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1f3      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b4a      	ldr	r3, [pc, #296]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1c7      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4937      	ldr	r1, [pc, #220]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff f9ed 	bl	80019e8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff f9e9 	bl	80019e8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1a8      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4925      	ldr	r1, [pc, #148]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0x244>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff f9cc 	bl	80019e8 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff f9c8 	bl	80019e8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e187      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff f9ac 	bl	80019e8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff f9a8 	bl	80019e8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e167      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x240>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e01b      	b.n	80026ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x248>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff f995 	bl	80019e8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e00e      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff f991 	bl	80019e8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e150      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	42470000 	.word	0x42470000
 80026dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ea      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8097 	beq.w	8002828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b7d      	ldr	r3, [pc, #500]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a7c      	ldr	r2, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b77      	ldr	r3, [pc, #476]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b74      	ldr	r3, [pc, #464]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a73      	ldr	r2, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7ff f951 	bl	80019e8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff f94d 	bl	80019e8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e10c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x474>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x2ea>
 8002770:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e01c      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b05      	cmp	r3, #5
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x30c>
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a5e      	ldr	r2, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	4b5c      	ldr	r3, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x324>
 80027a0:	4b58      	ldr	r3, [pc, #352]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a57      	ldr	r2, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b55      	ldr	r3, [pc, #340]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d015      	beq.n	80027ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7ff f912 	bl	80019e8 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7ff f90e 	bl	80019e8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0cb      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ee      	beq.n	80027c8 <HAL_RCC_OscConfig+0x334>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7ff f8fc 	bl	80019e8 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7ff f8f8 	bl	80019e8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e0b5      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1ee      	bne.n	80027f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a1 	beq.w	8002974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002832:	4b34      	ldr	r3, [pc, #208]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b08      	cmp	r3, #8
 800283c:	d05c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d141      	bne.n	80028ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff f8cc 	bl	80019e8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff f8c8 	bl	80019e8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e087      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	491b      	ldr	r1, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x478>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff f8a1 	bl	80019e8 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f89d 	bl	80019e8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e05c      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x416>
 80028c8:	e054      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x478>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff f88a 	bl	80019e8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f886 	bl	80019e8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e045      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_OscConfig+0x470>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x444>
 80028f6:	e03d      	b.n	8002974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e038      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x4ec>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d028      	beq.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d121      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11a      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0cc      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d90c      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d044      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e06f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e067      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe ffb8 	bl	80019e8 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe ffb4 	bl	80019e8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe facc 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08008b24 	.word	0x08008b24
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b090      	sub	sp, #64	; 0x40
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80a1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x16c>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e09b      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b88:	e09b      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b8e:	e098      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	627a      	str	r2, [r7, #36]	; 0x24
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bbc:	fb03 f201 	mul.w	r2, r3, r1
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	fb00 f303 	mul.w	r3, r0, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bca:	fba0 1202 	umull	r1, r2, r0, r2
 8002bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2200      	movs	r2, #0
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	61fa      	str	r2, [r7, #28]
 8002be2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bea:	f7fd fb59 	bl	80002a0 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf6:	e053      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	2200      	movs	r2, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	617a      	str	r2, [r7, #20]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c0a:	f04f 0b00 	mov.w	fp, #0
 8002c0e:	4652      	mov	r2, sl
 8002c10:	465b      	mov	r3, fp
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	0159      	lsls	r1, r3, #5
 8002c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c20:	0150      	lsls	r0, r2, #5
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	ebb2 080a 	subs.w	r8, r2, sl
 8002c2a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c42:	ebb2 0408 	subs.w	r4, r2, r8
 8002c46:	eb63 0509 	sbc.w	r5, r3, r9
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	00eb      	lsls	r3, r5, #3
 8002c54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c58:	00e2      	lsls	r2, r4, #3
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	eb14 030a 	adds.w	r3, r4, sl
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	eb45 030b 	adc.w	r3, r5, fp
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c76:	4629      	mov	r1, r5
 8002c78:	028b      	lsls	r3, r1, #10
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c80:	4621      	mov	r1, r4
 8002c82:	028a      	lsls	r2, r1, #10
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	60fa      	str	r2, [r7, #12]
 8002c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c94:	f7fd fb04 	bl	80002a0 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3740      	adds	r7, #64	; 0x40
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	017d7840 	.word	0x017d7840

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08008b34 	.word	0x08008b34

08002d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d20:	f7ff ffdc 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08008b34 	.word	0x08008b34

08002d44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	220f      	movs	r2, #15
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0203 	and.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_GetClockConfig+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	601a      	str	r2, [r3, #0]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40023c00 	.word	0x40023c00

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d075      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ddc:	4b91      	ldr	r3, [pc, #580]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fe01 	bl	80019e8 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dea:	f7fe fdfd 	bl	80019e8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e189      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dfc:	4b8a      	ldr	r3, [pc, #552]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	019a      	lsls	r2, r3, #6
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	071b      	lsls	r3, r3, #28
 8002e20:	4981      	ldr	r1, [pc, #516]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01f      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e34:	4b7c      	ldr	r3, [pc, #496]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3a:	0f1b      	lsrs	r3, r3, #28
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	019a      	lsls	r2, r3, #6
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	071b      	lsls	r3, r3, #28
 8002e54:	4974      	ldr	r1, [pc, #464]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e5c:	4b72      	ldr	r3, [pc, #456]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e62:	f023 021f 	bic.w	r2, r3, #31
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	496e      	ldr	r1, [pc, #440]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	019a      	lsls	r2, r3, #6
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	071b      	lsls	r3, r3, #28
 8002e94:	4964      	ldr	r1, [pc, #400]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e9c:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe fda1 	bl	80019e8 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eaa:	f7fe fd9d 	bl	80019e8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e129      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d079      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ee0:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fd7f 	bl	80019e8 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002eee:	f7fe fd7b 	bl	80019e8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e107      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f00:	4b49      	ldr	r3, [pc, #292]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0c:	d0ef      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0f1b      	lsrs	r3, r3, #28
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	019a      	lsls	r2, r3, #6
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	061b      	lsls	r3, r3, #24
 8002f34:	431a      	orrs	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	493b      	ldr	r1, [pc, #236]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01e      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	0e1b      	lsrs	r3, r3, #24
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	019a      	lsls	r2, r3, #6
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	061b      	lsls	r3, r3, #24
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	071b      	lsls	r3, r3, #28
 8002f88:	4927      	ldr	r1, [pc, #156]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	4922      	ldr	r1, [pc, #136]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fd1c 	bl	80019e8 <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002fb4:	f7fe fd18 	bl	80019e8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e0a4      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd2:	d1ef      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 808b 	beq.w	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800300a:	f7fe fced 	bl	80019e8 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003010:	e010      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fce9 	bl	80019e8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d909      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e075      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003024:	42470068 	.word	0x42470068
 8003028:	40023800 	.word	0x40023800
 800302c:	42470070 	.word	0x42470070
 8003030:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0e8      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02f      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d028      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d114      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fcaf 	bl	80019e8 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe fcab 	bl	80019e8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e035      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ee      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030bc:	d10d      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	4912      	ldr	r1, [pc, #72]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
 80030d8:	e005      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f2:	490a      	ldr	r1, [pc, #40]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800310c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40007000 	.word	0x40007000
 800311c:	40023800 	.word	0x40023800
 8003120:	42470e40 	.word	0x42470e40
 8003124:	424711e0 	.word	0x424711e0

08003128 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e066      	b.n	800320c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7f5b      	ldrb	r3, [r3, #29]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd ff64 	bl	800101c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	22ca      	movs	r2, #202	; 0xca
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2253      	movs	r2, #83	; 0x53
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f87a 	bl	8003264 <RTC_EnterInitMode>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d12c      	bne.n	80031d4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68d2      	ldr	r2, [r2, #12]
 80031b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6919      	ldr	r1, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f881 	bl	80032d2 <RTC_ExitInitMode>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d113      	bne.n	8003202 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800322e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003230:	f7fe fbda 	bl	80019e8 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003236:	e009      	b.n	800324c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003238:	f7fe fbd6 	bl	80019e8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003246:	d901      	bls.n	800324c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e007      	b.n	800325c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d122      	bne.n	80032c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003290:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003292:	f7fe fba9 	bl	80019e8 <HAL_GetTick>
 8003296:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003298:	e00c      	b.n	80032b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800329a:	f7fe fba5 	bl	80019e8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a8:	d904      	bls.n	80032b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2204      	movs	r2, #4
 80032ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <RTC_EnterInitMode+0x64>
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d1e8      	bne.n	800329a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff89 	bl	8003214 <HAL_RTC_WaitForSynchro>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2204      	movs	r2, #4
 800330c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e041      	b.n	80033b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe f8ae 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fcea 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04e      	b.n	8003472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_TIM_Base_Start_IT+0xc4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d01d      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_TIM_Base_Start_IT+0xc8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_TIM_Base_Start_IT+0xcc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_TIM_Base_Start_IT+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_TIM_Base_Start_IT+0xd4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_TIM_Base_Start_IT+0xd8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_TIM_Base_Start_IT+0xdc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40010400 	.word	0x40010400
 8003494:	40014000 	.word	0x40014000
 8003498:	40001800 	.word	0x40001800

0800349c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f839 	bl	800353a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 fc2a 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_TIM_PWM_Start+0x24>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e022      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d109      	bne.n	800358e <HAL_TIM_PWM_Start+0x3e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e015      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d109      	bne.n	80035a8 <HAL_TIM_PWM_Start+0x58>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e008      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e07c      	b.n	80036bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0x82>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	e013      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x92>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e0:	e00b      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	e003      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fe80 	bl	8004308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_TIM_PWM_Start+0x174>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_PWM_Start+0xcc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_TIM_PWM_Start+0x178>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_TIM_PWM_Start+0xd0>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_TIM_PWM_Start+0xd2>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_TIM_PWM_Start+0x174>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d01d      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_TIM_PWM_Start+0x17c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_TIM_PWM_Start+0x180>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_TIM_PWM_Start+0x184>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_TIM_PWM_Start+0x178>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIM_PWM_Start+0x188>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIM_PWM_Start+0x18c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d010      	beq.n	80036ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fe08 	bl	8004308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <HAL_TIM_PWM_Stop+0xd8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_PWM_Stop+0x2c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_TIM_PWM_Stop+0xdc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_TIM_PWM_Stop+0x30>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_TIM_PWM_Stop+0x32>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1a      	ldr	r2, [r3, #32]
 800371c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_TIM_PWM_Stop+0x66>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	f240 4344 	movw	r3, #1092	; 0x444
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d107      	bne.n	8003746 <HAL_TIM_PWM_Stop+0x66>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003750:	4013      	ands	r3, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_TIM_PWM_Stop+0x96>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	f240 4344 	movw	r3, #1092	; 0x444
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_TIM_PWM_Stop+0x96>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_TIM_PWM_Stop+0xa6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	e013      	b.n	80037ae <HAL_TIM_PWM_Stop+0xce>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d104      	bne.n	8003796 <HAL_TIM_PWM_Stop+0xb6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003794:	e00b      	b.n	80037ae <HAL_TIM_PWM_Stop+0xce>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_PWM_Stop+0xc6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a4:	e003      	b.n	80037ae <HAL_TIM_PWM_Stop+0xce>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0202 	mvn.w	r2, #2
 80037ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fa77 	bl	8003cf6 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa69 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fa7a 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0204 	mvn.w	r2, #4
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa4d 	bl	8003cf6 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa3f 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa50 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d122      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d11b      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0208 	mvn.w	r2, #8
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2204      	movs	r2, #4
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa23 	bl	8003cf6 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa15 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fa26 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d122      	bne.n	8003918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0210 	mvn.w	r2, #16
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2208      	movs	r2, #8
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9f9 	bl	8003cf6 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9eb 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f9fc 	bl	8003d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0201 	mvn.w	r2, #1
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd f950 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fd78 	bl	8004460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9c1 	bl	8003d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d10e      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d107      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0220 	mvn.w	r2, #32
 80039c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fd42 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0ae      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	f200 809f 	bhi.w	8003b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039fe:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003b3d 	.word	0x08003b3d
 8003a0c:	08003b3d 	.word	0x08003b3d
 8003a10:	08003b3d 	.word	0x08003b3d
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003b3d 	.word	0x08003b3d
 8003a1c:	08003b3d 	.word	0x08003b3d
 8003a20:	08003b3d 	.word	0x08003b3d
 8003a24:	08003abb 	.word	0x08003abb
 8003a28:	08003b3d 	.word	0x08003b3d
 8003a2c:	08003b3d 	.word	0x08003b3d
 8003a30:	08003b3d 	.word	0x08003b3d
 8003a34:	08003afb 	.word	0x08003afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fa18 	bl	8003e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0208 	orr.w	r2, r2, #8
 8003a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0204 	bic.w	r2, r2, #4
 8003a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	619a      	str	r2, [r3, #24]
      break;
 8003a76:	e064      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fa68 	bl	8003f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	619a      	str	r2, [r3, #24]
      break;
 8003ab8:	e043      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fabd 	bl	8004040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0208 	orr.w	r2, r2, #8
 8003ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0204 	bic.w	r2, r2, #4
 8003ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69d9      	ldr	r1, [r3, #28]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	61da      	str	r2, [r3, #28]
      break;
 8003af8:	e023      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fb11 	bl	8004128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	021a      	lsls	r2, r3, #8
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	61da      	str	r2, [r3, #28]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_ConfigClockSource+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0b4      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x186>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d03e      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0xd4>
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bae:	f200 8087 	bhi.w	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_TIM_ConfigClockSource+0x172>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	d87f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b70      	cmp	r3, #112	; 0x70
 8003bc2:	d01a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0xa6>
 8003bc4:	2b70      	cmp	r3, #112	; 0x70
 8003bc6:	d87b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d050      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x11a>
 8003bcc:	2b60      	cmp	r3, #96	; 0x60
 8003bce:	d877      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b50      	cmp	r3, #80	; 0x50
 8003bd2:	d03c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0xfa>
 8003bd4:	2b50      	cmp	r3, #80	; 0x50
 8003bd6:	d873      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d058      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x13a>
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d86f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d064      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b30      	cmp	r3, #48	; 0x30
 8003be6:	d86b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d060      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d867      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05c      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d05a      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	e062      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f000 fb5d 	bl	80042c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
      break;
 8003c26:	e04f      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f000 fb46 	bl	80042c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4a:	609a      	str	r2, [r3, #8]
      break;
 8003c4c:	e03c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 faba 	bl	80041d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2150      	movs	r1, #80	; 0x50
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb13 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e02c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 fad9 	bl	8004232 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2160      	movs	r1, #96	; 0x60
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fb03 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e01c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 fa9a 	bl	80041d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 faf3 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 faea 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <TIM_Base_SetConfig+0x118>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <TIM_Base_SetConfig+0x11c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <TIM_Base_SetConfig+0x120>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3a      	ldr	r2, [pc, #232]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2f      	ldr	r2, [pc, #188]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d027      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <TIM_Base_SetConfig+0x118>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d023      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <TIM_Base_SetConfig+0x11c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <TIM_Base_SetConfig+0x120>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a29      	ldr	r2, [pc, #164]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d017      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <TIM_Base_SetConfig+0x128>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <TIM_Base_SetConfig+0x12c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00f      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <TIM_Base_SetConfig+0x130>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0x134>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <TIM_Base_SetConfig+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <TIM_Base_SetConfig+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40010400 	.word	0x40010400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800
 8003e68:	40001800 	.word	0x40001800
 8003e6c:	40001c00 	.word	0x40001c00
 8003e70:	40002000 	.word	0x40002000

08003e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 0302 	bic.w	r3, r3, #2
 8003ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <TIM_OC1_SetConfig+0xd8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC1_SetConfig+0x64>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <TIM_OC1_SetConfig+0xdc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10c      	bne.n	8003ef2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0308 	bic.w	r3, r3, #8
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <TIM_OC1_SetConfig+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_OC1_SetConfig+0x8e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <TIM_OC1_SetConfig+0xdc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40010400 	.word	0x40010400

08003f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0210 	bic.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <TIM_OC2_SetConfig+0xe4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC2_SetConfig+0x68>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a21      	ldr	r2, [pc, #132]	; (800403c <TIM_OC2_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10d      	bne.n	8003fd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <TIM_OC2_SetConfig+0xe4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC2_SetConfig+0x94>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC2_SetConfig+0xe8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d113      	bne.n	8004010 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40010400 	.word	0x40010400

08004040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a21      	ldr	r2, [pc, #132]	; (8004120 <TIM_OC3_SetConfig+0xe0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC3_SetConfig+0x66>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <TIM_OC3_SetConfig+0xe4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10d      	bne.n	80040c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <TIM_OC3_SetConfig+0xe0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_OC3_SetConfig+0x92>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <TIM_OC3_SetConfig+0xe4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d113      	bne.n	80040fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40010000 	.word	0x40010000
 8004124:	40010400 	.word	0x40010400

08004128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <TIM_OC4_SetConfig+0xa4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC4_SetConfig+0x68>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a11      	ldr	r2, [pc, #68]	; (80041d0 <TIM_OC4_SetConfig+0xa8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d109      	bne.n	80041a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004196:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 030a 	bic.w	r3, r3, #10
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800425c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f043 0307 	orr.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	021a      	lsls	r2, r3, #8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2201      	movs	r2, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e05a      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d022      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d01d      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a18      	ldr	r2, [pc, #96]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40010400 	.word	0x40010400
 8004444:	40014000 	.word	0x40014000
 8004448:	40001800 	.word	0x40001800

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e03f      	b.n	8004506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fd f922 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fddf 	bl	800507c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b08a      	sub	sp, #40	; 0x28
 8004512:	af02      	add	r7, sp, #8
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	d17c      	bne.n	8004628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_UART_Transmit+0x2c>
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e075      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_UART_Transmit+0x3e>
 8004548:	2302      	movs	r3, #2
 800454a:	e06e      	b.n	800462a <HAL_UART_Transmit+0x11c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	; 0x21
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004562:	f7fd fa41 	bl	80019e8 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d108      	bne.n	8004590 <HAL_UART_Transmit+0x82>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045a0:	e02a      	b.n	80045f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fb1f 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e036      	b.n	800462a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	3302      	adds	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e007      	b.n	80045ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1cf      	bne.n	80045a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	; 0x40
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 faef 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e006      	b.n	800462a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b20      	cmp	r3, #32
 800464a:	d11d      	bne.n	8004688 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_UART_Receive_IT+0x26>
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e016      	b.n	800468a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UART_Receive_IT+0x38>
 8004666:	2302      	movs	r3, #2
 8004668:	e00f      	b.n	800468a <HAL_UART_Receive_IT+0x58>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	461a      	mov	r2, r3
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fb24 	bl	8004ccc <UART_Start_Receive_IT>
 8004684:	4603      	mov	r3, r0
 8004686:	e000      	b.n	800468a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0ba      	sub	sp, #232	; 0xe8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d009      	beq.n	80046fa <HAL_UART_IRQHandler+0x66>
 80046e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fc07 	bl	8004f06 <UART_Receive_IT>
      return;
 80046f8:	e256      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80de 	beq.w	80048c0 <HAL_UART_IRQHandler+0x22c>
 8004704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80d1 	beq.w	80048c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0xae>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xd2>
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
 8004772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d011      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0208 	orr.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 81ed 	beq.w	8004b9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_UART_IRQHandler+0x14e>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb92 	bl	8004f06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <HAL_UART_IRQHandler+0x17a>
 8004806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d04f      	beq.n	80048ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa9a 	bl	8004d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d141      	bne.n	80048a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3314      	adds	r3, #20
 8004828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800483c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3314      	adds	r3, #20
 800484a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800484e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800485a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1d9      	bne.n	8004822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	4a7d      	ldr	r2, [pc, #500]	; (8004a70 <HAL_UART_IRQHandler+0x3dc>)
 800487c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fa0e 	bl	8001ca4 <HAL_DMA_Abort_IT>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004898:	4610      	mov	r0, r2
 800489a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489c:	e00e      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f990 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	e00a      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f98c 	bl	8004bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e006      	b.n	80048bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f988 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048ba:	e170      	b.n	8004b9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	bf00      	nop
    return;
 80048be:	e16e      	b.n	8004b9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	f040 814a 	bne.w	8004b5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8143 	beq.w	8004b5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 813c 	beq.w	8004b5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	f040 80b4 	bne.w	8004a74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8140 	beq.w	8004ba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800492a:	429a      	cmp	r2, r3
 800492c:	f080 8139 	bcs.w	8004ba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	f000 8088 	beq.w	8004a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800495c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800497e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800498a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1d9      	bne.n	8004946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e1      	bne.n	8004992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd f8b7 	bl	8001bc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8b6 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6c:	e099      	b.n	8004ba2 <HAL_UART_IRQHandler+0x50e>
 8004a6e:	bf00      	nop
 8004a70:	08004e0f 	.word	0x08004e0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808b 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8086 	beq.w	8004ba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004abe:	647a      	str	r2, [r7, #68]	; 0x44
 8004ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004af6:	633a      	str	r2, [r7, #48]	; 0x30
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b3c:	61fa      	str	r2, [r7, #28]
 8004b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	617b      	str	r3, [r7, #20]
   return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e3      	bne.n	8004b18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f83e 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b5c:	e023      	b.n	8004ba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_UART_IRQHandler+0x4ea>
 8004b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f95d 	bl	8004e36 <UART_Transmit_IT>
    return;
 8004b7c:	e014      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x514>
 8004b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f99d 	bl	8004ed6 <UART_EndTransmit_IT>
    return;
 8004b9c:	e004      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
    return;
 8004b9e:	bf00      	nop
 8004ba0:	e002      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ba6:	bf00      	nop
  }
}
 8004ba8:	37e8      	adds	r7, #232	; 0xe8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop

08004bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b090      	sub	sp, #64	; 0x40
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c00:	e050      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d04c      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c10:	f7fc feea 	bl	80019e8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d241      	bcs.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c40:	637a      	str	r2, [r7, #52]	; 0x34
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e5      	bne.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	613b      	str	r3, [r7, #16]
   return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c74:	623a      	str	r2, [r7, #32]
 8004c76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e5      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e00f      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d09f      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3740      	adds	r7, #64	; 0x40
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	88fa      	ldrh	r2, [r7, #6]
 8004cea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2222      	movs	r2, #34	; 0x22
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0220 	orr.w	r2, r2, #32
 8004d38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b095      	sub	sp, #84	; 0x54
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d70:	643a      	str	r2, [r7, #64]	; 0x40
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d119      	bne.n	8004df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	61ba      	str	r2, [r7, #24]
 8004de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	613b      	str	r3, [r7, #16]
   return(result);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e02:	bf00      	nop
 8004e04:	3754      	adds	r7, #84	; 0x54
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fecb 	bl	8004bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b21      	cmp	r3, #33	; 0x21
 8004e48:	d13e      	bne.n	8004ec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d114      	bne.n	8004e7e <UART_Transmit_IT+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d110      	bne.n	8004e7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	621a      	str	r2, [r3, #32]
 8004e7c:	e008      	b.n	8004e90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6211      	str	r1, [r2, #32]
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe5a 	bl	8004bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b08c      	sub	sp, #48	; 0x30
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b22      	cmp	r3, #34	; 0x22
 8004f18:	f040 80ab 	bne.w	8005072 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d117      	bne.n	8004f56 <UART_Receive_IT+0x50>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d113      	bne.n	8004f56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28
 8004f54:	e026      	b.n	8004fa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	d007      	beq.n	8004f7a <UART_Receive_IT+0x74>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <UART_Receive_IT+0x82>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e008      	b.n	8004f9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d15a      	bne.n	800506e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0220 	bic.w	r2, r2, #32
 8004fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d135      	bne.n	8005064 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	613b      	str	r3, [r7, #16]
   return(result);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f023 0310 	bic.w	r3, r3, #16
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501e:	623a      	str	r2, [r7, #32]
 8005020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	69f9      	ldr	r1, [r7, #28]
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	61bb      	str	r3, [r7, #24]
   return(result);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e5      	bne.n	8004ffe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b10      	cmp	r3, #16
 800503e:	d10a      	bne.n	8005056 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fdbb 	bl	8004bd8 <HAL_UARTEx_RxEventCallback>
 8005062:	e002      	b.n	800506a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fb fb9f 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e002      	b.n	8005074 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3730      	adds	r7, #48	; 0x30
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b0c0      	sub	sp, #256	; 0x100
 8005082:	af00      	add	r7, sp, #0
 8005084:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	68d9      	ldr	r1, [r3, #12]
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	ea40 0301 	orr.w	r3, r0, r1
 80050a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050d4:	f021 010c 	bic.w	r1, r1, #12
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050e2:	430b      	orrs	r3, r1
 80050e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	6999      	ldr	r1, [r3, #24]
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	ea40 0301 	orr.w	r3, r0, r1
 8005102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <UART_SetConfig+0x2cc>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d005      	beq.n	800511c <UART_SetConfig+0xa0>
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b8d      	ldr	r3, [pc, #564]	; (800534c <UART_SetConfig+0x2d0>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d104      	bne.n	8005126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7fd fdfe 	bl	8002d1c <HAL_RCC_GetPCLK2Freq>
 8005120:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005124:	e003      	b.n	800512e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005126:	f7fd fde5 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 800512a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	f040 810c 	bne.w	8005354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800513c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005146:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800514a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	1891      	adds	r1, r2, r2
 8005154:	65b9      	str	r1, [r7, #88]	; 0x58
 8005156:	415b      	adcs	r3, r3
 8005158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800515e:	4621      	mov	r1, r4
 8005160:	eb12 0801 	adds.w	r8, r2, r1
 8005164:	4629      	mov	r1, r5
 8005166:	eb43 0901 	adc.w	r9, r3, r1
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800517a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517e:	4690      	mov	r8, r2
 8005180:	4699      	mov	r9, r3
 8005182:	4623      	mov	r3, r4
 8005184:	eb18 0303 	adds.w	r3, r8, r3
 8005188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800518c:	462b      	mov	r3, r5
 800518e:	eb49 0303 	adc.w	r3, r9, r3
 8005192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051aa:	460b      	mov	r3, r1
 80051ac:	18db      	adds	r3, r3, r3
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
 80051b0:	4613      	mov	r3, r2
 80051b2:	eb42 0303 	adc.w	r3, r2, r3
 80051b6:	657b      	str	r3, [r7, #84]	; 0x54
 80051b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051c0:	f7fb f86e 	bl	80002a0 <__aeabi_uldivmod>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4b61      	ldr	r3, [pc, #388]	; (8005350 <UART_SetConfig+0x2d4>)
 80051ca:	fba3 2302 	umull	r2, r3, r3, r2
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	011c      	lsls	r4, r3, #4
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80051ec:	415b      	adcs	r3, r3
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051f4:	4641      	mov	r1, r8
 80051f6:	eb12 0a01 	adds.w	sl, r2, r1
 80051fa:	4649      	mov	r1, r9
 80051fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800520c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005214:	4692      	mov	sl, r2
 8005216:	469b      	mov	fp, r3
 8005218:	4643      	mov	r3, r8
 800521a:	eb1a 0303 	adds.w	r3, sl, r3
 800521e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005222:	464b      	mov	r3, r9
 8005224:	eb4b 0303 	adc.w	r3, fp, r3
 8005228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005238:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800523c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005240:	460b      	mov	r3, r1
 8005242:	18db      	adds	r3, r3, r3
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	4613      	mov	r3, r2
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
 800524e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005256:	f7fb f823 	bl	80002a0 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4611      	mov	r1, r2
 8005260:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <UART_SetConfig+0x2d4>)
 8005262:	fba3 2301 	umull	r2, r3, r3, r1
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2264      	movs	r2, #100	; 0x64
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	1acb      	subs	r3, r1, r3
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005276:	4b36      	ldr	r3, [pc, #216]	; (8005350 <UART_SetConfig+0x2d4>)
 8005278:	fba3 2302 	umull	r2, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005284:	441c      	add	r4, r3
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005290:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	63b9      	str	r1, [r7, #56]	; 0x38
 80052a0:	415b      	adcs	r3, r3
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052a8:	4641      	mov	r1, r8
 80052aa:	1851      	adds	r1, r2, r1
 80052ac:	6339      	str	r1, [r7, #48]	; 0x30
 80052ae:	4649      	mov	r1, r9
 80052b0:	414b      	adcs	r3, r1
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052c0:	4659      	mov	r1, fp
 80052c2:	00cb      	lsls	r3, r1, #3
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ca:	4651      	mov	r1, sl
 80052cc:	00ca      	lsls	r2, r1, #3
 80052ce:	4610      	mov	r0, r2
 80052d0:	4619      	mov	r1, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	4642      	mov	r2, r8
 80052d6:	189b      	adds	r3, r3, r2
 80052d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052dc:	464b      	mov	r3, r9
 80052de:	460a      	mov	r2, r1
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052fc:	460b      	mov	r3, r1
 80052fe:	18db      	adds	r3, r3, r3
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
 8005302:	4613      	mov	r3, r2
 8005304:	eb42 0303 	adc.w	r3, r2, r3
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800530e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005312:	f7fa ffc5 	bl	80002a0 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <UART_SetConfig+0x2d4>)
 800531c:	fba3 1302 	umull	r1, r3, r3, r2
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	2164      	movs	r1, #100	; 0x64
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	3332      	adds	r3, #50	; 0x32
 800532e:	4a08      	ldr	r2, [pc, #32]	; (8005350 <UART_SetConfig+0x2d4>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f003 0207 	and.w	r2, r3, #7
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4422      	add	r2, r4
 8005342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005344:	e105      	b.n	8005552 <UART_SetConfig+0x4d6>
 8005346:	bf00      	nop
 8005348:	40011000 	.word	0x40011000
 800534c:	40011400 	.word	0x40011400
 8005350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800535e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005366:	4642      	mov	r2, r8
 8005368:	464b      	mov	r3, r9
 800536a:	1891      	adds	r1, r2, r2
 800536c:	6239      	str	r1, [r7, #32]
 800536e:	415b      	adcs	r3, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005376:	4641      	mov	r1, r8
 8005378:	1854      	adds	r4, r2, r1
 800537a:	4649      	mov	r1, r9
 800537c:	eb43 0501 	adc.w	r5, r3, r1
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	00eb      	lsls	r3, r5, #3
 800538a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800538e:	00e2      	lsls	r2, r4, #3
 8005390:	4614      	mov	r4, r2
 8005392:	461d      	mov	r5, r3
 8005394:	4643      	mov	r3, r8
 8005396:	18e3      	adds	r3, r4, r3
 8005398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800539c:	464b      	mov	r3, r9
 800539e:	eb45 0303 	adc.w	r3, r5, r3
 80053a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053c2:	4629      	mov	r1, r5
 80053c4:	008b      	lsls	r3, r1, #2
 80053c6:	4621      	mov	r1, r4
 80053c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053cc:	4621      	mov	r1, r4
 80053ce:	008a      	lsls	r2, r1, #2
 80053d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053d4:	f7fa ff64 	bl	80002a0 <__aeabi_uldivmod>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4b60      	ldr	r3, [pc, #384]	; (8005560 <UART_SetConfig+0x4e4>)
 80053de:	fba3 2302 	umull	r2, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	011c      	lsls	r4, r3, #4
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	61b9      	str	r1, [r7, #24]
 8005400:	415b      	adcs	r3, r3
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005408:	4641      	mov	r1, r8
 800540a:	1851      	adds	r1, r2, r1
 800540c:	6139      	str	r1, [r7, #16]
 800540e:	4649      	mov	r1, r9
 8005410:	414b      	adcs	r3, r1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005420:	4659      	mov	r1, fp
 8005422:	00cb      	lsls	r3, r1, #3
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542a:	4651      	mov	r1, sl
 800542c:	00ca      	lsls	r2, r1, #3
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	4603      	mov	r3, r0
 8005434:	4642      	mov	r2, r8
 8005436:	189b      	adds	r3, r3, r2
 8005438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800543c:	464b      	mov	r3, r9
 800543e:	460a      	mov	r2, r1
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	67bb      	str	r3, [r7, #120]	; 0x78
 8005452:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005460:	4649      	mov	r1, r9
 8005462:	008b      	lsls	r3, r1, #2
 8005464:	4641      	mov	r1, r8
 8005466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546a:	4641      	mov	r1, r8
 800546c:	008a      	lsls	r2, r1, #2
 800546e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005472:	f7fa ff15 	bl	80002a0 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <UART_SetConfig+0x4e4>)
 800547c:	fba3 1302 	umull	r1, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2164      	movs	r1, #100	; 0x64
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	3332      	adds	r3, #50	; 0x32
 800548e:	4a34      	ldr	r2, [pc, #208]	; (8005560 <UART_SetConfig+0x4e4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549a:	441c      	add	r4, r3
 800549c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a0:	2200      	movs	r2, #0
 80054a2:	673b      	str	r3, [r7, #112]	; 0x70
 80054a4:	677a      	str	r2, [r7, #116]	; 0x74
 80054a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	415b      	adcs	r3, r3
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ba:	4641      	mov	r1, r8
 80054bc:	1851      	adds	r1, r2, r1
 80054be:	6039      	str	r1, [r7, #0]
 80054c0:	4649      	mov	r1, r9
 80054c2:	414b      	adcs	r3, r1
 80054c4:	607b      	str	r3, [r7, #4]
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054d2:	4659      	mov	r1, fp
 80054d4:	00cb      	lsls	r3, r1, #3
 80054d6:	4651      	mov	r1, sl
 80054d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054dc:	4651      	mov	r1, sl
 80054de:	00ca      	lsls	r2, r1, #3
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	4603      	mov	r3, r0
 80054e6:	4642      	mov	r2, r8
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ec:	464b      	mov	r3, r9
 80054ee:	460a      	mov	r2, r1
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005500:	667a      	str	r2, [r7, #100]	; 0x64
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	f04f 0300 	mov.w	r3, #0
 800550a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800550e:	4649      	mov	r1, r9
 8005510:	008b      	lsls	r3, r1, #2
 8005512:	4641      	mov	r1, r8
 8005514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005518:	4641      	mov	r1, r8
 800551a:	008a      	lsls	r2, r1, #2
 800551c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005520:	f7fa febe 	bl	80002a0 <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <UART_SetConfig+0x4e4>)
 800552a:	fba3 1302 	umull	r1, r3, r3, r2
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2164      	movs	r1, #100	; 0x64
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	3332      	adds	r3, #50	; 0x32
 800553c:	4a08      	ldr	r2, [pc, #32]	; (8005560 <UART_SetConfig+0x4e4>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4422      	add	r2, r4
 8005550:	609a      	str	r2, [r3, #8]
}
 8005552:	bf00      	nop
 8005554:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800555e:	bf00      	nop
 8005560:	51eb851f 	.word	0x51eb851f

08005564 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005576:	2b84      	cmp	r3, #132	; 0x84
 8005578:	d005      	beq.n	8005586 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800557a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4413      	add	r3, r2
 8005582:	3303      	adds	r3, #3
 8005584:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005586:	68fb      	ldr	r3, [r7, #12]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005598:	f001 f82a 	bl	80065f0 <vTaskStartScheduler>
  
  return osOK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a4:	b089      	sub	sp, #36	; 0x24
 80055a6:	af04      	add	r7, sp, #16
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <osThreadCreate+0x54>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01c      	beq.n	80055f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685c      	ldr	r4, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681d      	ldr	r5, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691e      	ldr	r6, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ffc8 	bl	8005564 <makeFreeRtosPriority>
 80055d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055de:	9202      	str	r2, [sp, #8]
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	9100      	str	r1, [sp, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4632      	mov	r2, r6
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fe22 	bl	8006234 <xTaskCreateStatic>
 80055f0:	4603      	mov	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e01c      	b.n	8005630 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685c      	ldr	r4, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005602:	b29e      	uxth	r6, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ffaa 	bl	8005564 <makeFreeRtosPriority>
 8005610:	4602      	mov	r2, r0
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	9200      	str	r2, [sp, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	4632      	mov	r2, r6
 800561e:	4629      	mov	r1, r5
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fe64 	bl	80062ee <xTaskCreate>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <osDelay+0x16>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	e000      	b.n	8005652 <osDelay+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ff98 	bl	8006588 <vTaskDelay>
  
  return osOK;
 8005658:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af02      	add	r7, sp, #8
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00f      	beq.n	8005694 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d10a      	bne.n	8005690 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2203      	movs	r2, #3
 8005680:	9200      	str	r2, [sp, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	2100      	movs	r1, #0
 8005686:	2001      	movs	r0, #1
 8005688:	f000 f962 	bl	8005950 <xQueueGenericCreateStatic>
 800568c:	4603      	mov	r3, r0
 800568e:	e016      	b.n	80056be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	e014      	b.n	80056be <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d110      	bne.n	80056bc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800569a:	2203      	movs	r2, #3
 800569c:	2100      	movs	r1, #0
 800569e:	2001      	movs	r0, #1
 80056a0:	f000 f9ce 	bl	8005a40 <xQueueGenericCreate>
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <osSemaphoreCreate+0x56>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fa1e 	bl	8005af4 <xQueueGenericSend>
      return sema;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	e000      	b.n	80056be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80056bc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af02      	add	r7, sp, #8
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d011      	beq.n	80056fc <osMessageCreate+0x36>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2400      	movs	r4, #0
 80056f2:	9400      	str	r4, [sp, #0]
 80056f4:	f000 f92c 	bl	8005950 <xQueueGenericCreateStatic>
 80056f8:	4603      	mov	r3, r0
 80056fa:	e008      	b.n	800570e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	4619      	mov	r1, r3
 8005708:	f000 f99a 	bl	8005a40 <xQueueGenericCreate>
 800570c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}

08005716 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f103 0208 	add.w	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f04f 32ff 	mov.w	r2, #4294967295
 800572e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f103 0208 	add.w	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 0208 	add.w	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	601a      	str	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d103      	bne.n	80057d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e00c      	b.n	80057f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3308      	adds	r3, #8
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e002      	b.n	80057e6 <vListInsert+0x2e>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d2f6      	bcs.n	80057e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6852      	ldr	r2, [r2, #4]
 800584a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d103      	bne.n	800585e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058aa:	f001 fceb 	bl	8007284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	3b01      	subs	r3, #1
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	441a      	add	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	22ff      	movs	r2, #255	; 0xff
 80058ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	22ff      	movs	r2, #255	; 0xff
 80058f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d114      	bne.n	800592a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01a      	beq.n	800593e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3310      	adds	r3, #16
 800590c:	4618      	mov	r0, r3
 800590e:	f001 f8c1 	bl	8006a94 <xTaskRemoveFromEventList>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <xQueueGenericReset+0xcc>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	e009      	b.n	800593e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3310      	adds	r3, #16
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fef1 	bl	8005716 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff feec 	bl	8005716 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800593e:	f001 fcd1 	bl	80072e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005942:	2301      	movs	r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08e      	sub	sp, #56	; 0x38
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <xQueueGenericCreateStatic+0x52>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <xQueueGenericCreateStatic+0x56>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <xQueueGenericCreateStatic+0x58>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	623b      	str	r3, [r7, #32]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <xQueueGenericCreateStatic+0x7e>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueGenericCreateStatic+0x82>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueGenericCreateStatic+0x84>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61fb      	str	r3, [r7, #28]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ee:	2348      	movs	r3, #72	; 0x48
 80059f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b48      	cmp	r3, #72	; 0x48
 80059f6:	d00a      	beq.n	8005a0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	61bb      	str	r3, [r7, #24]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f83f 	bl	8005ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3730      	adds	r7, #48	; 0x30
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	613b      	str	r3, [r7, #16]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3348      	adds	r3, #72	; 0x48
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fd25 	bl	80074c8 <pvPortMalloc>
 8005a7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d011      	beq.n	8005aaa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3348      	adds	r3, #72	; 0x48
 8005a8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a98:	79fa      	ldrb	r2, [r7, #7]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 f805 	bl	8005ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	69b8      	ldr	r0, [r7, #24]
 8005ae6:	f7ff fecb 	bl	8005880 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSend+0x32>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <xQueueGenericSend+0x40>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <xQueueGenericSend+0x44>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <xQueueGenericSend+0x46>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <xQueueGenericSend+0x60>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSend+0x6e>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSend+0x72>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSend+0x74>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b82:	f001 f947 	bl	8006e14 <xTaskGetSchedulerState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <xQueueGenericSend+0x9e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSend+0xa2>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSend+0xa4>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61fb      	str	r3, [r7, #28]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb2:	f001 fb67 	bl	8007284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <xQueueGenericSend+0xd4>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d129      	bne.n	8005c1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bce:	f000 fa37 	bl	8006040 <prvCopyDataToQueue>
 8005bd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 ff57 	bl	8006a94 <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	e00a      	b.n	8005c14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b39      	ldr	r3, [pc, #228]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c14:	f001 fb66 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e063      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c22:	f001 fb5f 	bl	80072e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e05c      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 ff8f 	bl	8006b58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3e:	f001 fb51 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c42:	f000 fd3f 	bl	80066c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c46:	f001 fb1d 	bl	8007284 <vPortEnterCritical>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d103      	bne.n	8005c60 <xQueueGenericSend+0x16c>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d103      	bne.n	8005c76 <xQueueGenericSend+0x182>
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c76:	f001 fb35 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7a:	1d3a      	adds	r2, r7, #4
 8005c7c:	f107 0314 	add.w	r3, r7, #20
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ff7e 	bl	8006b84 <xTaskCheckForTimeOut>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d124      	bne.n	8005cd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c90:	f000 fab8 	bl	8006204 <prvIsQueueFull>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	3310      	adds	r3, #16
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fed2 	bl	8006a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005caa:	f000 fa59 	bl	8006160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f000 fd17 	bl	80066e0 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af7c 	bne.w	8005bb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	e772      	b.n	8005bb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cce:	f000 fa47 	bl	8006160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd2:	f000 fd05 	bl	80066e0 <xTaskResumeAll>
 8005cd6:	e76c      	b.n	8005bb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cda:	f000 fa41 	bl	8006160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cde:	f000 fcff 	bl	80066e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ce2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	; 0x40
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <xQueueGenericSendFromISR+0x3c>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <xQueueGenericSendFromISR+0x40>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <xQueueGenericSendFromISR+0x42>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d103      	bne.n	8005d5a <xQueueGenericSendFromISR+0x6a>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <xQueueGenericSendFromISR+0x6e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGenericSendFromISR+0x70>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	623b      	str	r3, [r7, #32]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7a:	f001 fb65 	bl	8007448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61fa      	str	r2, [r7, #28]
 8005d94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <xQueueGenericSendFromISR+0xbc>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d12f      	bne.n	8005e0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc2:	f000 f93d 	bl	8006040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d112      	bne.n	8005df6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d016      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	3324      	adds	r3, #36	; 0x24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fe59 	bl	8006a94 <xTaskRemoveFromEventList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e007      	b.n	8005e06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	b25a      	sxtb	r2, r3
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e06:	2301      	movs	r3, #1
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e0a:	e001      	b.n	8005e10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3740      	adds	r7, #64	; 0x40
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08e      	sub	sp, #56	; 0x38
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	623b      	str	r3, [r7, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	61fb      	str	r3, [r7, #28]
}
 8005e6a:	bf00      	nop
 8005e6c:	e7fe      	b.n	8005e6c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d103      	bne.n	8005e7e <xQueueGiveFromISR+0x58>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <xQueueGiveFromISR+0x5c>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <xQueueGiveFromISR+0x5e>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61bb      	str	r3, [r7, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e9e:	f001 fad3 	bl	8007448 <vPortValidateInterruptPriority>
	__asm volatile
 8005ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	617a      	str	r2, [r7, #20]
 8005eb8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005eba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d22b      	bcs.n	8005f26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d112      	bne.n	8005f10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	3324      	adds	r3, #36	; 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fdcc 	bl	8006a94 <xTaskRemoveFromEventList>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e007      	b.n	8005f20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f14:	3301      	adds	r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	b25a      	sxtb	r2, r3
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f20:	2301      	movs	r3, #1
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
 8005f24:	e001      	b.n	8005f2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f383 8811 	msr	BASEPRI, r3
}
 8005f34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3738      	adds	r7, #56	; 0x38
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08e      	sub	sp, #56	; 0x38
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	623b      	str	r3, [r7, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <xQueueReceiveFromISR+0x3a>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <xQueueReceiveFromISR+0x3e>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueReceiveFromISR+0x40>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61fb      	str	r3, [r7, #28]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f9a:	f001 fa55 	bl	8007448 <vPortValidateInterruptPriority>
	__asm volatile
 8005f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	61ba      	str	r2, [r7, #24]
 8005fb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d02f      	beq.n	8006026 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fd0:	68b9      	ldr	r1, [r7, #8]
 8005fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd4:	f000 f89e 	bl	8006114 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d112      	bne.n	8006010 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	3310      	adds	r3, #16
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fd4c 	bl	8006a94 <xTaskRemoveFromEventList>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e007      	b.n	8006020 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006014:	3301      	adds	r3, #1
 8006016:	b2db      	uxtb	r3, r3
 8006018:	b25a      	sxtb	r2, r3
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
 8006024:	e001      	b.n	800602a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f383 8811 	msr	BASEPRI, r3
}
 8006034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006038:	4618      	mov	r0, r3
 800603a:	3738      	adds	r7, #56	; 0x38
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d14d      	bne.n	8006102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fef0 	bl	8006e50 <xTaskPriorityDisinherit>
 8006070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	e043      	b.n	8006102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d119      	bne.n	80060b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6858      	ldr	r0, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	461a      	mov	r2, r3
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	f001 fd29 	bl	8007ae2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	441a      	add	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d32b      	bcc.n	8006102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e026      	b.n	8006102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68d8      	ldr	r0, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	461a      	mov	r2, r3
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	f001 fd0f 	bl	8007ae2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	425b      	negs	r3, r3
 80060ce:	441a      	add	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d207      	bcs.n	80060f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	425b      	negs	r3, r3
 80060ea:	441a      	add	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d105      	bne.n	8006102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3b01      	subs	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800610a:	697b      	ldr	r3, [r7, #20]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	441a      	add	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d303      	bcc.n	8006148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68d9      	ldr	r1, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	461a      	mov	r2, r3
 8006152:	6838      	ldr	r0, [r7, #0]
 8006154:	f001 fcc5 	bl	8007ae2 <memcpy>
	}
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006168:	f001 f88c 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006174:	e011      	b.n	800619a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d012      	beq.n	80061a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fc86 	bl	8006a94 <xTaskRemoveFromEventList>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800618e:	f000 fd5b 	bl	8006c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	3b01      	subs	r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800619a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dce9      	bgt.n	8006176 <prvUnlockQueue+0x16>
 80061a2:	e000      	b.n	80061a6 <prvUnlockQueue+0x46>
					break;
 80061a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061ae:	f001 f899 	bl	80072e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061b2:	f001 f867 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061be:	e011      	b.n	80061e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d012      	beq.n	80061ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3310      	adds	r3, #16
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fc61 	bl	8006a94 <xTaskRemoveFromEventList>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061d8:	f000 fd36 	bl	8006c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	3b01      	subs	r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dce9      	bgt.n	80061c0 <prvUnlockQueue+0x60>
 80061ec:	e000      	b.n	80061f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061f8:	f001 f874 	bl	80072e4 <vPortExitCritical>
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800620c:	f001 f83a 	bl	8007284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006218:	429a      	cmp	r2, r3
 800621a:	d102      	bne.n	8006222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e001      	b.n	8006226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006226:	f001 f85d 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 800622a:	68fb      	ldr	r3, [r7, #12]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08e      	sub	sp, #56	; 0x38
 8006238:	af04      	add	r7, sp, #16
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xTaskCreateStatic+0x46>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	61fb      	str	r3, [r7, #28]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800627a:	23b4      	movs	r3, #180	; 0xb4
 800627c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2bb4      	cmp	r3, #180	; 0xb4
 8006282:	d00a      	beq.n	800629a <xTaskCreateStatic+0x66>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	61bb      	str	r3, [r7, #24]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800629a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01e      	beq.n	80062e0 <xTaskCreateStatic+0xac>
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062ba:	2300      	movs	r3, #0
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	9302      	str	r3, [sp, #8]
 80062c2:	f107 0314 	add.w	r3, r7, #20
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f850 	bl	8006378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062da:	f000 f8eb 	bl	80064b4 <prvAddNewTaskToReadyList>
 80062de:	e001      	b.n	80062e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062e4:	697b      	ldr	r3, [r7, #20]
	}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3728      	adds	r7, #40	; 0x28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08c      	sub	sp, #48	; 0x30
 80062f2:	af04      	add	r7, sp, #16
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	603b      	str	r3, [r7, #0]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f8e0 	bl	80074c8 <pvPortMalloc>
 8006308:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00e      	beq.n	800632e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006310:	20b4      	movs	r0, #180	; 0xb4
 8006312:	f001 f8d9 	bl	80074c8 <pvPortMalloc>
 8006316:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
 8006324:	e005      	b.n	8006332 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006326:	6978      	ldr	r0, [r7, #20]
 8006328:	f001 f99a 	bl	8007660 <vPortFree>
 800632c:	e001      	b.n	8006332 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d017      	beq.n	8006368 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	2300      	movs	r3, #0
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f80e 	bl	8006378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800635c:	69f8      	ldr	r0, [r7, #28]
 800635e:	f000 f8a9 	bl	80064b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006362:	2301      	movs	r3, #1
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e002      	b.n	800636e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006368:	f04f 33ff 	mov.w	r3, #4294967295
 800636c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800636e:	69bb      	ldr	r3, [r7, #24]
	}
 8006370:	4618      	mov	r0, r3
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006390:	3b01      	subs	r3, #1
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	617b      	str	r3, [r7, #20]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01f      	beq.n	8006406 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e012      	b.n	80063f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	7819      	ldrb	r1, [r3, #0]
 80063d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	3334      	adds	r3, #52	; 0x34
 80063dc:	460a      	mov	r2, r1
 80063de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	2b0f      	cmp	r3, #15
 80063f6:	d9e9      	bls.n	80063cc <prvInitialiseNewTask+0x54>
 80063f8:	e000      	b.n	80063fc <prvInitialiseNewTask+0x84>
			{
				break;
 80063fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006404:	e003      	b.n	800640e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	2b06      	cmp	r3, #6
 8006412:	d901      	bls.n	8006418 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006414:	2306      	movs	r3, #6
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2200      	movs	r2, #0
 8006428:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	3304      	adds	r3, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f991 	bl	8005756 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	3318      	adds	r3, #24
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff f98c 	bl	8005756 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f1c3 0207 	rsb	r2, r3, #7
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	2200      	movs	r2, #0
 8006460:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	334c      	adds	r3, #76	; 0x4c
 8006468:	2260      	movs	r2, #96	; 0x60
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fb46 	bl	8007afe <memset>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <prvInitialiseNewTask+0x130>)
 8006476:	651a      	str	r2, [r3, #80]	; 0x50
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <prvInitialiseNewTask+0x134>)
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <prvInitialiseNewTask+0x138>)
 8006482:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	69b8      	ldr	r0, [r7, #24]
 800648a:	f000 fdcd 	bl	8007028 <pxPortInitialiseStack>
 800648e:	4602      	mov	r2, r0
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a0:	bf00      	nop
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	08008b5c 	.word	0x08008b5c
 80064ac:	08008b7c 	.word	0x08008b7c
 80064b0:	08008b3c 	.word	0x08008b3c

080064b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064bc:	f000 fee2 	bl	8007284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064c0:	4b2a      	ldr	r3, [pc, #168]	; (800656c <prvAddNewTaskToReadyList+0xb8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a29      	ldr	r2, [pc, #164]	; (800656c <prvAddNewTaskToReadyList+0xb8>)
 80064c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ca:	4b29      	ldr	r3, [pc, #164]	; (8006570 <prvAddNewTaskToReadyList+0xbc>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064d2:	4a27      	ldr	r2, [pc, #156]	; (8006570 <prvAddNewTaskToReadyList+0xbc>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064d8:	4b24      	ldr	r3, [pc, #144]	; (800656c <prvAddNewTaskToReadyList+0xb8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d110      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064e0:	f000 fbd6 	bl	8006c90 <prvInitialiseTaskLists>
 80064e4:	e00d      	b.n	8006502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064e6:	4b23      	ldr	r3, [pc, #140]	; (8006574 <prvAddNewTaskToReadyList+0xc0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <prvAddNewTaskToReadyList+0xbc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d802      	bhi.n	8006502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064fc:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <prvAddNewTaskToReadyList+0xbc>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <prvAddNewTaskToReadyList+0xc4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3301      	adds	r3, #1
 8006508:	4a1b      	ldr	r2, [pc, #108]	; (8006578 <prvAddNewTaskToReadyList+0xc4>)
 800650a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	2201      	movs	r2, #1
 8006512:	409a      	lsls	r2, r3
 8006514:	4b19      	ldr	r3, [pc, #100]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4313      	orrs	r3, r2
 800651a:	4a18      	ldr	r2, [pc, #96]	; (800657c <prvAddNewTaskToReadyList+0xc8>)
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4a15      	ldr	r2, [pc, #84]	; (8006580 <prvAddNewTaskToReadyList+0xcc>)
 800652c:	441a      	add	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7ff f91b 	bl	8005770 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800653a:	f000 fed3 	bl	80072e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <prvAddNewTaskToReadyList+0xc0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006546:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <prvAddNewTaskToReadyList+0xbc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	429a      	cmp	r2, r3
 8006552:	d207      	bcs.n	8006564 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <prvAddNewTaskToReadyList+0xd0>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000678 	.word	0x20000678
 8006570:	20000578 	.word	0x20000578
 8006574:	20000684 	.word	0x20000684
 8006578:	20000694 	.word	0x20000694
 800657c:	20000680 	.word	0x20000680
 8006580:	2000057c 	.word	0x2000057c
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d017      	beq.n	80065ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <vTaskDelay+0x60>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <vTaskDelay+0x30>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	60bb      	str	r3, [r7, #8]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065b8:	f000 f884 	bl	80066c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fccc 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065c4:	f000 f88c 	bl	80066e0 <xTaskResumeAll>
 80065c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d107      	bne.n	80065e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <vTaskDelay+0x64>)
 80065d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	200006a0 	.word	0x200006a0
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065fe:	463a      	mov	r2, r7
 8006600:	1d39      	adds	r1, r7, #4
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	4618      	mov	r0, r3
 8006608:	f7f9 ffde 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	460a      	mov	r2, r1
 800661e:	4921      	ldr	r1, [pc, #132]	; (80066a4 <vTaskStartScheduler+0xb4>)
 8006620:	4821      	ldr	r0, [pc, #132]	; (80066a8 <vTaskStartScheduler+0xb8>)
 8006622:	f7ff fe07 	bl	8006234 <xTaskCreateStatic>
 8006626:	4603      	mov	r3, r0
 8006628:	4a20      	ldr	r2, [pc, #128]	; (80066ac <vTaskStartScheduler+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <vTaskStartScheduler+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e001      	b.n	800663e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d11b      	bne.n	800667c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	613b      	str	r3, [r7, #16]
}
 8006656:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <vTaskStartScheduler+0xc0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	334c      	adds	r3, #76	; 0x4c
 800665e:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <vTaskStartScheduler+0xc4>)
 8006660:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <vTaskStartScheduler+0xc8>)
 8006664:	f04f 32ff 	mov.w	r2, #4294967295
 8006668:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <vTaskStartScheduler+0xcc>)
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <vTaskStartScheduler+0xd0>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006676:	f000 fd63 	bl	8007140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800667a:	e00e      	b.n	800669a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d10a      	bne.n	800669a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60fb      	str	r3, [r7, #12]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <vTaskStartScheduler+0xa8>
}
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08008b1c 	.word	0x08008b1c
 80066a8:	08006c61 	.word	0x08006c61
 80066ac:	2000069c 	.word	0x2000069c
 80066b0:	20000578 	.word	0x20000578
 80066b4:	20000010 	.word	0x20000010
 80066b8:	20000698 	.word	0x20000698
 80066bc:	20000684 	.word	0x20000684
 80066c0:	2000067c 	.word	0x2000067c

080066c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <vTaskSuspendAll+0x18>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	4a03      	ldr	r2, [pc, #12]	; (80066dc <vTaskSuspendAll+0x18>)
 80066d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066d2:	bf00      	nop
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	200006a0 	.word	0x200006a0

080066e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <xTaskResumeAll+0x114>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <xTaskResumeAll+0x2c>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	603b      	str	r3, [r7, #0]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800670c:	f000 fdba 	bl	8007284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006710:	4b38      	ldr	r3, [pc, #224]	; (80067f4 <xTaskResumeAll+0x114>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	4a37      	ldr	r2, [pc, #220]	; (80067f4 <xTaskResumeAll+0x114>)
 8006718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <xTaskResumeAll+0x114>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d161      	bne.n	80067e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006722:	4b35      	ldr	r3, [pc, #212]	; (80067f8 <xTaskResumeAll+0x118>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d05d      	beq.n	80067e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672a:	e02e      	b.n	800678a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672c:	4b33      	ldr	r3, [pc, #204]	; (80067fc <xTaskResumeAll+0x11c>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3318      	adds	r3, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff f876 	bl	800582a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff f871 	bl	800582a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	409a      	lsls	r2, r3
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <xTaskResumeAll+0x120>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4313      	orrs	r3, r2
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <xTaskResumeAll+0x120>)
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4a27      	ldr	r2, [pc, #156]	; (8006804 <xTaskResumeAll+0x124>)
 8006768:	441a      	add	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3304      	adds	r3, #4
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7fe fffd 	bl	8005770 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <xTaskResumeAll+0x128>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006784:	4b21      	ldr	r3, [pc, #132]	; (800680c <xTaskResumeAll+0x12c>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <xTaskResumeAll+0x11c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1cc      	bne.n	800672c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006798:	f000 fb1c 	bl	8006dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <xTaskResumeAll+0x130>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d010      	beq.n	80067ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067a8:	f000 f836 	bl	8006818 <xTaskIncrementTick>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <xTaskResumeAll+0x12c>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f1      	bne.n	80067a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80067c4:	4b12      	ldr	r3, [pc, #72]	; (8006810 <xTaskResumeAll+0x130>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <xTaskResumeAll+0x12c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067d2:	2301      	movs	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <xTaskResumeAll+0x134>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e6:	f000 fd7d 	bl	80072e4 <vPortExitCritical>

	return xAlreadyYielded;
 80067ea:	68bb      	ldr	r3, [r7, #8]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	200006a0 	.word	0x200006a0
 80067f8:	20000678 	.word	0x20000678
 80067fc:	20000638 	.word	0x20000638
 8006800:	20000680 	.word	0x20000680
 8006804:	2000057c 	.word	0x2000057c
 8006808:	20000578 	.word	0x20000578
 800680c:	2000068c 	.word	0x2000068c
 8006810:	20000688 	.word	0x20000688
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006822:	4b4e      	ldr	r3, [pc, #312]	; (800695c <xTaskIncrementTick+0x144>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f040 808e 	bne.w	8006948 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800682c:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <xTaskIncrementTick+0x148>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006834:	4a4a      	ldr	r2, [pc, #296]	; (8006960 <xTaskIncrementTick+0x148>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d120      	bne.n	8006882 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006840:	4b48      	ldr	r3, [pc, #288]	; (8006964 <xTaskIncrementTick+0x14c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <xTaskIncrementTick+0x48>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xTaskIncrementTick+0x46>
 8006860:	4b40      	ldr	r3, [pc, #256]	; (8006964 <xTaskIncrementTick+0x14c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	4b40      	ldr	r3, [pc, #256]	; (8006968 <xTaskIncrementTick+0x150>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3e      	ldr	r2, [pc, #248]	; (8006964 <xTaskIncrementTick+0x14c>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4a3e      	ldr	r2, [pc, #248]	; (8006968 <xTaskIncrementTick+0x150>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4b3d      	ldr	r3, [pc, #244]	; (800696c <xTaskIncrementTick+0x154>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a3c      	ldr	r2, [pc, #240]	; (800696c <xTaskIncrementTick+0x154>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	f000 faa9 	bl	8006dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006882:	4b3b      	ldr	r3, [pc, #236]	; (8006970 <xTaskIncrementTick+0x158>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	429a      	cmp	r2, r3
 800688a:	d348      	bcc.n	800691e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800688c:	4b35      	ldr	r3, [pc, #212]	; (8006964 <xTaskIncrementTick+0x14c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006896:	4b36      	ldr	r3, [pc, #216]	; (8006970 <xTaskIncrementTick+0x158>)
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	601a      	str	r2, [r3, #0]
					break;
 800689e:	e03e      	b.n	800691e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068a0:	4b30      	ldr	r3, [pc, #192]	; (8006964 <xTaskIncrementTick+0x14c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d203      	bcs.n	80068c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80068b8:	4a2d      	ldr	r2, [pc, #180]	; (8006970 <xTaskIncrementTick+0x158>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068be:	e02e      	b.n	800691e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe ffb0 	bl	800582a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3318      	adds	r3, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe ffa7 	bl	800582a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	2201      	movs	r2, #1
 80068e2:	409a      	lsls	r2, r3
 80068e4:	4b23      	ldr	r3, [pc, #140]	; (8006974 <xTaskIncrementTick+0x15c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	4a22      	ldr	r2, [pc, #136]	; (8006974 <xTaskIncrementTick+0x15c>)
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <xTaskIncrementTick+0x160>)
 80068fc:	441a      	add	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f7fe ff33 	bl	8005770 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	4b1b      	ldr	r3, [pc, #108]	; (800697c <xTaskIncrementTick+0x164>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d3b9      	bcc.n	800688c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800691c:	e7b6      	b.n	800688c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800691e:	4b17      	ldr	r3, [pc, #92]	; (800697c <xTaskIncrementTick+0x164>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4914      	ldr	r1, [pc, #80]	; (8006978 <xTaskIncrementTick+0x160>)
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d901      	bls.n	800693a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006936:	2301      	movs	r3, #1
 8006938:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <xTaskIncrementTick+0x168>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e004      	b.n	8006952 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006948:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <xTaskIncrementTick+0x16c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <xTaskIncrementTick+0x16c>)
 8006950:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006952:	697b      	ldr	r3, [r7, #20]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200006a0 	.word	0x200006a0
 8006960:	2000067c 	.word	0x2000067c
 8006964:	20000630 	.word	0x20000630
 8006968:	20000634 	.word	0x20000634
 800696c:	20000690 	.word	0x20000690
 8006970:	20000698 	.word	0x20000698
 8006974:	20000680 	.word	0x20000680
 8006978:	2000057c 	.word	0x2000057c
 800697c:	20000578 	.word	0x20000578
 8006980:	2000068c 	.word	0x2000068c
 8006984:	20000688 	.word	0x20000688

08006988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <vTaskSwitchContext+0xac>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006996:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <vTaskSwitchContext+0xb0>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800699c:	e044      	b.n	8006a28 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800699e:	4b26      	ldr	r3, [pc, #152]	; (8006a38 <vTaskSwitchContext+0xb0>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <vTaskSwitchContext+0xb4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	fab3 f383 	clz	r3, r3
 80069b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80069b2:	7afb      	ldrb	r3, [r7, #11]
 80069b4:	f1c3 031f 	rsb	r3, r3, #31
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	4921      	ldr	r1, [pc, #132]	; (8006a40 <vTaskSwitchContext+0xb8>)
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <vTaskSwitchContext+0x5a>
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4a14      	ldr	r2, [pc, #80]	; (8006a40 <vTaskSwitchContext+0xb8>)
 80069f0:	4413      	add	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3308      	adds	r3, #8
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d104      	bne.n	8006a14 <vTaskSwitchContext+0x8c>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	605a      	str	r2, [r3, #4]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <vTaskSwitchContext+0xbc>)
 8006a1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <vTaskSwitchContext+0xbc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	334c      	adds	r3, #76	; 0x4c
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <vTaskSwitchContext+0xc0>)
 8006a26:	6013      	str	r3, [r2, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200006a0 	.word	0x200006a0
 8006a38:	2000068c 	.word	0x2000068c
 8006a3c:	20000680 	.word	0x20000680
 8006a40:	2000057c 	.word	0x2000057c
 8006a44:	20000578 	.word	0x20000578
 8006a48:	20000010 	.word	0x20000010

08006a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a72:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vTaskPlaceOnEventList+0x44>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3318      	adds	r3, #24
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fe fe9c 	bl	80057b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a80:	2101      	movs	r1, #1
 8006a82:	6838      	ldr	r0, [r7, #0]
 8006a84:	f000 fa6a 	bl	8006f5c <prvAddCurrentTaskToDelayedList>
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000578 	.word	0x20000578

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe feb0 	bl	800582a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <xTaskRemoveFromEventList+0xac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11c      	bne.n	8006b0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fea7 	bl	800582a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006afc:	441a      	add	r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7fe fe33 	bl	8005770 <vListInsertEnd>
 8006b0a:	e005      	b.n	8006b18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4619      	mov	r1, r3
 8006b12:	480e      	ldr	r0, [pc, #56]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006b14:	f7fe fe2c 	bl	8005770 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d905      	bls.n	8006b32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b26:	2301      	movs	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e001      	b.n	8006b36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b36:	697b      	ldr	r3, [r7, #20]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200006a0 	.word	0x200006a0
 8006b44:	20000680 	.word	0x20000680
 8006b48:	2000057c 	.word	0x2000057c
 8006b4c:	20000638 	.word	0x20000638
 8006b50:	20000578 	.word	0x20000578
 8006b54:	2000068c 	.word	0x2000068c

08006b58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <vTaskInternalSetTimeOutState+0x24>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <vTaskInternalSetTimeOutState+0x28>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	605a      	str	r2, [r3, #4]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	20000690 	.word	0x20000690
 8006b80:	2000067c 	.word	0x2000067c

08006b84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	613b      	str	r3, [r7, #16]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	60fb      	str	r3, [r7, #12]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bc6:	f000 fb5d 	bl	8007284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bca:	4b1d      	ldr	r3, [pc, #116]	; (8006c40 <xTaskCheckForTimeOut+0xbc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d102      	bne.n	8006bea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	e023      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <xTaskCheckForTimeOut+0xc0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d007      	beq.n	8006c06 <xTaskCheckForTimeOut+0x82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d302      	bcc.n	8006c06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	e015      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d20b      	bcs.n	8006c28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff9b 	bl	8006b58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e004      	b.n	8006c32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c32:	f000 fb57 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8006c36:	69fb      	ldr	r3, [r7, #28]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	2000067c 	.word	0x2000067c
 8006c44:	20000690 	.word	0x20000690

08006c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <vTaskMissedYield+0x14>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	2000068c 	.word	0x2000068c

08006c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c68:	f000 f852 	bl	8006d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <prvIdleTask+0x28>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d9f9      	bls.n	8006c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <prvIdleTask+0x2c>)
 8006c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c84:	e7f0      	b.n	8006c68 <prvIdleTask+0x8>
 8006c86:	bf00      	nop
 8006c88:	2000057c 	.word	0x2000057c
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c96:	2300      	movs	r3, #0
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	e00c      	b.n	8006cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <prvInitialiseTaskLists+0x60>)
 8006ca8:	4413      	add	r3, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fd33 	bl	8005716 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	d9ef      	bls.n	8006c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cbc:	480d      	ldr	r0, [pc, #52]	; (8006cf4 <prvInitialiseTaskLists+0x64>)
 8006cbe:	f7fe fd2a 	bl	8005716 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cc2:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <prvInitialiseTaskLists+0x68>)
 8006cc4:	f7fe fd27 	bl	8005716 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cc8:	480c      	ldr	r0, [pc, #48]	; (8006cfc <prvInitialiseTaskLists+0x6c>)
 8006cca:	f7fe fd24 	bl	8005716 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cce:	480c      	ldr	r0, [pc, #48]	; (8006d00 <prvInitialiseTaskLists+0x70>)
 8006cd0:	f7fe fd21 	bl	8005716 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cd4:	480b      	ldr	r0, [pc, #44]	; (8006d04 <prvInitialiseTaskLists+0x74>)
 8006cd6:	f7fe fd1e 	bl	8005716 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <prvInitialiseTaskLists+0x78>)
 8006cdc:	4a05      	ldr	r2, [pc, #20]	; (8006cf4 <prvInitialiseTaskLists+0x64>)
 8006cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <prvInitialiseTaskLists+0x7c>)
 8006ce2:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <prvInitialiseTaskLists+0x68>)
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000057c 	.word	0x2000057c
 8006cf4:	20000608 	.word	0x20000608
 8006cf8:	2000061c 	.word	0x2000061c
 8006cfc:	20000638 	.word	0x20000638
 8006d00:	2000064c 	.word	0x2000064c
 8006d04:	20000664 	.word	0x20000664
 8006d08:	20000630 	.word	0x20000630
 8006d0c:	20000634 	.word	0x20000634

08006d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d16:	e019      	b.n	8006d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d18:	f000 fab4 	bl	8007284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <prvCheckTasksWaitingTermination+0x50>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fd7e 	bl	800582a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <prvCheckTasksWaitingTermination+0x54>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	4a0b      	ldr	r2, [pc, #44]	; (8006d64 <prvCheckTasksWaitingTermination+0x54>)
 8006d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	4a0a      	ldr	r2, [pc, #40]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d42:	f000 facf 	bl	80072e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f810 	bl	8006d6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <prvCheckTasksWaitingTermination+0x58>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e1      	bne.n	8006d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000064c 	.word	0x2000064c
 8006d64:	20000678 	.word	0x20000678
 8006d68:	20000660 	.word	0x20000660

08006d6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	334c      	adds	r3, #76	; 0x4c
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fff9 	bl	8007d70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fc67 	bl	8007660 <vPortFree>
				vPortFree( pxTCB );
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fc64 	bl	8007660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d98:	e018      	b.n	8006dcc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d103      	bne.n	8006dac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc5b 	bl	8007660 <vPortFree>
	}
 8006daa:	e00f      	b.n	8006dcc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d00a      	beq.n	8006dcc <prvDeleteTCB+0x60>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60fb      	str	r3, [r7, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <prvDeleteTCB+0x5e>
	}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <prvResetNextTaskUnblockTime+0x38>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <prvResetNextTaskUnblockTime+0x3c>)
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dec:	e008      	b.n	8006e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <prvResetNextTaskUnblockTime+0x38>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfe:	6013      	str	r3, [r2, #0]
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	20000630 	.word	0x20000630
 8006e10:	20000698 	.word	0x20000698

08006e14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <xTaskGetSchedulerState+0x34>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e22:	2301      	movs	r3, #1
 8006e24:	607b      	str	r3, [r7, #4]
 8006e26:	e008      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <xTaskGetSchedulerState+0x38>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e30:	2302      	movs	r3, #2
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	e001      	b.n	8006e3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e3a:	687b      	ldr	r3, [r7, #4]
	}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000684 	.word	0x20000684
 8006e4c:	200006a0 	.word	0x200006a0

08006e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d06e      	beq.n	8006f44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e66:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <xTaskPriorityDisinherit+0x100>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d00a      	beq.n	8006e86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60bb      	str	r3, [r7, #8]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d044      	beq.n	8006f44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d140      	bne.n	8006f44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fcaf 	bl	800582a <uxListRemove>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d115      	bne.n	8006efe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed6:	491f      	ldr	r1, [pc, #124]	; (8006f54 <xTaskPriorityDisinherit+0x104>)
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xTaskPriorityDisinherit+0xae>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	2201      	movs	r2, #1
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <xTaskPriorityDisinherit+0x108>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <xTaskPriorityDisinherit+0x108>)
 8006efc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f1c3 0207 	rsb	r2, r3, #7
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	2201      	movs	r2, #1
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <xTaskPriorityDisinherit+0x108>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	4a0d      	ldr	r2, [pc, #52]	; (8006f58 <xTaskPriorityDisinherit+0x108>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <xTaskPriorityDisinherit+0x104>)
 8006f32:	441a      	add	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	f7fe fc18 	bl	8005770 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f44:	697b      	ldr	r3, [r7, #20]
	}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000578 	.word	0x20000578
 8006f54:	2000057c 	.word	0x2000057c
 8006f58:	20000680 	.word	0x20000680

08006f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f66:	4b29      	ldr	r3, [pc, #164]	; (800700c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f6c:	4b28      	ldr	r3, [pc, #160]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc59 	bl	800582a <uxListRemove>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f7e:	4b24      	ldr	r3, [pc, #144]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	2201      	movs	r2, #1
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43da      	mvns	r2, r3
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4013      	ands	r3, r2
 8006f92:	4a20      	ldr	r2, [pc, #128]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d10a      	bne.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	481a      	ldr	r0, [pc, #104]	; (8007018 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fae:	f7fe fbdf 	bl	8005770 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fb2:	e026      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d209      	bcs.n	8006fe0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7fe fbed 	bl	80057b8 <vListInsert>
}
 8006fde:	e010      	b.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7fe fbe3 	bl	80057b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d202      	bcs.n	8007002 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6013      	str	r3, [r2, #0]
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	2000067c 	.word	0x2000067c
 8007010:	20000578 	.word	0x20000578
 8007014:	20000680 	.word	0x20000680
 8007018:	20000664 	.word	0x20000664
 800701c:	20000634 	.word	0x20000634
 8007020:	20000630 	.word	0x20000630
 8007024:	20000698 	.word	0x20000698

08007028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3b04      	subs	r3, #4
 8007038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3b04      	subs	r3, #4
 8007046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b04      	subs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007058:	4a0c      	ldr	r2, [pc, #48]	; (800708c <pxPortInitialiseStack+0x64>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b14      	subs	r3, #20
 8007062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b04      	subs	r3, #4
 800706e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f06f 0202 	mvn.w	r2, #2
 8007076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3b20      	subs	r3, #32
 800707c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	08007091 	.word	0x08007091

08007090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <prvTaskExitError+0x54>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d00a      	beq.n	80070ba <prvTaskExitError+0x2a>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <prvTaskExitError+0x28>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	60bb      	str	r3, [r7, #8]
}
 80070cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070ce:	bf00      	nop
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0fc      	beq.n	80070d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	2000000c 	.word	0x2000000c
	...

080070f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <pxCurrentTCBConst2>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f380 8809 	msr	PSP, r0
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	4770      	bx	lr
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst2>:
 8007110:	20000578 	.word	0x20000578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007118:	4808      	ldr	r0, [pc, #32]	; (800713c <prvPortStartFirstTask+0x24>)
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f380 8808 	msr	MSP, r0
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f380 8814 	msr	CONTROL, r0
 800712a:	b662      	cpsie	i
 800712c:	b661      	cpsie	f
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	df00      	svc	0
 8007138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800713a:	bf00      	nop
 800713c:	e000ed08 	.word	0xe000ed08

08007140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007146:	4b46      	ldr	r3, [pc, #280]	; (8007260 <xPortStartScheduler+0x120>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a46      	ldr	r2, [pc, #280]	; (8007264 <xPortStartScheduler+0x124>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10a      	bne.n	8007166 <xPortStartScheduler+0x26>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007166:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <xPortStartScheduler+0x120>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <xPortStartScheduler+0x128>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10a      	bne.n	8007186 <xPortStartScheduler+0x46>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <xPortStartScheduler+0x12c>)
 8007188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	22ff      	movs	r2, #255	; 0xff
 8007196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <xPortStartScheduler+0x130>)
 80071ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071ae:	4b31      	ldr	r3, [pc, #196]	; (8007274 <xPortStartScheduler+0x134>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b4:	e009      	b.n	80071ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071b6:	4b2f      	ldr	r3, [pc, #188]	; (8007274 <xPortStartScheduler+0x134>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <xPortStartScheduler+0x134>)
 80071be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d0ef      	beq.n	80071b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071d6:	4b27      	ldr	r3, [pc, #156]	; (8007274 <xPortStartScheduler+0x134>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1c3 0307 	rsb	r3, r3, #7
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d00a      	beq.n	80071f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60bb      	str	r3, [r7, #8]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <xPortStartScheduler+0x134>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <xPortStartScheduler+0x134>)
 8007200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xPortStartScheduler+0x134>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800720a:	4a1a      	ldr	r2, [pc, #104]	; (8007274 <xPortStartScheduler+0x134>)
 800720c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <xPortStartScheduler+0x138>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <xPortStartScheduler+0x138>)
 800721c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <xPortStartScheduler+0x138>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <xPortStartScheduler+0x138>)
 8007228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800722c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800722e:	f000 f8dd 	bl	80073ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <xPortStartScheduler+0x13c>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007238:	f000 f8fc 	bl	8007434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <xPortStartScheduler+0x140>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <xPortStartScheduler+0x140>)
 8007242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007248:	f7ff ff66 	bl	8007118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800724c:	f7ff fb9c 	bl	8006988 <vTaskSwitchContext>
	prvTaskExitError();
 8007250:	f7ff ff1e 	bl	8007090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	e000ed00 	.word	0xe000ed00
 8007264:	410fc271 	.word	0x410fc271
 8007268:	410fc270 	.word	0x410fc270
 800726c:	e000e400 	.word	0xe000e400
 8007270:	200006a4 	.word	0x200006a4
 8007274:	200006a8 	.word	0x200006a8
 8007278:	e000ed20 	.word	0xe000ed20
 800727c:	2000000c 	.word	0x2000000c
 8007280:	e000ef34 	.word	0xe000ef34

08007284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	607b      	str	r3, [r7, #4]
}
 800729c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <vPortEnterCritical+0x58>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <vPortEnterCritical+0x58>)
 80072a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <vPortEnterCritical+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d10f      	bne.n	80072d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortEnterCritical+0x5c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	603b      	str	r3, [r7, #0]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vPortEnterCritical+0x4a>
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <vPortExitCritical+0x50>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <vPortExitCritical+0x24>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <vPortExitCritical+0x50>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <vPortExitCritical+0x50>)
 8007310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <vPortExitCritical+0x50>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <vPortExitCritical+0x42>
 800731a:	2300      	movs	r3, #0
 800731c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f383 8811 	msr	BASEPRI, r3
}
 8007324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c
	...

08007340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007340:	f3ef 8009 	mrs	r0, PSP
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <pxCurrentTCBConst>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f01e 0f10 	tst.w	lr, #16
 8007350:	bf08      	it	eq
 8007352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007364:	f380 8811 	msr	BASEPRI, r0
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f7ff fb0a 	bl	8006988 <vTaskSwitchContext>
 8007374:	f04f 0000 	mov.w	r0, #0
 8007378:	f380 8811 	msr	BASEPRI, r0
 800737c:	bc09      	pop	{r0, r3}
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	6808      	ldr	r0, [r1, #0]
 8007382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007386:	f01e 0f10 	tst.w	lr, #16
 800738a:	bf08      	it	eq
 800738c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007390:	f380 8809 	msr	PSP, r0
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst>:
 80073a0:	20000578 	.word	0x20000578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073c2:	f7ff fa29 	bl	8006818 <xTaskIncrementTick>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <SysTick_Handler+0x40>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f383 8811 	msr	BASEPRI, r3
}
 80073de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <vPortSetupTimerInterrupt+0x38>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <vPortSetupTimerInterrupt+0x3c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <vPortSetupTimerInterrupt+0x40>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	099b      	lsrs	r3, r3, #6
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <vPortSetupTimerInterrupt+0x44>)
 800740a:	3b01      	subs	r3, #1
 800740c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e010 	.word	0xe000e010
 8007424:	e000e018 	.word	0xe000e018
 8007428:	20000000 	.word	0x20000000
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	e000e014 	.word	0xe000e014

08007434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007444 <vPortEnableVFP+0x10>
 8007438:	6801      	ldr	r1, [r0, #0]
 800743a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800743e:	6001      	str	r1, [r0, #0]
 8007440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007442:	bf00      	nop
 8007444:	e000ed88 	.word	0xe000ed88

08007448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800744e:	f3ef 8305 	mrs	r3, IPSR
 8007452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d914      	bls.n	8007484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <vPortValidateInterruptPriority+0x70>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <vPortValidateInterruptPriority+0x74>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	7afa      	ldrb	r2, [r7, #11]
 800746a:	429a      	cmp	r2, r3
 800746c:	d20a      	bcs.n	8007484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007484:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <vPortValidateInterruptPriority+0x78>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <vPortValidateInterruptPriority+0x7c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d90a      	bls.n	80074aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	603b      	str	r3, [r7, #0]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <vPortValidateInterruptPriority+0x60>
	}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	e000e3f0 	.word	0xe000e3f0
 80074bc:	200006a4 	.word	0x200006a4
 80074c0:	e000ed0c 	.word	0xe000ed0c
 80074c4:	200006a8 	.word	0x200006a8

080074c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d4:	f7ff f8f6 	bl	80066c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d8:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <pvPortMalloc+0x180>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e0:	f000 f920 	bl	8007724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e4:	4b59      	ldr	r3, [pc, #356]	; (800764c <pvPortMalloc+0x184>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8093 	bne.w	8007618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01d      	beq.n	8007534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <pvPortMalloc+0x6c>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d06e      	beq.n	8007618 <pvPortMalloc+0x150>
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d869      	bhi.n	8007618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007544:	4b43      	ldr	r3, [pc, #268]	; (8007654 <pvPortMalloc+0x18c>)
 8007546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <pvPortMalloc+0x18c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754e:	e004      	b.n	800755a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <pvPortMalloc+0xa4>
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800756c:	4b36      	ldr	r3, [pc, #216]	; (8007648 <pvPortMalloc+0x180>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	429a      	cmp	r2, r3
 8007574:	d050      	beq.n	8007618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2208      	movs	r2, #8
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d91f      	bls.n	80075d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <pvPortMalloc+0xf8>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	613b      	str	r3, [r7, #16]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075d2:	69b8      	ldr	r0, [r7, #24]
 80075d4:	f000 f908 	bl	80077e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <pvPortMalloc+0x188>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <pvPortMalloc+0x188>)
 80075e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <pvPortMalloc+0x188>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <pvPortMalloc+0x190>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d203      	bcs.n	80075fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <pvPortMalloc+0x188>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	; (8007658 <pvPortMalloc+0x190>)
 80075f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <pvPortMalloc+0x184>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	431a      	orrs	r2, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <pvPortMalloc+0x194>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <pvPortMalloc+0x194>)
 8007616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007618:	f7ff f862 	bl	80066e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <pvPortMalloc+0x174>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <pvPortMalloc+0x172>
	return pvReturn;
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200042b4 	.word	0x200042b4
 800764c:	200042c8 	.word	0x200042c8
 8007650:	200042b8 	.word	0x200042b8
 8007654:	200042ac 	.word	0x200042ac
 8007658:	200042bc 	.word	0x200042bc
 800765c:	200042c0 	.word	0x200042c0

08007660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d04d      	beq.n	800770e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007672:	2308      	movs	r3, #8
 8007674:	425b      	negs	r3, r3
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4b24      	ldr	r3, [pc, #144]	; (8007718 <vPortFree+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <vPortFree+0x44>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <vPortFree+0x62>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60bb      	str	r3, [r7, #8]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <vPortFree+0xb8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01e      	beq.n	800770e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11a      	bne.n	800770e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortFree+0xb8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7fe ffec 	bl	80066c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <vPortFree+0xbc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <vPortFree+0xbc>)
 80076f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f000 f874 	bl	80077e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <vPortFree+0xc0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <vPortFree+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800770a:	f7fe ffe9 	bl	80066e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	200042c8 	.word	0x200042c8
 800771c:	200042b8 	.word	0x200042b8
 8007720:	200042c4 	.word	0x200042c4

08007724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800772a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800772e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <prvHeapInit+0xac>)
 8007732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <prvHeapInit+0xac>)
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <prvHeapInit+0xb0>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <prvHeapInit+0xb0>)
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007770:	2208      	movs	r2, #8
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <prvHeapInit+0xb4>)
 8007784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <prvHeapInit+0xb4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvHeapInit+0xb4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvHeapInit+0xb4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <prvHeapInit+0xb8>)
 80077b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <prvHeapInit+0xbc>)
 80077ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <prvHeapInit+0xc0>)
 80077be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	200006ac 	.word	0x200006ac
 80077d4:	200042ac 	.word	0x200042ac
 80077d8:	200042b4 	.word	0x200042b4
 80077dc:	200042bc 	.word	0x200042bc
 80077e0:	200042b8 	.word	0x200042b8
 80077e4:	200042c8 	.word	0x200042c8

080077e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <prvInsertBlockIntoFreeList+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e002      	b.n	80077fc <prvInsertBlockIntoFreeList+0x14>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d8f7      	bhi.n	80077f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d108      	bne.n	800782a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d118      	bne.n	8007870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d00d      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e008      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e003      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	429a      	cmp	r2, r3
 800787e:	d002      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	200042ac 	.word	0x200042ac
 8007898:	200042b4 	.word	0x200042b4

0800789c <__errno>:
 800789c:	4b01      	ldr	r3, [pc, #4]	; (80078a4 <__errno+0x8>)
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000010 	.word	0x20000010

080078a8 <std>:
 80078a8:	2300      	movs	r3, #0
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
 80078ae:	e9c0 3300 	strd	r3, r3, [r0]
 80078b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078b6:	6083      	str	r3, [r0, #8]
 80078b8:	8181      	strh	r1, [r0, #12]
 80078ba:	6643      	str	r3, [r0, #100]	; 0x64
 80078bc:	81c2      	strh	r2, [r0, #14]
 80078be:	6183      	str	r3, [r0, #24]
 80078c0:	4619      	mov	r1, r3
 80078c2:	2208      	movs	r2, #8
 80078c4:	305c      	adds	r0, #92	; 0x5c
 80078c6:	f000 f91a 	bl	8007afe <memset>
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <std+0x38>)
 80078cc:	6263      	str	r3, [r4, #36]	; 0x24
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <std+0x3c>)
 80078d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <std+0x40>)
 80078d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <std+0x44>)
 80078d8:	6224      	str	r4, [r4, #32]
 80078da:	6323      	str	r3, [r4, #48]	; 0x30
 80078dc:	bd10      	pop	{r4, pc}
 80078de:	bf00      	nop
 80078e0:	08007e49 	.word	0x08007e49
 80078e4:	08007e6b 	.word	0x08007e6b
 80078e8:	08007ea3 	.word	0x08007ea3
 80078ec:	08007ec7 	.word	0x08007ec7

080078f0 <_cleanup_r>:
 80078f0:	4901      	ldr	r1, [pc, #4]	; (80078f8 <_cleanup_r+0x8>)
 80078f2:	f000 b8af 	b.w	8007a54 <_fwalk_reent>
 80078f6:	bf00      	nop
 80078f8:	080081a1 	.word	0x080081a1

080078fc <__sfmoreglue>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	2268      	movs	r2, #104	; 0x68
 8007900:	1e4d      	subs	r5, r1, #1
 8007902:	4355      	muls	r5, r2
 8007904:	460e      	mov	r6, r1
 8007906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800790a:	f000 f921 	bl	8007b50 <_malloc_r>
 800790e:	4604      	mov	r4, r0
 8007910:	b140      	cbz	r0, 8007924 <__sfmoreglue+0x28>
 8007912:	2100      	movs	r1, #0
 8007914:	e9c0 1600 	strd	r1, r6, [r0]
 8007918:	300c      	adds	r0, #12
 800791a:	60a0      	str	r0, [r4, #8]
 800791c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007920:	f000 f8ed 	bl	8007afe <memset>
 8007924:	4620      	mov	r0, r4
 8007926:	bd70      	pop	{r4, r5, r6, pc}

08007928 <__sfp_lock_acquire>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__sfp_lock_acquire+0x8>)
 800792a:	f000 b8d8 	b.w	8007ade <__retarget_lock_acquire_recursive>
 800792e:	bf00      	nop
 8007930:	200042cd 	.word	0x200042cd

08007934 <__sfp_lock_release>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__sfp_lock_release+0x8>)
 8007936:	f000 b8d3 	b.w	8007ae0 <__retarget_lock_release_recursive>
 800793a:	bf00      	nop
 800793c:	200042cd 	.word	0x200042cd

08007940 <__sinit_lock_acquire>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__sinit_lock_acquire+0x8>)
 8007942:	f000 b8cc 	b.w	8007ade <__retarget_lock_acquire_recursive>
 8007946:	bf00      	nop
 8007948:	200042ce 	.word	0x200042ce

0800794c <__sinit_lock_release>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__sinit_lock_release+0x8>)
 800794e:	f000 b8c7 	b.w	8007ae0 <__retarget_lock_release_recursive>
 8007952:	bf00      	nop
 8007954:	200042ce 	.word	0x200042ce

08007958 <__sinit>:
 8007958:	b510      	push	{r4, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	f7ff fff0 	bl	8007940 <__sinit_lock_acquire>
 8007960:	69a3      	ldr	r3, [r4, #24]
 8007962:	b11b      	cbz	r3, 800796c <__sinit+0x14>
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f7ff bff0 	b.w	800794c <__sinit_lock_release>
 800796c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007970:	6523      	str	r3, [r4, #80]	; 0x50
 8007972:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <__sinit+0x68>)
 8007974:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <__sinit+0x6c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	62a2      	str	r2, [r4, #40]	; 0x28
 800797a:	42a3      	cmp	r3, r4
 800797c:	bf04      	itt	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	61a3      	streq	r3, [r4, #24]
 8007982:	4620      	mov	r0, r4
 8007984:	f000 f820 	bl	80079c8 <__sfp>
 8007988:	6060      	str	r0, [r4, #4]
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f81c 	bl	80079c8 <__sfp>
 8007990:	60a0      	str	r0, [r4, #8]
 8007992:	4620      	mov	r0, r4
 8007994:	f000 f818 	bl	80079c8 <__sfp>
 8007998:	2200      	movs	r2, #0
 800799a:	60e0      	str	r0, [r4, #12]
 800799c:	2104      	movs	r1, #4
 800799e:	6860      	ldr	r0, [r4, #4]
 80079a0:	f7ff ff82 	bl	80078a8 <std>
 80079a4:	68a0      	ldr	r0, [r4, #8]
 80079a6:	2201      	movs	r2, #1
 80079a8:	2109      	movs	r1, #9
 80079aa:	f7ff ff7d 	bl	80078a8 <std>
 80079ae:	68e0      	ldr	r0, [r4, #12]
 80079b0:	2202      	movs	r2, #2
 80079b2:	2112      	movs	r1, #18
 80079b4:	f7ff ff78 	bl	80078a8 <std>
 80079b8:	2301      	movs	r3, #1
 80079ba:	61a3      	str	r3, [r4, #24]
 80079bc:	e7d2      	b.n	8007964 <__sinit+0xc>
 80079be:	bf00      	nop
 80079c0:	08008b9c 	.word	0x08008b9c
 80079c4:	080078f1 	.word	0x080078f1

080079c8 <__sfp>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	4607      	mov	r7, r0
 80079cc:	f7ff ffac 	bl	8007928 <__sfp_lock_acquire>
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <__sfp+0x84>)
 80079d2:	681e      	ldr	r6, [r3, #0]
 80079d4:	69b3      	ldr	r3, [r6, #24]
 80079d6:	b913      	cbnz	r3, 80079de <__sfp+0x16>
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff ffbd 	bl	8007958 <__sinit>
 80079de:	3648      	adds	r6, #72	; 0x48
 80079e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	d503      	bpl.n	80079f0 <__sfp+0x28>
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	b30b      	cbz	r3, 8007a30 <__sfp+0x68>
 80079ec:	6836      	ldr	r6, [r6, #0]
 80079ee:	e7f7      	b.n	80079e0 <__sfp+0x18>
 80079f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079f4:	b9d5      	cbnz	r5, 8007a2c <__sfp+0x64>
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <__sfp+0x88>)
 80079f8:	60e3      	str	r3, [r4, #12]
 80079fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007a00:	f000 f86c 	bl	8007adc <__retarget_lock_init_recursive>
 8007a04:	f7ff ff96 	bl	8007934 <__sfp_lock_release>
 8007a08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a10:	6025      	str	r5, [r4, #0]
 8007a12:	61a5      	str	r5, [r4, #24]
 8007a14:	2208      	movs	r2, #8
 8007a16:	4629      	mov	r1, r5
 8007a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a1c:	f000 f86f 	bl	8007afe <memset>
 8007a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2c:	3468      	adds	r4, #104	; 0x68
 8007a2e:	e7d9      	b.n	80079e4 <__sfp+0x1c>
 8007a30:	2104      	movs	r1, #4
 8007a32:	4638      	mov	r0, r7
 8007a34:	f7ff ff62 	bl	80078fc <__sfmoreglue>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	6030      	str	r0, [r6, #0]
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1d5      	bne.n	80079ec <__sfp+0x24>
 8007a40:	f7ff ff78 	bl	8007934 <__sfp_lock_release>
 8007a44:	230c      	movs	r3, #12
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	e7ee      	b.n	8007a28 <__sfp+0x60>
 8007a4a:	bf00      	nop
 8007a4c:	08008b9c 	.word	0x08008b9c
 8007a50:	ffff0001 	.word	0xffff0001

08007a54 <_fwalk_reent>:
 8007a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a58:	4606      	mov	r6, r0
 8007a5a:	4688      	mov	r8, r1
 8007a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a60:	2700      	movs	r7, #0
 8007a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a66:	f1b9 0901 	subs.w	r9, r9, #1
 8007a6a:	d505      	bpl.n	8007a78 <_fwalk_reent+0x24>
 8007a6c:	6824      	ldr	r4, [r4, #0]
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	d1f7      	bne.n	8007a62 <_fwalk_reent+0xe>
 8007a72:	4638      	mov	r0, r7
 8007a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a78:	89ab      	ldrh	r3, [r5, #12]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d907      	bls.n	8007a8e <_fwalk_reent+0x3a>
 8007a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a82:	3301      	adds	r3, #1
 8007a84:	d003      	beq.n	8007a8e <_fwalk_reent+0x3a>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	47c0      	blx	r8
 8007a8c:	4307      	orrs	r7, r0
 8007a8e:	3568      	adds	r5, #104	; 0x68
 8007a90:	e7e9      	b.n	8007a66 <_fwalk_reent+0x12>
	...

08007a94 <__libc_init_array>:
 8007a94:	b570      	push	{r4, r5, r6, lr}
 8007a96:	4d0d      	ldr	r5, [pc, #52]	; (8007acc <__libc_init_array+0x38>)
 8007a98:	4c0d      	ldr	r4, [pc, #52]	; (8007ad0 <__libc_init_array+0x3c>)
 8007a9a:	1b64      	subs	r4, r4, r5
 8007a9c:	10a4      	asrs	r4, r4, #2
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	42a6      	cmp	r6, r4
 8007aa2:	d109      	bne.n	8007ab8 <__libc_init_array+0x24>
 8007aa4:	4d0b      	ldr	r5, [pc, #44]	; (8007ad4 <__libc_init_array+0x40>)
 8007aa6:	4c0c      	ldr	r4, [pc, #48]	; (8007ad8 <__libc_init_array+0x44>)
 8007aa8:	f000 ffa8 	bl	80089fc <_init>
 8007aac:	1b64      	subs	r4, r4, r5
 8007aae:	10a4      	asrs	r4, r4, #2
 8007ab0:	2600      	movs	r6, #0
 8007ab2:	42a6      	cmp	r6, r4
 8007ab4:	d105      	bne.n	8007ac2 <__libc_init_array+0x2e>
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007abc:	4798      	blx	r3
 8007abe:	3601      	adds	r6, #1
 8007ac0:	e7ee      	b.n	8007aa0 <__libc_init_array+0xc>
 8007ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac6:	4798      	blx	r3
 8007ac8:	3601      	adds	r6, #1
 8007aca:	e7f2      	b.n	8007ab2 <__libc_init_array+0x1e>
 8007acc:	08008bdc 	.word	0x08008bdc
 8007ad0:	08008bdc 	.word	0x08008bdc
 8007ad4:	08008bdc 	.word	0x08008bdc
 8007ad8:	08008be0 	.word	0x08008be0

08007adc <__retarget_lock_init_recursive>:
 8007adc:	4770      	bx	lr

08007ade <__retarget_lock_acquire_recursive>:
 8007ade:	4770      	bx	lr

08007ae0 <__retarget_lock_release_recursive>:
 8007ae0:	4770      	bx	lr

08007ae2 <memcpy>:
 8007ae2:	440a      	add	r2, r1
 8007ae4:	4291      	cmp	r1, r2
 8007ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aea:	d100      	bne.n	8007aee <memcpy+0xc>
 8007aec:	4770      	bx	lr
 8007aee:	b510      	push	{r4, lr}
 8007af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007af4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007af8:	4291      	cmp	r1, r2
 8007afa:	d1f9      	bne.n	8007af0 <memcpy+0xe>
 8007afc:	bd10      	pop	{r4, pc}

08007afe <memset>:
 8007afe:	4402      	add	r2, r0
 8007b00:	4603      	mov	r3, r0
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d100      	bne.n	8007b08 <memset+0xa>
 8007b06:	4770      	bx	lr
 8007b08:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0c:	e7f9      	b.n	8007b02 <memset+0x4>
	...

08007b10 <sbrk_aligned>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4e0e      	ldr	r6, [pc, #56]	; (8007b4c <sbrk_aligned+0x3c>)
 8007b14:	460c      	mov	r4, r1
 8007b16:	6831      	ldr	r1, [r6, #0]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	b911      	cbnz	r1, 8007b22 <sbrk_aligned+0x12>
 8007b1c:	f000 f984 	bl	8007e28 <_sbrk_r>
 8007b20:	6030      	str	r0, [r6, #0]
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f97f 	bl	8007e28 <_sbrk_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	d00a      	beq.n	8007b44 <sbrk_aligned+0x34>
 8007b2e:	1cc4      	adds	r4, r0, #3
 8007b30:	f024 0403 	bic.w	r4, r4, #3
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d007      	beq.n	8007b48 <sbrk_aligned+0x38>
 8007b38:	1a21      	subs	r1, r4, r0
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f974 	bl	8007e28 <_sbrk_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d101      	bne.n	8007b48 <sbrk_aligned+0x38>
 8007b44:	f04f 34ff 	mov.w	r4, #4294967295
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	200042d4 	.word	0x200042d4

08007b50 <_malloc_r>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	1ccd      	adds	r5, r1, #3
 8007b56:	f025 0503 	bic.w	r5, r5, #3
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2d0c      	cmp	r5, #12
 8007b5e:	bf38      	it	cc
 8007b60:	250c      	movcc	r5, #12
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	4607      	mov	r7, r0
 8007b66:	db01      	blt.n	8007b6c <_malloc_r+0x1c>
 8007b68:	42a9      	cmp	r1, r5
 8007b6a:	d905      	bls.n	8007b78 <_malloc_r+0x28>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	2600      	movs	r6, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	4e2e      	ldr	r6, [pc, #184]	; (8007c34 <_malloc_r+0xe4>)
 8007b7a:	f000 fbc5 	bl	8008308 <__malloc_lock>
 8007b7e:	6833      	ldr	r3, [r6, #0]
 8007b80:	461c      	mov	r4, r3
 8007b82:	bb34      	cbnz	r4, 8007bd2 <_malloc_r+0x82>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7ff ffc2 	bl	8007b10 <sbrk_aligned>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	4604      	mov	r4, r0
 8007b90:	d14d      	bne.n	8007c2e <_malloc_r+0xde>
 8007b92:	6834      	ldr	r4, [r6, #0]
 8007b94:	4626      	mov	r6, r4
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d140      	bne.n	8007c1c <_malloc_r+0xcc>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	eb04 0803 	add.w	r8, r4, r3
 8007ba4:	f000 f940 	bl	8007e28 <_sbrk_r>
 8007ba8:	4580      	cmp	r8, r0
 8007baa:	d13a      	bne.n	8007c22 <_malloc_r+0xd2>
 8007bac:	6821      	ldr	r1, [r4, #0]
 8007bae:	3503      	adds	r5, #3
 8007bb0:	1a6d      	subs	r5, r5, r1
 8007bb2:	f025 0503 	bic.w	r5, r5, #3
 8007bb6:	3508      	adds	r5, #8
 8007bb8:	2d0c      	cmp	r5, #12
 8007bba:	bf38      	it	cc
 8007bbc:	250c      	movcc	r5, #12
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff ffa5 	bl	8007b10 <sbrk_aligned>
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d02b      	beq.n	8007c22 <_malloc_r+0xd2>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	442b      	add	r3, r5
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	e00e      	b.n	8007bf0 <_malloc_r+0xa0>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	1b52      	subs	r2, r2, r5
 8007bd6:	d41e      	bmi.n	8007c16 <_malloc_r+0xc6>
 8007bd8:	2a0b      	cmp	r2, #11
 8007bda:	d916      	bls.n	8007c0a <_malloc_r+0xba>
 8007bdc:	1961      	adds	r1, r4, r5
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	6025      	str	r5, [r4, #0]
 8007be2:	bf18      	it	ne
 8007be4:	6059      	strne	r1, [r3, #4]
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	bf08      	it	eq
 8007bea:	6031      	streq	r1, [r6, #0]
 8007bec:	5162      	str	r2, [r4, r5]
 8007bee:	604b      	str	r3, [r1, #4]
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f104 060b 	add.w	r6, r4, #11
 8007bf6:	f000 fb8d 	bl	8008314 <__malloc_unlock>
 8007bfa:	f026 0607 	bic.w	r6, r6, #7
 8007bfe:	1d23      	adds	r3, r4, #4
 8007c00:	1af2      	subs	r2, r6, r3
 8007c02:	d0b6      	beq.n	8007b72 <_malloc_r+0x22>
 8007c04:	1b9b      	subs	r3, r3, r6
 8007c06:	50a3      	str	r3, [r4, r2]
 8007c08:	e7b3      	b.n	8007b72 <_malloc_r+0x22>
 8007c0a:	6862      	ldr	r2, [r4, #4]
 8007c0c:	42a3      	cmp	r3, r4
 8007c0e:	bf0c      	ite	eq
 8007c10:	6032      	streq	r2, [r6, #0]
 8007c12:	605a      	strne	r2, [r3, #4]
 8007c14:	e7ec      	b.n	8007bf0 <_malloc_r+0xa0>
 8007c16:	4623      	mov	r3, r4
 8007c18:	6864      	ldr	r4, [r4, #4]
 8007c1a:	e7b2      	b.n	8007b82 <_malloc_r+0x32>
 8007c1c:	4634      	mov	r4, r6
 8007c1e:	6876      	ldr	r6, [r6, #4]
 8007c20:	e7b9      	b.n	8007b96 <_malloc_r+0x46>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 fb74 	bl	8008314 <__malloc_unlock>
 8007c2c:	e7a1      	b.n	8007b72 <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7de      	b.n	8007bf0 <_malloc_r+0xa0>
 8007c32:	bf00      	nop
 8007c34:	200042d0 	.word	0x200042d0

08007c38 <iprintf>:
 8007c38:	b40f      	push	{r0, r1, r2, r3}
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <iprintf+0x2c>)
 8007c3c:	b513      	push	{r0, r1, r4, lr}
 8007c3e:	681c      	ldr	r4, [r3, #0]
 8007c40:	b124      	cbz	r4, 8007c4c <iprintf+0x14>
 8007c42:	69a3      	ldr	r3, [r4, #24]
 8007c44:	b913      	cbnz	r3, 8007c4c <iprintf+0x14>
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff fe86 	bl	8007958 <__sinit>
 8007c4c:	ab05      	add	r3, sp, #20
 8007c4e:	9a04      	ldr	r2, [sp, #16]
 8007c50:	68a1      	ldr	r1, [r4, #8]
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	4620      	mov	r0, r4
 8007c56:	f000 fbd9 	bl	800840c <_vfiprintf_r>
 8007c5a:	b002      	add	sp, #8
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	b004      	add	sp, #16
 8007c62:	4770      	bx	lr
 8007c64:	20000010 	.word	0x20000010

08007c68 <_puts_r>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	460e      	mov	r6, r1
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	b118      	cbz	r0, 8007c78 <_puts_r+0x10>
 8007c70:	6983      	ldr	r3, [r0, #24]
 8007c72:	b90b      	cbnz	r3, 8007c78 <_puts_r+0x10>
 8007c74:	f7ff fe70 	bl	8007958 <__sinit>
 8007c78:	69ab      	ldr	r3, [r5, #24]
 8007c7a:	68ac      	ldr	r4, [r5, #8]
 8007c7c:	b913      	cbnz	r3, 8007c84 <_puts_r+0x1c>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f7ff fe6a 	bl	8007958 <__sinit>
 8007c84:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <_puts_r+0xd0>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d120      	bne.n	8007ccc <_puts_r+0x64>
 8007c8a:	686c      	ldr	r4, [r5, #4]
 8007c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c8e:	07db      	lsls	r3, r3, #31
 8007c90:	d405      	bmi.n	8007c9e <_puts_r+0x36>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	0598      	lsls	r0, r3, #22
 8007c96:	d402      	bmi.n	8007c9e <_puts_r+0x36>
 8007c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c9a:	f7ff ff20 	bl	8007ade <__retarget_lock_acquire_recursive>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	0719      	lsls	r1, r3, #28
 8007ca2:	d51d      	bpl.n	8007ce0 <_puts_r+0x78>
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	b1db      	cbz	r3, 8007ce0 <_puts_r+0x78>
 8007ca8:	3e01      	subs	r6, #1
 8007caa:	68a3      	ldr	r3, [r4, #8]
 8007cac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	bb39      	cbnz	r1, 8007d06 <_puts_r+0x9e>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da38      	bge.n	8007d2c <_puts_r+0xc4>
 8007cba:	4622      	mov	r2, r4
 8007cbc:	210a      	movs	r1, #10
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 f906 	bl	8007ed0 <__swbuf_r>
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d011      	beq.n	8007cec <_puts_r+0x84>
 8007cc8:	250a      	movs	r5, #10
 8007cca:	e011      	b.n	8007cf0 <_puts_r+0x88>
 8007ccc:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <_puts_r+0xd4>)
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d101      	bne.n	8007cd6 <_puts_r+0x6e>
 8007cd2:	68ac      	ldr	r4, [r5, #8]
 8007cd4:	e7da      	b.n	8007c8c <_puts_r+0x24>
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <_puts_r+0xd8>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	bf08      	it	eq
 8007cdc:	68ec      	ldreq	r4, [r5, #12]
 8007cde:	e7d5      	b.n	8007c8c <_puts_r+0x24>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 f958 	bl	8007f98 <__swsetup_r>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d0dd      	beq.n	8007ca8 <_puts_r+0x40>
 8007cec:	f04f 35ff 	mov.w	r5, #4294967295
 8007cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cf2:	07da      	lsls	r2, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_puts_r+0x9a>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_puts_r+0x9a>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfe:	f7ff feef 	bl	8007ae0 <__retarget_lock_release_recursive>
 8007d02:	4628      	mov	r0, r5
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da04      	bge.n	8007d14 <_puts_r+0xac>
 8007d0a:	69a2      	ldr	r2, [r4, #24]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	dc06      	bgt.n	8007d1e <_puts_r+0xb6>
 8007d10:	290a      	cmp	r1, #10
 8007d12:	d004      	beq.n	8007d1e <_puts_r+0xb6>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	7019      	strb	r1, [r3, #0]
 8007d1c:	e7c5      	b.n	8007caa <_puts_r+0x42>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f8d5 	bl	8007ed0 <__swbuf_r>
 8007d26:	3001      	adds	r0, #1
 8007d28:	d1bf      	bne.n	8007caa <_puts_r+0x42>
 8007d2a:	e7df      	b.n	8007cec <_puts_r+0x84>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	250a      	movs	r5, #10
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	701d      	strb	r5, [r3, #0]
 8007d36:	e7db      	b.n	8007cf0 <_puts_r+0x88>
 8007d38:	08008b5c 	.word	0x08008b5c
 8007d3c:	08008b7c 	.word	0x08008b7c
 8007d40:	08008b3c 	.word	0x08008b3c

08007d44 <puts>:
 8007d44:	4b02      	ldr	r3, [pc, #8]	; (8007d50 <puts+0xc>)
 8007d46:	4601      	mov	r1, r0
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	f7ff bf8d 	b.w	8007c68 <_puts_r>
 8007d4e:	bf00      	nop
 8007d50:	20000010 	.word	0x20000010

08007d54 <cleanup_glue>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	460c      	mov	r4, r1
 8007d58:	6809      	ldr	r1, [r1, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	b109      	cbz	r1, 8007d62 <cleanup_glue+0xe>
 8007d5e:	f7ff fff9 	bl	8007d54 <cleanup_glue>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d6a:	f000 bad9 	b.w	8008320 <_free_r>
	...

08007d70 <_reclaim_reent>:
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <_reclaim_reent+0xb4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4283      	cmp	r3, r0
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d051      	beq.n	8007e20 <_reclaim_reent+0xb0>
 8007d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d7e:	b143      	cbz	r3, 8007d92 <_reclaim_reent+0x22>
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d14a      	bne.n	8007e1c <_reclaim_reent+0xac>
 8007d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b111      	cbz	r1, 8007d92 <_reclaim_reent+0x22>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fac7 	bl	8008320 <_free_r>
 8007d92:	6961      	ldr	r1, [r4, #20]
 8007d94:	b111      	cbz	r1, 8007d9c <_reclaim_reent+0x2c>
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 fac2 	bl	8008320 <_free_r>
 8007d9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d9e:	b111      	cbz	r1, 8007da6 <_reclaim_reent+0x36>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fabd 	bl	8008320 <_free_r>
 8007da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007da8:	b111      	cbz	r1, 8007db0 <_reclaim_reent+0x40>
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fab8 	bl	8008320 <_free_r>
 8007db0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007db2:	b111      	cbz	r1, 8007dba <_reclaim_reent+0x4a>
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fab3 	bl	8008320 <_free_r>
 8007dba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007dbc:	b111      	cbz	r1, 8007dc4 <_reclaim_reent+0x54>
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 faae 	bl	8008320 <_free_r>
 8007dc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007dc6:	b111      	cbz	r1, 8007dce <_reclaim_reent+0x5e>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 faa9 	bl	8008320 <_free_r>
 8007dce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007dd0:	b111      	cbz	r1, 8007dd8 <_reclaim_reent+0x68>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 faa4 	bl	8008320 <_free_r>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dda:	b111      	cbz	r1, 8007de2 <_reclaim_reent+0x72>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fa9f 	bl	8008320 <_free_r>
 8007de2:	69a3      	ldr	r3, [r4, #24]
 8007de4:	b1e3      	cbz	r3, 8007e20 <_reclaim_reent+0xb0>
 8007de6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007de8:	4620      	mov	r0, r4
 8007dea:	4798      	blx	r3
 8007dec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dee:	b1b9      	cbz	r1, 8007e20 <_reclaim_reent+0xb0>
 8007df0:	4620      	mov	r0, r4
 8007df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007df6:	f7ff bfad 	b.w	8007d54 <cleanup_glue>
 8007dfa:	5949      	ldr	r1, [r1, r5]
 8007dfc:	b941      	cbnz	r1, 8007e10 <_reclaim_reent+0xa0>
 8007dfe:	3504      	adds	r5, #4
 8007e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e02:	2d80      	cmp	r5, #128	; 0x80
 8007e04:	68d9      	ldr	r1, [r3, #12]
 8007e06:	d1f8      	bne.n	8007dfa <_reclaim_reent+0x8a>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fa89 	bl	8008320 <_free_r>
 8007e0e:	e7ba      	b.n	8007d86 <_reclaim_reent+0x16>
 8007e10:	680e      	ldr	r6, [r1, #0]
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fa84 	bl	8008320 <_free_r>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	e7ef      	b.n	8007dfc <_reclaim_reent+0x8c>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	e7ef      	b.n	8007e00 <_reclaim_reent+0x90>
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	bf00      	nop
 8007e24:	20000010 	.word	0x20000010

08007e28 <_sbrk_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	; (8007e44 <_sbrk_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7f9 fa58 	bl	80012e8 <_sbrk>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_sbrk_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_sbrk_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	200042d8 	.word	0x200042d8

08007e48 <__sread>:
 8007e48:	b510      	push	{r4, lr}
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e50:	f000 fda0 	bl	8008994 <_read_r>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	bfab      	itete	ge
 8007e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e5c:	181b      	addge	r3, r3, r0
 8007e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e62:	bfac      	ite	ge
 8007e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e66:	81a3      	strhlt	r3, [r4, #12]
 8007e68:	bd10      	pop	{r4, pc}

08007e6a <__swrite>:
 8007e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6e:	461f      	mov	r7, r3
 8007e70:	898b      	ldrh	r3, [r1, #12]
 8007e72:	05db      	lsls	r3, r3, #23
 8007e74:	4605      	mov	r5, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	4616      	mov	r6, r2
 8007e7a:	d505      	bpl.n	8007e88 <__swrite+0x1e>
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	2302      	movs	r3, #2
 8007e82:	2200      	movs	r2, #0
 8007e84:	f000 f9c8 	bl	8008218 <_lseek_r>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e92:	81a3      	strh	r3, [r4, #12]
 8007e94:	4632      	mov	r2, r6
 8007e96:	463b      	mov	r3, r7
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9e:	f000 b869 	b.w	8007f74 <_write_r>

08007ea2 <__sseek>:
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eaa:	f000 f9b5 	bl	8008218 <_lseek_r>
 8007eae:	1c43      	adds	r3, r0, #1
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	bf15      	itete	ne
 8007eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ebe:	81a3      	strheq	r3, [r4, #12]
 8007ec0:	bf18      	it	ne
 8007ec2:	81a3      	strhne	r3, [r4, #12]
 8007ec4:	bd10      	pop	{r4, pc}

08007ec6 <__sclose>:
 8007ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eca:	f000 b8d3 	b.w	8008074 <_close_r>
	...

08007ed0 <__swbuf_r>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	460e      	mov	r6, r1
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	b118      	cbz	r0, 8007ee2 <__swbuf_r+0x12>
 8007eda:	6983      	ldr	r3, [r0, #24]
 8007edc:	b90b      	cbnz	r3, 8007ee2 <__swbuf_r+0x12>
 8007ede:	f7ff fd3b 	bl	8007958 <__sinit>
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <__swbuf_r+0x98>)
 8007ee4:	429c      	cmp	r4, r3
 8007ee6:	d12b      	bne.n	8007f40 <__swbuf_r+0x70>
 8007ee8:	686c      	ldr	r4, [r5, #4]
 8007eea:	69a3      	ldr	r3, [r4, #24]
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	071a      	lsls	r2, r3, #28
 8007ef2:	d52f      	bpl.n	8007f54 <__swbuf_r+0x84>
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	b36b      	cbz	r3, 8007f54 <__swbuf_r+0x84>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	6820      	ldr	r0, [r4, #0]
 8007efc:	1ac0      	subs	r0, r0, r3
 8007efe:	6963      	ldr	r3, [r4, #20]
 8007f00:	b2f6      	uxtb	r6, r6
 8007f02:	4283      	cmp	r3, r0
 8007f04:	4637      	mov	r7, r6
 8007f06:	dc04      	bgt.n	8007f12 <__swbuf_r+0x42>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 f948 	bl	80081a0 <_fflush_r>
 8007f10:	bb30      	cbnz	r0, 8007f60 <__swbuf_r+0x90>
 8007f12:	68a3      	ldr	r3, [r4, #8]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	60a3      	str	r3, [r4, #8]
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	6022      	str	r2, [r4, #0]
 8007f1e:	701e      	strb	r6, [r3, #0]
 8007f20:	6963      	ldr	r3, [r4, #20]
 8007f22:	3001      	adds	r0, #1
 8007f24:	4283      	cmp	r3, r0
 8007f26:	d004      	beq.n	8007f32 <__swbuf_r+0x62>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	07db      	lsls	r3, r3, #31
 8007f2c:	d506      	bpl.n	8007f3c <__swbuf_r+0x6c>
 8007f2e:	2e0a      	cmp	r6, #10
 8007f30:	d104      	bne.n	8007f3c <__swbuf_r+0x6c>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 f933 	bl	80081a0 <_fflush_r>
 8007f3a:	b988      	cbnz	r0, 8007f60 <__swbuf_r+0x90>
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <__swbuf_r+0x9c>)
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d101      	bne.n	8007f4a <__swbuf_r+0x7a>
 8007f46:	68ac      	ldr	r4, [r5, #8]
 8007f48:	e7cf      	b.n	8007eea <__swbuf_r+0x1a>
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <__swbuf_r+0xa0>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	bf08      	it	eq
 8007f50:	68ec      	ldreq	r4, [r5, #12]
 8007f52:	e7ca      	b.n	8007eea <__swbuf_r+0x1a>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f81e 	bl	8007f98 <__swsetup_r>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d0cb      	beq.n	8007ef8 <__swbuf_r+0x28>
 8007f60:	f04f 37ff 	mov.w	r7, #4294967295
 8007f64:	e7ea      	b.n	8007f3c <__swbuf_r+0x6c>
 8007f66:	bf00      	nop
 8007f68:	08008b5c 	.word	0x08008b5c
 8007f6c:	08008b7c 	.word	0x08008b7c
 8007f70:	08008b3c 	.word	0x08008b3c

08007f74 <_write_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d07      	ldr	r5, [pc, #28]	; (8007f94 <_write_r+0x20>)
 8007f78:	4604      	mov	r4, r0
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	602a      	str	r2, [r5, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f7f9 f95f 	bl	8001246 <_write>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_write_r+0x1e>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_write_r+0x1e>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	200042d8 	.word	0x200042d8

08007f98 <__swsetup_r>:
 8007f98:	4b32      	ldr	r3, [pc, #200]	; (8008064 <__swsetup_r+0xcc>)
 8007f9a:	b570      	push	{r4, r5, r6, lr}
 8007f9c:	681d      	ldr	r5, [r3, #0]
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	b125      	cbz	r5, 8007fae <__swsetup_r+0x16>
 8007fa4:	69ab      	ldr	r3, [r5, #24]
 8007fa6:	b913      	cbnz	r3, 8007fae <__swsetup_r+0x16>
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f7ff fcd5 	bl	8007958 <__sinit>
 8007fae:	4b2e      	ldr	r3, [pc, #184]	; (8008068 <__swsetup_r+0xd0>)
 8007fb0:	429c      	cmp	r4, r3
 8007fb2:	d10f      	bne.n	8007fd4 <__swsetup_r+0x3c>
 8007fb4:	686c      	ldr	r4, [r5, #4]
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fbc:	0719      	lsls	r1, r3, #28
 8007fbe:	d42c      	bmi.n	800801a <__swsetup_r+0x82>
 8007fc0:	06dd      	lsls	r5, r3, #27
 8007fc2:	d411      	bmi.n	8007fe8 <__swsetup_r+0x50>
 8007fc4:	2309      	movs	r3, #9
 8007fc6:	6033      	str	r3, [r6, #0]
 8007fc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	e03e      	b.n	8008052 <__swsetup_r+0xba>
 8007fd4:	4b25      	ldr	r3, [pc, #148]	; (800806c <__swsetup_r+0xd4>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <__swsetup_r+0x46>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7eb      	b.n	8007fb6 <__swsetup_r+0x1e>
 8007fde:	4b24      	ldr	r3, [pc, #144]	; (8008070 <__swsetup_r+0xd8>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7e6      	b.n	8007fb6 <__swsetup_r+0x1e>
 8007fe8:	0758      	lsls	r0, r3, #29
 8007fea:	d512      	bpl.n	8008012 <__swsetup_r+0x7a>
 8007fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fee:	b141      	cbz	r1, 8008002 <__swsetup_r+0x6a>
 8007ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff4:	4299      	cmp	r1, r3
 8007ff6:	d002      	beq.n	8007ffe <__swsetup_r+0x66>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f000 f991 	bl	8008320 <_free_r>
 8007ffe:	2300      	movs	r3, #0
 8008000:	6363      	str	r3, [r4, #52]	; 0x34
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	2300      	movs	r3, #0
 800800c:	6063      	str	r3, [r4, #4]
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	f043 0308 	orr.w	r3, r3, #8
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	b94b      	cbnz	r3, 8008032 <__swsetup_r+0x9a>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008028:	d003      	beq.n	8008032 <__swsetup_r+0x9a>
 800802a:	4621      	mov	r1, r4
 800802c:	4630      	mov	r0, r6
 800802e:	f000 f92b 	bl	8008288 <__smakebuf_r>
 8008032:	89a0      	ldrh	r0, [r4, #12]
 8008034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008038:	f010 0301 	ands.w	r3, r0, #1
 800803c:	d00a      	beq.n	8008054 <__swsetup_r+0xbc>
 800803e:	2300      	movs	r3, #0
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6963      	ldr	r3, [r4, #20]
 8008044:	425b      	negs	r3, r3
 8008046:	61a3      	str	r3, [r4, #24]
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	b943      	cbnz	r3, 800805e <__swsetup_r+0xc6>
 800804c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008050:	d1ba      	bne.n	8007fc8 <__swsetup_r+0x30>
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	0781      	lsls	r1, r0, #30
 8008056:	bf58      	it	pl
 8008058:	6963      	ldrpl	r3, [r4, #20]
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	e7f4      	b.n	8008048 <__swsetup_r+0xb0>
 800805e:	2000      	movs	r0, #0
 8008060:	e7f7      	b.n	8008052 <__swsetup_r+0xba>
 8008062:	bf00      	nop
 8008064:	20000010 	.word	0x20000010
 8008068:	08008b5c 	.word	0x08008b5c
 800806c:	08008b7c 	.word	0x08008b7c
 8008070:	08008b3c 	.word	0x08008b3c

08008074 <_close_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_close_r+0x1c>)
 8008078:	2300      	movs	r3, #0
 800807a:	4604      	mov	r4, r0
 800807c:	4608      	mov	r0, r1
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	f7f9 f8fd 	bl	800127e <_close>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_close_r+0x1a>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_close_r+0x1a>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	200042d8 	.word	0x200042d8

08008094 <__sflush_r>:
 8008094:	898a      	ldrh	r2, [r1, #12]
 8008096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	4605      	mov	r5, r0
 800809c:	0710      	lsls	r0, r2, #28
 800809e:	460c      	mov	r4, r1
 80080a0:	d458      	bmi.n	8008154 <__sflush_r+0xc0>
 80080a2:	684b      	ldr	r3, [r1, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dc05      	bgt.n	80080b4 <__sflush_r+0x20>
 80080a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc02      	bgt.n	80080b4 <__sflush_r+0x20>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080b6:	2e00      	cmp	r6, #0
 80080b8:	d0f9      	beq.n	80080ae <__sflush_r+0x1a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080c0:	682f      	ldr	r7, [r5, #0]
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	d032      	beq.n	800812c <__sflush_r+0x98>
 80080c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	075a      	lsls	r2, r3, #29
 80080cc:	d505      	bpl.n	80080da <__sflush_r+0x46>
 80080ce:	6863      	ldr	r3, [r4, #4]
 80080d0:	1ac0      	subs	r0, r0, r3
 80080d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080d4:	b10b      	cbz	r3, 80080da <__sflush_r+0x46>
 80080d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080d8:	1ac0      	subs	r0, r0, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	4602      	mov	r2, r0
 80080de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e0:	6a21      	ldr	r1, [r4, #32]
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b0      	blx	r6
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	d106      	bne.n	80080fa <__sflush_r+0x66>
 80080ec:	6829      	ldr	r1, [r5, #0]
 80080ee:	291d      	cmp	r1, #29
 80080f0:	d82c      	bhi.n	800814c <__sflush_r+0xb8>
 80080f2:	4a2a      	ldr	r2, [pc, #168]	; (800819c <__sflush_r+0x108>)
 80080f4:	40ca      	lsrs	r2, r1
 80080f6:	07d6      	lsls	r6, r2, #31
 80080f8:	d528      	bpl.n	800814c <__sflush_r+0xb8>
 80080fa:	2200      	movs	r2, #0
 80080fc:	6062      	str	r2, [r4, #4]
 80080fe:	04d9      	lsls	r1, r3, #19
 8008100:	6922      	ldr	r2, [r4, #16]
 8008102:	6022      	str	r2, [r4, #0]
 8008104:	d504      	bpl.n	8008110 <__sflush_r+0x7c>
 8008106:	1c42      	adds	r2, r0, #1
 8008108:	d101      	bne.n	800810e <__sflush_r+0x7a>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b903      	cbnz	r3, 8008110 <__sflush_r+0x7c>
 800810e:	6560      	str	r0, [r4, #84]	; 0x54
 8008110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008112:	602f      	str	r7, [r5, #0]
 8008114:	2900      	cmp	r1, #0
 8008116:	d0ca      	beq.n	80080ae <__sflush_r+0x1a>
 8008118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800811c:	4299      	cmp	r1, r3
 800811e:	d002      	beq.n	8008126 <__sflush_r+0x92>
 8008120:	4628      	mov	r0, r5
 8008122:	f000 f8fd 	bl	8008320 <_free_r>
 8008126:	2000      	movs	r0, #0
 8008128:	6360      	str	r0, [r4, #52]	; 0x34
 800812a:	e7c1      	b.n	80080b0 <__sflush_r+0x1c>
 800812c:	6a21      	ldr	r1, [r4, #32]
 800812e:	2301      	movs	r3, #1
 8008130:	4628      	mov	r0, r5
 8008132:	47b0      	blx	r6
 8008134:	1c41      	adds	r1, r0, #1
 8008136:	d1c7      	bne.n	80080c8 <__sflush_r+0x34>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0c4      	beq.n	80080c8 <__sflush_r+0x34>
 800813e:	2b1d      	cmp	r3, #29
 8008140:	d001      	beq.n	8008146 <__sflush_r+0xb2>
 8008142:	2b16      	cmp	r3, #22
 8008144:	d101      	bne.n	800814a <__sflush_r+0xb6>
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	e7b1      	b.n	80080ae <__sflush_r+0x1a>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	e7ad      	b.n	80080b0 <__sflush_r+0x1c>
 8008154:	690f      	ldr	r7, [r1, #16]
 8008156:	2f00      	cmp	r7, #0
 8008158:	d0a9      	beq.n	80080ae <__sflush_r+0x1a>
 800815a:	0793      	lsls	r3, r2, #30
 800815c:	680e      	ldr	r6, [r1, #0]
 800815e:	bf08      	it	eq
 8008160:	694b      	ldreq	r3, [r1, #20]
 8008162:	600f      	str	r7, [r1, #0]
 8008164:	bf18      	it	ne
 8008166:	2300      	movne	r3, #0
 8008168:	eba6 0807 	sub.w	r8, r6, r7
 800816c:	608b      	str	r3, [r1, #8]
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	dd9c      	ble.n	80080ae <__sflush_r+0x1a>
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008178:	4643      	mov	r3, r8
 800817a:	463a      	mov	r2, r7
 800817c:	4628      	mov	r0, r5
 800817e:	47b0      	blx	r6
 8008180:	2800      	cmp	r0, #0
 8008182:	dc06      	bgt.n	8008192 <__sflush_r+0xfe>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e78e      	b.n	80080b0 <__sflush_r+0x1c>
 8008192:	4407      	add	r7, r0
 8008194:	eba8 0800 	sub.w	r8, r8, r0
 8008198:	e7e9      	b.n	800816e <__sflush_r+0xda>
 800819a:	bf00      	nop
 800819c:	20400001 	.word	0x20400001

080081a0 <_fflush_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	690b      	ldr	r3, [r1, #16]
 80081a4:	4605      	mov	r5, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b913      	cbnz	r3, 80081b0 <_fflush_r+0x10>
 80081aa:	2500      	movs	r5, #0
 80081ac:	4628      	mov	r0, r5
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	b118      	cbz	r0, 80081ba <_fflush_r+0x1a>
 80081b2:	6983      	ldr	r3, [r0, #24]
 80081b4:	b90b      	cbnz	r3, 80081ba <_fflush_r+0x1a>
 80081b6:	f7ff fbcf 	bl	8007958 <__sinit>
 80081ba:	4b14      	ldr	r3, [pc, #80]	; (800820c <_fflush_r+0x6c>)
 80081bc:	429c      	cmp	r4, r3
 80081be:	d11b      	bne.n	80081f8 <_fflush_r+0x58>
 80081c0:	686c      	ldr	r4, [r5, #4]
 80081c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0ef      	beq.n	80081aa <_fflush_r+0xa>
 80081ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081cc:	07d0      	lsls	r0, r2, #31
 80081ce:	d404      	bmi.n	80081da <_fflush_r+0x3a>
 80081d0:	0599      	lsls	r1, r3, #22
 80081d2:	d402      	bmi.n	80081da <_fflush_r+0x3a>
 80081d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081d6:	f7ff fc82 	bl	8007ade <__retarget_lock_acquire_recursive>
 80081da:	4628      	mov	r0, r5
 80081dc:	4621      	mov	r1, r4
 80081de:	f7ff ff59 	bl	8008094 <__sflush_r>
 80081e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081e4:	07da      	lsls	r2, r3, #31
 80081e6:	4605      	mov	r5, r0
 80081e8:	d4e0      	bmi.n	80081ac <_fflush_r+0xc>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	059b      	lsls	r3, r3, #22
 80081ee:	d4dd      	bmi.n	80081ac <_fflush_r+0xc>
 80081f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081f2:	f7ff fc75 	bl	8007ae0 <__retarget_lock_release_recursive>
 80081f6:	e7d9      	b.n	80081ac <_fflush_r+0xc>
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <_fflush_r+0x70>)
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d101      	bne.n	8008202 <_fflush_r+0x62>
 80081fe:	68ac      	ldr	r4, [r5, #8]
 8008200:	e7df      	b.n	80081c2 <_fflush_r+0x22>
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <_fflush_r+0x74>)
 8008204:	429c      	cmp	r4, r3
 8008206:	bf08      	it	eq
 8008208:	68ec      	ldreq	r4, [r5, #12]
 800820a:	e7da      	b.n	80081c2 <_fflush_r+0x22>
 800820c:	08008b5c 	.word	0x08008b5c
 8008210:	08008b7c 	.word	0x08008b7c
 8008214:	08008b3c 	.word	0x08008b3c

08008218 <_lseek_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	; (8008238 <_lseek_r+0x20>)
 800821c:	4604      	mov	r4, r0
 800821e:	4608      	mov	r0, r1
 8008220:	4611      	mov	r1, r2
 8008222:	2200      	movs	r2, #0
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	f7f9 f850 	bl	80012cc <_lseek>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_lseek_r+0x1e>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_lseek_r+0x1e>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	200042d8 	.word	0x200042d8

0800823c <__swhatbuf_r>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	460e      	mov	r6, r1
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	2900      	cmp	r1, #0
 8008246:	b096      	sub	sp, #88	; 0x58
 8008248:	4614      	mov	r4, r2
 800824a:	461d      	mov	r5, r3
 800824c:	da08      	bge.n	8008260 <__swhatbuf_r+0x24>
 800824e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	602a      	str	r2, [r5, #0]
 8008256:	061a      	lsls	r2, r3, #24
 8008258:	d410      	bmi.n	800827c <__swhatbuf_r+0x40>
 800825a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825e:	e00e      	b.n	800827e <__swhatbuf_r+0x42>
 8008260:	466a      	mov	r2, sp
 8008262:	f000 fba9 	bl	80089b8 <_fstat_r>
 8008266:	2800      	cmp	r0, #0
 8008268:	dbf1      	blt.n	800824e <__swhatbuf_r+0x12>
 800826a:	9a01      	ldr	r2, [sp, #4]
 800826c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008274:	425a      	negs	r2, r3
 8008276:	415a      	adcs	r2, r3
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	e7ee      	b.n	800825a <__swhatbuf_r+0x1e>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2000      	movs	r0, #0
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	b016      	add	sp, #88	; 0x58
 8008284:	bd70      	pop	{r4, r5, r6, pc}
	...

08008288 <__smakebuf_r>:
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800828c:	079d      	lsls	r5, r3, #30
 800828e:	4606      	mov	r6, r0
 8008290:	460c      	mov	r4, r1
 8008292:	d507      	bpl.n	80082a4 <__smakebuf_r+0x1c>
 8008294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	6123      	str	r3, [r4, #16]
 800829c:	2301      	movs	r3, #1
 800829e:	6163      	str	r3, [r4, #20]
 80082a0:	b002      	add	sp, #8
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	ab01      	add	r3, sp, #4
 80082a6:	466a      	mov	r2, sp
 80082a8:	f7ff ffc8 	bl	800823c <__swhatbuf_r>
 80082ac:	9900      	ldr	r1, [sp, #0]
 80082ae:	4605      	mov	r5, r0
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff fc4d 	bl	8007b50 <_malloc_r>
 80082b6:	b948      	cbnz	r0, 80082cc <__smakebuf_r+0x44>
 80082b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082bc:	059a      	lsls	r2, r3, #22
 80082be:	d4ef      	bmi.n	80082a0 <__smakebuf_r+0x18>
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	e7e3      	b.n	8008294 <__smakebuf_r+0xc>
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <__smakebuf_r+0x7c>)
 80082ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	6020      	str	r0, [r4, #0]
 80082d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	6163      	str	r3, [r4, #20]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	6120      	str	r0, [r4, #16]
 80082e2:	b15b      	cbz	r3, 80082fc <__smakebuf_r+0x74>
 80082e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 fb77 	bl	80089dc <_isatty_r>
 80082ee:	b128      	cbz	r0, 80082fc <__smakebuf_r+0x74>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	89a0      	ldrh	r0, [r4, #12]
 80082fe:	4305      	orrs	r5, r0
 8008300:	81a5      	strh	r5, [r4, #12]
 8008302:	e7cd      	b.n	80082a0 <__smakebuf_r+0x18>
 8008304:	080078f1 	.word	0x080078f1

08008308 <__malloc_lock>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__malloc_lock+0x8>)
 800830a:	f7ff bbe8 	b.w	8007ade <__retarget_lock_acquire_recursive>
 800830e:	bf00      	nop
 8008310:	200042cc 	.word	0x200042cc

08008314 <__malloc_unlock>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__malloc_unlock+0x8>)
 8008316:	f7ff bbe3 	b.w	8007ae0 <__retarget_lock_release_recursive>
 800831a:	bf00      	nop
 800831c:	200042cc 	.word	0x200042cc

08008320 <_free_r>:
 8008320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008322:	2900      	cmp	r1, #0
 8008324:	d044      	beq.n	80083b0 <_free_r+0x90>
 8008326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832a:	9001      	str	r0, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f1a1 0404 	sub.w	r4, r1, #4
 8008332:	bfb8      	it	lt
 8008334:	18e4      	addlt	r4, r4, r3
 8008336:	f7ff ffe7 	bl	8008308 <__malloc_lock>
 800833a:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <_free_r+0x94>)
 800833c:	9801      	ldr	r0, [sp, #4]
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	b933      	cbnz	r3, 8008350 <_free_r+0x30>
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	6014      	str	r4, [r2, #0]
 8008346:	b003      	add	sp, #12
 8008348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800834c:	f7ff bfe2 	b.w	8008314 <__malloc_unlock>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d908      	bls.n	8008366 <_free_r+0x46>
 8008354:	6825      	ldr	r5, [r4, #0]
 8008356:	1961      	adds	r1, r4, r5
 8008358:	428b      	cmp	r3, r1
 800835a:	bf01      	itttt	eq
 800835c:	6819      	ldreq	r1, [r3, #0]
 800835e:	685b      	ldreq	r3, [r3, #4]
 8008360:	1949      	addeq	r1, r1, r5
 8008362:	6021      	streq	r1, [r4, #0]
 8008364:	e7ed      	b.n	8008342 <_free_r+0x22>
 8008366:	461a      	mov	r2, r3
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b10b      	cbz	r3, 8008370 <_free_r+0x50>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d9fa      	bls.n	8008366 <_free_r+0x46>
 8008370:	6811      	ldr	r1, [r2, #0]
 8008372:	1855      	adds	r5, r2, r1
 8008374:	42a5      	cmp	r5, r4
 8008376:	d10b      	bne.n	8008390 <_free_r+0x70>
 8008378:	6824      	ldr	r4, [r4, #0]
 800837a:	4421      	add	r1, r4
 800837c:	1854      	adds	r4, r2, r1
 800837e:	42a3      	cmp	r3, r4
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	d1e0      	bne.n	8008346 <_free_r+0x26>
 8008384:	681c      	ldr	r4, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	6053      	str	r3, [r2, #4]
 800838a:	4421      	add	r1, r4
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	e7da      	b.n	8008346 <_free_r+0x26>
 8008390:	d902      	bls.n	8008398 <_free_r+0x78>
 8008392:	230c      	movs	r3, #12
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	e7d6      	b.n	8008346 <_free_r+0x26>
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	1961      	adds	r1, r4, r5
 800839c:	428b      	cmp	r3, r1
 800839e:	bf04      	itt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	bf04      	itt	eq
 80083a8:	1949      	addeq	r1, r1, r5
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	6054      	str	r4, [r2, #4]
 80083ae:	e7ca      	b.n	8008346 <_free_r+0x26>
 80083b0:	b003      	add	sp, #12
 80083b2:	bd30      	pop	{r4, r5, pc}
 80083b4:	200042d0 	.word	0x200042d0

080083b8 <__sfputc_r>:
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	b410      	push	{r4}
 80083c0:	6093      	str	r3, [r2, #8]
 80083c2:	da08      	bge.n	80083d6 <__sfputc_r+0x1e>
 80083c4:	6994      	ldr	r4, [r2, #24]
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	db01      	blt.n	80083ce <__sfputc_r+0x16>
 80083ca:	290a      	cmp	r1, #10
 80083cc:	d103      	bne.n	80083d6 <__sfputc_r+0x1e>
 80083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d2:	f7ff bd7d 	b.w	8007ed0 <__swbuf_r>
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	1c58      	adds	r0, r3, #1
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	7019      	strb	r1, [r3, #0]
 80083de:	4608      	mov	r0, r1
 80083e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <__sfputs_r>:
 80083e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e8:	4606      	mov	r6, r0
 80083ea:	460f      	mov	r7, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	18d5      	adds	r5, r2, r3
 80083f0:	42ac      	cmp	r4, r5
 80083f2:	d101      	bne.n	80083f8 <__sfputs_r+0x12>
 80083f4:	2000      	movs	r0, #0
 80083f6:	e007      	b.n	8008408 <__sfputs_r+0x22>
 80083f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fc:	463a      	mov	r2, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	f7ff ffda 	bl	80083b8 <__sfputc_r>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d1f3      	bne.n	80083f0 <__sfputs_r+0xa>
 8008408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800840c <_vfiprintf_r>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	460d      	mov	r5, r1
 8008412:	b09d      	sub	sp, #116	; 0x74
 8008414:	4614      	mov	r4, r2
 8008416:	4698      	mov	r8, r3
 8008418:	4606      	mov	r6, r0
 800841a:	b118      	cbz	r0, 8008424 <_vfiprintf_r+0x18>
 800841c:	6983      	ldr	r3, [r0, #24]
 800841e:	b90b      	cbnz	r3, 8008424 <_vfiprintf_r+0x18>
 8008420:	f7ff fa9a 	bl	8007958 <__sinit>
 8008424:	4b89      	ldr	r3, [pc, #548]	; (800864c <_vfiprintf_r+0x240>)
 8008426:	429d      	cmp	r5, r3
 8008428:	d11b      	bne.n	8008462 <_vfiprintf_r+0x56>
 800842a:	6875      	ldr	r5, [r6, #4]
 800842c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842e:	07d9      	lsls	r1, r3, #31
 8008430:	d405      	bmi.n	800843e <_vfiprintf_r+0x32>
 8008432:	89ab      	ldrh	r3, [r5, #12]
 8008434:	059a      	lsls	r2, r3, #22
 8008436:	d402      	bmi.n	800843e <_vfiprintf_r+0x32>
 8008438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800843a:	f7ff fb50 	bl	8007ade <__retarget_lock_acquire_recursive>
 800843e:	89ab      	ldrh	r3, [r5, #12]
 8008440:	071b      	lsls	r3, r3, #28
 8008442:	d501      	bpl.n	8008448 <_vfiprintf_r+0x3c>
 8008444:	692b      	ldr	r3, [r5, #16]
 8008446:	b9eb      	cbnz	r3, 8008484 <_vfiprintf_r+0x78>
 8008448:	4629      	mov	r1, r5
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff fda4 	bl	8007f98 <__swsetup_r>
 8008450:	b1c0      	cbz	r0, 8008484 <_vfiprintf_r+0x78>
 8008452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008454:	07dc      	lsls	r4, r3, #31
 8008456:	d50e      	bpl.n	8008476 <_vfiprintf_r+0x6a>
 8008458:	f04f 30ff 	mov.w	r0, #4294967295
 800845c:	b01d      	add	sp, #116	; 0x74
 800845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	4b7b      	ldr	r3, [pc, #492]	; (8008650 <_vfiprintf_r+0x244>)
 8008464:	429d      	cmp	r5, r3
 8008466:	d101      	bne.n	800846c <_vfiprintf_r+0x60>
 8008468:	68b5      	ldr	r5, [r6, #8]
 800846a:	e7df      	b.n	800842c <_vfiprintf_r+0x20>
 800846c:	4b79      	ldr	r3, [pc, #484]	; (8008654 <_vfiprintf_r+0x248>)
 800846e:	429d      	cmp	r5, r3
 8008470:	bf08      	it	eq
 8008472:	68f5      	ldreq	r5, [r6, #12]
 8008474:	e7da      	b.n	800842c <_vfiprintf_r+0x20>
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	0598      	lsls	r0, r3, #22
 800847a:	d4ed      	bmi.n	8008458 <_vfiprintf_r+0x4c>
 800847c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800847e:	f7ff fb2f 	bl	8007ae0 <__retarget_lock_release_recursive>
 8008482:	e7e9      	b.n	8008458 <_vfiprintf_r+0x4c>
 8008484:	2300      	movs	r3, #0
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	2320      	movs	r3, #32
 800848a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800848e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008492:	2330      	movs	r3, #48	; 0x30
 8008494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008658 <_vfiprintf_r+0x24c>
 8008498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800849c:	f04f 0901 	mov.w	r9, #1
 80084a0:	4623      	mov	r3, r4
 80084a2:	469a      	mov	sl, r3
 80084a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a8:	b10a      	cbz	r2, 80084ae <_vfiprintf_r+0xa2>
 80084aa:	2a25      	cmp	r2, #37	; 0x25
 80084ac:	d1f9      	bne.n	80084a2 <_vfiprintf_r+0x96>
 80084ae:	ebba 0b04 	subs.w	fp, sl, r4
 80084b2:	d00b      	beq.n	80084cc <_vfiprintf_r+0xc0>
 80084b4:	465b      	mov	r3, fp
 80084b6:	4622      	mov	r2, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7ff ff93 	bl	80083e6 <__sfputs_r>
 80084c0:	3001      	adds	r0, #1
 80084c2:	f000 80aa 	beq.w	800861a <_vfiprintf_r+0x20e>
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	445a      	add	r2, fp
 80084ca:	9209      	str	r2, [sp, #36]	; 0x24
 80084cc:	f89a 3000 	ldrb.w	r3, [sl]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80a2 	beq.w	800861a <_vfiprintf_r+0x20e>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f04f 32ff 	mov.w	r2, #4294967295
 80084dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e0:	f10a 0a01 	add.w	sl, sl, #1
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ec:	931a      	str	r3, [sp, #104]	; 0x68
 80084ee:	4654      	mov	r4, sl
 80084f0:	2205      	movs	r2, #5
 80084f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f6:	4858      	ldr	r0, [pc, #352]	; (8008658 <_vfiprintf_r+0x24c>)
 80084f8:	f7f7 fe82 	bl	8000200 <memchr>
 80084fc:	9a04      	ldr	r2, [sp, #16]
 80084fe:	b9d8      	cbnz	r0, 8008538 <_vfiprintf_r+0x12c>
 8008500:	06d1      	lsls	r1, r2, #27
 8008502:	bf44      	itt	mi
 8008504:	2320      	movmi	r3, #32
 8008506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800850a:	0713      	lsls	r3, r2, #28
 800850c:	bf44      	itt	mi
 800850e:	232b      	movmi	r3, #43	; 0x2b
 8008510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008514:	f89a 3000 	ldrb.w	r3, [sl]
 8008518:	2b2a      	cmp	r3, #42	; 0x2a
 800851a:	d015      	beq.n	8008548 <_vfiprintf_r+0x13c>
 800851c:	9a07      	ldr	r2, [sp, #28]
 800851e:	4654      	mov	r4, sl
 8008520:	2000      	movs	r0, #0
 8008522:	f04f 0c0a 	mov.w	ip, #10
 8008526:	4621      	mov	r1, r4
 8008528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800852c:	3b30      	subs	r3, #48	; 0x30
 800852e:	2b09      	cmp	r3, #9
 8008530:	d94e      	bls.n	80085d0 <_vfiprintf_r+0x1c4>
 8008532:	b1b0      	cbz	r0, 8008562 <_vfiprintf_r+0x156>
 8008534:	9207      	str	r2, [sp, #28]
 8008536:	e014      	b.n	8008562 <_vfiprintf_r+0x156>
 8008538:	eba0 0308 	sub.w	r3, r0, r8
 800853c:	fa09 f303 	lsl.w	r3, r9, r3
 8008540:	4313      	orrs	r3, r2
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	46a2      	mov	sl, r4
 8008546:	e7d2      	b.n	80084ee <_vfiprintf_r+0xe2>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	1d19      	adds	r1, r3, #4
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	9103      	str	r1, [sp, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfbb      	ittet	lt
 8008554:	425b      	neglt	r3, r3
 8008556:	f042 0202 	orrlt.w	r2, r2, #2
 800855a:	9307      	strge	r3, [sp, #28]
 800855c:	9307      	strlt	r3, [sp, #28]
 800855e:	bfb8      	it	lt
 8008560:	9204      	strlt	r2, [sp, #16]
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	2b2e      	cmp	r3, #46	; 0x2e
 8008566:	d10c      	bne.n	8008582 <_vfiprintf_r+0x176>
 8008568:	7863      	ldrb	r3, [r4, #1]
 800856a:	2b2a      	cmp	r3, #42	; 0x2a
 800856c:	d135      	bne.n	80085da <_vfiprintf_r+0x1ce>
 800856e:	9b03      	ldr	r3, [sp, #12]
 8008570:	1d1a      	adds	r2, r3, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	9203      	str	r2, [sp, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfb8      	it	lt
 800857a:	f04f 33ff 	movlt.w	r3, #4294967295
 800857e:	3402      	adds	r4, #2
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008668 <_vfiprintf_r+0x25c>
 8008586:	7821      	ldrb	r1, [r4, #0]
 8008588:	2203      	movs	r2, #3
 800858a:	4650      	mov	r0, sl
 800858c:	f7f7 fe38 	bl	8000200 <memchr>
 8008590:	b140      	cbz	r0, 80085a4 <_vfiprintf_r+0x198>
 8008592:	2340      	movs	r3, #64	; 0x40
 8008594:	eba0 000a 	sub.w	r0, r0, sl
 8008598:	fa03 f000 	lsl.w	r0, r3, r0
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	4303      	orrs	r3, r0
 80085a0:	3401      	adds	r4, #1
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a8:	482c      	ldr	r0, [pc, #176]	; (800865c <_vfiprintf_r+0x250>)
 80085aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ae:	2206      	movs	r2, #6
 80085b0:	f7f7 fe26 	bl	8000200 <memchr>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d03f      	beq.n	8008638 <_vfiprintf_r+0x22c>
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <_vfiprintf_r+0x254>)
 80085ba:	bb1b      	cbnz	r3, 8008604 <_vfiprintf_r+0x1f8>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	3307      	adds	r3, #7
 80085c0:	f023 0307 	bic.w	r3, r3, #7
 80085c4:	3308      	adds	r3, #8
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ca:	443b      	add	r3, r7
 80085cc:	9309      	str	r3, [sp, #36]	; 0x24
 80085ce:	e767      	b.n	80084a0 <_vfiprintf_r+0x94>
 80085d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80085d4:	460c      	mov	r4, r1
 80085d6:	2001      	movs	r0, #1
 80085d8:	e7a5      	b.n	8008526 <_vfiprintf_r+0x11a>
 80085da:	2300      	movs	r3, #0
 80085dc:	3401      	adds	r4, #1
 80085de:	9305      	str	r3, [sp, #20]
 80085e0:	4619      	mov	r1, r3
 80085e2:	f04f 0c0a 	mov.w	ip, #10
 80085e6:	4620      	mov	r0, r4
 80085e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ec:	3a30      	subs	r2, #48	; 0x30
 80085ee:	2a09      	cmp	r2, #9
 80085f0:	d903      	bls.n	80085fa <_vfiprintf_r+0x1ee>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0c5      	beq.n	8008582 <_vfiprintf_r+0x176>
 80085f6:	9105      	str	r1, [sp, #20]
 80085f8:	e7c3      	b.n	8008582 <_vfiprintf_r+0x176>
 80085fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80085fe:	4604      	mov	r4, r0
 8008600:	2301      	movs	r3, #1
 8008602:	e7f0      	b.n	80085e6 <_vfiprintf_r+0x1da>
 8008604:	ab03      	add	r3, sp, #12
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	462a      	mov	r2, r5
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <_vfiprintf_r+0x258>)
 800860c:	a904      	add	r1, sp, #16
 800860e:	4630      	mov	r0, r6
 8008610:	f3af 8000 	nop.w
 8008614:	4607      	mov	r7, r0
 8008616:	1c78      	adds	r0, r7, #1
 8008618:	d1d6      	bne.n	80085c8 <_vfiprintf_r+0x1bc>
 800861a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800861c:	07d9      	lsls	r1, r3, #31
 800861e:	d405      	bmi.n	800862c <_vfiprintf_r+0x220>
 8008620:	89ab      	ldrh	r3, [r5, #12]
 8008622:	059a      	lsls	r2, r3, #22
 8008624:	d402      	bmi.n	800862c <_vfiprintf_r+0x220>
 8008626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008628:	f7ff fa5a 	bl	8007ae0 <__retarget_lock_release_recursive>
 800862c:	89ab      	ldrh	r3, [r5, #12]
 800862e:	065b      	lsls	r3, r3, #25
 8008630:	f53f af12 	bmi.w	8008458 <_vfiprintf_r+0x4c>
 8008634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008636:	e711      	b.n	800845c <_vfiprintf_r+0x50>
 8008638:	ab03      	add	r3, sp, #12
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	462a      	mov	r2, r5
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <_vfiprintf_r+0x258>)
 8008640:	a904      	add	r1, sp, #16
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f880 	bl	8008748 <_printf_i>
 8008648:	e7e4      	b.n	8008614 <_vfiprintf_r+0x208>
 800864a:	bf00      	nop
 800864c:	08008b5c 	.word	0x08008b5c
 8008650:	08008b7c 	.word	0x08008b7c
 8008654:	08008b3c 	.word	0x08008b3c
 8008658:	08008ba0 	.word	0x08008ba0
 800865c:	08008baa 	.word	0x08008baa
 8008660:	00000000 	.word	0x00000000
 8008664:	080083e7 	.word	0x080083e7
 8008668:	08008ba6 	.word	0x08008ba6

0800866c <_printf_common>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	4616      	mov	r6, r2
 8008672:	4699      	mov	r9, r3
 8008674:	688a      	ldr	r2, [r1, #8]
 8008676:	690b      	ldr	r3, [r1, #16]
 8008678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800867c:	4293      	cmp	r3, r2
 800867e:	bfb8      	it	lt
 8008680:	4613      	movlt	r3, r2
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008688:	4607      	mov	r7, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b10a      	cbz	r2, 8008692 <_printf_common+0x26>
 800868e:	3301      	adds	r3, #1
 8008690:	6033      	str	r3, [r6, #0]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	0699      	lsls	r1, r3, #26
 8008696:	bf42      	ittt	mi
 8008698:	6833      	ldrmi	r3, [r6, #0]
 800869a:	3302      	addmi	r3, #2
 800869c:	6033      	strmi	r3, [r6, #0]
 800869e:	6825      	ldr	r5, [r4, #0]
 80086a0:	f015 0506 	ands.w	r5, r5, #6
 80086a4:	d106      	bne.n	80086b4 <_printf_common+0x48>
 80086a6:	f104 0a19 	add.w	sl, r4, #25
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	6832      	ldr	r2, [r6, #0]
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	dc26      	bgt.n	8008702 <_printf_common+0x96>
 80086b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b8:	1e13      	subs	r3, r2, #0
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	bf18      	it	ne
 80086be:	2301      	movne	r3, #1
 80086c0:	0692      	lsls	r2, r2, #26
 80086c2:	d42b      	bmi.n	800871c <_printf_common+0xb0>
 80086c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c8:	4649      	mov	r1, r9
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c0      	blx	r8
 80086ce:	3001      	adds	r0, #1
 80086d0:	d01e      	beq.n	8008710 <_printf_common+0xa4>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	68e5      	ldr	r5, [r4, #12]
 80086d6:	6832      	ldr	r2, [r6, #0]
 80086d8:	f003 0306 	and.w	r3, r3, #6
 80086dc:	2b04      	cmp	r3, #4
 80086de:	bf08      	it	eq
 80086e0:	1aad      	subeq	r5, r5, r2
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	6922      	ldr	r2, [r4, #16]
 80086e6:	bf0c      	ite	eq
 80086e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ec:	2500      	movne	r5, #0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bfc4      	itt	gt
 80086f2:	1a9b      	subgt	r3, r3, r2
 80086f4:	18ed      	addgt	r5, r5, r3
 80086f6:	2600      	movs	r6, #0
 80086f8:	341a      	adds	r4, #26
 80086fa:	42b5      	cmp	r5, r6
 80086fc:	d11a      	bne.n	8008734 <_printf_common+0xc8>
 80086fe:	2000      	movs	r0, #0
 8008700:	e008      	b.n	8008714 <_printf_common+0xa8>
 8008702:	2301      	movs	r3, #1
 8008704:	4652      	mov	r2, sl
 8008706:	4649      	mov	r1, r9
 8008708:	4638      	mov	r0, r7
 800870a:	47c0      	blx	r8
 800870c:	3001      	adds	r0, #1
 800870e:	d103      	bne.n	8008718 <_printf_common+0xac>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	3501      	adds	r5, #1
 800871a:	e7c6      	b.n	80086aa <_printf_common+0x3e>
 800871c:	18e1      	adds	r1, r4, r3
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	2030      	movs	r0, #48	; 0x30
 8008722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008726:	4422      	add	r2, r4
 8008728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800872c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008730:	3302      	adds	r3, #2
 8008732:	e7c7      	b.n	80086c4 <_printf_common+0x58>
 8008734:	2301      	movs	r3, #1
 8008736:	4622      	mov	r2, r4
 8008738:	4649      	mov	r1, r9
 800873a:	4638      	mov	r0, r7
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d0e6      	beq.n	8008710 <_printf_common+0xa4>
 8008742:	3601      	adds	r6, #1
 8008744:	e7d9      	b.n	80086fa <_printf_common+0x8e>
	...

08008748 <_printf_i>:
 8008748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	7e0f      	ldrb	r7, [r1, #24]
 800874e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008750:	2f78      	cmp	r7, #120	; 0x78
 8008752:	4691      	mov	r9, r2
 8008754:	4680      	mov	r8, r0
 8008756:	460c      	mov	r4, r1
 8008758:	469a      	mov	sl, r3
 800875a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800875e:	d807      	bhi.n	8008770 <_printf_i+0x28>
 8008760:	2f62      	cmp	r7, #98	; 0x62
 8008762:	d80a      	bhi.n	800877a <_printf_i+0x32>
 8008764:	2f00      	cmp	r7, #0
 8008766:	f000 80d8 	beq.w	800891a <_printf_i+0x1d2>
 800876a:	2f58      	cmp	r7, #88	; 0x58
 800876c:	f000 80a3 	beq.w	80088b6 <_printf_i+0x16e>
 8008770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008778:	e03a      	b.n	80087f0 <_printf_i+0xa8>
 800877a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877e:	2b15      	cmp	r3, #21
 8008780:	d8f6      	bhi.n	8008770 <_printf_i+0x28>
 8008782:	a101      	add	r1, pc, #4	; (adr r1, 8008788 <_printf_i+0x40>)
 8008784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087f5 	.word	0x080087f5
 8008790:	08008771 	.word	0x08008771
 8008794:	08008771 	.word	0x08008771
 8008798:	08008771 	.word	0x08008771
 800879c:	08008771 	.word	0x08008771
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	08008771 	.word	0x08008771
 80087a8:	08008771 	.word	0x08008771
 80087ac:	08008771 	.word	0x08008771
 80087b0:	08008771 	.word	0x08008771
 80087b4:	08008901 	.word	0x08008901
 80087b8:	08008825 	.word	0x08008825
 80087bc:	080088e3 	.word	0x080088e3
 80087c0:	08008771 	.word	0x08008771
 80087c4:	08008771 	.word	0x08008771
 80087c8:	08008923 	.word	0x08008923
 80087cc:	08008771 	.word	0x08008771
 80087d0:	08008825 	.word	0x08008825
 80087d4:	08008771 	.word	0x08008771
 80087d8:	08008771 	.word	0x08008771
 80087dc:	080088eb 	.word	0x080088eb
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	1d1a      	adds	r2, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f0:	2301      	movs	r3, #1
 80087f2:	e0a3      	b.n	800893c <_printf_i+0x1f4>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	6829      	ldr	r1, [r5, #0]
 80087f8:	0606      	lsls	r6, r0, #24
 80087fa:	f101 0304 	add.w	r3, r1, #4
 80087fe:	d50a      	bpl.n	8008816 <_printf_i+0xce>
 8008800:	680e      	ldr	r6, [r1, #0]
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	2e00      	cmp	r6, #0
 8008806:	da03      	bge.n	8008810 <_printf_i+0xc8>
 8008808:	232d      	movs	r3, #45	; 0x2d
 800880a:	4276      	negs	r6, r6
 800880c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008810:	485e      	ldr	r0, [pc, #376]	; (800898c <_printf_i+0x244>)
 8008812:	230a      	movs	r3, #10
 8008814:	e019      	b.n	800884a <_printf_i+0x102>
 8008816:	680e      	ldr	r6, [r1, #0]
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800881e:	bf18      	it	ne
 8008820:	b236      	sxthne	r6, r6
 8008822:	e7ef      	b.n	8008804 <_printf_i+0xbc>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	6820      	ldr	r0, [r4, #0]
 8008828:	1d19      	adds	r1, r3, #4
 800882a:	6029      	str	r1, [r5, #0]
 800882c:	0601      	lsls	r1, r0, #24
 800882e:	d501      	bpl.n	8008834 <_printf_i+0xec>
 8008830:	681e      	ldr	r6, [r3, #0]
 8008832:	e002      	b.n	800883a <_printf_i+0xf2>
 8008834:	0646      	lsls	r6, r0, #25
 8008836:	d5fb      	bpl.n	8008830 <_printf_i+0xe8>
 8008838:	881e      	ldrh	r6, [r3, #0]
 800883a:	4854      	ldr	r0, [pc, #336]	; (800898c <_printf_i+0x244>)
 800883c:	2f6f      	cmp	r7, #111	; 0x6f
 800883e:	bf0c      	ite	eq
 8008840:	2308      	moveq	r3, #8
 8008842:	230a      	movne	r3, #10
 8008844:	2100      	movs	r1, #0
 8008846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884a:	6865      	ldr	r5, [r4, #4]
 800884c:	60a5      	str	r5, [r4, #8]
 800884e:	2d00      	cmp	r5, #0
 8008850:	bfa2      	ittt	ge
 8008852:	6821      	ldrge	r1, [r4, #0]
 8008854:	f021 0104 	bicge.w	r1, r1, #4
 8008858:	6021      	strge	r1, [r4, #0]
 800885a:	b90e      	cbnz	r6, 8008860 <_printf_i+0x118>
 800885c:	2d00      	cmp	r5, #0
 800885e:	d04d      	beq.n	80088fc <_printf_i+0x1b4>
 8008860:	4615      	mov	r5, r2
 8008862:	fbb6 f1f3 	udiv	r1, r6, r3
 8008866:	fb03 6711 	mls	r7, r3, r1, r6
 800886a:	5dc7      	ldrb	r7, [r0, r7]
 800886c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008870:	4637      	mov	r7, r6
 8008872:	42bb      	cmp	r3, r7
 8008874:	460e      	mov	r6, r1
 8008876:	d9f4      	bls.n	8008862 <_printf_i+0x11a>
 8008878:	2b08      	cmp	r3, #8
 800887a:	d10b      	bne.n	8008894 <_printf_i+0x14c>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	07de      	lsls	r6, r3, #31
 8008880:	d508      	bpl.n	8008894 <_printf_i+0x14c>
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	6861      	ldr	r1, [r4, #4]
 8008886:	4299      	cmp	r1, r3
 8008888:	bfde      	ittt	le
 800888a:	2330      	movle	r3, #48	; 0x30
 800888c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008890:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008894:	1b52      	subs	r2, r2, r5
 8008896:	6122      	str	r2, [r4, #16]
 8008898:	f8cd a000 	str.w	sl, [sp]
 800889c:	464b      	mov	r3, r9
 800889e:	aa03      	add	r2, sp, #12
 80088a0:	4621      	mov	r1, r4
 80088a2:	4640      	mov	r0, r8
 80088a4:	f7ff fee2 	bl	800866c <_printf_common>
 80088a8:	3001      	adds	r0, #1
 80088aa:	d14c      	bne.n	8008946 <_printf_i+0x1fe>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	b004      	add	sp, #16
 80088b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b6:	4835      	ldr	r0, [pc, #212]	; (800898c <_printf_i+0x244>)
 80088b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088bc:	6829      	ldr	r1, [r5, #0]
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c4:	6029      	str	r1, [r5, #0]
 80088c6:	061d      	lsls	r5, r3, #24
 80088c8:	d514      	bpl.n	80088f4 <_printf_i+0x1ac>
 80088ca:	07df      	lsls	r7, r3, #31
 80088cc:	bf44      	itt	mi
 80088ce:	f043 0320 	orrmi.w	r3, r3, #32
 80088d2:	6023      	strmi	r3, [r4, #0]
 80088d4:	b91e      	cbnz	r6, 80088de <_printf_i+0x196>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f023 0320 	bic.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2310      	movs	r3, #16
 80088e0:	e7b0      	b.n	8008844 <_printf_i+0xfc>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f043 0320 	orr.w	r3, r3, #32
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	2378      	movs	r3, #120	; 0x78
 80088ec:	4828      	ldr	r0, [pc, #160]	; (8008990 <_printf_i+0x248>)
 80088ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088f2:	e7e3      	b.n	80088bc <_printf_i+0x174>
 80088f4:	0659      	lsls	r1, r3, #25
 80088f6:	bf48      	it	mi
 80088f8:	b2b6      	uxthmi	r6, r6
 80088fa:	e7e6      	b.n	80088ca <_printf_i+0x182>
 80088fc:	4615      	mov	r5, r2
 80088fe:	e7bb      	b.n	8008878 <_printf_i+0x130>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	6826      	ldr	r6, [r4, #0]
 8008904:	6961      	ldr	r1, [r4, #20]
 8008906:	1d18      	adds	r0, r3, #4
 8008908:	6028      	str	r0, [r5, #0]
 800890a:	0635      	lsls	r5, r6, #24
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	d501      	bpl.n	8008914 <_printf_i+0x1cc>
 8008910:	6019      	str	r1, [r3, #0]
 8008912:	e002      	b.n	800891a <_printf_i+0x1d2>
 8008914:	0670      	lsls	r0, r6, #25
 8008916:	d5fb      	bpl.n	8008910 <_printf_i+0x1c8>
 8008918:	8019      	strh	r1, [r3, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	4615      	mov	r5, r2
 8008920:	e7ba      	b.n	8008898 <_printf_i+0x150>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	1d1a      	adds	r2, r3, #4
 8008926:	602a      	str	r2, [r5, #0]
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	2100      	movs	r1, #0
 800892e:	4628      	mov	r0, r5
 8008930:	f7f7 fc66 	bl	8000200 <memchr>
 8008934:	b108      	cbz	r0, 800893a <_printf_i+0x1f2>
 8008936:	1b40      	subs	r0, r0, r5
 8008938:	6060      	str	r0, [r4, #4]
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	2300      	movs	r3, #0
 8008940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008944:	e7a8      	b.n	8008898 <_printf_i+0x150>
 8008946:	6923      	ldr	r3, [r4, #16]
 8008948:	462a      	mov	r2, r5
 800894a:	4649      	mov	r1, r9
 800894c:	4640      	mov	r0, r8
 800894e:	47d0      	blx	sl
 8008950:	3001      	adds	r0, #1
 8008952:	d0ab      	beq.n	80088ac <_printf_i+0x164>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	079b      	lsls	r3, r3, #30
 8008958:	d413      	bmi.n	8008982 <_printf_i+0x23a>
 800895a:	68e0      	ldr	r0, [r4, #12]
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	4298      	cmp	r0, r3
 8008960:	bfb8      	it	lt
 8008962:	4618      	movlt	r0, r3
 8008964:	e7a4      	b.n	80088b0 <_printf_i+0x168>
 8008966:	2301      	movs	r3, #1
 8008968:	4632      	mov	r2, r6
 800896a:	4649      	mov	r1, r9
 800896c:	4640      	mov	r0, r8
 800896e:	47d0      	blx	sl
 8008970:	3001      	adds	r0, #1
 8008972:	d09b      	beq.n	80088ac <_printf_i+0x164>
 8008974:	3501      	adds	r5, #1
 8008976:	68e3      	ldr	r3, [r4, #12]
 8008978:	9903      	ldr	r1, [sp, #12]
 800897a:	1a5b      	subs	r3, r3, r1
 800897c:	42ab      	cmp	r3, r5
 800897e:	dcf2      	bgt.n	8008966 <_printf_i+0x21e>
 8008980:	e7eb      	b.n	800895a <_printf_i+0x212>
 8008982:	2500      	movs	r5, #0
 8008984:	f104 0619 	add.w	r6, r4, #25
 8008988:	e7f5      	b.n	8008976 <_printf_i+0x22e>
 800898a:	bf00      	nop
 800898c:	08008bb1 	.word	0x08008bb1
 8008990:	08008bc2 	.word	0x08008bc2

08008994 <_read_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	; (80089b4 <_read_r+0x20>)
 8008998:	4604      	mov	r4, r0
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f7f8 fc32 	bl	800120c <_read>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_read_r+0x1e>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_read_r+0x1e>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200042d8 	.word	0x200042d8

080089b8 <_fstat_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d07      	ldr	r5, [pc, #28]	; (80089d8 <_fstat_r+0x20>)
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	4611      	mov	r1, r2
 80089c4:	602b      	str	r3, [r5, #0]
 80089c6:	f7f8 fc66 	bl	8001296 <_fstat>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	d102      	bne.n	80089d4 <_fstat_r+0x1c>
 80089ce:	682b      	ldr	r3, [r5, #0]
 80089d0:	b103      	cbz	r3, 80089d4 <_fstat_r+0x1c>
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	bd38      	pop	{r3, r4, r5, pc}
 80089d6:	bf00      	nop
 80089d8:	200042d8 	.word	0x200042d8

080089dc <_isatty_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4d06      	ldr	r5, [pc, #24]	; (80089f8 <_isatty_r+0x1c>)
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	f7f8 fc65 	bl	80012b6 <_isatty>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_isatty_r+0x1a>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_isatty_r+0x1a>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200042d8 	.word	0x200042d8

080089fc <_init>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr

08008a08 <_fini>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	bf00      	nop
 8008a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0e:	bc08      	pop	{r3}
 8008a10:	469e      	mov	lr, r3
 8008a12:	4770      	bx	lr
