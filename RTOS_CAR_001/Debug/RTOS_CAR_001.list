
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08009f3c  08009f3c  00019f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f8  0800a2f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a300  0800a300  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000043fc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004470  20004470  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001faea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004868  00000000  00000000  0003fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001960  00000000  00000000  000443f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  00045d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad5  00000000  00000000  000474d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002002b  00000000  00000000  0006ffad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed61b  00000000  00000000  0008ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d5f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007060  00000000  00000000  0017d644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f24 	.word	0x08009f24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009f24 	.word	0x08009f24

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <__io_putchar+0x20>)
 80005b6:	f005 f9e6 	bl	8005986 <HAL_UART_Transmit>
    return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000680 	.word	0x20000680

080005c8 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000cc 	.word	0x200000cc
 80005f8:	20000180 	.word	0x20000180

080005fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  Motor_Init();
 8000602:	f001 f867 	bl	80016d4 <Motor_Init>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	4829      	ldr	r0, [pc, #164]	; (80006b0 <MX_FREERTOS_Init+0xb4>)
 800060a:	f003 ffed 	bl	80045e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4828      	ldr	r0, [pc, #160]	; (80006b4 <MX_FREERTOS_Init+0xb8>)
 8000612:	f003 ffe9 	bl	80045e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <MX_FREERTOS_Init+0xbc>)
 800061a:	f003 ffe5 	bl	80045e8 <HAL_TIM_IC_Start_IT>

	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4826      	ldr	r0, [pc, #152]	; (80006bc <MX_FREERTOS_Init+0xc0>)
 8000622:	f003 ffe1 	bl	80045e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	4824      	ldr	r0, [pc, #144]	; (80006bc <MX_FREERTOS_Init+0xc0>)
 800062a:	f003 ffdd 	bl	80045e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_3);
 800062e:	2108      	movs	r1, #8
 8000630:	4822      	ldr	r0, [pc, #136]	; (80006bc <MX_FREERTOS_Init+0xc0>)
 8000632:	f003 ffd9 	bl	80045e8 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8000636:	210c      	movs	r1, #12
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <MX_FREERTOS_Init+0xc0>)
 800063a:	f003 ffd5 	bl	80045e8 <HAL_TIM_IC_Start_IT>

	  HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 800063e:	2201      	movs	r2, #1
 8000640:	491f      	ldr	r1, [pc, #124]	; (80006c0 <MX_FREERTOS_Init+0xc4>)
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <MX_FREERTOS_Init+0xc8>)
 8000644:	f005 fa31 	bl	8005aaa <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000648:	2300      	movs	r3, #0
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 8000650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000654:	2101      	movs	r1, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f006 fa3f 	bl	8006ada <osSemaphoreCreate>
 800065c:	4603      	mov	r3, r0
 800065e:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <MX_FREERTOS_Init+0xcc>)
 8000660:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 8, uint8_t);
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_FREERTOS_Init+0xd0>)
 8000664:	f107 0420 	add.w	r4, r7, #32
 8000668:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f006 fa62 	bl	8006b3e <osMessageCreate>
 800067a:	4603      	mov	r3, r0
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_FREERTOS_Init+0xd4>)
 800067e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_FREERTOS_Init+0xd8>)
 8000682:	1d3c      	adds	r4, r7, #4
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 f9bf 	bl	8006a1a <osThreadCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <MX_FREERTOS_Init+0xdc>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ThreadInit ();
 80006a2:	f000 f99b 	bl	80009dc <ThreadInit>
  /* USER CODE END RTOS_THREADS */

}
 80006a6:	bf00      	nop
 80006a8:	3738      	adds	r7, #56	; 0x38
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000490 	.word	0x20000490
 80006b4:	20000520 	.word	0x20000520
 80006b8:	20000568 	.word	0x20000568
 80006bc:	200005b0 	.word	0x200005b0
 80006c0:	200000bc 	.word	0x200000bc
 80006c4:	200006c4 	.word	0x200006c4
 80006c8:	200000c8 	.word	0x200000c8
 80006cc:	08009fa8 	.word	0x08009fa8
 80006d0:	200000c4 	.word	0x200000c4
 80006d4:	08009fb8 	.word	0x08009fb8
 80006d8:	200000c0 	.word	0x200000c0

080006dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0'; // this value is what you receive
 80006ec:	2300      	movs	r3, #0
 80006ee:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <StartDefaultTask+0x5c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f107 0210 	add.w	r2, r7, #16
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fe5c 	bl	80073b8 <xQueueReceiveFromISR>
 8000700:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d112      	bne.n	800072e <StartDefaultTask+0x52>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <StartDefaultTask+0x60>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f107 0210 	add.w	r2, r7, #16
 8000710:	f107 010f 	add.w	r1, r7, #15
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fe4f 	bl	80073b8 <xQueueReceiveFromISR>
 800071a:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <StartDefaultTask+0x52>
				// do something . . .
				Move(cByteRxed - '0');
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	3b30      	subs	r3, #48	; 0x30
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd77 	bl	800121c <Move>
			}
		}
		osDelay(50);
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f006 f9bf 	bl	8006ab2 <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000734:	e7dc      	b.n	80006f0 <StartDefaultTask+0x14>
 8000736:	bf00      	nop
 8000738:	200000c8 	.word	0x200000c8
 800073c:	200000c4 	.word	0x200000c4

08000740 <UartMovingCar>:
 * Distance[2], Difference[2] = Right
 * */

// Task ---------------------------------------------------------------------------------------
void UartMovingCar (void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(50);
 8000748:	2032      	movs	r0, #50	; 0x32
 800074a:	f006 f9b2 	bl	8006ab2 <osDelay>
 800074e:	e7fb      	b.n	8000748 <UartMovingCar+0x8>

08000750 <CarLeftSide>:
	}
}

void CarLeftSide (void const * argument){
 8000750:	b580      	push	{r7, lr}
 8000752:	b09c      	sub	sp, #112	; 0x70
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	for (;;) {
//		uint32_t Left_Distance = Distance[0];
//		if(Left_Distance < 250) {
//			Move(STOP);
//		}
		sprintf(rx1_buf, "L%d", Dis[0]);
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <CarLeftSide+0x30>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4908      	ldr	r1, [pc, #32]	; (8000784 <CarLeftSide+0x34>)
 8000762:	4618      	mov	r0, r3
 8000764:	f008 fd90 	bl	8009288 <siprintf>
		HAL_UART_Transmit(&huart6, &rx1_buf, sizeof(rx1_buf), 100);
 8000768:	f107 010c 	add.w	r1, r7, #12
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2264      	movs	r2, #100	; 0x64
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <CarLeftSide+0x38>)
 8000772:	f005 f908 	bl	8005986 <HAL_UART_Transmit>
		osDelay(500);
 8000776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077a:	f006 f99a 	bl	8006ab2 <osDelay>
		sprintf(rx1_buf, "L%d", Dis[0]);
 800077e:	e7eb      	b.n	8000758 <CarLeftSide+0x8>
 8000780:	20000098 	.word	0x20000098
 8000784:	08009fd4 	.word	0x08009fd4
 8000788:	200006c4 	.word	0x200006c4

0800078c <CarFrontSide>:
	}
}

void CarFrontSide (void const * argument){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t rx2 = '2';
 8000794:	2332      	movs	r3, #50	; 0x32
 8000796:	73fb      	strb	r3, [r7, #15]
	for (;;) {
//		uint32_t Front_Distance = Distance[1];
//		if(Front_Distance < 250) {
//			Move(STOP);
//		}
		HAL_UART_Transmit(&huart6, &rx2, 1, 100);
 8000798:	f107 010f 	add.w	r1, r7, #15
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	2201      	movs	r2, #1
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <CarFrontSide+0x24>)
 80007a2:	f005 f8f0 	bl	8005986 <HAL_UART_Transmit>
		osDelay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f006 f982 	bl	8006ab2 <osDelay>
		HAL_UART_Transmit(&huart6, &rx2, 1, 100);
 80007ae:	e7f3      	b.n	8000798 <CarFrontSide+0xc>
 80007b0:	200006c4 	.word	0x200006c4

080007b4 <CarRightSide>:
	}
}
void CarRightSide (void const * argument){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	uint8_t rx3 = '3';
 80007bc:	2333      	movs	r3, #51	; 0x33
 80007be:	73fb      	strb	r3, [r7, #15]
	for (;;) {
//		uint32_t Right_Distance = Distance[2];
//		if(Right_Distance < 250) {
//			Move(STOP);
//		}
		HAL_UART_Transmit(&huart6, &rx3, 1, 100);
 80007c0:	f107 010f 	add.w	r1, r7, #15
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <CarRightSide+0x24>)
 80007ca:	f005 f8dc 	bl	8005986 <HAL_UART_Transmit>
		osDelay(500);
 80007ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d2:	f006 f96e 	bl	8006ab2 <osDelay>
		HAL_UART_Transmit(&huart6, &rx3, 1, 100);
 80007d6:	e7f3      	b.n	80007c0 <CarRightSide+0xc>
 80007d8:	200006c4 	.word	0x200006c4

080007dc <CheckingUartReceive>:


// ISR Checking-------------------------------------------------------------------------------

void CheckingUartReceive (void const * argument)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4904      	ldr	r1, [pc, #16]	; (80007f8 <CheckingUartReceive+0x1c>)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <CheckingUartReceive+0x20>)
 80007ea:	f005 f95e 	bl	8005aaa <HAL_UART_Receive_IT>
    	osDelay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f006 f95f 	bl	8006ab2 <osDelay>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80007f4:	e7f6      	b.n	80007e4 <CheckingUartReceive+0x8>
 80007f6:	bf00      	nop
 80007f8:	200000bc 	.word	0x200000bc
 80007fc:	200006c4 	.word	0x200006c4

08000800 <CheckingLeft>:
    }
}
void CheckingLeft (void const * argument) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 8000808:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080c:	4903      	ldr	r1, [pc, #12]	; (800081c <CheckingLeft+0x1c>)
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <CheckingLeft+0x20>)
 8000810:	f000 fafc 	bl	8000e0c <HCSR04_Read>

    	osDelay(60);
 8000814:	203c      	movs	r0, #60	; 0x3c
 8000816:	f006 f94c 	bl	8006ab2 <osDelay>
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 800081a:	e7f5      	b.n	8000808 <CheckingLeft+0x8>
 800081c:	40021400 	.word	0x40021400
 8000820:	20000490 	.word	0x20000490

08000824 <CheckingFront>:
    }
}
void CheckingFront (void const * argument) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
   	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 800082c:	2220      	movs	r2, #32
 800082e:	4904      	ldr	r1, [pc, #16]	; (8000840 <CheckingFront+0x1c>)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <CheckingFront+0x20>)
 8000832:	f000 faeb 	bl	8000e0c <HCSR04_Read>
    	osDelay(60);
 8000836:	203c      	movs	r0, #60	; 0x3c
 8000838:	f006 f93b 	bl	8006ab2 <osDelay>
   	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 800083c:	e7f6      	b.n	800082c <CheckingFront+0x8>
 800083e:	bf00      	nop
 8000840:	40020000 	.word	0x40020000
 8000844:	20000520 	.word	0x20000520

08000848 <CheckingRight>:
    }
}
void CheckingRight (void const * argument) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000854:	4903      	ldr	r1, [pc, #12]	; (8000864 <CheckingRight+0x1c>)
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <CheckingRight+0x20>)
 8000858:	f000 fad8 	bl	8000e0c <HCSR04_Read>
    	osDelay(60);
 800085c:	203c      	movs	r0, #60	; 0x3c
 800085e:	f006 f928 	bl	8006ab2 <osDelay>
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000862:	e7f5      	b.n	8000850 <CheckingRight+0x8>
 8000864:	40020c00 	.word	0x40020c00
 8000868:	20000568 	.word	0x20000568

0800086c <HAL_UART_RxCpltCallback>:
    }
}

// CallBack Session
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_UART_RxCpltCallback+0x70>)
 8000876:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_UART_RxCpltCallback+0x74>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d124      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_UART_RxCpltCallback+0x78>)
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	f107 020c 	add.w	r2, r7, #12
 8000892:	2300      	movs	r3, #0
 8000894:	4914      	ldr	r1, [pc, #80]	; (80008e8 <HAL_UART_RxCpltCallback+0x7c>)
 8000896:	f006 fc67 	bl	8007168 <xQueueGenericSendFromISR>
 800089a:	6138      	str	r0, [r7, #16]
		if(ret) {
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_UART_RxCpltCallback+0x80>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 fcf6 	bl	800729e <xQueueGiveFromISR>
 80008b2:	e00a      	b.n	80008ca <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 80008b4:	6978      	ldr	r0, [r7, #20]
 80008b6:	f7ff fc9b 	bl	80001f0 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	6979      	ldr	r1, [r7, #20]
 80008c4:	480a      	ldr	r0, [pc, #40]	; (80008f0 <HAL_UART_RxCpltCallback+0x84>)
 80008c6:	f005 f85e 	bl	8005986 <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80008ca:	2201      	movs	r2, #1
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <HAL_UART_RxCpltCallback+0x7c>)
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <HAL_UART_RxCpltCallback+0x84>)
 80008d0:	f005 f8eb 	bl	8005aaa <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	08009fd8 	.word	0x08009fd8
 80008e0:	40011400 	.word	0x40011400
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	200000bc 	.word	0x200000bc
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	200006c4 	.word	0x200006c4

080008f4 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	//Checking the left Distance
	if (htim->Instance == TIM1) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d107      	bne.n	8000916 <HAL_TIM_IC_CaptureCallback+0x22>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7f1b      	ldrb	r3, [r3, #28]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <HAL_TIM_IC_CaptureCallback+0x22>
		{
			HC_SRO4_Dis(htim, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 fa9f 	bl	8000e54 <HC_SRO4_Dis>
		}
	}

	//Checking the Front Distance
	if (htim->Instance == TIM3) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d107      	bne.n	8000930 <HAL_TIM_IC_CaptureCallback+0x3c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d103      	bne.n	8000930 <HAL_TIM_IC_CaptureCallback+0x3c>
		{
			HC_SRO4_Dis(htim, 1);
 8000928:	2101      	movs	r1, #1
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 fa92 	bl	8000e54 <HC_SRO4_Dis>
		}
	}

	//Checking the Right Distance
	if (htim->Instance == TIM4) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d107      	bne.n	800094a <HAL_TIM_IC_CaptureCallback+0x56>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7f1b      	ldrb	r3, [r3, #28]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d103      	bne.n	800094a <HAL_TIM_IC_CaptureCallback+0x56>
		{
			HC_SRO4_Dis(htim, 2);
 8000942:	2102      	movs	r1, #2
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 fa85 	bl	8000e54 <HC_SRO4_Dis>
		}
	}

	//using the general purpose timer because i will use checking the signal only
	if (htim->Instance == TIM8) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d133      	bne.n	80009bc <HAL_TIM_IC_CaptureCallback+0xc8>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7f1b      	ldrb	r3, [r3, #28]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d108      	bne.n	800096e <HAL_TIM_IC_CaptureCallback+0x7a>
			if (odo_flag[0] == 1) {
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d104      	bne.n	800096e <HAL_TIM_IC_CaptureCallback+0x7a>
				odo_count[0]++;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800096c:	6013      	str	r3, [r2, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7f1b      	ldrb	r3, [r3, #28]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d108      	bne.n	8000988 <HAL_TIM_IC_CaptureCallback+0x94>
			if (odo_flag[1] == 1) {
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d104      	bne.n	8000988 <HAL_TIM_IC_CaptureCallback+0x94>
				odo_count[1]++;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000986:	6053      	str	r3, [r2, #4]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7f1b      	ldrb	r3, [r3, #28]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d108      	bne.n	80009a2 <HAL_TIM_IC_CaptureCallback+0xae>
			if (odo_flag[2] == 1) {
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000992:	789b      	ldrb	r3, [r3, #2]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d104      	bne.n	80009a2 <HAL_TIM_IC_CaptureCallback+0xae>
				odo_count[2]++;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80009a0:	6093      	str	r3, [r2, #8]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7f1b      	ldrb	r3, [r3, #28]
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d108      	bne.n	80009bc <HAL_TIM_IC_CaptureCallback+0xc8>
			if (odo_flag[3] == 1) {
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009ac:	78db      	ldrb	r3, [r3, #3]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d104      	bne.n	80009bc <HAL_TIM_IC_CaptureCallback+0xc8>
				odo_count[3]++;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80009ba:	60d3      	str	r3, [r2, #12]
			}
		}


	}
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010000 	.word	0x40010000
 80009c8:	40000400 	.word	0x40000400
 80009cc:	40000800 	.word	0x40000800
 80009d0:	40010400 	.word	0x40010400
 80009d4:	20000410 	.word	0x20000410
 80009d8:	20000414 	.word	0x20000414

080009dc <ThreadInit>:

void ThreadInit () {
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b0c0      	sub	sp, #256	; 0x100
 80009e0:	af00      	add	r7, sp, #0
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009e2:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <ThreadInit+0x1d4>)
 80009e4:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80009e8:	461d      	mov	r5, r3
 80009ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f006 f80c 	bl	8006a1a <osThreadCreate>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a6b      	ldr	r2, [pc, #428]	; (8000bb4 <ThreadInit+0x1d8>)
 8000a06:	6013      	str	r3, [r2, #0]


	  osThreadDef(UartCheck, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <ThreadInit+0x1dc>)
 8000a0a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000a0e:	461d      	mov	r5, r3
 8000a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task1Handle = osThreadCreate(osThread(UartCheck), NULL);
 8000a1c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fff9 	bl	8006a1a <osThreadCreate>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a64      	ldr	r2, [pc, #400]	; (8000bbc <ThreadInit+0x1e0>)
 8000a2c:	6013      	str	r3, [r2, #0]
	  if(!Task1Handle)
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <ThreadInit+0x1e0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <ThreadInit+0x60>
		  printf("ERR : Console Task Creation Failure !\r\n");
 8000a36:	4862      	ldr	r0, [pc, #392]	; (8000bc0 <ThreadInit+0x1e4>)
 8000a38:	f008 fba4 	bl	8009184 <puts>

	  osThreadDef(UartTask, UartMovingCar, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a3c:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <ThreadInit+0x1e8>)
 8000a3e:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task2Handle = osThreadCreate(osThread(UartTask), NULL);
 8000a50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 ffdf 	bl	8006a1a <osThreadCreate>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <ThreadInit+0x1ec>)
 8000a60:	6013      	str	r3, [r2, #0]

	  if(!Task2Handle)
 8000a62:	4b59      	ldr	r3, [pc, #356]	; (8000bc8 <ThreadInit+0x1ec>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <ThreadInit+0x94>
	     printf("ERR : CLI Task Creation Failure !\r\n");
 8000a6a:	4858      	ldr	r0, [pc, #352]	; (8000bcc <ThreadInit+0x1f0>)
 8000a6c:	f008 fb8a 	bl	8009184 <puts>

	  // HC-SR04 LEFT -------------------------------------------------------------------------------------------------------
	  osThreadDef(LeftCheck, CheckingLeft, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a70:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <ThreadInit+0x1f4>)
 8000a72:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a76:	461d      	mov	r5, r3
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Checking = osThreadCreate(osThread(LeftCheck), NULL);
 8000a84:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f005 ffc5 	bl	8006a1a <osThreadCreate>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a50      	ldr	r2, [pc, #320]	; (8000bd4 <ThreadInit+0x1f8>)
 8000a94:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Checking)
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <ThreadInit+0x1f8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <ThreadInit+0xc8>
		  printf("ERR : HS_SR04_left_Checking Creation Failure !\r\n");
 8000a9e:	484e      	ldr	r0, [pc, #312]	; (8000bd8 <ThreadInit+0x1fc>)
 8000aa0:	f008 fb70 	bl	8009184 <puts>

	  osThreadDef(LeftTask, CarLeftSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <ThreadInit+0x200>)
 8000aa6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000aaa:	461d      	mov	r5, r3
 8000aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Handle = osThreadCreate(osThread(LeftTask), NULL);
 8000ab8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 ffab 	bl	8006a1a <osThreadCreate>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <ThreadInit+0x204>)
 8000ac8:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Handle)
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <ThreadInit+0x204>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <ThreadInit+0xfc>
		  printf("ERR : HS_SR04_left_Handle Creation Failure !\r\n");
 8000ad2:	4844      	ldr	r0, [pc, #272]	; (8000be4 <ThreadInit+0x208>)
 8000ad4:	f008 fb56 	bl	8009184 <puts>

	  // HC-SR04 FRONT -------------------------------------------------------------------------------------------------------
	  osThreadDef(FrontCheck, CheckingFront, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <ThreadInit+0x20c>)
 8000ada:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000ade:	461d      	mov	r5, r3
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Checking = osThreadCreate(osThread(FrontCheck), NULL);
 8000aec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f005 ff91 	bl	8006a1a <osThreadCreate>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a3c      	ldr	r2, [pc, #240]	; (8000bec <ThreadInit+0x210>)
 8000afc:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Checking)
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <ThreadInit+0x210>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <ThreadInit+0x130>
		  printf("ERR : HS_SR04_Front_Checking Creation Failure !\r\n");
 8000b06:	483a      	ldr	r0, [pc, #232]	; (8000bf0 <ThreadInit+0x214>)
 8000b08:	f008 fb3c 	bl	8009184 <puts>

	  osThreadDef(FrontTask, CarFrontSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b0c:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <ThreadInit+0x218>)
 8000b0e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b12:	461d      	mov	r5, r3
 8000b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Handle = osThreadCreate(osThread(FrontTask), NULL);
 8000b20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 ff77 	bl	8006a1a <osThreadCreate>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <ThreadInit+0x21c>)
 8000b30:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Handle)
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <ThreadInit+0x21c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <ThreadInit+0x164>
		  printf("ERR : HS_SR04_Front_Handle Creation Failure !\r\n");
 8000b3a:	4830      	ldr	r0, [pc, #192]	; (8000bfc <ThreadInit+0x220>)
 8000b3c:	f008 fb22 	bl	8009184 <puts>

	  // HC-SR04 RIGHT -------------------------------------------------------------------------------------------------------
	  osThreadDef(RightCheck, CheckingRight, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <ThreadInit+0x224>)
 8000b42:	f107 0420 	add.w	r4, r7, #32
 8000b46:	461d      	mov	r5, r3
 8000b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Checking = osThreadCreate(osThread(RightCheck), NULL);
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f005 ff5d 	bl	8006a1a <osThreadCreate>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <ThreadInit+0x228>)
 8000b64:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Checking)
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <ThreadInit+0x228>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <ThreadInit+0x198>
		  printf("ERR : HS_SR04_Right_Checking Creation Failure !\r\n");
 8000b6e:	4826      	ldr	r0, [pc, #152]	; (8000c08 <ThreadInit+0x22c>)
 8000b70:	f008 fb08 	bl	8009184 <puts>

	  osThreadDef(RightTask, CarRightSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <ThreadInit+0x230>)
 8000b76:	1d3c      	adds	r4, r7, #4
 8000b78:	461d      	mov	r5, r3
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Handle = osThreadCreate(osThread(RightTask), NULL);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f005 ff45 	bl	8006a1a <osThreadCreate>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <ThreadInit+0x234>)
 8000b94:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Handle)
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <ThreadInit+0x234>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <ThreadInit+0x1c8>
		  printf("ERR : HS_SR04_Right_Handle Creation Failure !\r\n");
 8000b9e:	481d      	ldr	r0, [pc, #116]	; (8000c14 <ThreadInit+0x238>)
 8000ba0:	f008 faf0 	bl	8009184 <puts>
}
 8000ba4:	bf00      	nop
 8000ba6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08009fb8 	.word	0x08009fb8
 8000bb4:	200000c0 	.word	0x200000c0
 8000bb8:	0800a160 	.word	0x0800a160
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	08009fec 	.word	0x08009fec
 8000bc4:	0800a17c 	.word	0x0800a17c
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	0800a014 	.word	0x0800a014
 8000bd0:	0800a198 	.word	0x0800a198
 8000bd4:	200000a4 	.word	0x200000a4
 8000bd8:	0800a038 	.word	0x0800a038
 8000bdc:	0800a1b4 	.word	0x0800a1b4
 8000be0:	200000b0 	.word	0x200000b0
 8000be4:	0800a068 	.word	0x0800a068
 8000be8:	0800a1d0 	.word	0x0800a1d0
 8000bec:	200000a8 	.word	0x200000a8
 8000bf0:	0800a098 	.word	0x0800a098
 8000bf4:	0800a1ec 	.word	0x0800a1ec
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	0800a0cc 	.word	0x0800a0cc
 8000c00:	0800a208 	.word	0x0800a208
 8000c04:	200000ac 	.word	0x200000ac
 8000c08:	0800a0fc 	.word	0x0800a0fc
 8000c0c:	0800a224 	.word	0x0800a224
 8000c10:	200000b8 	.word	0x200000b8
 8000c14:	0800a130 	.word	0x0800a130

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	4b64      	ldr	r3, [pc, #400]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a63      	ldr	r2, [pc, #396]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a5c      	ldr	r2, [pc, #368]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b56      	ldr	r3, [pc, #344]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a55      	ldr	r2, [pc, #340]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <MX_GPIO_Init+0x1ac>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 510e 	mov.w	r1, #9088	; 0x2380
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x1b0>)
 8000cfa:	f002 f85b 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	4832      	ldr	r0, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x1b4>)
 8000d04:	f002 f856 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d0e:	4830      	ldr	r0, [pc, #192]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000d10:	f002 f850 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000d1a:	f002 f84b 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d24:	482c      	ldr	r0, [pc, #176]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000d26:	f002 f845 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000d2a:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0x1b0>)
 8000d44:	f001 fe8a 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481b      	ldr	r0, [pc, #108]	; (8000dcc <MX_GPIO_Init+0x1b4>)
 8000d60:	f001 fe7c 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000d64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4814      	ldr	r0, [pc, #80]	; (8000dd0 <MX_GPIO_Init+0x1b8>)
 8000d7e:	f001 fe6d 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000d9a:	f001 fe5f 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000db8:	f001 fe50 	bl	8002a5c <HAL_GPIO_Init>

}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020c00 	.word	0x40020c00

08000ddc <HCSR04_Delay>:
uint32_t Distance[3]  = {0};
int Is_First_Captured[3] = {0};
float refClock = TIMCLOCK/(PRESCALAR);

void HCSR04_Delay (uint16_t time, TIM_HandleTypeDef *htim)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim) < time);
 8000df0:	bf00      	nop
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3f9      	bcc.n	8000df2 <HCSR04_Delay+0x16>

}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HCSR04_Read>:

void HCSR04_Read (TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);	// pull the TRIG pin HIGH
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	68b8      	ldr	r0, [r7, #8]
 8000e22:	f001 ffc7 	bl	8002db4 <HAL_GPIO_WritePin>
	HCSR04_Delay(10, htim);  // wait for 10 us
 8000e26:	68f9      	ldr	r1, [r7, #12]
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f7ff ffd7 	bl	8000ddc <HCSR04_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);  // pull the TRIG pin low
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f001 ffbd 	bl	8002db4 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1); // enable Interrupt
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0202 	orr.w	r2, r2, #2
 8000e48:	60da      	str	r2, [r3, #12]
}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HC_SRO4_Dis>:


// calculate the distance of HC_SR04
uint32_t HC_SRO4_Dis(TIM_HandleTypeDef *htim, int num) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]

	if (Is_First_Captured[num] == 0) // if the first rising edge is not captured
 8000e5e:	4a3b      	ldr	r2, [pc, #236]	; (8000f4c <HC_SRO4_Dis+0xf8>)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d113      	bne.n	8000e92 <HC_SRO4_Dis+0x3e>
	{
		Is_First_Captured[num] = 1;  // set the first captured as true
 8000e6a:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <HC_SRO4_Dis+0xf8>)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		IC_Val1[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f004 f80c 	bl	8004e94 <HAL_TIM_ReadCapturedValue>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4934      	ldr	r1, [pc, #208]	; (8000f50 <HC_SRO4_Dis+0xfc>)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		IC_Val1[num] = htim->Instance->CNT; // read the first value
		IC_Val2[num] = 0;
 8000e86:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e90:	e057      	b.n	8000f42 <HC_SRO4_Dis+0xee>
//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
	}

	else   // If the first rising edge is captured, now we will capture the second edge
	{
		IC_Val2[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e92:	2100      	movs	r1, #0
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f003 fffd 	bl	8004e94 <HAL_TIM_ReadCapturedValue>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	492d      	ldr	r1, [pc, #180]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//IC_Val2[num] = htim->Instance->CNT;

		if (IC_Val2[num] > IC_Val1[num])
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eac:	4928      	ldr	r1, [pc, #160]	; (8000f50 <HC_SRO4_Dis+0xfc>)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d90d      	bls.n	8000ed4 <HC_SRO4_Dis+0x80>
		{
			Difference[num] = IC_Val2[num]-IC_Val1[num];
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec0:	4923      	ldr	r1, [pc, #140]	; (8000f50 <HC_SRO4_Dis+0xfc>)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ec8:	1ad2      	subs	r2, r2, r3
 8000eca:	4923      	ldr	r1, [pc, #140]	; (8000f58 <HC_SRO4_Dis+0x104>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000ed2:	e019      	b.n	8000f08 <HC_SRO4_Dis+0xb4>
		}

		else if (IC_Val1[num] > IC_Val2[num])
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <HC_SRO4_Dis+0xfc>)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000edc:	491d      	ldr	r1, [pc, #116]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d90f      	bls.n	8000f08 <HC_SRO4_Dis+0xb4>
		{

			//TIM 1,3,4 is 16bit so overflow is occured when the cnt value is 0xffff
			Difference[num] = (0xffff + IC_Val2[num]) - IC_Val1[num];
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <HC_SRO4_Dis+0x100>)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ef0:	4917      	ldr	r1, [pc, #92]	; (8000f50 <HC_SRO4_Dis+0xfc>)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000efe:	33ff      	adds	r3, #255	; 0xff
 8000f00:	4915      	ldr	r1, [pc, #84]	; (8000f58 <HC_SRO4_Dis+0x104>)
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		}

//		frequency[num] = refClock/Difference[num];
		Distance[num] = Difference[num]*340/2000;
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HC_SRO4_Dis+0x104>)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HC_SRO4_Dis+0x108>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	09da      	lsrs	r2, r3, #7
 8000f20:	490f      	ldr	r1, [pc, #60]	; (8000f60 <HC_SRO4_Dis+0x10c>)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
//		htim->Instance->CNT = 0;

//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		Is_First_Captured[num] = 0; // set it back to false
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HC_SRO4_Dis+0xf8>)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//htim is address
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0202 	bic.w	r2, r2, #2
 8000f40:	60da      	str	r2, [r3, #12]
	}
}
 8000f42:	bf00      	nop
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200003b0 	.word	0x200003b0
 8000f50:	20000380 	.word	0x20000380
 8000f54:	2000038c 	.word	0x2000038c
 8000f58:	20000398 	.word	0x20000398
 8000f5c:	10624dd3 	.word	0x10624dd3
 8000f60:	200003a4 	.word	0x200003a4

08000f64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_I2C1_Init+0x78>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f70:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MX_I2C1_Init+0x7c>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fa2:	f001 ff21 	bl	8002de8 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 f930 	bl	8001210 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fb4:	f002 f85c 	bl	8003070 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000fbe:	f000 f927 	bl	8001210 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_I2C1_Init+0x74>)
 8000fc6:	f002 f88f 	bl	80030e8 <HAL_I2CEx_ConfigDigitalFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000fd0:	f000 f91e 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200003bc 	.word	0x200003bc
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	000186a0 	.word	0x000186a0

08000fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_I2C_MspInit+0x84>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12c      	bne.n	8001060 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001028:	2312      	movs	r3, #18
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001034:	2304      	movs	r3, #4
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_I2C_MspInit+0x8c>)
 8001040:	f001 fd0c 	bl	8002a5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_I2C_MspInit+0x88>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_I2C_MspInit+0x88>)
 800104e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005400 	.word	0x40005400
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f001 fb3a 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f820 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f7ff fdca 	bl	8000c18 <MX_GPIO_Init>
  MX_RTC_Init();
 8001084:	f000 fb42 	bl	800170c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001088:	f001 f968 	bl	800235c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800108c:	f001 f990 	bl	80023b0 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8001090:	f001 f93a 	bl	8002308 <MX_UART7_Init>
  MX_I2C1_Init();
 8001094:	f7ff ff66 	bl	8000f64 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001098:	f000 fdbc 	bl	8001c14 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800109c:	f001 f9b2 	bl	8002404 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80010a0:	f000 fd44 	bl	8001b2c <MX_TIM1_Init>
  MX_TIM3_Init();
 80010a4:	f000 fe4c 	bl	8001d40 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010a8:	f000 feba 	bl	8001e20 <MX_TIM4_Init>
  MX_TIM8_Init();
 80010ac:	f000 ff28 	bl	8001f00 <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80010b0:	f000 f878 	bl	80011a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010b4:	f7ff faa2 	bl	80005fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010b8:	f005 fca8 	bl	8006a0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x48>
	...

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 ff4d 	bl	8008f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <SystemClock_Config+0xdc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <SystemClock_Config+0xdc>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <SystemClock_Config+0xdc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <SystemClock_Config+0xe0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a25      	ldr	r2, [pc, #148]	; (80011a0 <SystemClock_Config+0xe0>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <SystemClock_Config+0xe0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800111c:	2306      	movs	r3, #6
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001138:	23b4      	movs	r3, #180	; 0xb4
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f002 f85d 	bl	8003208 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001154:	f000 f85c 	bl	8001210 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001158:	f002 f806 	bl	8003168 <HAL_PWREx_EnableOverDrive>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001162:	f000 f855 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	2302      	movs	r3, #2
 800116c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001172:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2105      	movs	r1, #5
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fab7 	bl	80036f8 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001190:	f000 f83e 	bl	8001210 <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	; 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2105      	movs	r1, #5
 80011ac:	2047      	movs	r0, #71	; 0x47
 80011ae:	f001 fb99 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011b2:	2047      	movs	r0, #71	; 0x47
 80011b4:	f001 fbb2 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2105      	movs	r1, #5
 80011bc:	201b      	movs	r0, #27
 80011be:	f001 fb91 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011c2:	201b      	movs	r0, #27
 80011c4:	f001 fbaa 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2105      	movs	r1, #5
 80011cc:	201d      	movs	r0, #29
 80011ce:	f001 fb89 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011d2:	201d      	movs	r0, #29
 80011d4:	f001 fba2 	bl	800291c <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	201e      	movs	r0, #30
 80011de:	f001 fb81 	bl	80028e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011e2:	201e      	movs	r0, #30
 80011e4:	f001 fb9a 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fe:	f001 fa99 	bl	8002734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40000c00 	.word	0x40000c00

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <Move>:
#include "motor.h"

uint8_t odo_flag[4];
uint32_t odo_count[4];

void Move(int controlcmd){
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b06      	cmp	r3, #6
 8001228:	f200 80fe 	bhi.w	8001428 <Move+0x20c>
 800122c:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <Move+0x18>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	080013dd 	.word	0x080013dd
 8001238:	08001251 	.word	0x08001251
 800123c:	08001317 	.word	0x08001317
 8001240:	08001293 	.word	0x08001293
 8001244:	080012d5 	.word	0x080012d5
 8001248:	08001359 	.word	0x08001359
 800124c:	0800139b 	.word	0x0800139b
		case FORWARD:
			Forward();
 8001250:	f000 f90a 	bl	8001468 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4880      	ldr	r0, [pc, #512]	; (800145c <Move+0x240>)
 800125a:	f001 fdab 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	487e      	ldr	r0, [pc, #504]	; (800145c <Move+0x240>)
 8001264:	f001 fda6 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126e:	487b      	ldr	r0, [pc, #492]	; (800145c <Move+0x240>)
 8001270:	f001 fda0 	bl	8002db4 <HAL_GPIO_WritePin>

			for(int i = 0; i < 4; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	e007      	b.n	800128a <Move+0x6e>
				odo_flag[i] = 1;
 800127a:	4a79      	ldr	r2, [pc, #484]	; (8001460 <Move+0x244>)
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	4413      	add	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	3301      	adds	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	2b03      	cmp	r3, #3
 800128e:	ddf4      	ble.n	800127a <Move+0x5e>
			}
			break;
 8001290:	e0e0      	b.n	8001454 <Move+0x238>
		case BACKWARD:
			Backward();
 8001292:	f000 f919 	bl	80014c8 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2101      	movs	r1, #1
 800129a:	4870      	ldr	r0, [pc, #448]	; (800145c <Move+0x240>)
 800129c:	f001 fd8a 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	486d      	ldr	r0, [pc, #436]	; (800145c <Move+0x240>)
 80012a6:	f001 fd85 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b0:	486a      	ldr	r0, [pc, #424]	; (800145c <Move+0x240>)
 80012b2:	f001 fd7f 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	e007      	b.n	80012cc <Move+0xb0>
				odo_flag[i] = 1;
 80012bc:	4a68      	ldr	r2, [pc, #416]	; (8001460 <Move+0x244>)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	4413      	add	r3, r2
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	3301      	adds	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	ddf4      	ble.n	80012bc <Move+0xa0>
			}
			break;
 80012d2:	e0bf      	b.n	8001454 <Move+0x238>
		case LEFT:
			Left();
 80012d4:	f000 f958 	bl	8001588 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	2101      	movs	r1, #1
 80012dc:	485f      	ldr	r0, [pc, #380]	; (800145c <Move+0x240>)
 80012de:	f001 fd69 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	485d      	ldr	r0, [pc, #372]	; (800145c <Move+0x240>)
 80012e8:	f001 fd64 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f2:	485a      	ldr	r0, [pc, #360]	; (800145c <Move+0x240>)
 80012f4:	f001 fd5e 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	e007      	b.n	800130e <Move+0xf2>
				odo_flag[i] = 1;
 80012fe:	4a58      	ldr	r2, [pc, #352]	; (8001460 <Move+0x244>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3301      	adds	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2b03      	cmp	r3, #3
 8001312:	ddf4      	ble.n	80012fe <Move+0xe2>
			}
			break;
 8001314:	e09e      	b.n	8001454 <Move+0x238>
		case RIGHT:
			Right();
 8001316:	f000 f907 	bl	8001528 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	484f      	ldr	r0, [pc, #316]	; (800145c <Move+0x240>)
 8001320:	f001 fd48 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001324:	2201      	movs	r2, #1
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <Move+0x240>)
 800132a:	f001 fd43 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001334:	4849      	ldr	r0, [pc, #292]	; (800145c <Move+0x240>)
 8001336:	f001 fd3d 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	e007      	b.n	8001350 <Move+0x134>
				odo_flag[i] = 1;
 8001340:	4a47      	ldr	r2, [pc, #284]	; (8001460 <Move+0x244>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4413      	add	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	3301      	adds	r3, #1
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b03      	cmp	r3, #3
 8001354:	ddf4      	ble.n	8001340 <Move+0x124>
			}
			break;
 8001356:	e07d      	b.n	8001454 <Move+0x238>
		case CW:
			Cw();
 8001358:	f000 f946 	bl	80015e8 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	2101      	movs	r1, #1
 8001360:	483e      	ldr	r0, [pc, #248]	; (800145c <Move+0x240>)
 8001362:	f001 fd27 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001366:	2201      	movs	r2, #1
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	483c      	ldr	r0, [pc, #240]	; (800145c <Move+0x240>)
 800136c:	f001 fd22 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001376:	4839      	ldr	r0, [pc, #228]	; (800145c <Move+0x240>)
 8001378:	f001 fd1c 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e007      	b.n	8001392 <Move+0x176>
				odo_flag[i] = 1;
 8001382:	4a37      	ldr	r2, [pc, #220]	; (8001460 <Move+0x244>)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4413      	add	r3, r2
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b03      	cmp	r3, #3
 8001396:	ddf4      	ble.n	8001382 <Move+0x166>
			}
			break;
 8001398:	e05c      	b.n	8001454 <Move+0x238>
		case CCW:
			Ccw();
 800139a:	f000 f955 	bl	8001648 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	2101      	movs	r1, #1
 80013a2:	482e      	ldr	r0, [pc, #184]	; (800145c <Move+0x240>)
 80013a4:	f001 fd06 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	482b      	ldr	r0, [pc, #172]	; (800145c <Move+0x240>)
 80013ae:	f001 fd01 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b8:	4828      	ldr	r0, [pc, #160]	; (800145c <Move+0x240>)
 80013ba:	f001 fcfb 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e007      	b.n	80013d4 <Move+0x1b8>
				odo_flag[i] = 1;
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <Move+0x244>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4413      	add	r3, r2
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	ddf4      	ble.n	80013c4 <Move+0x1a8>
			}
			break;
 80013da:	e03b      	b.n	8001454 <Move+0x238>
		case STOP:
			Stop();
 80013dc:	f000 f964 	bl	80016a8 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2101      	movs	r1, #1
 80013e4:	481d      	ldr	r0, [pc, #116]	; (800145c <Move+0x240>)
 80013e6:	f001 fce5 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	481b      	ldr	r0, [pc, #108]	; (800145c <Move+0x240>)
 80013f0:	f001 fce0 	bl	8002db4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <Move+0x240>)
 80013fc:	f001 fcda 	bl	8002db4 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e00c      	b.n	8001420 <Move+0x204>
				odo_flag[i] = 0;
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <Move+0x244>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <Move+0x248>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2100      	movs	r1, #0
 8001416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b03      	cmp	r3, #3
 8001424:	ddef      	ble.n	8001406 <Move+0x1ea>
			}
			break;
 8001426:	e015      	b.n	8001454 <Move+0x238>
		default:
			Stop();
 8001428:	f000 f93e 	bl	80016a8 <Stop>
			for(int i = 0; i < 4; i++) {
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	e00c      	b.n	800144c <Move+0x230>
				odo_flag[i] = 0;
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <Move+0x244>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <Move+0x248>)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2100      	movs	r1, #0
 8001442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3301      	adds	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b03      	cmp	r3, #3
 8001450:	ddef      	ble.n	8001432 <Move+0x216>
			}
			break;
 8001452:	bf00      	nop
		}
}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020400 	.word	0x40020400
 8001460:	20000410 	.word	0x20000410
 8001464:	20000414 	.word	0x20000414

08001468 <Forward>:

void Forward()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 800146c:	2200      	movs	r2, #0
 800146e:	2102      	movs	r1, #2
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <Forward+0x54>)
 8001472:	f001 fc9f 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	4810      	ldr	r0, [pc, #64]	; (80014c0 <Forward+0x58>)
 800147e:	f001 fc99 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 8001482:	2201      	movs	r2, #1
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	480e      	ldr	r0, [pc, #56]	; (80014c0 <Forward+0x58>)
 8001488:	f001 fc94 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <Forward+0x58>)
 8001494:	f001 fc8e 	bl	8002db4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001498:	2100      	movs	r1, #0
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <Forward+0x5c>)
 800149c:	f002 ff12 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014a0:	2104      	movs	r1, #4
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <Forward+0x5c>)
 80014a4:	f002 ff0e 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80014a8:	2108      	movs	r1, #8
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <Forward+0x5c>)
 80014ac:	f002 ff0a 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80014b0:	210c      	movs	r1, #12
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <Forward+0x5c>)
 80014b4:	f002 ff06 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021400 	.word	0x40021400
 80014c4:	200004d8 	.word	0x200004d8

080014c8 <Backward>:

void Backward()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2102      	movs	r1, #2
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <Backward+0x54>)
 80014d2:	f001 fc6f 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <Backward+0x58>)
 80014de:	f001 fc69 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <Backward+0x58>)
 80014e8:	f001 fc64 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	480b      	ldr	r0, [pc, #44]	; (8001520 <Backward+0x58>)
 80014f4:	f001 fc5e 	bl	8002db4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014f8:	2100      	movs	r1, #0
 80014fa:	480a      	ldr	r0, [pc, #40]	; (8001524 <Backward+0x5c>)
 80014fc:	f002 fee2 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001500:	2104      	movs	r1, #4
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <Backward+0x5c>)
 8001504:	f002 fede 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001508:	2108      	movs	r1, #8
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <Backward+0x5c>)
 800150c:	f002 feda 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001510:	210c      	movs	r1, #12
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <Backward+0x5c>)
 8001514:	f002 fed6 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021800 	.word	0x40021800
 8001520:	40021400 	.word	0x40021400
 8001524:	200004d8 	.word	0x200004d8

08001528 <Right>:

void Right()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <Right+0x54>)
 8001532:	f001 fc3f 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <Right+0x58>)
 800153e:	f001 fc39 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <Right+0x58>)
 8001548:	f001 fc34 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <Right+0x58>)
 8001554:	f001 fc2e 	bl	8002db4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001558:	2100      	movs	r1, #0
 800155a:	480a      	ldr	r0, [pc, #40]	; (8001584 <Right+0x5c>)
 800155c:	f002 feb2 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001560:	2104      	movs	r1, #4
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <Right+0x5c>)
 8001564:	f002 feae 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001568:	2108      	movs	r1, #8
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <Right+0x5c>)
 800156c:	f002 feaa 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001570:	210c      	movs	r1, #12
 8001572:	4804      	ldr	r0, [pc, #16]	; (8001584 <Right+0x5c>)
 8001574:	f002 fea6 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021800 	.word	0x40021800
 8001580:	40021400 	.word	0x40021400
 8001584:	200004d8 	.word	0x200004d8

08001588 <Left>:

void Left()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2102      	movs	r1, #2
 8001590:	4812      	ldr	r0, [pc, #72]	; (80015dc <Left+0x54>)
 8001592:	f001 fc0f 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4810      	ldr	r0, [pc, #64]	; (80015e0 <Left+0x58>)
 800159e:	f001 fc09 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <Left+0x58>)
 80015a8:	f001 fc04 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <Left+0x58>)
 80015b4:	f001 fbfe 	bl	8002db4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015b8:	2100      	movs	r1, #0
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <Left+0x5c>)
 80015bc:	f002 fe82 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015c0:	2104      	movs	r1, #4
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <Left+0x5c>)
 80015c4:	f002 fe7e 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80015c8:	2108      	movs	r1, #8
 80015ca:	4806      	ldr	r0, [pc, #24]	; (80015e4 <Left+0x5c>)
 80015cc:	f002 fe7a 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80015d0:	210c      	movs	r1, #12
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <Left+0x5c>)
 80015d4:	f002 fe76 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40021400 	.word	0x40021400
 80015e4:	200004d8 	.word	0x200004d8

080015e8 <Cw>:

void Cw()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2102      	movs	r1, #2
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <Cw+0x54>)
 80015f2:	f001 fbdf 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	4810      	ldr	r0, [pc, #64]	; (8001640 <Cw+0x58>)
 80015fe:	f001 fbd9 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <Cw+0x58>)
 8001608:	f001 fbd4 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <Cw+0x58>)
 8001614:	f001 fbce 	bl	8002db4 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001618:	2100      	movs	r1, #0
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <Cw+0x5c>)
 800161c:	f002 fe52 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001620:	2104      	movs	r1, #4
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <Cw+0x5c>)
 8001624:	f002 fe4e 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001628:	2108      	movs	r1, #8
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <Cw+0x5c>)
 800162c:	f002 fe4a 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001630:	210c      	movs	r1, #12
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <Cw+0x5c>)
 8001634:	f002 fe46 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021800 	.word	0x40021800
 8001640:	40021400 	.word	0x40021400
 8001644:	200004d8 	.word	0x200004d8

08001648 <Ccw>:

void Ccw()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <Ccw+0x54>)
 8001652:	f001 fbaf 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <Ccw+0x58>)
 800165e:	f001 fba9 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <Ccw+0x58>)
 8001668:	f001 fba4 	bl	8002db4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <Ccw+0x58>)
 8001674:	f001 fb9e 	bl	8002db4 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001678:	2100      	movs	r1, #0
 800167a:	480a      	ldr	r0, [pc, #40]	; (80016a4 <Ccw+0x5c>)
 800167c:	f002 fe22 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001680:	2104      	movs	r1, #4
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <Ccw+0x5c>)
 8001684:	f002 fe1e 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001688:	2108      	movs	r1, #8
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <Ccw+0x5c>)
 800168c:	f002 fe1a 	bl	80042c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001690:	210c      	movs	r1, #12
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <Ccw+0x5c>)
 8001694:	f002 fe16 	bl	80042c4 <HAL_TIM_PWM_Start>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021400 	.word	0x40021400
 80016a4:	200004d8 	.word	0x200004d8

080016a8 <Stop>:

void Stop()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <Stop+0x28>)
 80016b0:	f002 fed0 	bl	8004454 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <Stop+0x28>)
 80016b8:	f002 fecc 	bl	8004454 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80016bc:	2108      	movs	r1, #8
 80016be:	4804      	ldr	r0, [pc, #16]	; (80016d0 <Stop+0x28>)
 80016c0:	f002 fec8 	bl	8004454 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80016c4:	210c      	movs	r1, #12
 80016c6:	4802      	ldr	r0, [pc, #8]	; (80016d0 <Stop+0x28>)
 80016c8:	f002 fec4 	bl	8004454 <HAL_TIM_PWM_Stop>


}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200004d8 	.word	0x200004d8

080016d4 <Motor_Init>:

void Motor_Init(){
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 80016e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 80016ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016f4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 80016f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_RTC_Init+0x44>)
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <MX_RTC_Init+0x48>)
 8001714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_RTC_Init+0x44>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_RTC_Init+0x44>)
 800171e:	227f      	movs	r2, #127	; 0x7f
 8001720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_RTC_Init+0x44>)
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_RTC_Init+0x44>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_RTC_Init+0x44>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_RTC_Init+0x44>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_RTC_Init+0x44>)
 800173c:	f002 fbae 	bl	8003e9c <HAL_RTC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001746:	f7ff fd63 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000424 	.word	0x20000424
 8001754:	40002800 	.word	0x40002800

08001758 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	2230      	movs	r2, #48	; 0x30
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fc00 	bl	8008f6e <memset>
  if(rtcHandle->Instance==RTC)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_RTC_MspInit+0x4c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d111      	bne.n	800179c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001778:	2320      	movs	r3, #32
 800177a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800177c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f9c8 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001792:	f7ff fd3d 	bl	8001210 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RTC_MspInit+0x50>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800179c:	bf00      	nop
 800179e:	3738      	adds	r7, #56	; 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40002800 	.word	0x40002800
 80017a8:	42470e3c 	.word	0x42470e3c

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_MspInit+0x54>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_MspInit+0x54>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_MspInit+0x54>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_MspInit+0x54>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_MspInit+0x54>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_MspInit+0x54>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	210f      	movs	r1, #15
 80017ee:	f06f 0001 	mvn.w	r0, #1
 80017f2:	f001 f877 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2032      	movs	r0, #50	; 0x32
 800181a:	f001 f863 	bl	80028e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f001 f87c 	bl	800291c <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_InitTick+0xa4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_InitTick+0xa4>)
 800182e:	f043 0308 	orr.w	r3, r3, #8
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_InitTick+0xa4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001840:	f107 0210 	add.w	r2, r7, #16
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f002 f934 	bl	8003ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001850:	f002 f90a 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8001854:	4603      	mov	r3, r0
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_InitTick+0xa8>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3b01      	subs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_InitTick+0xac>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_InitTick+0xb0>)
 800186c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_InitTick+0xac>)
 8001870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_InitTick+0xac>)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_InitTick+0xac>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_InitTick+0xac>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <HAL_InitTick+0xac>)
 800188a:	f002 fc01 	bl	8004090 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <HAL_InitTick+0xac>)
 8001896:	f002 fc4b 	bl	8004130 <HAL_TIM_Base_Start_IT>
 800189a:	4603      	mov	r3, r0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	20000444 	.word	0x20000444
 80018b4:	40000c00 	.word	0x40000c00

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018ea:	f002 ffa5 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000490 	.word	0x20000490

080018f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <TIM1_CC_IRQHandler+0x10>)
 80018fe:	f002 ff9b 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000490 	.word	0x20000490

0800190c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM3_IRQHandler+0x10>)
 8001912:	f002 ff91 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000520 	.word	0x20000520

08001920 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM4_IRQHandler+0x10>)
 8001926:	f002 ff87 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000568 	.word	0x20000568

08001934 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <USART2_IRQHandler+0x10>)
 800193a:	f004 f8e7 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000063c 	.word	0x2000063c

08001948 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <USART3_IRQHandler+0x10>)
 800194e:	f004 f8dd 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000680 	.word	0x20000680

0800195c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001962:	f002 ff69 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005b0 	.word	0x200005b0

08001970 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM8_CC_IRQHandler+0x10>)
 8001976:	f002 ff5f 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200005b0 	.word	0x200005b0

08001984 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM5_IRQHandler+0x10>)
 800198a:	f002 ff55 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000444 	.word	0x20000444

08001998 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <USART6_IRQHandler+0x10>)
 800199e:	f004 f8b5 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200006c4 	.word	0x200006c4

080019ac <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <UART7_IRQHandler+0x10>)
 80019b2:	f004 f8ab 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200005f8 	.word	0x200005f8

080019c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e00a      	b.n	80019e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019d2:	f3af 8000 	nop.w
 80019d6:	4601      	mov	r1, r0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	b2ca      	uxtb	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbf0      	blt.n	80019d2 <_read+0x12>
	}

return len;
 80019f0:	687b      	ldr	r3, [r7, #4]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fdc5 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
	return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_close>:

int _close(int file)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_isatty>:

int _isatty(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	return 1;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f007 f91e 	bl	8008d0c <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20030000 	.word	0x20030000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	2000048c 	.word	0x2000048c
 8001b04:	20004470 	.word	0x20004470

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b58:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <MX_TIM1_Init+0xe4>)
 8001b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b5e:	22b3      	movs	r2, #179	; 0xb3
 8001b60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b82:	4822      	ldr	r0, [pc, #136]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001b84:	f002 fa84 	bl	8004090 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001b8e:	f7ff fb3f 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481b      	ldr	r0, [pc, #108]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001ba0:	f003 f8b0 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001baa:	f7ff fb31 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001bae:	4817      	ldr	r0, [pc, #92]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001bb0:	f002 fcc0 	bl	8004534 <HAL_TIM_IC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bba:	f7ff fb29 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480f      	ldr	r0, [pc, #60]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001bce:	f003 fdfd 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001bd8:	f7ff fb1a 	bl	8001210 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bdc:	230a      	movs	r3, #10
 8001bde:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001be0:	2301      	movs	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001be8:	2305      	movs	r3, #5
 8001bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <MX_TIM1_Init+0xe0>)
 8001bf4:	f002 ff28 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001bfe:	f7ff fb07 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000490 	.word	0x20000490
 8001c10:	40010000 	.word	0x40010000

08001c14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08e      	sub	sp, #56	; 0x38
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
 8001c40:	615a      	str	r2, [r3, #20]
 8001c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c4e:	2259      	movs	r2, #89	; 0x59
 8001c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c6c:	4833      	ldr	r0, [pc, #204]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c6e:	f002 fa0f 	bl	8004090 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c78:	f7ff faca 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c86:	4619      	mov	r1, r3
 8001c88:	482c      	ldr	r0, [pc, #176]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c8a:	f003 f83b 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c94:	f7ff fabc 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c98:	4828      	ldr	r0, [pc, #160]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001c9a:	f002 fab9 	bl	8004210 <HAL_TIM_PWM_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ca4:	f7ff fab4 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4821      	ldr	r0, [pc, #132]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001cb8:	f003 fd88 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cc2:	f7ff faa5 	bl	8001210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001cc6:	2370      	movs	r3, #112	; 0x70
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4817      	ldr	r0, [pc, #92]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001cde:	f002 ff4f 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ce8:	f7ff fa92 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4812      	ldr	r0, [pc, #72]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001cf4:	f002 ff44 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001cfe:	f7ff fa87 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2208      	movs	r2, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001d0a:	f002 ff39 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001d14:	f7ff fa7c 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001d20:	f002 ff2e 	bl	8004b80 <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001d2a:	f7ff fa71 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM2_Init+0x128>)
 8001d30:	f000 fa92 	bl	8002258 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200004d8 	.word	0x200004d8

08001d40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <MX_TIM3_Init+0xdc>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d72:	2259      	movs	r2, #89	; 0x59
 8001d74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d90:	4821      	ldr	r0, [pc, #132]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001d92:	f002 f97d 	bl	8004090 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f7ff fa38 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	4619      	mov	r1, r3
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001dae:	f002 ffa9 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f7ff fa2a 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001dbc:	4816      	ldr	r0, [pc, #88]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001dbe:	f002 fbb9 	bl	8004534 <HAL_TIM_IC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001dc8:	f7ff fa22 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001ddc:	f003 fcf6 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001de6:	f7ff fa13 	bl	8001210 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dea:	230a      	movs	r3, #10
 8001dec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dee:	2301      	movs	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001df6:	2305      	movs	r3, #5
 8001df8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_TIM3_Init+0xd8>)
 8001e02:	f002 fe21 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001e0c:	f7ff fa00 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000520 	.word	0x20000520
 8001e1c:	40000400 	.word	0x40000400

08001e20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <MX_TIM4_Init+0xdc>)
 8001e4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e52:	2259      	movs	r2, #89	; 0x59
 8001e54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e70:	4821      	ldr	r0, [pc, #132]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e72:	f002 f90d 	bl	8004090 <HAL_TIM_Base_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001e7c:	f7ff f9c8 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	481a      	ldr	r0, [pc, #104]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e8e:	f002 ff39 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e98:	f7ff f9ba 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e9c:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001e9e:	f002 fb49 	bl	8004534 <HAL_TIM_IC_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ea8:	f7ff f9b2 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001ebc:	f003 fc86 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001ec6:	f7ff f9a3 	bl	8001210 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001eda:	463b      	mov	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_TIM4_Init+0xd8>)
 8001ee2:	f002 fdb1 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001eec:	f7ff f990 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000568 	.word	0x20000568
 8001efc:	40000800 	.word	0x40000800

08001f00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f2c:	4a3d      	ldr	r2, [pc, #244]	; (8002024 <MX_TIM8_Init+0x124>)
 8001f2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f3c:	4b38      	ldr	r3, [pc, #224]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f4a:	4b35      	ldr	r3, [pc, #212]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f56:	4832      	ldr	r0, [pc, #200]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f58:	f002 f89a 	bl	8004090 <HAL_TIM_Base_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001f62:	f7ff f955 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	4619      	mov	r1, r3
 8001f72:	482b      	ldr	r0, [pc, #172]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f74:	f002 fec6 	bl	8004d04 <HAL_TIM_ConfigClockSource>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001f7e:	f7ff f947 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001f82:	4827      	ldr	r0, [pc, #156]	; (8002020 <MX_TIM8_Init+0x120>)
 8001f84:	f002 fad6 	bl	8004534 <HAL_TIM_IC_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001f8e:	f7ff f93f 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f9a:	f107 0310 	add.w	r3, r7, #16
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481f      	ldr	r0, [pc, #124]	; (8002020 <MX_TIM8_Init+0x120>)
 8001fa2:	f003 fc13 	bl	80057cc <HAL_TIMEx_MasterConfigSynchronization>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8001fac:	f7ff f930 	bl	8001210 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4816      	ldr	r0, [pc, #88]	; (8002020 <MX_TIM8_Init+0x120>)
 8001fc8:	f002 fd3e 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001fd2:	f7ff f91d 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4810      	ldr	r0, [pc, #64]	; (8002020 <MX_TIM8_Init+0x120>)
 8001fde:	f002 fd33 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8001fe8:	f7ff f912 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	2208      	movs	r2, #8
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <MX_TIM8_Init+0x120>)
 8001ff4:	f002 fd28 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8001ffe:	f7ff f907 	bl	8001210 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002002:	463b      	mov	r3, r7
 8002004:	220c      	movs	r2, #12
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_TIM8_Init+0x120>)
 800200a:	f002 fd1d 	bl	8004a48 <HAL_TIM_IC_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002014:	f7ff f8fc 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200005b0 	.word	0x200005b0
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7b      	ldr	r2, [pc, #492]	; (8002234 <HAL_TIM_Base_MspInit+0x20c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d135      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
 800204e:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a79      	ldr	r2, [pc, #484]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	4b73      	ldr	r3, [pc, #460]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a72      	ldr	r2, [pc, #456]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b70      	ldr	r3, [pc, #448]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002094:	2301      	movs	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209c:	4619      	mov	r1, r3
 800209e:	4867      	ldr	r0, [pc, #412]	; (800223c <HAL_TIM_Base_MspInit+0x214>)
 80020a0:	f000 fcdc 	bl	8002a5c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2105      	movs	r1, #5
 80020a8:	2018      	movs	r0, #24
 80020aa:	f000 fc1b 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020ae:	2018      	movs	r0, #24
 80020b0:	f000 fc34 	bl	800291c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80020b4:	e0ba      	b.n	800222c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020be:	d10e      	bne.n	80020de <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	4b5c      	ldr	r3, [pc, #368]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	4a5b      	ldr	r2, [pc, #364]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3b      	ldr	r3, [r7, #32]
}
 80020dc:	e0a6      	b.n	800222c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a57      	ldr	r2, [pc, #348]	; (8002240 <HAL_TIM_Base_MspInit+0x218>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d12c      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	4b52      	ldr	r3, [pc, #328]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a4a      	ldr	r2, [pc, #296]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002120:	2340      	movs	r3, #64	; 0x40
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002130:	2302      	movs	r3, #2
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	4842      	ldr	r0, [pc, #264]	; (8002244 <HAL_TIM_Base_MspInit+0x21c>)
 800213c:	f000 fc8e 	bl	8002a5c <HAL_GPIO_Init>
}
 8002140:	e074      	b.n	800222c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <HAL_TIM_Base_MspInit+0x220>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d12d      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a38      	ldr	r2, [pc, #224]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002196:	2302      	movs	r3, #2
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219e:	4619      	mov	r1, r3
 80021a0:	482a      	ldr	r0, [pc, #168]	; (800224c <HAL_TIM_Base_MspInit+0x224>)
 80021a2:	f000 fc5b 	bl	8002a5c <HAL_GPIO_Init>
}
 80021a6:	e041      	b.n	800222c <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM8)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_TIM_Base_MspInit+0x228>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d13c      	bne.n	800222c <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_TIM_Base_MspInit+0x210>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021fc:	2303      	movs	r3, #3
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	4813      	ldr	r0, [pc, #76]	; (8002254 <HAL_TIM_Base_MspInit+0x22c>)
 8002208:	f000 fc28 	bl	8002a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	202c      	movs	r0, #44	; 0x2c
 8002212:	f000 fb67 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002216:	202c      	movs	r0, #44	; 0x2c
 8002218:	f000 fb80 	bl	800291c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2105      	movs	r1, #5
 8002220:	202e      	movs	r0, #46	; 0x2e
 8002222:	f000 fb5f 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002226:	202e      	movs	r0, #46	; 0x2e
 8002228:	f000 fb78 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	3740      	adds	r7, #64	; 0x40
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40010000 	.word	0x40010000
 8002238:	40023800 	.word	0x40023800
 800223c:	40021000 	.word	0x40021000
 8002240:	40000400 	.word	0x40000400
 8002244:	40020000 	.word	0x40020000
 8002248:	40000800 	.word	0x40000800
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40010400 	.word	0x40010400
 8002254:	40020800 	.word	0x40020800

08002258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d13c      	bne.n	80022f4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_TIM_MspPostInit+0xa4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022c2:	2301      	movs	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <HAL_TIM_MspPostInit+0xa8>)
 80022ce:	f000 fbc5 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80022d2:	f640 4308 	movw	r3, #3080	; 0xc08
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <HAL_TIM_MspPostInit+0xac>)
 80022f0:	f000 fbb4 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400

08002308 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_UART7_Init+0x4c>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <MX_UART7_Init+0x50>)
 8002310:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <MX_UART7_Init+0x4c>)
 8002314:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002318:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <MX_UART7_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_UART7_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_UART7_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_UART7_Init+0x4c>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_UART7_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_UART7_Init+0x4c>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_UART7_Init+0x4c>)
 8002340:	f003 fad4 	bl	80058ec <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800234a:	f7fe ff61 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200005f8 	.word	0x200005f8
 8002358:	40007800 	.word	0x40007800

0800235c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_USART2_UART_Init+0x50>)
 8002364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800236c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002376:	2200      	movs	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_USART2_UART_Init+0x4c>)
 8002394:	f003 faaa 	bl	80058ec <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800239e:	f7fe ff37 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000063c 	.word	0x2000063c
 80023ac:	40004400 	.word	0x40004400

080023b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART3_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART3_UART_Init+0x4c>)
 80023e8:	f003 fa80 	bl	80058ec <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f7fe ff0d 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000680 	.word	0x20000680
 8002400:	40004800 	.word	0x40004800

08002404 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART6_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART6_UART_Init+0x4c>)
 800243c:	f003 fa56 	bl	80058ec <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f7fe fee3 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200006c4 	.word	0x200006c4
 8002454:	40011400 	.word	0x40011400

08002458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b090      	sub	sp, #64	; 0x40
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a80      	ldr	r2, [pc, #512]	; (8002678 <HAL_UART_MspInit+0x220>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d135      	bne.n	80024e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
 800247e:	4b7f      	ldr	r3, [pc, #508]	; (800267c <HAL_UART_MspInit+0x224>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a7e      	ldr	r2, [pc, #504]	; (800267c <HAL_UART_MspInit+0x224>)
 8002484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b7c      	ldr	r3, [pc, #496]	; (800267c <HAL_UART_MspInit+0x224>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_UART_MspInit+0x224>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_UART_MspInit+0x224>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_UART_MspInit+0x224>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80024c4:	2308      	movs	r3, #8
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	486c      	ldr	r0, [pc, #432]	; (8002680 <HAL_UART_MspInit+0x228>)
 80024d0:	f000 fac4 	bl	8002a5c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2105      	movs	r1, #5
 80024d8:	2052      	movs	r0, #82	; 0x52
 80024da:	f000 fa03 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80024de:	2052      	movs	r0, #82	; 0x52
 80024e0:	f000 fa1c 	bl	800291c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024e4:	e0c4      	b.n	8002670 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_UART_MspInit+0x22c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d152      	bne.n	8002596 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_UART_MspInit+0x224>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_UART_MspInit+0x224>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_UART_MspInit+0x224>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	4b5a      	ldr	r3, [pc, #360]	; (800267c <HAL_UART_MspInit+0x224>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a59      	ldr	r2, [pc, #356]	; (800267c <HAL_UART_MspInit+0x224>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6313      	str	r3, [r2, #48]	; 0x30
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_UART_MspInit+0x224>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_UART_MspInit+0x224>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_UART_MspInit+0x224>)
 8002532:	f043 0308 	orr.w	r3, r3, #8
 8002536:	6313      	str	r3, [r2, #48]	; 0x30
 8002538:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_UART_MspInit+0x224>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002544:	2308      	movs	r3, #8
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002554:	2307      	movs	r3, #7
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255c:	4619      	mov	r1, r3
 800255e:	484a      	ldr	r0, [pc, #296]	; (8002688 <HAL_UART_MspInit+0x230>)
 8002560:	f000 fa7c 	bl	8002a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002564:	2320      	movs	r3, #32
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002574:	2307      	movs	r3, #7
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	4843      	ldr	r0, [pc, #268]	; (800268c <HAL_UART_MspInit+0x234>)
 8002580:	f000 fa6c 	bl	8002a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2105      	movs	r1, #5
 8002588:	2026      	movs	r0, #38	; 0x26
 800258a:	f000 f9ab 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800258e:	2026      	movs	r0, #38	; 0x26
 8002590:	f000 f9c4 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 8002594:	e06c      	b.n	8002670 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3d      	ldr	r2, [pc, #244]	; (8002690 <HAL_UART_MspInit+0x238>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d135      	bne.n	800260c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_UART_MspInit+0x224>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_UART_MspInit+0x224>)
 80025aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ae:	6413      	str	r3, [r2, #64]	; 0x40
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_UART_MspInit+0x224>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_UART_MspInit+0x224>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a2d      	ldr	r2, [pc, #180]	; (800267c <HAL_UART_MspInit+0x224>)
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_UART_MspInit+0x224>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025ea:	2307      	movs	r3, #7
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f2:	4619      	mov	r1, r3
 80025f4:	4825      	ldr	r0, [pc, #148]	; (800268c <HAL_UART_MspInit+0x234>)
 80025f6:	f000 fa31 	bl	8002a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2105      	movs	r1, #5
 80025fe:	2027      	movs	r0, #39	; 0x27
 8002600:	f000 f970 	bl	80028e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002604:	2027      	movs	r0, #39	; 0x27
 8002606:	f000 f989 	bl	800291c <HAL_NVIC_EnableIRQ>
}
 800260a:	e031      	b.n	8002670 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <HAL_UART_MspInit+0x23c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12c      	bne.n	8002670 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_UART_MspInit+0x224>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_UART_MspInit+0x224>)
 8002620:	f043 0320 	orr.w	r3, r3, #32
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_UART_MspInit+0x224>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_UART_MspInit+0x224>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_UART_MspInit+0x224>)
 800263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_UART_MspInit+0x224>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800264e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002660:	2308      	movs	r3, #8
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	480b      	ldr	r0, [pc, #44]	; (8002698 <HAL_UART_MspInit+0x240>)
 800266c:	f000 f9f6 	bl	8002a5c <HAL_GPIO_Init>
}
 8002670:	bf00      	nop
 8002672:	3740      	adds	r7, #64	; 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40007800 	.word	0x40007800
 800267c:	40023800 	.word	0x40023800
 8002680:	40021000 	.word	0x40021000
 8002684:	40004400 	.word	0x40004400
 8002688:	40020000 	.word	0x40020000
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40004800 	.word	0x40004800
 8002694:	40011400 	.word	0x40011400
 8002698:	40021800 	.word	0x40021800

0800269c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026a2:	490e      	ldr	r1, [pc, #56]	; (80026dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a4:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026b8:	4c0b      	ldr	r4, [pc, #44]	; (80026e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026c6:	f7ff fa1f 	bl	8001b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f006 fc1b 	bl	8008f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7fe fcd1 	bl	8001074 <main>
  bx  lr    
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80026e0:	0800a308 	.word	0x0800a308
  ldr r2, =_sbss
 80026e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80026e8:	20004470 	.word	0x20004470

080026ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_Init+0x40>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_Init+0x40>)
 80026fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_Init+0x40>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_Init+0x40>)
 8002706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x40>)
 8002712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f000 f8d8 	bl	80028ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	200f      	movs	r0, #15
 8002720:	f7ff f870 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff f842 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023c00 	.word	0x40023c00

08002734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x20>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x24>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4413      	add	r3, r2
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_IncTick+0x24>)
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000008 	.word	0x20000008
 8002758:	20000708 	.word	0x20000708

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_GetTick+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000708 	.word	0x20000708

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	db0b      	blt.n	8002802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4907      	ldr	r1, [pc, #28]	; (8002810 <__NVIC_EnableIRQ+0x38>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2001      	movs	r0, #1
 80027fa:	fa00 f202 	lsl.w	r2, r0, r2
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	db0a      	blt.n	800283e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	490c      	ldr	r1, [pc, #48]	; (8002860 <__NVIC_SetPriority+0x4c>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	0112      	lsls	r2, r2, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	440b      	add	r3, r1
 8002838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800283c:	e00a      	b.n	8002854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4908      	ldr	r1, [pc, #32]	; (8002864 <__NVIC_SetPriority+0x50>)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	3b04      	subs	r3, #4
 800284c:	0112      	lsls	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	440b      	add	r3, r1
 8002852:	761a      	strb	r2, [r3, #24]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000e100 	.word	0xe000e100
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f1c3 0307 	rsb	r3, r3, #7
 8002882:	2b04      	cmp	r3, #4
 8002884:	bf28      	it	cs
 8002886:	2304      	movcs	r3, #4
 8002888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3304      	adds	r3, #4
 800288e:	2b06      	cmp	r3, #6
 8002890:	d902      	bls.n	8002898 <NVIC_EncodePriority+0x30>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3b03      	subs	r3, #3
 8002896:	e000      	b.n	800289a <NVIC_EncodePriority+0x32>
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	43d9      	mvns	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	4313      	orrs	r3, r2
         );
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff4c 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f6:	f7ff ff61 	bl	80027bc <__NVIC_GetPriorityGrouping>
 80028fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6978      	ldr	r0, [r7, #20]
 8002902:	f7ff ffb1 	bl	8002868 <NVIC_EncodePriority>
 8002906:	4602      	mov	r2, r0
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff80 	bl	8002814 <__NVIC_SetPriority>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff54 	bl	80027d8 <__NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002946:	f7ff ff09 	bl	800275c <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d008      	beq.n	800296a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e052      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_Abort+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	e013      	b.n	80029e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029bc:	f7ff fece 	bl	800275c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d90c      	bls.n	80029e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e015      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e4      	bne.n	80029bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00c      	b.n	8002a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2205      	movs	r2, #5
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e177      	b.n	8002d68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	f040 8166 	bne.w	8002d62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d005      	beq.n	8002aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d130      	bne.n	8002b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80c0 	beq.w	8002d62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <HAL_GPIO_Init+0x324>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a65      	ldr	r2, [pc, #404]	; (8002d80 <HAL_GPIO_Init+0x324>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_GPIO_Init+0x324>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfe:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <HAL_GPIO_Init+0x328>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_GPIO_Init+0x32c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d037      	beq.n	8002c9a <HAL_GPIO_Init+0x23e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a57      	ldr	r2, [pc, #348]	; (8002d8c <HAL_GPIO_Init+0x330>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d031      	beq.n	8002c96 <HAL_GPIO_Init+0x23a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a56      	ldr	r2, [pc, #344]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x236>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_GPIO_Init+0x338>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x232>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a54      	ldr	r2, [pc, #336]	; (8002d98 <HAL_GPIO_Init+0x33c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x22e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a53      	ldr	r2, [pc, #332]	; (8002d9c <HAL_GPIO_Init+0x340>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x22a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a52      	ldr	r2, [pc, #328]	; (8002da0 <HAL_GPIO_Init+0x344>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x226>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a51      	ldr	r2, [pc, #324]	; (8002da4 <HAL_GPIO_Init+0x348>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x222>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a50      	ldr	r2, [pc, #320]	; (8002da8 <HAL_GPIO_Init+0x34c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x21e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x350>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x21a>
 8002c72:	2309      	movs	r3, #9
 8002c74:	e012      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c76:	230a      	movs	r3, #10
 8002c78:	e010      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	e00e      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x240>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x328>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cba:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d32:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_GPIO_Init+0x354>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae84 	bls.w	8002a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40021c00 	.word	0x40021c00
 8002da8:	40022000 	.word	0x40022000
 8002dac:	40022400 	.word	0x40022400
 8002db0:	40013c00 	.word	0x40013c00

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	619a      	str	r2, [r3, #24]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e12b      	b.n	8003052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe f8e8 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e4c:	f000 fe0c 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4a81      	ldr	r2, [pc, #516]	; (800305c <HAL_I2C_Init+0x274>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d807      	bhi.n	8002e6c <HAL_I2C_Init+0x84>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a80      	ldr	r2, [pc, #512]	; (8003060 <HAL_I2C_Init+0x278>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e006      	b.n	8002e7a <HAL_I2C_Init+0x92>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a7d      	ldr	r2, [pc, #500]	; (8003064 <HAL_I2C_Init+0x27c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bf94      	ite	ls
 8002e74:	2301      	movls	r3, #1
 8002e76:	2300      	movhi	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0e7      	b.n	8003052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4a78      	ldr	r2, [pc, #480]	; (8003068 <HAL_I2C_Init+0x280>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9b      	lsrs	r3, r3, #18
 8002e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	; (800305c <HAL_I2C_Init+0x274>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d802      	bhi.n	8002ebc <HAL_I2C_Init+0xd4>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	e009      	b.n	8002ed0 <HAL_I2C_Init+0xe8>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	4a69      	ldr	r2, [pc, #420]	; (800306c <HAL_I2C_Init+0x284>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	3301      	adds	r3, #1
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	495c      	ldr	r1, [pc, #368]	; (800305c <HAL_I2C_Init+0x274>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d819      	bhi.n	8002f24 <HAL_I2C_Init+0x13c>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e59      	subs	r1, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f04:	400b      	ands	r3, r1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_I2C_Init+0x138>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e59      	subs	r1, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	e051      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f20:	2304      	movs	r3, #4
 8002f22:	e04f      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <HAL_I2C_Init+0x168>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e012      	b.n	8002f76 <HAL_I2C_Init+0x18e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Init+0x196>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e022      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <HAL_I2C_Init+0x1bc>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e58      	subs	r0, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	440b      	add	r3, r1
 8002f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Init+0x1dc>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e58      	subs	r0, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	0099      	lsls	r1, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	6809      	ldr	r1, [r1, #0]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6911      	ldr	r1, [r2, #16]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68d2      	ldr	r2, [r2, #12]
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	000186a0 	.word	0x000186a0
 8003060:	001e847f 	.word	0x001e847f
 8003064:	003d08ff 	.word	0x003d08ff
 8003068:	431bde83 	.word	0x431bde83
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d129      	bne.n	80030da <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2224      	movs	r2, #36	; 0x24
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0210 	bic.w	r2, r2, #16
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
  }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d12a      	bne.n	8003158 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	; 0x24
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003122:	89fb      	ldrh	r3, [r7, #14]
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b29a      	uxth	r2, r3
 800312e:	89fb      	ldrh	r3, [r7, #14]
 8003130:	4313      	orrs	r3, r2
 8003132:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	89fa      	ldrh	r2, [r7, #14]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_PWREx_EnableOverDrive+0x94>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003194:	f7ff fae2 	bl	800275c <HAL_GetTick>
 8003198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800319a:	e009      	b.n	80031b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800319c:	f7ff fade 	bl	800275c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031aa:	d901      	bls.n	80031b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e01f      	b.n	80031f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d1ee      	bne.n	800319c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c4:	f7ff faca 	bl	800275c <HAL_GetTick>
 80031c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031ca:	e009      	b.n	80031e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031cc:	f7ff fac6 	bl	800275c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031da:	d901      	bls.n	80031e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e007      	b.n	80031f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_PWREx_EnableOverDrive+0x98>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ec:	d1ee      	bne.n	80031cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	420e0040 	.word	0x420e0040
 8003200:	40007000 	.word	0x40007000
 8003204:	420e0044 	.word	0x420e0044

08003208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e267      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d075      	beq.n	8003312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003226:	4b88      	ldr	r3, [pc, #544]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b85      	ldr	r3, [pc, #532]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323a:	2b08      	cmp	r3, #8
 800323c:	d112      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b7e      	ldr	r3, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d05b      	beq.n	8003310 <HAL_RCC_OscConfig+0x108>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d157      	bne.n	8003310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e242      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x74>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6f      	ldr	r2, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 80032a0:	4b69      	ldr	r3, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a68      	ldr	r2, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fa4c 	bl	800275c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff fa48 	bl	800275c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e207      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xc0>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff fa38 	bl	800275c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff fa34 	bl	800275c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1f3      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	4b51      	ldr	r3, [pc, #324]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe8>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d063      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d11c      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1c7      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4937      	ldr	r1, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	e03a      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_OscConfig+0x244>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7ff f9ed 	bl	800275c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7ff f9e9 	bl	800275c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1a8      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4925      	ldr	r1, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_OscConfig+0x244>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7ff f9cc 	bl	800275c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c8:	f7ff f9c8 	bl	800275c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e187      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d036      	beq.n	8003460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7ff f9ac 	bl	800275c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003408:	f7ff f9a8 	bl	800275c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e167      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x200>
 8003426:	e01b      	b.n	8003460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7ff f995 	bl	800275c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00e      	b.n	8003454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003436:	f7ff f991 	bl	800275c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d907      	bls.n	8003454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e150      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003448:	40023800 	.word	0x40023800
 800344c:	42470000 	.word	0x42470000
 8003450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ea      	bne.n	8003436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8097 	beq.w	800359c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b77      	ldr	r3, [pc, #476]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b74      	ldr	r3, [pc, #464]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7ff f951 	bl	800275c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7ff f94d 	bl	800275c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e10c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2ea>
 80034e4:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a63      	ldr	r2, [pc, #396]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e01c      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x30c>
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a54      	ldr	r2, [pc, #336]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7ff f912 	bl	800275c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7ff f90e 	bl	800275c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0cb      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <HAL_RCC_OscConfig+0x334>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7ff f8fc 	bl	800275c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7ff f8f8 	bl	800275c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0b5      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ee      	bne.n	8003568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a1 	beq.w	80036e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d05c      	beq.n	800366c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d141      	bne.n	800363e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7ff f8cc 	bl	800275c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7ff f8c8 	bl	800275c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e087      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7ff f8a1 	bl	800275c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7ff f89d 	bl	800275c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e05c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x416>
 800363c:	e054      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7ff f88a 	bl	800275c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7ff f886 	bl	800275c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e038      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	40007000 	.word	0x40007000
 8003680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x4ec>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d028      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0cc      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d90c      	bls.n	8003734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b65      	ldr	r3, [pc, #404]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b8      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800374c:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	494d      	ldr	r1, [pc, #308]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d044      	beq.n	8003818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d119      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e067      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4934      	ldr	r1, [pc, #208]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fe ffb8 	bl	800275c <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fe ffb4 	bl	800275c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d20c      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e032      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4916      	ldr	r1, [pc, #88]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490e      	ldr	r1, [pc, #56]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387e:	f000 f821 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd ffb0 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00
 80038b4:	40023800 	.word	0x40023800
 80038b8:	0800a248 	.word	0x0800a248
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000004 	.word	0x20000004

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b090      	sub	sp, #64	; 0x40
 80038ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
 80038d0:	2300      	movs	r3, #0
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	2300      	movs	r3, #0
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d00d      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x40>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	f200 80a1 	bhi.w	8003a30 <HAL_RCC_GetSysClockFreq+0x16c>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x3a>
 80038f6:	e09b      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x184>)
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038fc:	e09b      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fe:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003902:	e098      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d028      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	627a      	str	r2, [r7, #36]	; 0x24
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800392c:	2100      	movs	r1, #0
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003930:	fb03 f201 	mul.w	r2, r3, r1
 8003934:	2300      	movs	r3, #0
 8003936:	fb00 f303 	mul.w	r3, r0, r3
 800393a:	4413      	add	r3, r2
 800393c:	4a43      	ldr	r2, [pc, #268]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x188>)
 800393e:	fba0 1202 	umull	r1, r2, r0, r2
 8003942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003944:	460a      	mov	r2, r1
 8003946:	62ba      	str	r2, [r7, #40]	; 0x28
 8003948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394a:	4413      	add	r3, r2
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003950:	2200      	movs	r2, #0
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	61fa      	str	r2, [r7, #28]
 8003956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800395a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800395e:	f7fc fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4613      	mov	r3, r2
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396a:	e053      	b.n	8003a14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	617a      	str	r2, [r7, #20]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800397e:	f04f 0b00 	mov.w	fp, #0
 8003982:	4652      	mov	r2, sl
 8003984:	465b      	mov	r3, fp
 8003986:	f04f 0000 	mov.w	r0, #0
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	0159      	lsls	r1, r3, #5
 8003990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003994:	0150      	lsls	r0, r2, #5
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	ebb2 080a 	subs.w	r8, r2, sl
 800399e:	eb63 090b 	sbc.w	r9, r3, fp
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039b6:	ebb2 0408 	subs.w	r4, r2, r8
 80039ba:	eb63 0509 	sbc.w	r5, r3, r9
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	00eb      	lsls	r3, r5, #3
 80039c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039cc:	00e2      	lsls	r2, r4, #3
 80039ce:	4614      	mov	r4, r2
 80039d0:	461d      	mov	r5, r3
 80039d2:	eb14 030a 	adds.w	r3, r4, sl
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	eb45 030b 	adc.w	r3, r5, fp
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ea:	4629      	mov	r1, r5
 80039ec:	028b      	lsls	r3, r1, #10
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f4:	4621      	mov	r1, r4
 80039f6:	028a      	lsls	r2, r1, #10
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	2200      	movs	r2, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	60fa      	str	r2, [r7, #12]
 8003a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a08:	f7fc fc4a 	bl	80002a0 <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3740      	adds	r7, #64	; 0x40
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	00f42400 	.word	0x00f42400
 8003a4c:	017d7840 	.word	0x017d7840

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	0800a258 	.word	0x0800a258

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffdc 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800a258 	.word	0x0800a258

08003ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_GetClockConfig+0x5c>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003afa:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <HAL_RCC_GetClockConfig+0x60>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 020f 	and.w	r2, r3, #15
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40023c00 	.word	0x40023c00

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d075      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b50:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b56:	f7fe fe01 	bl	800275c <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b5e:	f7fe fdfd 	bl	800275c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e189      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b70:	4b8a      	ldr	r3, [pc, #552]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	019a      	lsls	r2, r3, #6
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	071b      	lsls	r3, r3, #28
 8003b94:	4981      	ldr	r1, [pc, #516]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01f      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba8:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	0f1b      	lsrs	r3, r3, #28
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	019a      	lsls	r2, r3, #6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	071b      	lsls	r3, r3, #28
 8003bc8:	4974      	ldr	r1, [pc, #464]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bd0:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd6:	f023 021f 	bic.w	r2, r3, #31
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	496e      	ldr	r1, [pc, #440]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	019a      	lsls	r2, r3, #6
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	061b      	lsls	r3, r3, #24
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	071b      	lsls	r3, r3, #28
 8003c08:	4964      	ldr	r1, [pc, #400]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c10:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c16:	f7fe fda1 	bl	800275c <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c1e:	f7fe fd9d 	bl	800275c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e129      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c30:	4b5a      	ldr	r3, [pc, #360]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d079      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe fd7f 	bl	800275c <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c62:	f7fe fd7b 	bl	800275c <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e107      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c74:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c80:	d0ef      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d020      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0f1b      	lsrs	r3, r3, #28
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	019a      	lsls	r2, r3, #6
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	493b      	ldr	r1, [pc, #236]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cb6:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	4934      	ldr	r1, [pc, #208]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01e      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	019a      	lsls	r2, r3, #6
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	071b      	lsls	r3, r3, #28
 8003cfc:	4927      	ldr	r1, [pc, #156]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4922      	ldr	r1, [pc, #136]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d20:	f7fe fd1c 	bl	800275c <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d28:	f7fe fd18 	bl	800275c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0a4      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d46:	d1ef      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 808b 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d7e:	f7fe fced 	bl	800275c <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d84:	e010      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fe fce9 	bl	800275c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d909      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e075      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003d98:	42470068 	.word	0x42470068
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470070 	.word	0x42470070
 8003da4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003da8:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0e8      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d028      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d114      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fcaf 	bl	800275c <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe fcab 	bl	800275c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e035      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ee      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e32:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	4912      	ldr	r1, [pc, #72]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	608b      	str	r3, [r1, #8]
 8003e4c:	e005      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e58:	6093      	str	r3, [r2, #8]
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003e80:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470e40 	.word	0x42470e40
 8003e98:	424711e0 	.word	0x424711e0

08003e9c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e066      	b.n	8003f80 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7f5b      	ldrb	r3, [r3, #29]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fc48 	bl	8001758 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	22ca      	movs	r2, #202	; 0xca
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2253      	movs	r2, #83	; 0x53
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f87a 	bl	8003fd8 <RTC_EnterInitMode>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d12c      	bne.n	8003f48 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6899      	ldr	r1, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68d2      	ldr	r2, [r2, #12]
 8003f28:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6919      	ldr	r1, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	041a      	lsls	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f881 	bl	8004046 <RTC_ExitInitMode>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	22ff      	movs	r2, #255	; 0xff
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fa4:	f7fe fbda 	bl	800275c <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003faa:	e009      	b.n	8003fc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fac:	f7fe fbd6 	bl	800275c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fba:	d901      	bls.n	8003fc0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e007      	b.n	8003fd0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ee      	beq.n	8003fac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d122      	bne.n	800403c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004004:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004006:	f7fe fba9 	bl	800275c <HAL_GetTick>
 800400a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800400c:	e00c      	b.n	8004028 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800400e:	f7fe fba5 	bl	800275c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401c:	d904      	bls.n	8004028 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <RTC_EnterInitMode+0x64>
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d1e8      	bne.n	800400e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004060:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff89 	bl	8003f88 <HAL_RTC_WaitForSynchro>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e041      	b.n	8004126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd ffb6 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f000 ff42 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d001      	beq.n	8004148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e04e      	b.n	80041e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d01d      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <HAL_TIM_Base_Start_IT+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_TIM_Base_Start_IT+0xd4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_TIM_Base_Start_IT+0xd8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x80>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIM_Base_Start_IT+0xdc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d111      	bne.n	80041d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d010      	beq.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d2:	e007      	b.n	80041e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	40000c00 	.word	0x40000c00
 8004204:	40010400 	.word	0x40010400
 8004208:	40014000 	.word	0x40014000
 800420c:	40001800 	.word	0x40001800

08004210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e041      	b.n	80042a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f839 	bl	80042ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	4619      	mov	r1, r3
 800424e:	4610      	mov	r0, r2
 8004250:	f000 fe82 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIM_PWM_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIM_PWM_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIM_PWM_Start+0x6a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e07c      	b.n	8004430 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0x82>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004344:	e013      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0x92>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	e00b      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004364:	e003      	b.n	800436e <HAL_TIM_PWM_Start+0xaa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa02 	bl	8005780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <HAL_TIM_PWM_Start+0x174>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIM_PWM_Start+0xcc>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_TIM_PWM_Start+0x178>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_TIM_PWM_Start+0xd0>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_TIM_PWM_Start+0xd2>
 8004394:	2300      	movs	r3, #0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a22      	ldr	r2, [pc, #136]	; (8004438 <HAL_TIM_PWM_Start+0x174>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d01d      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <HAL_TIM_PWM_Start+0x17c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_TIM_PWM_Start+0x180>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <HAL_TIM_PWM_Start+0x184>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <HAL_TIM_PWM_Start+0x178>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIM_PWM_Start+0x188>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_TIM_PWM_Start+0x136>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a16      	ldr	r2, [pc, #88]	; (8004450 <HAL_TIM_PWM_Start+0x18c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d111      	bne.n	800441e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b06      	cmp	r3, #6
 800440a:	d010      	beq.n	800442e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	e007      	b.n	800442e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40010000 	.word	0x40010000
 800443c:	40010400 	.word	0x40010400
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40014000 	.word	0x40014000
 8004450:	40001800 	.word	0x40001800

08004454 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f001 f98a 	bl	8005780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_TIM_PWM_Stop+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_PWM_Stop+0x2c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <HAL_TIM_PWM_Stop+0xdc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_TIM_PWM_Stop+0x30>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_TIM_PWM_Stop+0x32>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	f241 1311 	movw	r3, #4369	; 0x1111
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_TIM_PWM_Stop+0x66>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	f240 4344 	movw	r3, #1092	; 0x444
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_PWM_Stop+0x66>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <HAL_TIM_PWM_Stop+0x96>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	f240 4344 	movw	r3, #1092	; 0x444
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_PWM_Stop+0x96>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Stop+0xa6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f8:	e013      	b.n	8004522 <HAL_TIM_PWM_Stop+0xce>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Stop+0xb6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004508:	e00b      	b.n	8004522 <HAL_TIM_PWM_Stop+0xce>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <HAL_TIM_PWM_Stop+0xc6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004518:	e003      	b.n	8004522 <HAL_TIM_PWM_Stop+0xce>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40010000 	.word	0x40010000
 8004530:	40010400 	.word	0x40010400

08004534 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e041      	b.n	80045ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f839 	bl	80045d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fcf0 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_IC_Start_IT+0x1e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e013      	b.n	800462e <HAL_TIM_IC_Start_IT+0x46>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d104      	bne.n	8004616 <HAL_TIM_IC_Start_IT+0x2e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e00b      	b.n	800462e <HAL_TIM_IC_Start_IT+0x46>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d104      	bne.n	8004626 <HAL_TIM_IC_Start_IT+0x3e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e003      	b.n	800462e <HAL_TIM_IC_Start_IT+0x46>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <HAL_TIM_IC_Start_IT+0x58>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e013      	b.n	8004668 <HAL_TIM_IC_Start_IT+0x80>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d104      	bne.n	8004650 <HAL_TIM_IC_Start_IT+0x68>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e00b      	b.n	8004668 <HAL_TIM_IC_Start_IT+0x80>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b08      	cmp	r3, #8
 8004654:	d104      	bne.n	8004660 <HAL_TIM_IC_Start_IT+0x78>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e003      	b.n	8004668 <HAL_TIM_IC_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004666:	b2db      	uxtb	r3, r3
 8004668:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800466a:	7bbb      	ldrb	r3, [r7, #14]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d102      	bne.n	8004676 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004670:	7b7b      	ldrb	r3, [r7, #13]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0cc      	b.n	8004814 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_TIM_IC_Start_IT+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	e013      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0xca>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d104      	bne.n	800469a <HAL_TIM_IC_Start_IT+0xb2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0xca>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d104      	bne.n	80046aa <HAL_TIM_IC_Start_IT+0xc2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_IC_Start_IT+0xca>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Start_IT+0xda>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	e013      	b.n	80046ea <HAL_TIM_IC_Start_IT+0x102>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_IC_Start_IT+0xea>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d0:	e00b      	b.n	80046ea <HAL_TIM_IC_Start_IT+0x102>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_IC_Start_IT+0xfa>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e0:	e003      	b.n	80046ea <HAL_TIM_IC_Start_IT+0x102>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d841      	bhi.n	8004774 <HAL_TIM_IC_Start_IT+0x18c>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_TIM_IC_Start_IT+0x110>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004775 	.word	0x08004775
 8004700:	08004775 	.word	0x08004775
 8004704:	08004775 	.word	0x08004775
 8004708:	0800473f 	.word	0x0800473f
 800470c:	08004775 	.word	0x08004775
 8004710:	08004775 	.word	0x08004775
 8004714:	08004775 	.word	0x08004775
 8004718:	08004751 	.word	0x08004751
 800471c:	08004775 	.word	0x08004775
 8004720:	08004775 	.word	0x08004775
 8004724:	08004775 	.word	0x08004775
 8004728:	08004763 	.word	0x08004763
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0202 	orr.w	r2, r2, #2
 800473a:	60da      	str	r2, [r3, #12]
      break;
 800473c:	e01d      	b.n	800477a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0204 	orr.w	r2, r2, #4
 800474c:	60da      	str	r2, [r3, #12]
      break;
 800474e:	e014      	b.n	800477a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0208 	orr.w	r2, r2, #8
 800475e:	60da      	str	r2, [r3, #12]
      break;
 8004760:	e00b      	b.n	800477a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0210 	orr.w	r2, r2, #16
 8004770:	60da      	str	r2, [r3, #12]
      break;
 8004772:	e002      	b.n	800477a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	bf00      	nop
  }

  if (status == HAL_OK)
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d148      	bne.n	8004812 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fff9 	bl	8005780 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <HAL_TIM_IC_Start_IT+0x234>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d01d      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_TIM_IC_Start_IT+0x238>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <HAL_TIM_IC_Start_IT+0x23c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <HAL_TIM_IC_Start_IT+0x240>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_TIM_IC_Start_IT+0x244>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_TIM_IC_Start_IT+0x248>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIM_IC_Start_IT+0x1f6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_TIM_IC_Start_IT+0x24c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d111      	bne.n	8004802 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d010      	beq.n	8004812 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004800:	e007      	b.n	8004812 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40010000 	.word	0x40010000
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40001800 	.word	0x40001800

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fc f83a 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fb4a 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fb51 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc f810 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb20 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fb27 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fb ffe6 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 faf6 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fafd 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fb ffbc 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 facc 	bl	8004f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fad3 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fc18 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 ff78 	bl	80058d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa98 	bl	8004f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 ff42 	bl	80058c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e088      	b.n	8004b78 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f000 fcb8 	bl	80053f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020c 	bic.w	r2, r2, #12
 8004a96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6999      	ldr	r1, [r3, #24]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	619a      	str	r2, [r3, #24]
 8004aaa:	e060      	b.n	8004b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d11c      	bne.n	8004aec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 fd3c 	bl	800553e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ad4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6999      	ldr	r1, [r3, #24]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	021a      	lsls	r2, r3, #8
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
 8004aea:	e040      	b.n	8004b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d11b      	bne.n	8004b2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 fd89 	bl	8005618 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 020c 	bic.w	r2, r2, #12
 8004b14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	61da      	str	r2, [r3, #28]
 8004b28:	e021      	b.n	8004b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d11c      	bne.n	8004b6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f000 fda6 	bl	8005690 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69d9      	ldr	r1, [r3, #28]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
 8004b68:	e001      	b.n	8004b6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0ae      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	f200 809f 	bhi.w	8004cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004be9 	.word	0x08004be9
 8004bb8:	08004ced 	.word	0x08004ced
 8004bbc:	08004ced 	.word	0x08004ced
 8004bc0:	08004ced 	.word	0x08004ced
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004ced 	.word	0x08004ced
 8004bcc:	08004ced 	.word	0x08004ced
 8004bd0:	08004ced 	.word	0x08004ced
 8004bd4:	08004c6b 	.word	0x08004c6b
 8004bd8:	08004ced 	.word	0x08004ced
 8004bdc:	08004ced 	.word	0x08004ced
 8004be0:	08004ced 	.word	0x08004ced
 8004be4:	08004cab 	.word	0x08004cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fa52 	bl	8005098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0204 	bic.w	r2, r2, #4
 8004c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6999      	ldr	r1, [r3, #24]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	619a      	str	r2, [r3, #24]
      break;
 8004c26:	e064      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 faa2 	bl	8005178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	021a      	lsls	r2, r3, #8
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	619a      	str	r2, [r3, #24]
      break;
 8004c68:	e043      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 faf7 	bl	8005264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0208 	orr.w	r2, r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0204 	bic.w	r2, r2, #4
 8004c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69d9      	ldr	r1, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	61da      	str	r2, [r3, #28]
      break;
 8004ca8:	e023      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fb4b 	bl	800534c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	61da      	str	r2, [r3, #28]
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_ConfigClockSource+0x1c>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e0b4      	b.n	8004e8a <HAL_TIM_ConfigClockSource+0x186>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	d03e      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5e:	f200 8087 	bhi.w	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	f000 8086 	beq.w	8004e76 <HAL_TIM_ConfigClockSource+0x172>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	d87f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b70      	cmp	r3, #112	; 0x70
 8004d72:	d01a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0xa6>
 8004d74:	2b70      	cmp	r3, #112	; 0x70
 8004d76:	d87b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d050      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x11a>
 8004d7c:	2b60      	cmp	r3, #96	; 0x60
 8004d7e:	d877      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b50      	cmp	r3, #80	; 0x50
 8004d82:	d03c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0xfa>
 8004d84:	2b50      	cmp	r3, #80	; 0x50
 8004d86:	d873      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d058      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0x13a>
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d86f      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b30      	cmp	r3, #48	; 0x30
 8004d92:	d064      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d86b      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d060      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d867      	bhi.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d05c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d05a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	e062      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f000 fcc1 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
      break;
 8004dd6:	e04f      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6899      	ldr	r1, [r3, #8]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f000 fcaa 	bl	8005740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfa:	609a      	str	r2, [r3, #8]
      break;
 8004dfc:	e03c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f000 fb68 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2150      	movs	r1, #80	; 0x50
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fc77 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e02c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fbc4 	bl	80055b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2160      	movs	r1, #96	; 0x60
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fc67 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004e3c:	e01c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 fb48 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2140      	movs	r1, #64	; 0x40
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fc57 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e00c      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fc4e 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 8004e6e:	e003      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d831      	bhi.n	8004f0c <HAL_TIM_ReadCapturedValue+0x78>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f0d 	.word	0x08004f0d
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004f0d 	.word	0x08004f0d
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f0d 	.word	0x08004f0d
 8004edc:	08004f0d 	.word	0x08004f0d
 8004ee0:	08004f03 	.word	0x08004f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	60fb      	str	r3, [r7, #12]

      break;
 8004eec:	e00f      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	60fb      	str	r3, [r7, #12]

      break;
 8004ef6:	e00a      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	60fb      	str	r3, [r7, #12]

      break;
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	60fb      	str	r3, [r7, #12]

      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f0c:	bf00      	nop
  }

  return tmpreg;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a40      	ldr	r2, [pc, #256]	; (800506c <TIM_Base_SetConfig+0x114>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3d      	ldr	r2, [pc, #244]	; (8005070 <TIM_Base_SetConfig+0x118>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a3c      	ldr	r2, [pc, #240]	; (8005074 <TIM_Base_SetConfig+0x11c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3b      	ldr	r2, [pc, #236]	; (8005078 <TIM_Base_SetConfig+0x120>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3a      	ldr	r2, [pc, #232]	; (800507c <TIM_Base_SetConfig+0x124>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2f      	ldr	r2, [pc, #188]	; (800506c <TIM_Base_SetConfig+0x114>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d027      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <TIM_Base_SetConfig+0x118>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d023      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	; (8005074 <TIM_Base_SetConfig+0x11c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01f      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <TIM_Base_SetConfig+0x120>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_Base_SetConfig+0x124>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d017      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a28      	ldr	r2, [pc, #160]	; (8005080 <TIM_Base_SetConfig+0x128>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a26      	ldr	r2, [pc, #152]	; (8005088 <TIM_Base_SetConfig+0x130>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a25      	ldr	r2, [pc, #148]	; (800508c <TIM_Base_SetConfig+0x134>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a24      	ldr	r2, [pc, #144]	; (8005090 <TIM_Base_SetConfig+0x138>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <TIM_Base_SetConfig+0x13c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a0a      	ldr	r2, [pc, #40]	; (800506c <TIM_Base_SetConfig+0x114>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a0c      	ldr	r2, [pc, #48]	; (800507c <TIM_Base_SetConfig+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d103      	bne.n	8005058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	615a      	str	r2, [r3, #20]
}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400
 8005088:	40014800 	.word	0x40014800
 800508c:	40001800 	.word	0x40001800
 8005090:	40001c00 	.word	0x40001c00
 8005094:	40002000 	.word	0x40002000

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0302 	bic.w	r3, r3, #2
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a20      	ldr	r2, [pc, #128]	; (8005170 <TIM_OC1_SetConfig+0xd8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC1_SetConfig+0x64>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <TIM_OC1_SetConfig+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0308 	bic.w	r3, r3, #8
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <TIM_OC1_SetConfig+0xd8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC1_SetConfig+0x8e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a14      	ldr	r2, [pc, #80]	; (8005174 <TIM_OC1_SetConfig+0xdc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d111      	bne.n	800514a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0210 	bic.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f023 0320 	bic.w	r3, r3, #32
 80051c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a22      	ldr	r2, [pc, #136]	; (800525c <TIM_OC2_SetConfig+0xe4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC2_SetConfig+0x68>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <TIM_OC2_SetConfig+0xe8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d10d      	bne.n	80051fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <TIM_OC2_SetConfig+0xe4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC2_SetConfig+0x94>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	; (8005260 <TIM_OC2_SetConfig+0xe8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d113      	bne.n	8005234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	40010000 	.word	0x40010000
 8005260:	40010400 	.word	0x40010400

08005264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a21      	ldr	r2, [pc, #132]	; (8005344 <TIM_OC3_SetConfig+0xe0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_OC3_SetConfig+0x66>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <TIM_OC3_SetConfig+0xe4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10d      	bne.n	80052e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a16      	ldr	r2, [pc, #88]	; (8005344 <TIM_OC3_SetConfig+0xe0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC3_SetConfig+0x92>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <TIM_OC3_SetConfig+0xe4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d113      	bne.n	800531e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <TIM_OC4_SetConfig+0xa4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC4_SetConfig+0x68>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <TIM_OC4_SetConfig+0xa8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40010400 	.word	0x40010400

080053f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a28      	ldr	r2, [pc, #160]	; (80054c4 <TIM_TI1_SetConfig+0xcc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01b      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d017      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <TIM_TI1_SetConfig+0xd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a24      	ldr	r2, [pc, #144]	; (80054cc <TIM_TI1_SetConfig+0xd4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a23      	ldr	r2, [pc, #140]	; (80054d0 <TIM_TI1_SetConfig+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <TIM_TI1_SetConfig+0xdc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <TIM_TI1_SetConfig+0xe0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_TI1_SetConfig+0x66>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a20      	ldr	r2, [pc, #128]	; (80054dc <TIM_TI1_SetConfig+0xe4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <TIM_TI1_SetConfig+0x6a>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <TIM_TI1_SetConfig+0x6c>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f023 0303 	bic.w	r3, r3, #3
 800546e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e003      	b.n	8005482 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	b2db      	uxtb	r3, r3
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f023 030a 	bic.w	r3, r3, #10
 800549c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f003 030a 	and.w	r3, r3, #10
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40001800 	.word	0x40001800

080054e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 030a 	bic.w	r3, r3, #10
 800551c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 0210 	bic.w	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	b29b      	uxth	r3, r3
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f023 0210 	bic.w	r2, r3, #16
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	031b      	lsls	r3, r3, #12
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 0303 	bic.w	r3, r3, #3
 8005644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	b2db      	uxtb	r3, r3
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	031b      	lsls	r3, r3, #12
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	031b      	lsls	r3, r3, #12
 80056e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2201      	movs	r2, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e05a      	b.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005830:	d01d      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1b      	ldr	r2, [pc, #108]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a17      	ldr	r2, [pc, #92]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10c      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4313      	orrs	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40010400 	.word	0x40010400
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40001800 	.word	0x40001800

080058c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e03f      	b.n	800597e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fc fda0 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800592e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fddf 	bl	80064f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b08a      	sub	sp, #40	; 0x28
 800598a:	af02      	add	r7, sp, #8
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d17c      	bne.n	8005aa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_UART_Transmit+0x2c>
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e075      	b.n	8005aa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_UART_Transmit+0x3e>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e06e      	b.n	8005aa2 <HAL_UART_Transmit+0x11c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2221      	movs	r2, #33	; 0x21
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059da:	f7fc febf 	bl	800275c <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d108      	bne.n	8005a08 <HAL_UART_Transmit+0x82>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	e003      	b.n	8005a10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a18:	e02a      	b.n	8005a70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2200      	movs	r2, #0
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fb1f 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e036      	b.n	8005aa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e007      	b.n	8005a62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1cf      	bne.n	8005a1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2140      	movs	r1, #64	; 0x40
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 faef 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e006      	b.n	8005aa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d11d      	bne.n	8005b00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_UART_Receive_IT+0x26>
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e016      	b.n	8005b02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Receive_IT+0x38>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e00f      	b.n	8005b02 <HAL_UART_Receive_IT+0x58>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	461a      	mov	r2, r3
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fb24 	bl	8006144 <UART_Start_Receive_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0ba      	sub	sp, #232	; 0xe8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_UART_IRQHandler+0x66>
 8005b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fc07 	bl	800637e <UART_Receive_IT>
      return;
 8005b70:	e256      	b.n	8006020 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80de 	beq.w	8005d38 <HAL_UART_IRQHandler+0x22c>
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d106      	bne.n	8005b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80d1 	beq.w	8005d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <HAL_UART_IRQHandler+0xae>
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_UART_IRQHandler+0xd2>
 8005bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0202 	orr.w	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_UART_IRQHandler+0xf6>
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0204 	orr.w	r2, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d011      	beq.n	8005c32 <HAL_UART_IRQHandler+0x126>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d105      	bne.n	8005c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f043 0208 	orr.w	r2, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 81ed 	beq.w	8006016 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <HAL_UART_IRQHandler+0x14e>
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb92 	bl	800637e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d103      	bne.n	8005c86 <HAL_UART_IRQHandler+0x17a>
 8005c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d04f      	beq.n	8005d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa9a 	bl	80061c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d141      	bne.n	8005d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3314      	adds	r3, #20
 8005ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1d9      	bne.n	8005c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d013      	beq.n	8005d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	4a7d      	ldr	r2, [pc, #500]	; (8005ee8 <HAL_UART_IRQHandler+0x3dc>)
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fc fe8c 	bl	8002a18 <HAL_DMA_Abort_IT>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d016      	beq.n	8005d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	e00e      	b.n	8005d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f990 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e00a      	b.n	8005d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f98c 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	e006      	b.n	8005d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f988 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d32:	e170      	b.n	8006016 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	bf00      	nop
    return;
 8005d36:	e16e      	b.n	8006016 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f040 814a 	bne.w	8005fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8143 	beq.w	8005fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 813c 	beq.w	8005fd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	f040 80b4 	bne.w	8005eec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8140 	beq.w	800601a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005da2:	429a      	cmp	r2, r3
 8005da4:	f080 8139 	bcs.w	800601a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	f000 8088 	beq.w	8005ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1d9      	bne.n	8005dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e1      	bne.n	8005e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e3      	bne.n	8005e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	330c      	adds	r3, #12
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9e:	f023 0310 	bic.w	r3, r3, #16
 8005ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e3      	bne.n	8005e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fc fd35 	bl	8002938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f8b6 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ee4:	e099      	b.n	800601a <HAL_UART_IRQHandler+0x50e>
 8005ee6:	bf00      	nop
 8005ee8:	08006287 	.word	0x08006287
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 808b 	beq.w	800601e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8086 	beq.w	800601e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f36:	647a      	str	r2, [r7, #68]	; 0x44
 8005f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e3      	bne.n	8005f12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3314      	adds	r3, #20
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e3      	bne.n	8005f4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005fb4:	61fa      	str	r2, [r7, #28]
 8005fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	69b9      	ldr	r1, [r7, #24]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e3      	bne.n	8005f90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f83e 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fd4:	e023      	b.n	800601e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x4ea>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f95d 	bl	80062ae <UART_Transmit_IT>
    return;
 8005ff4:	e014      	b.n	8006020 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <HAL_UART_IRQHandler+0x514>
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f99d 	bl	800634e <UART_EndTransmit_IT>
    return;
 8006014:	e004      	b.n	8006020 <HAL_UART_IRQHandler+0x514>
    return;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <HAL_UART_IRQHandler+0x514>
      return;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HAL_UART_IRQHandler+0x514>
      return;
 800601e:	bf00      	nop
  }
}
 8006020:	37e8      	adds	r7, #232	; 0xe8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop

08006028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b090      	sub	sp, #64	; 0x40
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	e050      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d04c      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
 8006088:	f7fc fb68 	bl	800275c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006094:	429a      	cmp	r2, r3
 8006096:	d241      	bcs.n	800611c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b8:	637a      	str	r2, [r7, #52]	; 0x34
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ec:	623a      	str	r2, [r7, #32]
 80060ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	6a3a      	ldr	r2, [r7, #32]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e00f      	b.n	800613c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	429a      	cmp	r2, r3
 8006138:	d09f      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3740      	adds	r7, #64	; 0x40
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2222      	movs	r2, #34	; 0x22
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006190:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695a      	ldr	r2, [r3, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0220 	orr.w	r2, r2, #32
 80061b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b095      	sub	sp, #84	; 0x54
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061e8:	643a      	str	r2, [r7, #64]	; 0x40
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e5      	bne.n	80061c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	61fb      	str	r3, [r7, #28]
   return(result);
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	64bb      	str	r3, [r7, #72]	; 0x48
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800621e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	2b01      	cmp	r3, #1
 8006236:	d119      	bne.n	800626c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	330c      	adds	r3, #12
 800623e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	60bb      	str	r3, [r7, #8]
   return(result);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0310 	bic.w	r3, r3, #16
 800624e:	647b      	str	r3, [r7, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006258:	61ba      	str	r2, [r7, #24]
 800625a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6979      	ldr	r1, [r7, #20]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	613b      	str	r3, [r7, #16]
   return(result);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
}
 800627a:	bf00      	nop
 800627c:	3754      	adds	r7, #84	; 0x54
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff fecb 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b21      	cmp	r3, #33	; 0x21
 80062c0:	d13e      	bne.n	8006340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	d114      	bne.n	80062f6 <UART_Transmit_IT+0x48>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d110      	bne.n	80062f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]
 80062f4:	e008      	b.n	8006308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6211      	str	r1, [r2, #32]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10f      	bne.n	800633c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800632a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800633a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e000      	b.n	8006342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fe5a 	bl	8006028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b08c      	sub	sp, #48	; 0x30
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b22      	cmp	r3, #34	; 0x22
 8006390:	f040 80ab 	bne.w	80064ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d117      	bne.n	80063ce <UART_Receive_IT+0x50>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d113      	bne.n	80063ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	b29a      	uxth	r2, r3
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28
 80063cc:	e026      	b.n	800641c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	d007      	beq.n	80063f2 <UART_Receive_IT+0x74>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <UART_Receive_IT+0x82>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e008      	b.n	8006412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640c:	b2da      	uxtb	r2, r3
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4619      	mov	r1, r3
 800642a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800642c:	2b00      	cmp	r3, #0
 800642e:	d15a      	bne.n	80064e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0220 	bic.w	r2, r2, #32
 800643e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800644e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	d135      	bne.n	80064dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	613b      	str	r3, [r7, #16]
   return(result);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f023 0310 	bic.w	r3, r3, #16
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	330c      	adds	r3, #12
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	623a      	str	r2, [r7, #32]
 8006498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e5      	bne.n	8006476 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d10a      	bne.n	80064ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fdbb 	bl	8006050 <HAL_UARTEx_RxEventCallback>
 80064da:	e002      	b.n	80064e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fa f9c5 	bl	800086c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e002      	b.n	80064ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3730      	adds	r7, #48	; 0x30
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b0c0      	sub	sp, #256	; 0x100
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	68d9      	ldr	r1, [r3, #12]
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	ea40 0301 	orr.w	r3, r0, r1
 800651c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	431a      	orrs	r2, r3
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800654c:	f021 010c 	bic.w	r1, r1, #12
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800655a:	430b      	orrs	r3, r1
 800655c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800655e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	6999      	ldr	r1, [r3, #24]
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	ea40 0301 	orr.w	r3, r0, r1
 800657a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	4b8f      	ldr	r3, [pc, #572]	; (80067c0 <UART_SetConfig+0x2cc>)
 8006584:	429a      	cmp	r2, r3
 8006586:	d005      	beq.n	8006594 <UART_SetConfig+0xa0>
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b8d      	ldr	r3, [pc, #564]	; (80067c4 <UART_SetConfig+0x2d0>)
 8006590:	429a      	cmp	r2, r3
 8006592:	d104      	bne.n	800659e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006594:	f7fd fa7c 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8006598:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800659c:	e003      	b.n	80065a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800659e:	f7fd fa63 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 80065a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	f040 810c 	bne.w	80067cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80065ce:	415b      	adcs	r3, r3
 80065d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065d6:	4621      	mov	r1, r4
 80065d8:	eb12 0801 	adds.w	r8, r2, r1
 80065dc:	4629      	mov	r1, r5
 80065de:	eb43 0901 	adc.w	r9, r3, r1
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065f6:	4690      	mov	r8, r2
 80065f8:	4699      	mov	r9, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	eb18 0303 	adds.w	r3, r8, r3
 8006600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006604:	462b      	mov	r3, r5
 8006606:	eb49 0303 	adc.w	r3, r9, r3
 800660a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800661a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800661e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006622:	460b      	mov	r3, r1
 8006624:	18db      	adds	r3, r3, r3
 8006626:	653b      	str	r3, [r7, #80]	; 0x50
 8006628:	4613      	mov	r3, r2
 800662a:	eb42 0303 	adc.w	r3, r2, r3
 800662e:	657b      	str	r3, [r7, #84]	; 0x54
 8006630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006638:	f7f9 fe32 	bl	80002a0 <__aeabi_uldivmod>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4b61      	ldr	r3, [pc, #388]	; (80067c8 <UART_SetConfig+0x2d4>)
 8006642:	fba3 2302 	umull	r2, r3, r3, r2
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	011c      	lsls	r4, r3, #4
 800664a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006654:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	64b9      	str	r1, [r7, #72]	; 0x48
 8006664:	415b      	adcs	r3, r3
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800666c:	4641      	mov	r1, r8
 800666e:	eb12 0a01 	adds.w	sl, r2, r1
 8006672:	4649      	mov	r1, r9
 8006674:	eb43 0b01 	adc.w	fp, r3, r1
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800668c:	4692      	mov	sl, r2
 800668e:	469b      	mov	fp, r3
 8006690:	4643      	mov	r3, r8
 8006692:	eb1a 0303 	adds.w	r3, sl, r3
 8006696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800669a:	464b      	mov	r3, r9
 800669c:	eb4b 0303 	adc.w	r3, fp, r3
 80066a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066b8:	460b      	mov	r3, r1
 80066ba:	18db      	adds	r3, r3, r3
 80066bc:	643b      	str	r3, [r7, #64]	; 0x40
 80066be:	4613      	mov	r3, r2
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
 80066c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066ce:	f7f9 fde7 	bl	80002a0 <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	4b3b      	ldr	r3, [pc, #236]	; (80067c8 <UART_SetConfig+0x2d4>)
 80066da:	fba3 2301 	umull	r2, r3, r3, r1
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	2264      	movs	r2, #100	; 0x64
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	1acb      	subs	r3, r1, r3
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <UART_SetConfig+0x2d4>)
 80066f0:	fba3 2302 	umull	r2, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006708:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800670c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	63b9      	str	r1, [r7, #56]	; 0x38
 8006718:	415b      	adcs	r3, r3
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800671c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006720:	4641      	mov	r1, r8
 8006722:	1851      	adds	r1, r2, r1
 8006724:	6339      	str	r1, [r7, #48]	; 0x30
 8006726:	4649      	mov	r1, r9
 8006728:	414b      	adcs	r3, r1
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006738:	4659      	mov	r1, fp
 800673a:	00cb      	lsls	r3, r1, #3
 800673c:	4651      	mov	r1, sl
 800673e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006742:	4651      	mov	r1, sl
 8006744:	00ca      	lsls	r2, r1, #3
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	4603      	mov	r3, r0
 800674c:	4642      	mov	r2, r8
 800674e:	189b      	adds	r3, r3, r2
 8006750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006754:	464b      	mov	r3, r9
 8006756:	460a      	mov	r2, r1
 8006758:	eb42 0303 	adc.w	r3, r2, r3
 800675c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800676c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006774:	460b      	mov	r3, r1
 8006776:	18db      	adds	r3, r3, r3
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
 800677a:	4613      	mov	r3, r2
 800677c:	eb42 0303 	adc.w	r3, r2, r3
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800678a:	f7f9 fd89 	bl	80002a0 <__aeabi_uldivmod>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <UART_SetConfig+0x2d4>)
 8006794:	fba3 1302 	umull	r1, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	2164      	movs	r1, #100	; 0x64
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3332      	adds	r3, #50	; 0x32
 80067a6:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <UART_SetConfig+0x2d4>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f003 0207 	and.w	r2, r3, #7
 80067b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4422      	add	r2, r4
 80067ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067bc:	e105      	b.n	80069ca <UART_SetConfig+0x4d6>
 80067be:	bf00      	nop
 80067c0:	40011000 	.word	0x40011000
 80067c4:	40011400 	.word	0x40011400
 80067c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d0:	2200      	movs	r2, #0
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067de:	4642      	mov	r2, r8
 80067e0:	464b      	mov	r3, r9
 80067e2:	1891      	adds	r1, r2, r2
 80067e4:	6239      	str	r1, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	4641      	mov	r1, r8
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	4649      	mov	r1, r9
 80067f4:	eb43 0501 	adc.w	r5, r3, r1
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	00eb      	lsls	r3, r5, #3
 8006802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006806:	00e2      	lsls	r2, r4, #3
 8006808:	4614      	mov	r4, r2
 800680a:	461d      	mov	r5, r3
 800680c:	4643      	mov	r3, r8
 800680e:	18e3      	adds	r3, r4, r3
 8006810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006814:	464b      	mov	r3, r9
 8006816:	eb45 0303 	adc.w	r3, r5, r3
 800681a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800682a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800683a:	4629      	mov	r1, r5
 800683c:	008b      	lsls	r3, r1, #2
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006844:	4621      	mov	r1, r4
 8006846:	008a      	lsls	r2, r1, #2
 8006848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800684c:	f7f9 fd28 	bl	80002a0 <__aeabi_uldivmod>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4b60      	ldr	r3, [pc, #384]	; (80069d8 <UART_SetConfig+0x4e4>)
 8006856:	fba3 2302 	umull	r2, r3, r3, r2
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	011c      	lsls	r4, r3, #4
 800685e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006862:	2200      	movs	r2, #0
 8006864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006868:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800686c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006870:	4642      	mov	r2, r8
 8006872:	464b      	mov	r3, r9
 8006874:	1891      	adds	r1, r2, r2
 8006876:	61b9      	str	r1, [r7, #24]
 8006878:	415b      	adcs	r3, r3
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006880:	4641      	mov	r1, r8
 8006882:	1851      	adds	r1, r2, r1
 8006884:	6139      	str	r1, [r7, #16]
 8006886:	4649      	mov	r1, r9
 8006888:	414b      	adcs	r3, r1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006898:	4659      	mov	r1, fp
 800689a:	00cb      	lsls	r3, r1, #3
 800689c:	4651      	mov	r1, sl
 800689e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a2:	4651      	mov	r1, sl
 80068a4:	00ca      	lsls	r2, r1, #3
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	4642      	mov	r2, r8
 80068ae:	189b      	adds	r3, r3, r2
 80068b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068b4:	464b      	mov	r3, r9
 80068b6:	460a      	mov	r2, r1
 80068b8:	eb42 0303 	adc.w	r3, r2, r3
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068d8:	4649      	mov	r1, r9
 80068da:	008b      	lsls	r3, r1, #2
 80068dc:	4641      	mov	r1, r8
 80068de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e2:	4641      	mov	r1, r8
 80068e4:	008a      	lsls	r2, r1, #2
 80068e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ea:	f7f9 fcd9 	bl	80002a0 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <UART_SetConfig+0x4e4>)
 80068f4:	fba3 1302 	umull	r1, r3, r3, r2
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	2164      	movs	r1, #100	; 0x64
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	3332      	adds	r3, #50	; 0x32
 8006906:	4a34      	ldr	r2, [pc, #208]	; (80069d8 <UART_SetConfig+0x4e4>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006912:	441c      	add	r4, r3
 8006914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006918:	2200      	movs	r2, #0
 800691a:	673b      	str	r3, [r7, #112]	; 0x70
 800691c:	677a      	str	r2, [r7, #116]	; 0x74
 800691e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006922:	4642      	mov	r2, r8
 8006924:	464b      	mov	r3, r9
 8006926:	1891      	adds	r1, r2, r2
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	415b      	adcs	r3, r3
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006932:	4641      	mov	r1, r8
 8006934:	1851      	adds	r1, r2, r1
 8006936:	6039      	str	r1, [r7, #0]
 8006938:	4649      	mov	r1, r9
 800693a:	414b      	adcs	r3, r1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800694a:	4659      	mov	r1, fp
 800694c:	00cb      	lsls	r3, r1, #3
 800694e:	4651      	mov	r1, sl
 8006950:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006954:	4651      	mov	r1, sl
 8006956:	00ca      	lsls	r2, r1, #3
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	4603      	mov	r3, r0
 800695e:	4642      	mov	r2, r8
 8006960:	189b      	adds	r3, r3, r2
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
 8006964:	464b      	mov	r3, r9
 8006966:	460a      	mov	r2, r1
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	663b      	str	r3, [r7, #96]	; 0x60
 8006978:	667a      	str	r2, [r7, #100]	; 0x64
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006986:	4649      	mov	r1, r9
 8006988:	008b      	lsls	r3, r1, #2
 800698a:	4641      	mov	r1, r8
 800698c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006990:	4641      	mov	r1, r8
 8006992:	008a      	lsls	r2, r1, #2
 8006994:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006998:	f7f9 fc82 	bl	80002a0 <__aeabi_uldivmod>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4b0d      	ldr	r3, [pc, #52]	; (80069d8 <UART_SetConfig+0x4e4>)
 80069a2:	fba3 1302 	umull	r1, r3, r3, r2
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	2164      	movs	r1, #100	; 0x64
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	3332      	adds	r3, #50	; 0x32
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <UART_SetConfig+0x4e4>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4422      	add	r2, r4
 80069c8:	609a      	str	r2, [r3, #8]
}
 80069ca:	bf00      	nop
 80069cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	51eb851f 	.word	0x51eb851f

080069dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80069ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ee:	2b84      	cmp	r3, #132	; 0x84
 80069f0:	d005      	beq.n	80069fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80069f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	3303      	adds	r3, #3
 80069fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80069fe:	68fb      	ldr	r3, [r7, #12]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a10:	f001 f82a 	bl	8007a68 <vTaskStartScheduler>
  
  return osOK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1c:	b089      	sub	sp, #36	; 0x24
 8006a1e:	af04      	add	r7, sp, #16
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d020      	beq.n	8006a6e <osThreadCreate+0x54>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685c      	ldr	r4, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681d      	ldr	r5, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691e      	ldr	r6, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff ffc8 	bl	80069dc <makeFreeRtosPriority>
 8006a4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a56:	9202      	str	r2, [sp, #8]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	9100      	str	r1, [sp, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	4632      	mov	r2, r6
 8006a60:	4629      	mov	r1, r5
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 fe22 	bl	80076ac <xTaskCreateStatic>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	e01c      	b.n	8006aa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685c      	ldr	r4, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006a7a:	b29e      	uxth	r6, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff ffaa 	bl	80069dc <makeFreeRtosPriority>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	9200      	str	r2, [sp, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	4632      	mov	r2, r6
 8006a96:	4629      	mov	r1, r5
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fe64 	bl	8007766 <xTaskCreate>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ab2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <osDelay+0x16>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	e000      	b.n	8006aca <osDelay+0x18>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 ff98 	bl	8007a00 <vTaskDelay>
  
  return osOK;
 8006ad0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af02      	add	r7, sp, #8
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00f      	beq.n	8006b0c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10a      	bne.n	8006b08 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2203      	movs	r2, #3
 8006af8:	9200      	str	r2, [sp, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	2100      	movs	r1, #0
 8006afe:	2001      	movs	r0, #1
 8006b00:	f000 f962 	bl	8006dc8 <xQueueGenericCreateStatic>
 8006b04:	4603      	mov	r3, r0
 8006b06:	e016      	b.n	8006b36 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e014      	b.n	8006b36 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d110      	bne.n	8006b34 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006b12:	2203      	movs	r2, #3
 8006b14:	2100      	movs	r1, #0
 8006b16:	2001      	movs	r0, #1
 8006b18:	f000 f9ce 	bl	8006eb8 <xQueueGenericCreate>
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <osSemaphoreCreate+0x56>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fa1e 	bl	8006f6c <xQueueGenericSend>
      return sema;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	e000      	b.n	8006b36 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006b34:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006b3e:	b590      	push	{r4, r7, lr}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d011      	beq.n	8006b74 <osMessageCreate+0x36>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2400      	movs	r4, #0
 8006b6a:	9400      	str	r4, [sp, #0]
 8006b6c:	f000 f92c 	bl	8006dc8 <xQueueGenericCreateStatic>
 8006b70:	4603      	mov	r3, r0
 8006b72:	e008      	b.n	8006b86 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4619      	mov	r1, r3
 8006b80:	f000 f99a 	bl	8006eb8 <xQueueGenericCreate>
 8006b84:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd90      	pop	{r4, r7, pc}

08006b8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f103 0208 	add.w	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f103 0208 	add.w	r2, r3, #8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f103 0208 	add.w	r2, r3, #8
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c46:	d103      	bne.n	8006c50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e00c      	b.n	8006c6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3308      	adds	r3, #8
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e002      	b.n	8006c5e <vListInsert+0x2e>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d2f6      	bcs.n	8006c58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6892      	ldr	r2, [r2, #8]
 8006cb8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6852      	ldr	r2, [r2, #4]
 8006cc2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d103      	bne.n	8006cd6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
	...

08006cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d22:	f001 fce7 	bl	80086f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	68f9      	ldr	r1, [r7, #12]
 8006d30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d52:	3b01      	subs	r3, #1
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	441a      	add	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	22ff      	movs	r2, #255	; 0xff
 8006d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	22ff      	movs	r2, #255	; 0xff
 8006d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d114      	bne.n	8006da2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01a      	beq.n	8006db6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3310      	adds	r3, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f8c1 	bl	8007f0c <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d012      	beq.n	8006db6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d90:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <xQueueGenericReset+0xcc>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	e009      	b.n	8006db6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3310      	adds	r3, #16
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fef1 	bl	8006b8e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3324      	adds	r3, #36	; 0x24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff feec 	bl	8006b8e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006db6:	f001 fccd 	bl	8008754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006dba:	2301      	movs	r3, #1
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08e      	sub	sp, #56	; 0x38
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <xQueueGenericCreateStatic+0x52>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <xQueueGenericCreateStatic+0x56>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueGenericCreateStatic+0x58>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	623b      	str	r3, [r7, #32]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <xQueueGenericCreateStatic+0x7e>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <xQueueGenericCreateStatic+0x82>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <xQueueGenericCreateStatic+0x84>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	61fb      	str	r3, [r7, #28]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e66:	2348      	movs	r3, #72	; 0x48
 8006e68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b48      	cmp	r3, #72	; 0x48
 8006e6e:	d00a      	beq.n	8006e86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	61bb      	str	r3, [r7, #24]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f83f 	bl	8006f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3730      	adds	r7, #48	; 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	613b      	str	r3, [r7, #16]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3348      	adds	r3, #72	; 0x48
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fd21 	bl	8008938 <pvPortMalloc>
 8006ef6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d011      	beq.n	8006f22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3348      	adds	r3, #72	; 0x48
 8006f06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f10:	79fa      	ldrb	r2, [r7, #7]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f805 	bl	8006f2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f22:	69bb      	ldr	r3, [r7, #24]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	69b8      	ldr	r0, [r7, #24]
 8006f5e:	f7ff fecb 	bl	8006cf8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	; 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericSend+0x32>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <xQueueGenericSend+0x40>
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <xQueueGenericSend+0x44>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <xQueueGenericSend+0x46>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <xQueueGenericSend+0x60>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d103      	bne.n	8006fda <xQueueGenericSend+0x6e>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <xQueueGenericSend+0x72>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <xQueueGenericSend+0x74>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <xQueueGenericSend+0x8e>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	623b      	str	r3, [r7, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ffa:	f001 f947 	bl	800828c <xTaskGetSchedulerState>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <xQueueGenericSend+0x9e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <xQueueGenericSend+0xa2>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <xQueueGenericSend+0xa4>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <xQueueGenericSend+0xbe>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	61fb      	str	r3, [r7, #28]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800702a:	f001 fb63 	bl	80086f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <xQueueGenericSend+0xd4>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d129      	bne.n	8007094 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007046:	f000 fa37 	bl	80074b8 <prvCopyDataToQueue>
 800704a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d010      	beq.n	8007076 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	3324      	adds	r3, #36	; 0x24
 8007058:	4618      	mov	r0, r3
 800705a:	f000 ff57 	bl	8007f0c <xTaskRemoveFromEventList>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d013      	beq.n	800708c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <xQueueGenericSend+0x1f8>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	e00a      	b.n	800708c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800707c:	4b39      	ldr	r3, [pc, #228]	; (8007164 <xQueueGenericSend+0x1f8>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800708c:	f001 fb62 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8007090:	2301      	movs	r3, #1
 8007092:	e063      	b.n	800715c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800709a:	f001 fb5b 	bl	8008754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	e05c      	b.n	800715c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070a8:	f107 0314 	add.w	r3, r7, #20
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 ff8f 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070b6:	f001 fb4d 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070ba:	f000 fd3f 	bl	8007b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070be:	f001 fb19 	bl	80086f4 <vPortEnterCritical>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d103      	bne.n	80070d8 <xQueueGenericSend+0x16c>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d103      	bne.n	80070ee <xQueueGenericSend+0x182>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070ee:	f001 fb31 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070f2:	1d3a      	adds	r2, r7, #4
 80070f4:	f107 0314 	add.w	r3, r7, #20
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 ff7e 	bl	8007ffc <xTaskCheckForTimeOut>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d124      	bne.n	8007150 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007108:	f000 fab8 	bl	800767c <prvIsQueueFull>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d018      	beq.n	8007144 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	3310      	adds	r3, #16
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4611      	mov	r1, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fed2 	bl	8007ec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007122:	f000 fa59 	bl	80075d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007126:	f000 fd17 	bl	8007b58 <xTaskResumeAll>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	f47f af7c 	bne.w	800702a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <xQueueGenericSend+0x1f8>)
 8007134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	e772      	b.n	800702a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007146:	f000 fa47 	bl	80075d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800714a:	f000 fd05 	bl	8007b58 <xTaskResumeAll>
 800714e:	e76c      	b.n	800702a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007152:	f000 fa41 	bl	80075d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007156:	f000 fcff 	bl	8007b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800715a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800715c:	4618      	mov	r0, r3
 800715e:	3738      	adds	r7, #56	; 0x38
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	e000ed04 	.word	0xe000ed04

08007168 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b090      	sub	sp, #64	; 0x40
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <xQueueGenericSendFromISR+0x3c>
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueGenericSendFromISR+0x40>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueGenericSendFromISR+0x42>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d103      	bne.n	80071d2 <xQueueGenericSendFromISR+0x6a>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <xQueueGenericSendFromISR+0x6e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueGenericSendFromISR+0x70>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	623b      	str	r3, [r7, #32]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f001 fb61 	bl	80088b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071f6:	f3ef 8211 	mrs	r2, BASEPRI
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61fa      	str	r2, [r7, #28]
 800720c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800720e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <xQueueGenericSendFromISR+0xbc>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d12f      	bne.n	8007284 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800722a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800723a:	f000 f93d 	bl	80074b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800723e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d112      	bne.n	800726e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	d016      	beq.n	800727e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	3324      	adds	r3, #36	; 0x24
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fe59 	bl	8007f0c <xTaskRemoveFromEventList>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e007      	b.n	800727e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800726e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007272:	3301      	adds	r3, #1
 8007274:	b2db      	uxtb	r3, r3
 8007276:	b25a      	sxtb	r2, r3
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800727e:	2301      	movs	r3, #1
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007282:	e001      	b.n	8007288 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007284:	2300      	movs	r3, #0
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007296:	4618      	mov	r0, r3
 8007298:	3740      	adds	r7, #64	; 0x40
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b08e      	sub	sp, #56	; 0x38
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	623b      	str	r3, [r7, #32]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	61fb      	str	r3, [r7, #28]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <xQueueGiveFromISR+0x58>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xQueueGiveFromISR+0x5c>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGiveFromISR+0x5e>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	61bb      	str	r3, [r7, #24]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007316:	f001 facf 	bl	80088b8 <vPortValidateInterruptPriority>
	__asm volatile
 800731a:	f3ef 8211 	mrs	r2, BASEPRI
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	617a      	str	r2, [r7, #20]
 8007330:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007332:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007334:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007342:	429a      	cmp	r2, r3
 8007344:	d22b      	bcs.n	800739e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d112      	bne.n	8007388 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	3324      	adds	r3, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fdcc 	bl	8007f0c <xTaskRemoveFromEventList>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e007      	b.n	8007398 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800738c:	3301      	adds	r3, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	b25a      	sxtb	r2, r3
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007398:	2301      	movs	r3, #1
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
 800739c:	e001      	b.n	80073a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f383 8811 	msr	BASEPRI, r3
}
 80073ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3738      	adds	r7, #56	; 0x38
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08e      	sub	sp, #56	; 0x38
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	623b      	str	r3, [r7, #32]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <xQueueReceiveFromISR+0x3a>
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueReceiveFromISR+0x3e>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueReceiveFromISR+0x40>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61fb      	str	r3, [r7, #28]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007412:	f001 fa51 	bl	80088b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007416:	f3ef 8211 	mrs	r2, BASEPRI
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	61ba      	str	r2, [r7, #24]
 800742c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800742e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d02f      	beq.n	800749e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800744c:	f000 f89e 	bl	800758c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	1e5a      	subs	r2, r3, #1
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d112      	bne.n	8007488 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800746a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746c:	3310      	adds	r3, #16
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fd4c 	bl	8007f0c <xTaskRemoveFromEventList>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00e      	beq.n	8007498 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	e007      	b.n	8007498 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748c:	3301      	adds	r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	b25a      	sxtb	r2, r3
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007498:	2301      	movs	r3, #1
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	e001      	b.n	80074a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f383 8811 	msr	BASEPRI, r3
}
 80074ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3738      	adds	r7, #56	; 0x38
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10d      	bne.n	80074f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d14d      	bne.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fef0 	bl	80082c8 <xTaskPriorityDisinherit>
 80074e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e043      	b.n	800757a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d119      	bne.n	800752c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6858      	ldr	r0, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	461a      	mov	r2, r3
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	f001 fd25 	bl	8008f52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	d32b      	bcc.n	800757a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	e026      	b.n	800757a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68d8      	ldr	r0, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f001 fd0b 	bl	8008f52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	425b      	negs	r3, r3
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d207      	bcs.n	8007568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	425b      	negs	r3, r3
 8007562:	441a      	add	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d105      	bne.n	800757a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3b01      	subs	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007582:	697b      	ldr	r3, [r7, #20]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d303      	bcc.n	80075c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68d9      	ldr	r1, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	461a      	mov	r2, r3
 80075ca:	6838      	ldr	r0, [r7, #0]
 80075cc:	f001 fcc1 	bl	8008f52 <memcpy>
	}
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075e0:	f001 f888 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ec:	e011      	b.n	8007612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d012      	beq.n	800761c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fc86 	bl	8007f0c <xTaskRemoveFromEventList>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007606:	f000 fd5b 	bl	80080c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	3b01      	subs	r3, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007616:	2b00      	cmp	r3, #0
 8007618:	dce9      	bgt.n	80075ee <prvUnlockQueue+0x16>
 800761a:	e000      	b.n	800761e <prvUnlockQueue+0x46>
					break;
 800761c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007626:	f001 f895 	bl	8008754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800762a:	f001 f863 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007636:	e011      	b.n	800765c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3310      	adds	r3, #16
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fc61 	bl	8007f0c <xTaskRemoveFromEventList>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007650:	f000 fd36 	bl	80080c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	3b01      	subs	r3, #1
 8007658:	b2db      	uxtb	r3, r3
 800765a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800765c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dce9      	bgt.n	8007638 <prvUnlockQueue+0x60>
 8007664:	e000      	b.n	8007668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	22ff      	movs	r2, #255	; 0xff
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007670:	f001 f870 	bl	8008754 <vPortExitCritical>
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007684:	f001 f836 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	429a      	cmp	r2, r3
 8007692:	d102      	bne.n	800769a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e001      	b.n	800769e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800769e:	f001 f859 	bl	8008754 <vPortExitCritical>

	return xReturn;
 80076a2:	68fb      	ldr	r3, [r7, #12]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08e      	sub	sp, #56	; 0x38
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	623b      	str	r3, [r7, #32]
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	61fb      	str	r3, [r7, #28]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076f2:	23b4      	movs	r3, #180	; 0xb4
 80076f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2bb4      	cmp	r3, #180	; 0xb4
 80076fa:	d00a      	beq.n	8007712 <xTaskCreateStatic+0x66>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	61bb      	str	r3, [r7, #24]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007712:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01e      	beq.n	8007758 <xTaskCreateStatic+0xac>
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	2b00      	cmp	r3, #0
 800771e:	d01b      	beq.n	8007758 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	2202      	movs	r2, #2
 800772e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007732:	2300      	movs	r3, #0
 8007734:	9303      	str	r3, [sp, #12]
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	f107 0314 	add.w	r3, r7, #20
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f850 	bl	80077f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007752:	f000 f8eb 	bl	800792c <prvAddNewTaskToReadyList>
 8007756:	e001      	b.n	800775c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800775c:	697b      	ldr	r3, [r7, #20]
	}
 800775e:	4618      	mov	r0, r3
 8007760:	3728      	adds	r7, #40	; 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007766:	b580      	push	{r7, lr}
 8007768:	b08c      	sub	sp, #48	; 0x30
 800776a:	af04      	add	r7, sp, #16
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f8dc 	bl	8008938 <pvPortMalloc>
 8007780:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007788:	20b4      	movs	r0, #180	; 0xb4
 800778a:	f001 f8d5 	bl	8008938 <pvPortMalloc>
 800778e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	631a      	str	r2, [r3, #48]	; 0x30
 800779c:	e005      	b.n	80077aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800779e:	6978      	ldr	r0, [r7, #20]
 80077a0:	f001 f996 	bl	8008ad0 <vPortFree>
 80077a4:	e001      	b.n	80077aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d017      	beq.n	80077e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9303      	str	r3, [sp, #12]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	9302      	str	r3, [sp, #8]
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f80e 	bl	80077f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077d4:	69f8      	ldr	r0, [r7, #28]
 80077d6:	f000 f8a9 	bl	800792c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077da:	2301      	movs	r3, #1
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e002      	b.n	80077e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077e0:	f04f 33ff 	mov.w	r3, #4294967295
 80077e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077e6:	69bb      	ldr	r3, [r7, #24]
	}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007808:	3b01      	subs	r3, #1
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f023 0307 	bic.w	r3, r3, #7
 8007816:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	617b      	str	r3, [r7, #20]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01f      	beq.n	800787e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	e012      	b.n	800786a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	7819      	ldrb	r1, [r3, #0]
 800784c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	3334      	adds	r3, #52	; 0x34
 8007854:	460a      	mov	r2, r1
 8007856:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	3301      	adds	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d9e9      	bls.n	8007844 <prvInitialiseNewTask+0x54>
 8007870:	e000      	b.n	8007874 <prvInitialiseNewTask+0x84>
			{
				break;
 8007872:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800787c:	e003      	b.n	8007886 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2b06      	cmp	r3, #6
 800788a:	d901      	bls.n	8007890 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800788c:	2306      	movs	r3, #6
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007894:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	2200      	movs	r2, #0
 80078a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	3304      	adds	r3, #4
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff f991 	bl	8006bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	3318      	adds	r3, #24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff f98c 	bl	8006bce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	f1c3 0207 	rsb	r2, r3, #7
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	334c      	adds	r3, #76	; 0x4c
 80078e0:	2260      	movs	r2, #96	; 0x60
 80078e2:	2100      	movs	r1, #0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 fb42 	bl	8008f6e <memset>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <prvInitialiseNewTask+0x130>)
 80078ee:	651a      	str	r2, [r3, #80]	; 0x50
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <prvInitialiseNewTask+0x134>)
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	4a0b      	ldr	r2, [pc, #44]	; (8007928 <prvInitialiseNewTask+0x138>)
 80078fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	69b8      	ldr	r0, [r7, #24]
 8007902:	f000 fdcd 	bl	80084a0 <pxPortInitialiseStack>
 8007906:	4602      	mov	r2, r0
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007916:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007918:	bf00      	nop
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	0800a280 	.word	0x0800a280
 8007924:	0800a2a0 	.word	0x0800a2a0
 8007928:	0800a260 	.word	0x0800a260

0800792c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007934:	f000 fede 	bl	80086f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007938:	4b2a      	ldr	r3, [pc, #168]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 8007940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800794a:	4a27      	ldr	r2, [pc, #156]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d110      	bne.n	800797a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007958:	f000 fbd6 	bl	8008108 <prvInitialiseTaskLists>
 800795c:	e00d      	b.n	800797a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800795e:	4b23      	ldr	r3, [pc, #140]	; (80079ec <prvAddNewTaskToReadyList+0xc0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007966:	4b20      	ldr	r3, [pc, #128]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d802      	bhi.n	800797a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800797a:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <prvAddNewTaskToReadyList+0xc4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <prvAddNewTaskToReadyList+0xc4>)
 8007982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	409a      	lsls	r2, r3
 800798c:	4b19      	ldr	r3, [pc, #100]	; (80079f4 <prvAddNewTaskToReadyList+0xc8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4313      	orrs	r3, r2
 8007992:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <prvAddNewTaskToReadyList+0xc8>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <prvAddNewTaskToReadyList+0xcc>)
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7ff f91b 	bl	8006be8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079b2:	f000 fecf 	bl	8008754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <prvAddNewTaskToReadyList+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00e      	beq.n	80079dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079be:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d207      	bcs.n	80079dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079cc:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <prvAddNewTaskToReadyList+0xd0>)
 80079ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	2000080c 	.word	0x2000080c
 80079e8:	2000070c 	.word	0x2000070c
 80079ec:	20000818 	.word	0x20000818
 80079f0:	20000828 	.word	0x20000828
 80079f4:	20000814 	.word	0x20000814
 80079f8:	20000710 	.word	0x20000710
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <vTaskDelay+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <vTaskDelay+0x30>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60bb      	str	r3, [r7, #8]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a30:	f000 f884 	bl	8007b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fccc 	bl	80083d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a3c:	f000 f88c 	bl	8007b58 <xTaskResumeAll>
 8007a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d107      	bne.n	8007a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <vTaskDelay+0x64>)
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000834 	.word	0x20000834
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a76:	463a      	mov	r2, r7
 8007a78:	1d39      	adds	r1, r7, #4
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7f8 fda2 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	9202      	str	r2, [sp, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	460a      	mov	r2, r1
 8007a96:	4921      	ldr	r1, [pc, #132]	; (8007b1c <vTaskStartScheduler+0xb4>)
 8007a98:	4821      	ldr	r0, [pc, #132]	; (8007b20 <vTaskStartScheduler+0xb8>)
 8007a9a:	f7ff fe07 	bl	80076ac <xTaskCreateStatic>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4a20      	ldr	r2, [pc, #128]	; (8007b24 <vTaskStartScheduler+0xbc>)
 8007aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	; (8007b24 <vTaskStartScheduler+0xbc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e001      	b.n	8007ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d11b      	bne.n	8007af4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	613b      	str	r3, [r7, #16]
}
 8007ace:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <vTaskStartScheduler+0xc0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	334c      	adds	r3, #76	; 0x4c
 8007ad6:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <vTaskStartScheduler+0xc4>)
 8007ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ada:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <vTaskStartScheduler+0xc8>)
 8007adc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ae2:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <vTaskStartScheduler+0xcc>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ae8:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <vTaskStartScheduler+0xd0>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007aee:	f000 fd5f 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007af2:	e00e      	b.n	8007b12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afa:	d10a      	bne.n	8007b12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60fb      	str	r3, [r7, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <vTaskStartScheduler+0xa8>
}
 8007b12:	bf00      	nop
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0800a240 	.word	0x0800a240
 8007b20:	080080d9 	.word	0x080080d9
 8007b24:	20000830 	.word	0x20000830
 8007b28:	2000070c 	.word	0x2000070c
 8007b2c:	20000010 	.word	0x20000010
 8007b30:	2000082c 	.word	0x2000082c
 8007b34:	20000818 	.word	0x20000818
 8007b38:	20000810 	.word	0x20000810

08007b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <vTaskSuspendAll+0x18>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a03      	ldr	r2, [pc, #12]	; (8007b54 <vTaskSuspendAll+0x18>)
 8007b48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	20000834 	.word	0x20000834

08007b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b66:	4b41      	ldr	r3, [pc, #260]	; (8007c6c <xTaskResumeAll+0x114>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	603b      	str	r3, [r7, #0]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b84:	f000 fdb6 	bl	80086f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b88:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <xTaskResumeAll+0x114>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	4a37      	ldr	r2, [pc, #220]	; (8007c6c <xTaskResumeAll+0x114>)
 8007b90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b92:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <xTaskResumeAll+0x114>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d161      	bne.n	8007c5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b9a:	4b35      	ldr	r3, [pc, #212]	; (8007c70 <xTaskResumeAll+0x118>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d05d      	beq.n	8007c5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ba2:	e02e      	b.n	8007c02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba4:	4b33      	ldr	r3, [pc, #204]	; (8007c74 <xTaskResumeAll+0x11c>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3318      	adds	r3, #24
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff f876 	bl	8006ca2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff f871 	bl	8006ca2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <xTaskResumeAll+0x120>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <xTaskResumeAll+0x120>)
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <xTaskResumeAll+0x124>)
 8007be0:	441a      	add	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7fe fffd 	bl	8006be8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <xTaskResumeAll+0x128>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007bfc:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <xTaskResumeAll+0x12c>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c02:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <xTaskResumeAll+0x11c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1cc      	bne.n	8007ba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c10:	f000 fb1c 	bl	800824c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c14:	4b1c      	ldr	r3, [pc, #112]	; (8007c88 <xTaskResumeAll+0x130>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d010      	beq.n	8007c42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c20:	f000 f836 	bl	8007c90 <xTaskIncrementTick>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c2a:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <xTaskResumeAll+0x12c>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f1      	bne.n	8007c20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007c3c:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <xTaskResumeAll+0x130>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c42:	4b10      	ldr	r3, [pc, #64]	; (8007c84 <xTaskResumeAll+0x12c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <xTaskResumeAll+0x134>)
 8007c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c5e:	f000 fd79 	bl	8008754 <vPortExitCritical>

	return xAlreadyYielded;
 8007c62:	68bb      	ldr	r3, [r7, #8]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000834 	.word	0x20000834
 8007c70:	2000080c 	.word	0x2000080c
 8007c74:	200007cc 	.word	0x200007cc
 8007c78:	20000814 	.word	0x20000814
 8007c7c:	20000710 	.word	0x20000710
 8007c80:	2000070c 	.word	0x2000070c
 8007c84:	20000820 	.word	0x20000820
 8007c88:	2000081c 	.word	0x2000081c
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c9a:	4b4e      	ldr	r3, [pc, #312]	; (8007dd4 <xTaskIncrementTick+0x144>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 808e 	bne.w	8007dc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ca4:	4b4c      	ldr	r3, [pc, #304]	; (8007dd8 <xTaskIncrementTick+0x148>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cac:	4a4a      	ldr	r2, [pc, #296]	; (8007dd8 <xTaskIncrementTick+0x148>)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d120      	bne.n	8007cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cb8:	4b48      	ldr	r3, [pc, #288]	; (8007ddc <xTaskIncrementTick+0x14c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	603b      	str	r3, [r7, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xTaskIncrementTick+0x46>
 8007cd8:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <xTaskIncrementTick+0x14c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	4b40      	ldr	r3, [pc, #256]	; (8007de0 <xTaskIncrementTick+0x150>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a3e      	ldr	r2, [pc, #248]	; (8007ddc <xTaskIncrementTick+0x14c>)
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4a3e      	ldr	r2, [pc, #248]	; (8007de0 <xTaskIncrementTick+0x150>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4b3d      	ldr	r3, [pc, #244]	; (8007de4 <xTaskIncrementTick+0x154>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	4a3c      	ldr	r2, [pc, #240]	; (8007de4 <xTaskIncrementTick+0x154>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	f000 faa9 	bl	800824c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cfa:	4b3b      	ldr	r3, [pc, #236]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d348      	bcc.n	8007d96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d04:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <xTaskIncrementTick+0x14c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d104      	bne.n	8007d18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0e:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295
 8007d14:	601a      	str	r2, [r3, #0]
					break;
 8007d16:	e03e      	b.n	8007d96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <xTaskIncrementTick+0x14c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d203      	bcs.n	8007d38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d30:	4a2d      	ldr	r2, [pc, #180]	; (8007de8 <xTaskIncrementTick+0x158>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d36:	e02e      	b.n	8007d96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe ffb0 	bl	8006ca2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	3318      	adds	r3, #24
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe ffa7 	bl	8006ca2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2201      	movs	r2, #1
 8007d5a:	409a      	lsls	r2, r3
 8007d5c:	4b23      	ldr	r3, [pc, #140]	; (8007dec <xTaskIncrementTick+0x15c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	4a22      	ldr	r2, [pc, #136]	; (8007dec <xTaskIncrementTick+0x15c>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <xTaskIncrementTick+0x160>)
 8007d74:	441a      	add	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe ff33 	bl	8006be8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <xTaskIncrementTick+0x164>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d3b9      	bcc.n	8007d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d90:	2301      	movs	r3, #1
 8007d92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d94:	e7b6      	b.n	8007d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d96:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <xTaskIncrementTick+0x164>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4914      	ldr	r1, [pc, #80]	; (8007df0 <xTaskIncrementTick+0x160>)
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d901      	bls.n	8007db2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007db2:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <xTaskIncrementTick+0x168>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	e004      	b.n	8007dca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <xTaskIncrementTick+0x16c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <xTaskIncrementTick+0x16c>)
 8007dc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000834 	.word	0x20000834
 8007dd8:	20000810 	.word	0x20000810
 8007ddc:	200007c4 	.word	0x200007c4
 8007de0:	200007c8 	.word	0x200007c8
 8007de4:	20000824 	.word	0x20000824
 8007de8:	2000082c 	.word	0x2000082c
 8007dec:	20000814 	.word	0x20000814
 8007df0:	20000710 	.word	0x20000710
 8007df4:	2000070c 	.word	0x2000070c
 8007df8:	20000820 	.word	0x20000820
 8007dfc:	2000081c 	.word	0x2000081c

08007e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <vTaskSwitchContext+0xac>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e0e:	4b28      	ldr	r3, [pc, #160]	; (8007eb0 <vTaskSwitchContext+0xb0>)
 8007e10:	2201      	movs	r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e14:	e044      	b.n	8007ea0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007e16:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <vTaskSwitchContext+0xb0>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <vTaskSwitchContext+0xb4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	fab3 f383 	clz	r3, r3
 8007e28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	f1c3 031f 	rsb	r3, r3, #31
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	4921      	ldr	r1, [pc, #132]	; (8007eb8 <vTaskSwitchContext+0xb8>)
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	607b      	str	r3, [r7, #4]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <vTaskSwitchContext+0x5a>
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <vTaskSwitchContext+0xb8>)
 8007e68:	4413      	add	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d104      	bne.n	8007e8c <vTaskSwitchContext+0x8c>
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	605a      	str	r2, [r3, #4]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <vTaskSwitchContext+0xbc>)
 8007e94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <vTaskSwitchContext+0xbc>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	334c      	adds	r3, #76	; 0x4c
 8007e9c:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <vTaskSwitchContext+0xc0>)
 8007e9e:	6013      	str	r3, [r2, #0]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	20000834 	.word	0x20000834
 8007eb0:	20000820 	.word	0x20000820
 8007eb4:	20000814 	.word	0x20000814
 8007eb8:	20000710 	.word	0x20000710
 8007ebc:	2000070c 	.word	0x2000070c
 8007ec0:	20000010 	.word	0x20000010

08007ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10a      	bne.n	8007eea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <vTaskPlaceOnEventList+0x44>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3318      	adds	r3, #24
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fe fe9c 	bl	8006c30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ef8:	2101      	movs	r1, #1
 8007efa:	6838      	ldr	r0, [r7, #0]
 8007efc:	f000 fa6a 	bl	80083d4 <prvAddCurrentTaskToDelayedList>
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	2000070c 	.word	0x2000070c

08007f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60fb      	str	r3, [r7, #12]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	3318      	adds	r3, #24
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe feb0 	bl	8006ca2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f42:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <xTaskRemoveFromEventList+0xac>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11c      	bne.n	8007f84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fea7 	bl	8006ca2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <xTaskRemoveFromEventList+0xb0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <xTaskRemoveFromEventList+0xb0>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <xTaskRemoveFromEventList+0xb4>)
 8007f74:	441a      	add	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe fe33 	bl	8006be8 <vListInsertEnd>
 8007f82:	e005      	b.n	8007f90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	3318      	adds	r3, #24
 8007f88:	4619      	mov	r1, r3
 8007f8a:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <xTaskRemoveFromEventList+0xb8>)
 8007f8c:	f7fe fe2c 	bl	8006be8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <xTaskRemoveFromEventList+0xbc>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d905      	bls.n	8007faa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <xTaskRemoveFromEventList+0xc0>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e001      	b.n	8007fae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fae:	697b      	ldr	r3, [r7, #20]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000834 	.word	0x20000834
 8007fbc:	20000814 	.word	0x20000814
 8007fc0:	20000710 	.word	0x20000710
 8007fc4:	200007cc 	.word	0x200007cc
 8007fc8:	2000070c 	.word	0x2000070c
 8007fcc:	20000820 	.word	0x20000820

08007fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <vTaskInternalSetTimeOutState+0x24>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <vTaskInternalSetTimeOutState+0x28>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000824 	.word	0x20000824
 8007ff8:	20000810 	.word	0x20000810

08007ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	613b      	str	r3, [r7, #16]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800803e:	f000 fb59 	bl	80086f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskCheckForTimeOut+0xbc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d102      	bne.n	8008062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e023      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b15      	ldr	r3, [pc, #84]	; (80080bc <xTaskCheckForTimeOut+0xc0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d007      	beq.n	800807e <xTaskCheckForTimeOut+0x82>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	e015      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	429a      	cmp	r2, r3
 8008086:	d20b      	bcs.n	80080a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff9b 	bl	8007fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	e004      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080aa:	f000 fb53 	bl	8008754 <vPortExitCritical>

	return xReturn;
 80080ae:	69fb      	ldr	r3, [r7, #28]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000810 	.word	0x20000810
 80080bc:	20000824 	.word	0x20000824

080080c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <vTaskMissedYield+0x14>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000820 	.word	0x20000820

080080d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080e0:	f000 f852 	bl	8008188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvIdleTask+0x28>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d9f9      	bls.n	80080e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <prvIdleTask+0x2c>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080fc:	e7f0      	b.n	80080e0 <prvIdleTask+0x8>
 80080fe:	bf00      	nop
 8008100:	20000710 	.word	0x20000710
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	e00c      	b.n	800812e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4a12      	ldr	r2, [pc, #72]	; (8008168 <prvInitialiseTaskLists+0x60>)
 8008120:	4413      	add	r3, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fd33 	bl	8006b8e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3301      	adds	r3, #1
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d9ef      	bls.n	8008114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008134:	480d      	ldr	r0, [pc, #52]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008136:	f7fe fd2a 	bl	8006b8e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800813a:	480d      	ldr	r0, [pc, #52]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800813c:	f7fe fd27 	bl	8006b8e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <prvInitialiseTaskLists+0x6c>)
 8008142:	f7fe fd24 	bl	8006b8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008146:	480c      	ldr	r0, [pc, #48]	; (8008178 <prvInitialiseTaskLists+0x70>)
 8008148:	f7fe fd21 	bl	8006b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800814c:	480b      	ldr	r0, [pc, #44]	; (800817c <prvInitialiseTaskLists+0x74>)
 800814e:	f7fe fd1e 	bl	8006b8e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <prvInitialiseTaskLists+0x78>)
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvInitialiseTaskLists+0x7c>)
 800815a:	4a05      	ldr	r2, [pc, #20]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800815c:	601a      	str	r2, [r3, #0]
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000710 	.word	0x20000710
 800816c:	2000079c 	.word	0x2000079c
 8008170:	200007b0 	.word	0x200007b0
 8008174:	200007cc 	.word	0x200007cc
 8008178:	200007e0 	.word	0x200007e0
 800817c:	200007f8 	.word	0x200007f8
 8008180:	200007c4 	.word	0x200007c4
 8008184:	200007c8 	.word	0x200007c8

08008188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800818e:	e019      	b.n	80081c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008190:	f000 fab0 	bl	80086f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <prvCheckTasksWaitingTermination+0x50>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fd7e 	bl	8006ca2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081a6:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ba:	f000 facb 	bl	8008754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f810 	bl	80081e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081c4:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e1      	bne.n	8008190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	200007e0 	.word	0x200007e0
 80081dc:	2000080c 	.word	0x2000080c
 80081e0:	200007f4 	.word	0x200007f4

080081e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	334c      	adds	r3, #76	; 0x4c
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 ffdd 	bl	80091b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d108      	bne.n	8008212 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fc63 	bl	8008ad0 <vPortFree>
				vPortFree( pxTCB );
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc60 	bl	8008ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008210:	e018      	b.n	8008244 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008218:	2b01      	cmp	r3, #1
 800821a:	d103      	bne.n	8008224 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fc57 	bl	8008ad0 <vPortFree>
	}
 8008222:	e00f      	b.n	8008244 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800822a:	2b02      	cmp	r3, #2
 800822c:	d00a      	beq.n	8008244 <prvDeleteTCB+0x60>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60fb      	str	r3, [r7, #12]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <prvDeleteTCB+0x5e>
	}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008252:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <prvResetNextTaskUnblockTime+0x38>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <prvResetNextTaskUnblockTime+0x3c>)
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008264:	e008      	b.n	8008278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <prvResetNextTaskUnblockTime+0x38>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4a04      	ldr	r2, [pc, #16]	; (8008288 <prvResetNextTaskUnblockTime+0x3c>)
 8008276:	6013      	str	r3, [r2, #0]
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	200007c4 	.word	0x200007c4
 8008288:	2000082c 	.word	0x2000082c

0800828c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008292:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <xTaskGetSchedulerState+0x34>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800829a:	2301      	movs	r3, #1
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	e008      	b.n	80082b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <xTaskGetSchedulerState+0x38>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082a8:	2302      	movs	r3, #2
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	e001      	b.n	80082b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ae:	2300      	movs	r3, #0
 80082b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082b2:	687b      	ldr	r3, [r7, #4]
	}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	20000818 	.word	0x20000818
 80082c4:	20000834 	.word	0x20000834

080082c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d06e      	beq.n	80083bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082de:	4b3a      	ldr	r3, [pc, #232]	; (80083c8 <xTaskPriorityDisinherit+0x100>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d00a      	beq.n	80082fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60fb      	str	r3, [r7, #12]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60bb      	str	r3, [r7, #8]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008320:	1e5a      	subs	r2, r3, #1
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	429a      	cmp	r2, r3
 8008330:	d044      	beq.n	80083bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008336:	2b00      	cmp	r3, #0
 8008338:	d140      	bne.n	80083bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3304      	adds	r3, #4
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fcaf 	bl	8006ca2 <uxListRemove>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d115      	bne.n	8008376 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	491f      	ldr	r1, [pc, #124]	; (80083cc <xTaskPriorityDisinherit+0x104>)
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <xTaskPriorityDisinherit+0xae>
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	2201      	movs	r2, #1
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	43da      	mvns	r2, r3
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <xTaskPriorityDisinherit+0x108>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4013      	ands	r3, r2
 8008372:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <xTaskPriorityDisinherit+0x108>)
 8008374:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f1c3 0207 	rsb	r2, r3, #7
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	2201      	movs	r2, #1
 8008390:	409a      	lsls	r2, r3
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <xTaskPriorityDisinherit+0x108>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4313      	orrs	r3, r2
 8008398:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <xTaskPriorityDisinherit+0x108>)
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4a08      	ldr	r2, [pc, #32]	; (80083cc <xTaskPriorityDisinherit+0x104>)
 80083aa:	441a      	add	r2, r3
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe fc18 	bl	8006be8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083b8:	2301      	movs	r3, #1
 80083ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083bc:	697b      	ldr	r3, [r7, #20]
	}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	2000070c 	.word	0x2000070c
 80083cc:	20000710 	.word	0x20000710
 80083d0:	20000814 	.word	0x20000814

080083d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083de:	4b29      	ldr	r3, [pc, #164]	; (8008484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e4:	4b28      	ldr	r3, [pc, #160]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fc59 	bl	8006ca2 <uxListRemove>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	2201      	movs	r2, #1
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	43da      	mvns	r2, r3
 8008404:	4b21      	ldr	r3, [pc, #132]	; (800848c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4013      	ands	r3, r2
 800840a:	4a20      	ldr	r2, [pc, #128]	; (800848c <prvAddCurrentTaskToDelayedList+0xb8>)
 800840c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008414:	d10a      	bne.n	800842c <prvAddCurrentTaskToDelayedList+0x58>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841c:	4b1a      	ldr	r3, [pc, #104]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	481a      	ldr	r0, [pc, #104]	; (8008490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008426:	f7fe fbdf 	bl	8006be8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800842a:	e026      	b.n	800847a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008434:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d209      	bcs.n	8008458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008444:	4b13      	ldr	r3, [pc, #76]	; (8008494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fe fbed 	bl	8006c30 <vListInsert>
}
 8008456:	e010      	b.n	800847a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008458:	4b0f      	ldr	r3, [pc, #60]	; (8008498 <prvAddCurrentTaskToDelayedList+0xc4>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe fbe3 	bl	8006c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800846a:	4b0c      	ldr	r3, [pc, #48]	; (800849c <prvAddCurrentTaskToDelayedList+0xc8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	d202      	bcs.n	800847a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008474:	4a09      	ldr	r2, [pc, #36]	; (800849c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6013      	str	r3, [r2, #0]
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000810 	.word	0x20000810
 8008488:	2000070c 	.word	0x2000070c
 800848c:	20000814 	.word	0x20000814
 8008490:	200007f8 	.word	0x200007f8
 8008494:	200007c8 	.word	0x200007c8
 8008498:	200007c4 	.word	0x200007c4
 800849c:	2000082c 	.word	0x2000082c

080084a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3b04      	subs	r3, #4
 80084b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b04      	subs	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0201 	bic.w	r2, r3, #1
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b04      	subs	r3, #4
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084d0:	4a0c      	ldr	r2, [pc, #48]	; (8008504 <pxPortInitialiseStack+0x64>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b14      	subs	r3, #20
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3b04      	subs	r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f06f 0202 	mvn.w	r2, #2
 80084ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3b20      	subs	r3, #32
 80084f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	08008509 	.word	0x08008509

08008508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <prvTaskExitError+0x54>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d00a      	beq.n	8008532 <prvTaskExitError+0x2a>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <prvTaskExitError+0x28>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008546:	bf00      	nop
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0fc      	beq.n	8008548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	2000000c 	.word	0x2000000c

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	2000070c 	.word	0x2000070c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <xPortStartScheduler+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x26>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <xPortStartScheduler+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3f      	ldr	r2, [pc, #252]	; (80086d8 <xPortStartScheduler+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10a      	bne.n	80085f6 <xPortStartScheduler+0x46>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <xPortStartScheduler+0x12c>)
 80085f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <xPortStartScheduler+0x130>)
 800861c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800861e:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xPortStartScheduler+0x134>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008624:	e009      	b.n	800863a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008626:	4b2f      	ldr	r3, [pc, #188]	; (80086e4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <xPortStartScheduler+0x134>)
 800862e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d0ef      	beq.n	8008626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008646:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <xPortStartScheduler+0x134>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1c3 0307 	rsb	r3, r3, #7
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00a      	beq.n	8008668 <xPortStartScheduler+0xb8>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <xPortStartScheduler+0x134>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <xPortStartScheduler+0x134>)
 8008670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <xPortStartScheduler+0x134>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <xPortStartScheduler+0x134>)
 800867c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <xPortStartScheduler+0x138>)
 800868c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xPortStartScheduler+0x138>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <xPortStartScheduler+0x138>)
 8008698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800869e:	f000 f8dd 	bl	800885c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <xPortStartScheduler+0x13c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086a8:	f000 f8fc 	bl	80088a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xPortStartScheduler+0x140>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <xPortStartScheduler+0x140>)
 80086b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086b8:	f7ff ff66 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086bc:	f7ff fba0 	bl	8007e00 <vTaskSwitchContext>
	prvTaskExitError();
 80086c0:	f7ff ff22 	bl	8008508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	e000ed00 	.word	0xe000ed00
 80086d4:	410fc271 	.word	0x410fc271
 80086d8:	410fc270 	.word	0x410fc270
 80086dc:	e000e400 	.word	0xe000e400
 80086e0:	20000838 	.word	0x20000838
 80086e4:	2000083c 	.word	0x2000083c
 80086e8:	e000ed20 	.word	0xe000ed20
 80086ec:	2000000c 	.word	0x2000000c
 80086f0:	e000ef34 	.word	0xe000ef34

080086f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <vPortEnterCritical+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a0d      	ldr	r2, [pc, #52]	; (800874c <vPortEnterCritical+0x58>)
 8008716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <vPortEnterCritical+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <vPortEnterCritical+0x5c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <vPortEnterCritical+0x4c>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vPortEnterCritical+0x4a>
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <vPortExitCritical+0x50>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <vPortExitCritical+0x24>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vPortExitCritical+0x50>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <vPortExitCritical+0x50>)
 8008780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <vPortExitCritical+0x42>
 800878a:	2300      	movs	r3, #0
 800878c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f383 8811 	msr	BASEPRI, r3
}
 8008794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	2000000c 	.word	0x2000000c
	...

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f01e 0f10 	tst.w	lr, #16
 80087c0:	bf08      	it	eq
 80087c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087d4:	f380 8811 	msr	BASEPRI, r0
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f7ff fb0e 	bl	8007e00 <vTaskSwitchContext>
 80087e4:	f04f 0000 	mov.w	r0, #0
 80087e8:	f380 8811 	msr	BASEPRI, r0
 80087ec:	bc09      	pop	{r0, r3}
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f6:	f01e 0f10 	tst.w	lr, #16
 80087fa:	bf08      	it	eq
 80087fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008800:	f380 8809 	msr	PSP, r0
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst>:
 8008810:	2000070c 	.word	0x2000070c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	607b      	str	r3, [r7, #4]
}
 8008830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008832:	f7ff fa2d 	bl	8007c90 <xTaskIncrementTick>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <SysTick_Handler+0x40>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f383 8811 	msr	BASEPRI, r3
}
 800884e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <vPortSetupTimerInterrupt+0x38>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vPortSetupTimerInterrupt+0x3c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x40>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <vPortSetupTimerInterrupt+0x44>)
 800887a:	3b01      	subs	r3, #1
 800887c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800887e:	4b04      	ldr	r3, [pc, #16]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	e000e010 	.word	0xe000e010
 8008894:	e000e018 	.word	0xe000e018
 8008898:	20000000 	.word	0x20000000
 800889c:	10624dd3 	.word	0x10624dd3
 80088a0:	e000e014 	.word	0xe000e014

080088a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088b4 <vPortEnableVFP+0x10>
 80088a8:	6801      	ldr	r1, [r0, #0]
 80088aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ae:	6001      	str	r1, [r0, #0]
 80088b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088b2:	bf00      	nop
 80088b4:	e000ed88 	.word	0xe000ed88

080088b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b0f      	cmp	r3, #15
 80088c8:	d914      	bls.n	80088f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <vPortValidateInterruptPriority+0x70>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088d4:	4b15      	ldr	r3, [pc, #84]	; (800892c <vPortValidateInterruptPriority+0x74>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	7afa      	ldrb	r2, [r7, #11]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d20a      	bcs.n	80088f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <vPortValidateInterruptPriority+0x78>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <vPortValidateInterruptPriority+0x7c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d90a      	bls.n	800891a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	603b      	str	r3, [r7, #0]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vPortValidateInterruptPriority+0x60>
	}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	e000e3f0 	.word	0xe000e3f0
 800892c:	20000838 	.word	0x20000838
 8008930:	e000ed0c 	.word	0xe000ed0c
 8008934:	2000083c 	.word	0x2000083c

08008938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008944:	f7ff f8fa 	bl	8007b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008948:	4b5b      	ldr	r3, [pc, #364]	; (8008ab8 <pvPortMalloc+0x180>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008950:	f000 f920 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008954:	4b59      	ldr	r3, [pc, #356]	; (8008abc <pvPortMalloc+0x184>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8093 	bne.w	8008a88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01d      	beq.n	80089a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008968:	2208      	movs	r2, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <pvPortMalloc+0x6c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d06e      	beq.n	8008a88 <pvPortMalloc+0x150>
 80089aa:	4b45      	ldr	r3, [pc, #276]	; (8008ac0 <pvPortMalloc+0x188>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d869      	bhi.n	8008a88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089b4:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089be:	e004      	b.n	80089ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <pvPortMalloc+0xa4>
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f1      	bne.n	80089c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089dc:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d050      	beq.n	8008a88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	4413      	add	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	2308      	movs	r3, #8
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d91f      	bls.n	8008a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <pvPortMalloc+0xf8>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	613b      	str	r3, [r7, #16]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 f908 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a56:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d203      	bcs.n	8008a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <pvPortMalloc+0x184>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <pvPortMalloc+0x194>)
 8008a86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a88:	f7ff f866 	bl	8007b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <pvPortMalloc+0x174>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <pvPortMalloc+0x172>
	return pvReturn;
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20004448 	.word	0x20004448
 8008abc:	2000445c 	.word	0x2000445c
 8008ac0:	2000444c 	.word	0x2000444c
 8008ac4:	20004440 	.word	0x20004440
 8008ac8:	20004450 	.word	0x20004450
 8008acc:	20004454 	.word	0x20004454

08008ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04d      	beq.n	8008b7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4413      	add	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <vPortFree+0xb8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <vPortFree+0x44>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <vPortFree+0x62>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60bb      	str	r3, [r7, #8]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <vPortFree+0xb8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01e      	beq.n	8008b7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11a      	bne.n	8008b7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <vPortFree+0xb8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b58:	f7fe fff0 	bl	8007b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <vPortFree+0xbc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <vPortFree+0xbc>)
 8008b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b6a:	6938      	ldr	r0, [r7, #16]
 8008b6c:	f000 f874 	bl	8008c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xc0>)
 8008b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b7a:	f7fe ffed 	bl	8007b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	2000445c 	.word	0x2000445c
 8008b8c:	2000444c 	.word	0x2000444c
 8008b90:	20004458 	.word	0x20004458

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000840 	.word	0x20000840
 8008c44:	20004440 	.word	0x20004440
 8008c48:	20004448 	.word	0x20004448
 8008c4c:	20004450 	.word	0x20004450
 8008c50:	2000444c 	.word	0x2000444c
 8008c54:	2000445c 	.word	0x2000445c

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20004440 	.word	0x20004440
 8008d08:	20004448 	.word	0x20004448

08008d0c <__errno>:
 8008d0c:	4b01      	ldr	r3, [pc, #4]	; (8008d14 <__errno+0x8>)
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000010 	.word	0x20000010

08008d18 <std>:
 8008d18:	2300      	movs	r3, #0
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d26:	6083      	str	r3, [r0, #8]
 8008d28:	8181      	strh	r1, [r0, #12]
 8008d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d2c:	81c2      	strh	r2, [r0, #14]
 8008d2e:	6183      	str	r3, [r0, #24]
 8008d30:	4619      	mov	r1, r3
 8008d32:	2208      	movs	r2, #8
 8008d34:	305c      	adds	r0, #92	; 0x5c
 8008d36:	f000 f91a 	bl	8008f6e <memset>
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <std+0x38>)
 8008d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x3c>)
 8008d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <std+0x40>)
 8008d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <std+0x44>)
 8008d48:	6224      	str	r4, [r4, #32]
 8008d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	080092c9 	.word	0x080092c9
 8008d54:	080092eb 	.word	0x080092eb
 8008d58:	08009323 	.word	0x08009323
 8008d5c:	08009347 	.word	0x08009347

08008d60 <_cleanup_r>:
 8008d60:	4901      	ldr	r1, [pc, #4]	; (8008d68 <_cleanup_r+0x8>)
 8008d62:	f000 b8af 	b.w	8008ec4 <_fwalk_reent>
 8008d66:	bf00      	nop
 8008d68:	08009621 	.word	0x08009621

08008d6c <__sfmoreglue>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	2268      	movs	r2, #104	; 0x68
 8008d70:	1e4d      	subs	r5, r1, #1
 8008d72:	4355      	muls	r5, r2
 8008d74:	460e      	mov	r6, r1
 8008d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d7a:	f000 f921 	bl	8008fc0 <_malloc_r>
 8008d7e:	4604      	mov	r4, r0
 8008d80:	b140      	cbz	r0, 8008d94 <__sfmoreglue+0x28>
 8008d82:	2100      	movs	r1, #0
 8008d84:	e9c0 1600 	strd	r1, r6, [r0]
 8008d88:	300c      	adds	r0, #12
 8008d8a:	60a0      	str	r0, [r4, #8]
 8008d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d90:	f000 f8ed 	bl	8008f6e <memset>
 8008d94:	4620      	mov	r0, r4
 8008d96:	bd70      	pop	{r4, r5, r6, pc}

08008d98 <__sfp_lock_acquire>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__sfp_lock_acquire+0x8>)
 8008d9a:	f000 b8d8 	b.w	8008f4e <__retarget_lock_acquire_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20004461 	.word	0x20004461

08008da4 <__sfp_lock_release>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sfp_lock_release+0x8>)
 8008da6:	f000 b8d3 	b.w	8008f50 <__retarget_lock_release_recursive>
 8008daa:	bf00      	nop
 8008dac:	20004461 	.word	0x20004461

08008db0 <__sinit_lock_acquire>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__sinit_lock_acquire+0x8>)
 8008db2:	f000 b8cc 	b.w	8008f4e <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20004462 	.word	0x20004462

08008dbc <__sinit_lock_release>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__sinit_lock_release+0x8>)
 8008dbe:	f000 b8c7 	b.w	8008f50 <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20004462 	.word	0x20004462

08008dc8 <__sinit>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f7ff fff0 	bl	8008db0 <__sinit_lock_acquire>
 8008dd0:	69a3      	ldr	r3, [r4, #24]
 8008dd2:	b11b      	cbz	r3, 8008ddc <__sinit+0x14>
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	f7ff bff0 	b.w	8008dbc <__sinit_lock_release>
 8008ddc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008de0:	6523      	str	r3, [r4, #80]	; 0x50
 8008de2:	4b13      	ldr	r3, [pc, #76]	; (8008e30 <__sinit+0x68>)
 8008de4:	4a13      	ldr	r2, [pc, #76]	; (8008e34 <__sinit+0x6c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	bf04      	itt	eq
 8008dee:	2301      	moveq	r3, #1
 8008df0:	61a3      	streq	r3, [r4, #24]
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 f820 	bl	8008e38 <__sfp>
 8008df8:	6060      	str	r0, [r4, #4]
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 f81c 	bl	8008e38 <__sfp>
 8008e00:	60a0      	str	r0, [r4, #8]
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f818 	bl	8008e38 <__sfp>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	60e0      	str	r0, [r4, #12]
 8008e0c:	2104      	movs	r1, #4
 8008e0e:	6860      	ldr	r0, [r4, #4]
 8008e10:	f7ff ff82 	bl	8008d18 <std>
 8008e14:	68a0      	ldr	r0, [r4, #8]
 8008e16:	2201      	movs	r2, #1
 8008e18:	2109      	movs	r1, #9
 8008e1a:	f7ff ff7d 	bl	8008d18 <std>
 8008e1e:	68e0      	ldr	r0, [r4, #12]
 8008e20:	2202      	movs	r2, #2
 8008e22:	2112      	movs	r1, #18
 8008e24:	f7ff ff78 	bl	8008d18 <std>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	61a3      	str	r3, [r4, #24]
 8008e2c:	e7d2      	b.n	8008dd4 <__sinit+0xc>
 8008e2e:	bf00      	nop
 8008e30:	0800a2c0 	.word	0x0800a2c0
 8008e34:	08008d61 	.word	0x08008d61

08008e38 <__sfp>:
 8008e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	f7ff ffac 	bl	8008d98 <__sfp_lock_acquire>
 8008e40:	4b1e      	ldr	r3, [pc, #120]	; (8008ebc <__sfp+0x84>)
 8008e42:	681e      	ldr	r6, [r3, #0]
 8008e44:	69b3      	ldr	r3, [r6, #24]
 8008e46:	b913      	cbnz	r3, 8008e4e <__sfp+0x16>
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffbd 	bl	8008dc8 <__sinit>
 8008e4e:	3648      	adds	r6, #72	; 0x48
 8008e50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	d503      	bpl.n	8008e60 <__sfp+0x28>
 8008e58:	6833      	ldr	r3, [r6, #0]
 8008e5a:	b30b      	cbz	r3, 8008ea0 <__sfp+0x68>
 8008e5c:	6836      	ldr	r6, [r6, #0]
 8008e5e:	e7f7      	b.n	8008e50 <__sfp+0x18>
 8008e60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e64:	b9d5      	cbnz	r5, 8008e9c <__sfp+0x64>
 8008e66:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <__sfp+0x88>)
 8008e68:	60e3      	str	r3, [r4, #12]
 8008e6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e6e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e70:	f000 f86c 	bl	8008f4c <__retarget_lock_init_recursive>
 8008e74:	f7ff ff96 	bl	8008da4 <__sfp_lock_release>
 8008e78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e80:	6025      	str	r5, [r4, #0]
 8008e82:	61a5      	str	r5, [r4, #24]
 8008e84:	2208      	movs	r2, #8
 8008e86:	4629      	mov	r1, r5
 8008e88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e8c:	f000 f86f 	bl	8008f6e <memset>
 8008e90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e98:	4620      	mov	r0, r4
 8008e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9c:	3468      	adds	r4, #104	; 0x68
 8008e9e:	e7d9      	b.n	8008e54 <__sfp+0x1c>
 8008ea0:	2104      	movs	r1, #4
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f7ff ff62 	bl	8008d6c <__sfmoreglue>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	6030      	str	r0, [r6, #0]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d1d5      	bne.n	8008e5c <__sfp+0x24>
 8008eb0:	f7ff ff78 	bl	8008da4 <__sfp_lock_release>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	e7ee      	b.n	8008e98 <__sfp+0x60>
 8008eba:	bf00      	nop
 8008ebc:	0800a2c0 	.word	0x0800a2c0
 8008ec0:	ffff0001 	.word	0xffff0001

08008ec4 <_fwalk_reent>:
 8008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec8:	4606      	mov	r6, r0
 8008eca:	4688      	mov	r8, r1
 8008ecc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ed0:	2700      	movs	r7, #0
 8008ed2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ed6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eda:	d505      	bpl.n	8008ee8 <_fwalk_reent+0x24>
 8008edc:	6824      	ldr	r4, [r4, #0]
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	d1f7      	bne.n	8008ed2 <_fwalk_reent+0xe>
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee8:	89ab      	ldrh	r3, [r5, #12]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d907      	bls.n	8008efe <_fwalk_reent+0x3a>
 8008eee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	d003      	beq.n	8008efe <_fwalk_reent+0x3a>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4630      	mov	r0, r6
 8008efa:	47c0      	blx	r8
 8008efc:	4307      	orrs	r7, r0
 8008efe:	3568      	adds	r5, #104	; 0x68
 8008f00:	e7e9      	b.n	8008ed6 <_fwalk_reent+0x12>
	...

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4d0d      	ldr	r5, [pc, #52]	; (8008f3c <__libc_init_array+0x38>)
 8008f08:	4c0d      	ldr	r4, [pc, #52]	; (8008f40 <__libc_init_array+0x3c>)
 8008f0a:	1b64      	subs	r4, r4, r5
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	2600      	movs	r6, #0
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	4d0b      	ldr	r5, [pc, #44]	; (8008f44 <__libc_init_array+0x40>)
 8008f16:	4c0c      	ldr	r4, [pc, #48]	; (8008f48 <__libc_init_array+0x44>)
 8008f18:	f001 f804 	bl	8009f24 <_init>
 8008f1c:	1b64      	subs	r4, r4, r5
 8008f1e:	10a4      	asrs	r4, r4, #2
 8008f20:	2600      	movs	r6, #0
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2c:	4798      	blx	r3
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f36:	4798      	blx	r3
 8008f38:	3601      	adds	r6, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	0800a300 	.word	0x0800a300
 8008f40:	0800a300 	.word	0x0800a300
 8008f44:	0800a300 	.word	0x0800a300
 8008f48:	0800a304 	.word	0x0800a304

08008f4c <__retarget_lock_init_recursive>:
 8008f4c:	4770      	bx	lr

08008f4e <__retarget_lock_acquire_recursive>:
 8008f4e:	4770      	bx	lr

08008f50 <__retarget_lock_release_recursive>:
 8008f50:	4770      	bx	lr

08008f52 <memcpy>:
 8008f52:	440a      	add	r2, r1
 8008f54:	4291      	cmp	r1, r2
 8008f56:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f5a:	d100      	bne.n	8008f5e <memcpy+0xc>
 8008f5c:	4770      	bx	lr
 8008f5e:	b510      	push	{r4, lr}
 8008f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f68:	4291      	cmp	r1, r2
 8008f6a:	d1f9      	bne.n	8008f60 <memcpy+0xe>
 8008f6c:	bd10      	pop	{r4, pc}

08008f6e <memset>:
 8008f6e:	4402      	add	r2, r0
 8008f70:	4603      	mov	r3, r0
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d100      	bne.n	8008f78 <memset+0xa>
 8008f76:	4770      	bx	lr
 8008f78:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7c:	e7f9      	b.n	8008f72 <memset+0x4>
	...

08008f80 <sbrk_aligned>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4e0e      	ldr	r6, [pc, #56]	; (8008fbc <sbrk_aligned+0x3c>)
 8008f84:	460c      	mov	r4, r1
 8008f86:	6831      	ldr	r1, [r6, #0]
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b911      	cbnz	r1, 8008f92 <sbrk_aligned+0x12>
 8008f8c:	f000 f96c 	bl	8009268 <_sbrk_r>
 8008f90:	6030      	str	r0, [r6, #0]
 8008f92:	4621      	mov	r1, r4
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 f967 	bl	8009268 <_sbrk_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d00a      	beq.n	8008fb4 <sbrk_aligned+0x34>
 8008f9e:	1cc4      	adds	r4, r0, #3
 8008fa0:	f024 0403 	bic.w	r4, r4, #3
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d007      	beq.n	8008fb8 <sbrk_aligned+0x38>
 8008fa8:	1a21      	subs	r1, r4, r0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f95c 	bl	8009268 <_sbrk_r>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d101      	bne.n	8008fb8 <sbrk_aligned+0x38>
 8008fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fb8:	4620      	mov	r0, r4
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	20004468 	.word	0x20004468

08008fc0 <_malloc_r>:
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	1ccd      	adds	r5, r1, #3
 8008fc6:	f025 0503 	bic.w	r5, r5, #3
 8008fca:	3508      	adds	r5, #8
 8008fcc:	2d0c      	cmp	r5, #12
 8008fce:	bf38      	it	cc
 8008fd0:	250c      	movcc	r5, #12
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	db01      	blt.n	8008fdc <_malloc_r+0x1c>
 8008fd8:	42a9      	cmp	r1, r5
 8008fda:	d905      	bls.n	8008fe8 <_malloc_r+0x28>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	4e2e      	ldr	r6, [pc, #184]	; (80090a4 <_malloc_r+0xe4>)
 8008fea:	f000 fbcd 	bl	8009788 <__malloc_lock>
 8008fee:	6833      	ldr	r3, [r6, #0]
 8008ff0:	461c      	mov	r4, r3
 8008ff2:	bb34      	cbnz	r4, 8009042 <_malloc_r+0x82>
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	f7ff ffc2 	bl	8008f80 <sbrk_aligned>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	4604      	mov	r4, r0
 8009000:	d14d      	bne.n	800909e <_malloc_r+0xde>
 8009002:	6834      	ldr	r4, [r6, #0]
 8009004:	4626      	mov	r6, r4
 8009006:	2e00      	cmp	r6, #0
 8009008:	d140      	bne.n	800908c <_malloc_r+0xcc>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	4631      	mov	r1, r6
 800900e:	4638      	mov	r0, r7
 8009010:	eb04 0803 	add.w	r8, r4, r3
 8009014:	f000 f928 	bl	8009268 <_sbrk_r>
 8009018:	4580      	cmp	r8, r0
 800901a:	d13a      	bne.n	8009092 <_malloc_r+0xd2>
 800901c:	6821      	ldr	r1, [r4, #0]
 800901e:	3503      	adds	r5, #3
 8009020:	1a6d      	subs	r5, r5, r1
 8009022:	f025 0503 	bic.w	r5, r5, #3
 8009026:	3508      	adds	r5, #8
 8009028:	2d0c      	cmp	r5, #12
 800902a:	bf38      	it	cc
 800902c:	250c      	movcc	r5, #12
 800902e:	4629      	mov	r1, r5
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa5 	bl	8008f80 <sbrk_aligned>
 8009036:	3001      	adds	r0, #1
 8009038:	d02b      	beq.n	8009092 <_malloc_r+0xd2>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	442b      	add	r3, r5
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	e00e      	b.n	8009060 <_malloc_r+0xa0>
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	1b52      	subs	r2, r2, r5
 8009046:	d41e      	bmi.n	8009086 <_malloc_r+0xc6>
 8009048:	2a0b      	cmp	r2, #11
 800904a:	d916      	bls.n	800907a <_malloc_r+0xba>
 800904c:	1961      	adds	r1, r4, r5
 800904e:	42a3      	cmp	r3, r4
 8009050:	6025      	str	r5, [r4, #0]
 8009052:	bf18      	it	ne
 8009054:	6059      	strne	r1, [r3, #4]
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	bf08      	it	eq
 800905a:	6031      	streq	r1, [r6, #0]
 800905c:	5162      	str	r2, [r4, r5]
 800905e:	604b      	str	r3, [r1, #4]
 8009060:	4638      	mov	r0, r7
 8009062:	f104 060b 	add.w	r6, r4, #11
 8009066:	f000 fb95 	bl	8009794 <__malloc_unlock>
 800906a:	f026 0607 	bic.w	r6, r6, #7
 800906e:	1d23      	adds	r3, r4, #4
 8009070:	1af2      	subs	r2, r6, r3
 8009072:	d0b6      	beq.n	8008fe2 <_malloc_r+0x22>
 8009074:	1b9b      	subs	r3, r3, r6
 8009076:	50a3      	str	r3, [r4, r2]
 8009078:	e7b3      	b.n	8008fe2 <_malloc_r+0x22>
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	42a3      	cmp	r3, r4
 800907e:	bf0c      	ite	eq
 8009080:	6032      	streq	r2, [r6, #0]
 8009082:	605a      	strne	r2, [r3, #4]
 8009084:	e7ec      	b.n	8009060 <_malloc_r+0xa0>
 8009086:	4623      	mov	r3, r4
 8009088:	6864      	ldr	r4, [r4, #4]
 800908a:	e7b2      	b.n	8008ff2 <_malloc_r+0x32>
 800908c:	4634      	mov	r4, r6
 800908e:	6876      	ldr	r6, [r6, #4]
 8009090:	e7b9      	b.n	8009006 <_malloc_r+0x46>
 8009092:	230c      	movs	r3, #12
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4638      	mov	r0, r7
 8009098:	f000 fb7c 	bl	8009794 <__malloc_unlock>
 800909c:	e7a1      	b.n	8008fe2 <_malloc_r+0x22>
 800909e:	6025      	str	r5, [r4, #0]
 80090a0:	e7de      	b.n	8009060 <_malloc_r+0xa0>
 80090a2:	bf00      	nop
 80090a4:	20004464 	.word	0x20004464

080090a8 <_puts_r>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	460e      	mov	r6, r1
 80090ac:	4605      	mov	r5, r0
 80090ae:	b118      	cbz	r0, 80090b8 <_puts_r+0x10>
 80090b0:	6983      	ldr	r3, [r0, #24]
 80090b2:	b90b      	cbnz	r3, 80090b8 <_puts_r+0x10>
 80090b4:	f7ff fe88 	bl	8008dc8 <__sinit>
 80090b8:	69ab      	ldr	r3, [r5, #24]
 80090ba:	68ac      	ldr	r4, [r5, #8]
 80090bc:	b913      	cbnz	r3, 80090c4 <_puts_r+0x1c>
 80090be:	4628      	mov	r0, r5
 80090c0:	f7ff fe82 	bl	8008dc8 <__sinit>
 80090c4:	4b2c      	ldr	r3, [pc, #176]	; (8009178 <_puts_r+0xd0>)
 80090c6:	429c      	cmp	r4, r3
 80090c8:	d120      	bne.n	800910c <_puts_r+0x64>
 80090ca:	686c      	ldr	r4, [r5, #4]
 80090cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ce:	07db      	lsls	r3, r3, #31
 80090d0:	d405      	bmi.n	80090de <_puts_r+0x36>
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	0598      	lsls	r0, r3, #22
 80090d6:	d402      	bmi.n	80090de <_puts_r+0x36>
 80090d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090da:	f7ff ff38 	bl	8008f4e <__retarget_lock_acquire_recursive>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	0719      	lsls	r1, r3, #28
 80090e2:	d51d      	bpl.n	8009120 <_puts_r+0x78>
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	b1db      	cbz	r3, 8009120 <_puts_r+0x78>
 80090e8:	3e01      	subs	r6, #1
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090f0:	3b01      	subs	r3, #1
 80090f2:	60a3      	str	r3, [r4, #8]
 80090f4:	bb39      	cbnz	r1, 8009146 <_puts_r+0x9e>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da38      	bge.n	800916c <_puts_r+0xc4>
 80090fa:	4622      	mov	r2, r4
 80090fc:	210a      	movs	r1, #10
 80090fe:	4628      	mov	r0, r5
 8009100:	f000 f926 	bl	8009350 <__swbuf_r>
 8009104:	3001      	adds	r0, #1
 8009106:	d011      	beq.n	800912c <_puts_r+0x84>
 8009108:	250a      	movs	r5, #10
 800910a:	e011      	b.n	8009130 <_puts_r+0x88>
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <_puts_r+0xd4>)
 800910e:	429c      	cmp	r4, r3
 8009110:	d101      	bne.n	8009116 <_puts_r+0x6e>
 8009112:	68ac      	ldr	r4, [r5, #8]
 8009114:	e7da      	b.n	80090cc <_puts_r+0x24>
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <_puts_r+0xd8>)
 8009118:	429c      	cmp	r4, r3
 800911a:	bf08      	it	eq
 800911c:	68ec      	ldreq	r4, [r5, #12]
 800911e:	e7d5      	b.n	80090cc <_puts_r+0x24>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f000 f978 	bl	8009418 <__swsetup_r>
 8009128:	2800      	cmp	r0, #0
 800912a:	d0dd      	beq.n	80090e8 <_puts_r+0x40>
 800912c:	f04f 35ff 	mov.w	r5, #4294967295
 8009130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009132:	07da      	lsls	r2, r3, #31
 8009134:	d405      	bmi.n	8009142 <_puts_r+0x9a>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	059b      	lsls	r3, r3, #22
 800913a:	d402      	bmi.n	8009142 <_puts_r+0x9a>
 800913c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800913e:	f7ff ff07 	bl	8008f50 <__retarget_lock_release_recursive>
 8009142:	4628      	mov	r0, r5
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	2b00      	cmp	r3, #0
 8009148:	da04      	bge.n	8009154 <_puts_r+0xac>
 800914a:	69a2      	ldr	r2, [r4, #24]
 800914c:	429a      	cmp	r2, r3
 800914e:	dc06      	bgt.n	800915e <_puts_r+0xb6>
 8009150:	290a      	cmp	r1, #10
 8009152:	d004      	beq.n	800915e <_puts_r+0xb6>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	6022      	str	r2, [r4, #0]
 800915a:	7019      	strb	r1, [r3, #0]
 800915c:	e7c5      	b.n	80090ea <_puts_r+0x42>
 800915e:	4622      	mov	r2, r4
 8009160:	4628      	mov	r0, r5
 8009162:	f000 f8f5 	bl	8009350 <__swbuf_r>
 8009166:	3001      	adds	r0, #1
 8009168:	d1bf      	bne.n	80090ea <_puts_r+0x42>
 800916a:	e7df      	b.n	800912c <_puts_r+0x84>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	250a      	movs	r5, #10
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	701d      	strb	r5, [r3, #0]
 8009176:	e7db      	b.n	8009130 <_puts_r+0x88>
 8009178:	0800a280 	.word	0x0800a280
 800917c:	0800a2a0 	.word	0x0800a2a0
 8009180:	0800a260 	.word	0x0800a260

08009184 <puts>:
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <puts+0xc>)
 8009186:	4601      	mov	r1, r0
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	f7ff bf8d 	b.w	80090a8 <_puts_r>
 800918e:	bf00      	nop
 8009190:	20000010 	.word	0x20000010

08009194 <cleanup_glue>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	460c      	mov	r4, r1
 8009198:	6809      	ldr	r1, [r1, #0]
 800919a:	4605      	mov	r5, r0
 800919c:	b109      	cbz	r1, 80091a2 <cleanup_glue+0xe>
 800919e:	f7ff fff9 	bl	8009194 <cleanup_glue>
 80091a2:	4621      	mov	r1, r4
 80091a4:	4628      	mov	r0, r5
 80091a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091aa:	f000 baf9 	b.w	80097a0 <_free_r>
	...

080091b0 <_reclaim_reent>:
 80091b0:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <_reclaim_reent+0xb4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4283      	cmp	r3, r0
 80091b6:	b570      	push	{r4, r5, r6, lr}
 80091b8:	4604      	mov	r4, r0
 80091ba:	d051      	beq.n	8009260 <_reclaim_reent+0xb0>
 80091bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091be:	b143      	cbz	r3, 80091d2 <_reclaim_reent+0x22>
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d14a      	bne.n	800925c <_reclaim_reent+0xac>
 80091c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c8:	6819      	ldr	r1, [r3, #0]
 80091ca:	b111      	cbz	r1, 80091d2 <_reclaim_reent+0x22>
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fae7 	bl	80097a0 <_free_r>
 80091d2:	6961      	ldr	r1, [r4, #20]
 80091d4:	b111      	cbz	r1, 80091dc <_reclaim_reent+0x2c>
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fae2 	bl	80097a0 <_free_r>
 80091dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091de:	b111      	cbz	r1, 80091e6 <_reclaim_reent+0x36>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fadd 	bl	80097a0 <_free_r>
 80091e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091e8:	b111      	cbz	r1, 80091f0 <_reclaim_reent+0x40>
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fad8 	bl	80097a0 <_free_r>
 80091f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091f2:	b111      	cbz	r1, 80091fa <_reclaim_reent+0x4a>
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fad3 	bl	80097a0 <_free_r>
 80091fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091fc:	b111      	cbz	r1, 8009204 <_reclaim_reent+0x54>
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 face 	bl	80097a0 <_free_r>
 8009204:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009206:	b111      	cbz	r1, 800920e <_reclaim_reent+0x5e>
 8009208:	4620      	mov	r0, r4
 800920a:	f000 fac9 	bl	80097a0 <_free_r>
 800920e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009210:	b111      	cbz	r1, 8009218 <_reclaim_reent+0x68>
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fac4 	bl	80097a0 <_free_r>
 8009218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921a:	b111      	cbz	r1, 8009222 <_reclaim_reent+0x72>
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fabf 	bl	80097a0 <_free_r>
 8009222:	69a3      	ldr	r3, [r4, #24]
 8009224:	b1e3      	cbz	r3, 8009260 <_reclaim_reent+0xb0>
 8009226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009228:	4620      	mov	r0, r4
 800922a:	4798      	blx	r3
 800922c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800922e:	b1b9      	cbz	r1, 8009260 <_reclaim_reent+0xb0>
 8009230:	4620      	mov	r0, r4
 8009232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009236:	f7ff bfad 	b.w	8009194 <cleanup_glue>
 800923a:	5949      	ldr	r1, [r1, r5]
 800923c:	b941      	cbnz	r1, 8009250 <_reclaim_reent+0xa0>
 800923e:	3504      	adds	r5, #4
 8009240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009242:	2d80      	cmp	r5, #128	; 0x80
 8009244:	68d9      	ldr	r1, [r3, #12]
 8009246:	d1f8      	bne.n	800923a <_reclaim_reent+0x8a>
 8009248:	4620      	mov	r0, r4
 800924a:	f000 faa9 	bl	80097a0 <_free_r>
 800924e:	e7ba      	b.n	80091c6 <_reclaim_reent+0x16>
 8009250:	680e      	ldr	r6, [r1, #0]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 faa4 	bl	80097a0 <_free_r>
 8009258:	4631      	mov	r1, r6
 800925a:	e7ef      	b.n	800923c <_reclaim_reent+0x8c>
 800925c:	2500      	movs	r5, #0
 800925e:	e7ef      	b.n	8009240 <_reclaim_reent+0x90>
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	bf00      	nop
 8009264:	20000010 	.word	0x20000010

08009268 <_sbrk_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	; (8009284 <_sbrk_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f8 fc12 	bl	8001a9c <_sbrk>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_sbrk_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_sbrk_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	2000446c 	.word	0x2000446c

08009288 <siprintf>:
 8009288:	b40e      	push	{r1, r2, r3}
 800928a:	b500      	push	{lr}
 800928c:	b09c      	sub	sp, #112	; 0x70
 800928e:	ab1d      	add	r3, sp, #116	; 0x74
 8009290:	9002      	str	r0, [sp, #8]
 8009292:	9006      	str	r0, [sp, #24]
 8009294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009298:	4809      	ldr	r0, [pc, #36]	; (80092c0 <siprintf+0x38>)
 800929a:	9107      	str	r1, [sp, #28]
 800929c:	9104      	str	r1, [sp, #16]
 800929e:	4909      	ldr	r1, [pc, #36]	; (80092c4 <siprintf+0x3c>)
 80092a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a4:	9105      	str	r1, [sp, #20]
 80092a6:	6800      	ldr	r0, [r0, #0]
 80092a8:	9301      	str	r3, [sp, #4]
 80092aa:	a902      	add	r1, sp, #8
 80092ac:	f000 fb20 	bl	80098f0 <_svfiprintf_r>
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	b01c      	add	sp, #112	; 0x70
 80092b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092bc:	b003      	add	sp, #12
 80092be:	4770      	bx	lr
 80092c0:	20000010 	.word	0x20000010
 80092c4:	ffff0208 	.word	0xffff0208

080092c8 <__sread>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d0:	f000 fda2 	bl	8009e18 <_read_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	bfab      	itete	ge
 80092d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092da:	89a3      	ldrhlt	r3, [r4, #12]
 80092dc:	181b      	addge	r3, r3, r0
 80092de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092e2:	bfac      	ite	ge
 80092e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092e6:	81a3      	strhlt	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__swrite>:
 80092ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	461f      	mov	r7, r3
 80092f0:	898b      	ldrh	r3, [r1, #12]
 80092f2:	05db      	lsls	r3, r3, #23
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4616      	mov	r6, r2
 80092fa:	d505      	bpl.n	8009308 <__swrite+0x1e>
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	2302      	movs	r3, #2
 8009302:	2200      	movs	r2, #0
 8009304:	f000 f9c8 	bl	8009698 <_lseek_r>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	4628      	mov	r0, r5
 800931a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	f000 b869 	b.w	80093f4 <_write_r>

08009322 <__sseek>:
 8009322:	b510      	push	{r4, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800932a:	f000 f9b5 	bl	8009698 <_lseek_r>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	bf15      	itete	ne
 8009334:	6560      	strne	r0, [r4, #84]	; 0x54
 8009336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800933a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800933e:	81a3      	strheq	r3, [r4, #12]
 8009340:	bf18      	it	ne
 8009342:	81a3      	strhne	r3, [r4, #12]
 8009344:	bd10      	pop	{r4, pc}

08009346 <__sclose>:
 8009346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934a:	f000 b8d3 	b.w	80094f4 <_close_r>
	...

08009350 <__swbuf_r>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	460e      	mov	r6, r1
 8009354:	4614      	mov	r4, r2
 8009356:	4605      	mov	r5, r0
 8009358:	b118      	cbz	r0, 8009362 <__swbuf_r+0x12>
 800935a:	6983      	ldr	r3, [r0, #24]
 800935c:	b90b      	cbnz	r3, 8009362 <__swbuf_r+0x12>
 800935e:	f7ff fd33 	bl	8008dc8 <__sinit>
 8009362:	4b21      	ldr	r3, [pc, #132]	; (80093e8 <__swbuf_r+0x98>)
 8009364:	429c      	cmp	r4, r3
 8009366:	d12b      	bne.n	80093c0 <__swbuf_r+0x70>
 8009368:	686c      	ldr	r4, [r5, #4]
 800936a:	69a3      	ldr	r3, [r4, #24]
 800936c:	60a3      	str	r3, [r4, #8]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	071a      	lsls	r2, r3, #28
 8009372:	d52f      	bpl.n	80093d4 <__swbuf_r+0x84>
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	b36b      	cbz	r3, 80093d4 <__swbuf_r+0x84>
 8009378:	6923      	ldr	r3, [r4, #16]
 800937a:	6820      	ldr	r0, [r4, #0]
 800937c:	1ac0      	subs	r0, r0, r3
 800937e:	6963      	ldr	r3, [r4, #20]
 8009380:	b2f6      	uxtb	r6, r6
 8009382:	4283      	cmp	r3, r0
 8009384:	4637      	mov	r7, r6
 8009386:	dc04      	bgt.n	8009392 <__swbuf_r+0x42>
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f948 	bl	8009620 <_fflush_r>
 8009390:	bb30      	cbnz	r0, 80093e0 <__swbuf_r+0x90>
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	3b01      	subs	r3, #1
 8009396:	60a3      	str	r3, [r4, #8]
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	6022      	str	r2, [r4, #0]
 800939e:	701e      	strb	r6, [r3, #0]
 80093a0:	6963      	ldr	r3, [r4, #20]
 80093a2:	3001      	adds	r0, #1
 80093a4:	4283      	cmp	r3, r0
 80093a6:	d004      	beq.n	80093b2 <__swbuf_r+0x62>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	07db      	lsls	r3, r3, #31
 80093ac:	d506      	bpl.n	80093bc <__swbuf_r+0x6c>
 80093ae:	2e0a      	cmp	r6, #10
 80093b0:	d104      	bne.n	80093bc <__swbuf_r+0x6c>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f933 	bl	8009620 <_fflush_r>
 80093ba:	b988      	cbnz	r0, 80093e0 <__swbuf_r+0x90>
 80093bc:	4638      	mov	r0, r7
 80093be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <__swbuf_r+0x9c>)
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d101      	bne.n	80093ca <__swbuf_r+0x7a>
 80093c6:	68ac      	ldr	r4, [r5, #8]
 80093c8:	e7cf      	b.n	800936a <__swbuf_r+0x1a>
 80093ca:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <__swbuf_r+0xa0>)
 80093cc:	429c      	cmp	r4, r3
 80093ce:	bf08      	it	eq
 80093d0:	68ec      	ldreq	r4, [r5, #12]
 80093d2:	e7ca      	b.n	800936a <__swbuf_r+0x1a>
 80093d4:	4621      	mov	r1, r4
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 f81e 	bl	8009418 <__swsetup_r>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d0cb      	beq.n	8009378 <__swbuf_r+0x28>
 80093e0:	f04f 37ff 	mov.w	r7, #4294967295
 80093e4:	e7ea      	b.n	80093bc <__swbuf_r+0x6c>
 80093e6:	bf00      	nop
 80093e8:	0800a280 	.word	0x0800a280
 80093ec:	0800a2a0 	.word	0x0800a2a0
 80093f0:	0800a260 	.word	0x0800a260

080093f4 <_write_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d07      	ldr	r5, [pc, #28]	; (8009414 <_write_r+0x20>)
 80093f8:	4604      	mov	r4, r0
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	602a      	str	r2, [r5, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	f7f8 faf9 	bl	80019fa <_write>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_write_r+0x1e>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_write_r+0x1e>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	2000446c 	.word	0x2000446c

08009418 <__swsetup_r>:
 8009418:	4b32      	ldr	r3, [pc, #200]	; (80094e4 <__swsetup_r+0xcc>)
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	4606      	mov	r6, r0
 8009420:	460c      	mov	r4, r1
 8009422:	b125      	cbz	r5, 800942e <__swsetup_r+0x16>
 8009424:	69ab      	ldr	r3, [r5, #24]
 8009426:	b913      	cbnz	r3, 800942e <__swsetup_r+0x16>
 8009428:	4628      	mov	r0, r5
 800942a:	f7ff fccd 	bl	8008dc8 <__sinit>
 800942e:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <__swsetup_r+0xd0>)
 8009430:	429c      	cmp	r4, r3
 8009432:	d10f      	bne.n	8009454 <__swsetup_r+0x3c>
 8009434:	686c      	ldr	r4, [r5, #4]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800943c:	0719      	lsls	r1, r3, #28
 800943e:	d42c      	bmi.n	800949a <__swsetup_r+0x82>
 8009440:	06dd      	lsls	r5, r3, #27
 8009442:	d411      	bmi.n	8009468 <__swsetup_r+0x50>
 8009444:	2309      	movs	r3, #9
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	f04f 30ff 	mov.w	r0, #4294967295
 8009452:	e03e      	b.n	80094d2 <__swsetup_r+0xba>
 8009454:	4b25      	ldr	r3, [pc, #148]	; (80094ec <__swsetup_r+0xd4>)
 8009456:	429c      	cmp	r4, r3
 8009458:	d101      	bne.n	800945e <__swsetup_r+0x46>
 800945a:	68ac      	ldr	r4, [r5, #8]
 800945c:	e7eb      	b.n	8009436 <__swsetup_r+0x1e>
 800945e:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <__swsetup_r+0xd8>)
 8009460:	429c      	cmp	r4, r3
 8009462:	bf08      	it	eq
 8009464:	68ec      	ldreq	r4, [r5, #12]
 8009466:	e7e6      	b.n	8009436 <__swsetup_r+0x1e>
 8009468:	0758      	lsls	r0, r3, #29
 800946a:	d512      	bpl.n	8009492 <__swsetup_r+0x7a>
 800946c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946e:	b141      	cbz	r1, 8009482 <__swsetup_r+0x6a>
 8009470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009474:	4299      	cmp	r1, r3
 8009476:	d002      	beq.n	800947e <__swsetup_r+0x66>
 8009478:	4630      	mov	r0, r6
 800947a:	f000 f991 	bl	80097a0 <_free_r>
 800947e:	2300      	movs	r3, #0
 8009480:	6363      	str	r3, [r4, #52]	; 0x34
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009488:	81a3      	strh	r3, [r4, #12]
 800948a:	2300      	movs	r3, #0
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f043 0308 	orr.w	r3, r3, #8
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	b94b      	cbnz	r3, 80094b2 <__swsetup_r+0x9a>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a8:	d003      	beq.n	80094b2 <__swsetup_r+0x9a>
 80094aa:	4621      	mov	r1, r4
 80094ac:	4630      	mov	r0, r6
 80094ae:	f000 f92b 	bl	8009708 <__smakebuf_r>
 80094b2:	89a0      	ldrh	r0, [r4, #12]
 80094b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094b8:	f010 0301 	ands.w	r3, r0, #1
 80094bc:	d00a      	beq.n	80094d4 <__swsetup_r+0xbc>
 80094be:	2300      	movs	r3, #0
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	6963      	ldr	r3, [r4, #20]
 80094c4:	425b      	negs	r3, r3
 80094c6:	61a3      	str	r3, [r4, #24]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	b943      	cbnz	r3, 80094de <__swsetup_r+0xc6>
 80094cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094d0:	d1ba      	bne.n	8009448 <__swsetup_r+0x30>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	0781      	lsls	r1, r0, #30
 80094d6:	bf58      	it	pl
 80094d8:	6963      	ldrpl	r3, [r4, #20]
 80094da:	60a3      	str	r3, [r4, #8]
 80094dc:	e7f4      	b.n	80094c8 <__swsetup_r+0xb0>
 80094de:	2000      	movs	r0, #0
 80094e0:	e7f7      	b.n	80094d2 <__swsetup_r+0xba>
 80094e2:	bf00      	nop
 80094e4:	20000010 	.word	0x20000010
 80094e8:	0800a280 	.word	0x0800a280
 80094ec:	0800a2a0 	.word	0x0800a2a0
 80094f0:	0800a260 	.word	0x0800a260

080094f4 <_close_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d06      	ldr	r5, [pc, #24]	; (8009510 <_close_r+0x1c>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	f7f8 fa97 	bl	8001a32 <_close>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_close_r+0x1a>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_close_r+0x1a>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	2000446c 	.word	0x2000446c

08009514 <__sflush_r>:
 8009514:	898a      	ldrh	r2, [r1, #12]
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	4605      	mov	r5, r0
 800951c:	0710      	lsls	r0, r2, #28
 800951e:	460c      	mov	r4, r1
 8009520:	d458      	bmi.n	80095d4 <__sflush_r+0xc0>
 8009522:	684b      	ldr	r3, [r1, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dc05      	bgt.n	8009534 <__sflush_r+0x20>
 8009528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	dc02      	bgt.n	8009534 <__sflush_r+0x20>
 800952e:	2000      	movs	r0, #0
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009536:	2e00      	cmp	r6, #0
 8009538:	d0f9      	beq.n	800952e <__sflush_r+0x1a>
 800953a:	2300      	movs	r3, #0
 800953c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009540:	682f      	ldr	r7, [r5, #0]
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	d032      	beq.n	80095ac <__sflush_r+0x98>
 8009546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	075a      	lsls	r2, r3, #29
 800954c:	d505      	bpl.n	800955a <__sflush_r+0x46>
 800954e:	6863      	ldr	r3, [r4, #4]
 8009550:	1ac0      	subs	r0, r0, r3
 8009552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009554:	b10b      	cbz	r3, 800955a <__sflush_r+0x46>
 8009556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009558:	1ac0      	subs	r0, r0, r3
 800955a:	2300      	movs	r3, #0
 800955c:	4602      	mov	r2, r0
 800955e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	4628      	mov	r0, r5
 8009564:	47b0      	blx	r6
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	d106      	bne.n	800957a <__sflush_r+0x66>
 800956c:	6829      	ldr	r1, [r5, #0]
 800956e:	291d      	cmp	r1, #29
 8009570:	d82c      	bhi.n	80095cc <__sflush_r+0xb8>
 8009572:	4a2a      	ldr	r2, [pc, #168]	; (800961c <__sflush_r+0x108>)
 8009574:	40ca      	lsrs	r2, r1
 8009576:	07d6      	lsls	r6, r2, #31
 8009578:	d528      	bpl.n	80095cc <__sflush_r+0xb8>
 800957a:	2200      	movs	r2, #0
 800957c:	6062      	str	r2, [r4, #4]
 800957e:	04d9      	lsls	r1, r3, #19
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	6022      	str	r2, [r4, #0]
 8009584:	d504      	bpl.n	8009590 <__sflush_r+0x7c>
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	d101      	bne.n	800958e <__sflush_r+0x7a>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b903      	cbnz	r3, 8009590 <__sflush_r+0x7c>
 800958e:	6560      	str	r0, [r4, #84]	; 0x54
 8009590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009592:	602f      	str	r7, [r5, #0]
 8009594:	2900      	cmp	r1, #0
 8009596:	d0ca      	beq.n	800952e <__sflush_r+0x1a>
 8009598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800959c:	4299      	cmp	r1, r3
 800959e:	d002      	beq.n	80095a6 <__sflush_r+0x92>
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 f8fd 	bl	80097a0 <_free_r>
 80095a6:	2000      	movs	r0, #0
 80095a8:	6360      	str	r0, [r4, #52]	; 0x34
 80095aa:	e7c1      	b.n	8009530 <__sflush_r+0x1c>
 80095ac:	6a21      	ldr	r1, [r4, #32]
 80095ae:	2301      	movs	r3, #1
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b0      	blx	r6
 80095b4:	1c41      	adds	r1, r0, #1
 80095b6:	d1c7      	bne.n	8009548 <__sflush_r+0x34>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0c4      	beq.n	8009548 <__sflush_r+0x34>
 80095be:	2b1d      	cmp	r3, #29
 80095c0:	d001      	beq.n	80095c6 <__sflush_r+0xb2>
 80095c2:	2b16      	cmp	r3, #22
 80095c4:	d101      	bne.n	80095ca <__sflush_r+0xb6>
 80095c6:	602f      	str	r7, [r5, #0]
 80095c8:	e7b1      	b.n	800952e <__sflush_r+0x1a>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	e7ad      	b.n	8009530 <__sflush_r+0x1c>
 80095d4:	690f      	ldr	r7, [r1, #16]
 80095d6:	2f00      	cmp	r7, #0
 80095d8:	d0a9      	beq.n	800952e <__sflush_r+0x1a>
 80095da:	0793      	lsls	r3, r2, #30
 80095dc:	680e      	ldr	r6, [r1, #0]
 80095de:	bf08      	it	eq
 80095e0:	694b      	ldreq	r3, [r1, #20]
 80095e2:	600f      	str	r7, [r1, #0]
 80095e4:	bf18      	it	ne
 80095e6:	2300      	movne	r3, #0
 80095e8:	eba6 0807 	sub.w	r8, r6, r7
 80095ec:	608b      	str	r3, [r1, #8]
 80095ee:	f1b8 0f00 	cmp.w	r8, #0
 80095f2:	dd9c      	ble.n	800952e <__sflush_r+0x1a>
 80095f4:	6a21      	ldr	r1, [r4, #32]
 80095f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095f8:	4643      	mov	r3, r8
 80095fa:	463a      	mov	r2, r7
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b0      	blx	r6
 8009600:	2800      	cmp	r0, #0
 8009602:	dc06      	bgt.n	8009612 <__sflush_r+0xfe>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e78e      	b.n	8009530 <__sflush_r+0x1c>
 8009612:	4407      	add	r7, r0
 8009614:	eba8 0800 	sub.w	r8, r8, r0
 8009618:	e7e9      	b.n	80095ee <__sflush_r+0xda>
 800961a:	bf00      	nop
 800961c:	20400001 	.word	0x20400001

08009620 <_fflush_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	690b      	ldr	r3, [r1, #16]
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	b913      	cbnz	r3, 8009630 <_fflush_r+0x10>
 800962a:	2500      	movs	r5, #0
 800962c:	4628      	mov	r0, r5
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	b118      	cbz	r0, 800963a <_fflush_r+0x1a>
 8009632:	6983      	ldr	r3, [r0, #24]
 8009634:	b90b      	cbnz	r3, 800963a <_fflush_r+0x1a>
 8009636:	f7ff fbc7 	bl	8008dc8 <__sinit>
 800963a:	4b14      	ldr	r3, [pc, #80]	; (800968c <_fflush_r+0x6c>)
 800963c:	429c      	cmp	r4, r3
 800963e:	d11b      	bne.n	8009678 <_fflush_r+0x58>
 8009640:	686c      	ldr	r4, [r5, #4]
 8009642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0ef      	beq.n	800962a <_fflush_r+0xa>
 800964a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800964c:	07d0      	lsls	r0, r2, #31
 800964e:	d404      	bmi.n	800965a <_fflush_r+0x3a>
 8009650:	0599      	lsls	r1, r3, #22
 8009652:	d402      	bmi.n	800965a <_fflush_r+0x3a>
 8009654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009656:	f7ff fc7a 	bl	8008f4e <__retarget_lock_acquire_recursive>
 800965a:	4628      	mov	r0, r5
 800965c:	4621      	mov	r1, r4
 800965e:	f7ff ff59 	bl	8009514 <__sflush_r>
 8009662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009664:	07da      	lsls	r2, r3, #31
 8009666:	4605      	mov	r5, r0
 8009668:	d4e0      	bmi.n	800962c <_fflush_r+0xc>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	059b      	lsls	r3, r3, #22
 800966e:	d4dd      	bmi.n	800962c <_fflush_r+0xc>
 8009670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009672:	f7ff fc6d 	bl	8008f50 <__retarget_lock_release_recursive>
 8009676:	e7d9      	b.n	800962c <_fflush_r+0xc>
 8009678:	4b05      	ldr	r3, [pc, #20]	; (8009690 <_fflush_r+0x70>)
 800967a:	429c      	cmp	r4, r3
 800967c:	d101      	bne.n	8009682 <_fflush_r+0x62>
 800967e:	68ac      	ldr	r4, [r5, #8]
 8009680:	e7df      	b.n	8009642 <_fflush_r+0x22>
 8009682:	4b04      	ldr	r3, [pc, #16]	; (8009694 <_fflush_r+0x74>)
 8009684:	429c      	cmp	r4, r3
 8009686:	bf08      	it	eq
 8009688:	68ec      	ldreq	r4, [r5, #12]
 800968a:	e7da      	b.n	8009642 <_fflush_r+0x22>
 800968c:	0800a280 	.word	0x0800a280
 8009690:	0800a2a0 	.word	0x0800a2a0
 8009694:	0800a260 	.word	0x0800a260

08009698 <_lseek_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_lseek_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f8 f9ea 	bl	8001a80 <_lseek>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_lseek_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_lseek_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	2000446c 	.word	0x2000446c

080096bc <__swhatbuf_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	460e      	mov	r6, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	2900      	cmp	r1, #0
 80096c6:	b096      	sub	sp, #88	; 0x58
 80096c8:	4614      	mov	r4, r2
 80096ca:	461d      	mov	r5, r3
 80096cc:	da08      	bge.n	80096e0 <__swhatbuf_r+0x24>
 80096ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	061a      	lsls	r2, r3, #24
 80096d8:	d410      	bmi.n	80096fc <__swhatbuf_r+0x40>
 80096da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096de:	e00e      	b.n	80096fe <__swhatbuf_r+0x42>
 80096e0:	466a      	mov	r2, sp
 80096e2:	f000 fbab 	bl	8009e3c <_fstat_r>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	dbf1      	blt.n	80096ce <__swhatbuf_r+0x12>
 80096ea:	9a01      	ldr	r2, [sp, #4]
 80096ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096f4:	425a      	negs	r2, r3
 80096f6:	415a      	adcs	r2, r3
 80096f8:	602a      	str	r2, [r5, #0]
 80096fa:	e7ee      	b.n	80096da <__swhatbuf_r+0x1e>
 80096fc:	2340      	movs	r3, #64	; 0x40
 80096fe:	2000      	movs	r0, #0
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	b016      	add	sp, #88	; 0x58
 8009704:	bd70      	pop	{r4, r5, r6, pc}
	...

08009708 <__smakebuf_r>:
 8009708:	898b      	ldrh	r3, [r1, #12]
 800970a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800970c:	079d      	lsls	r5, r3, #30
 800970e:	4606      	mov	r6, r0
 8009710:	460c      	mov	r4, r1
 8009712:	d507      	bpl.n	8009724 <__smakebuf_r+0x1c>
 8009714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	2301      	movs	r3, #1
 800971e:	6163      	str	r3, [r4, #20]
 8009720:	b002      	add	sp, #8
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	ab01      	add	r3, sp, #4
 8009726:	466a      	mov	r2, sp
 8009728:	f7ff ffc8 	bl	80096bc <__swhatbuf_r>
 800972c:	9900      	ldr	r1, [sp, #0]
 800972e:	4605      	mov	r5, r0
 8009730:	4630      	mov	r0, r6
 8009732:	f7ff fc45 	bl	8008fc0 <_malloc_r>
 8009736:	b948      	cbnz	r0, 800974c <__smakebuf_r+0x44>
 8009738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973c:	059a      	lsls	r2, r3, #22
 800973e:	d4ef      	bmi.n	8009720 <__smakebuf_r+0x18>
 8009740:	f023 0303 	bic.w	r3, r3, #3
 8009744:	f043 0302 	orr.w	r3, r3, #2
 8009748:	81a3      	strh	r3, [r4, #12]
 800974a:	e7e3      	b.n	8009714 <__smakebuf_r+0xc>
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <__smakebuf_r+0x7c>)
 800974e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	6020      	str	r0, [r4, #0]
 8009754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	6163      	str	r3, [r4, #20]
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	6120      	str	r0, [r4, #16]
 8009762:	b15b      	cbz	r3, 800977c <__smakebuf_r+0x74>
 8009764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009768:	4630      	mov	r0, r6
 800976a:	f000 fb79 	bl	8009e60 <_isatty_r>
 800976e:	b128      	cbz	r0, 800977c <__smakebuf_r+0x74>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	f023 0303 	bic.w	r3, r3, #3
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	89a0      	ldrh	r0, [r4, #12]
 800977e:	4305      	orrs	r5, r0
 8009780:	81a5      	strh	r5, [r4, #12]
 8009782:	e7cd      	b.n	8009720 <__smakebuf_r+0x18>
 8009784:	08008d61 	.word	0x08008d61

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__malloc_lock+0x8>)
 800978a:	f7ff bbe0 	b.w	8008f4e <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	20004460 	.word	0x20004460

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_unlock+0x8>)
 8009796:	f7ff bbdb 	b.w	8008f50 <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	20004460 	.word	0x20004460

080097a0 <_free_r>:
 80097a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a2:	2900      	cmp	r1, #0
 80097a4:	d044      	beq.n	8009830 <_free_r+0x90>
 80097a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097aa:	9001      	str	r0, [sp, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f1a1 0404 	sub.w	r4, r1, #4
 80097b2:	bfb8      	it	lt
 80097b4:	18e4      	addlt	r4, r4, r3
 80097b6:	f7ff ffe7 	bl	8009788 <__malloc_lock>
 80097ba:	4a1e      	ldr	r2, [pc, #120]	; (8009834 <_free_r+0x94>)
 80097bc:	9801      	ldr	r0, [sp, #4]
 80097be:	6813      	ldr	r3, [r2, #0]
 80097c0:	b933      	cbnz	r3, 80097d0 <_free_r+0x30>
 80097c2:	6063      	str	r3, [r4, #4]
 80097c4:	6014      	str	r4, [r2, #0]
 80097c6:	b003      	add	sp, #12
 80097c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097cc:	f7ff bfe2 	b.w	8009794 <__malloc_unlock>
 80097d0:	42a3      	cmp	r3, r4
 80097d2:	d908      	bls.n	80097e6 <_free_r+0x46>
 80097d4:	6825      	ldr	r5, [r4, #0]
 80097d6:	1961      	adds	r1, r4, r5
 80097d8:	428b      	cmp	r3, r1
 80097da:	bf01      	itttt	eq
 80097dc:	6819      	ldreq	r1, [r3, #0]
 80097de:	685b      	ldreq	r3, [r3, #4]
 80097e0:	1949      	addeq	r1, r1, r5
 80097e2:	6021      	streq	r1, [r4, #0]
 80097e4:	e7ed      	b.n	80097c2 <_free_r+0x22>
 80097e6:	461a      	mov	r2, r3
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	b10b      	cbz	r3, 80097f0 <_free_r+0x50>
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	d9fa      	bls.n	80097e6 <_free_r+0x46>
 80097f0:	6811      	ldr	r1, [r2, #0]
 80097f2:	1855      	adds	r5, r2, r1
 80097f4:	42a5      	cmp	r5, r4
 80097f6:	d10b      	bne.n	8009810 <_free_r+0x70>
 80097f8:	6824      	ldr	r4, [r4, #0]
 80097fa:	4421      	add	r1, r4
 80097fc:	1854      	adds	r4, r2, r1
 80097fe:	42a3      	cmp	r3, r4
 8009800:	6011      	str	r1, [r2, #0]
 8009802:	d1e0      	bne.n	80097c6 <_free_r+0x26>
 8009804:	681c      	ldr	r4, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	6053      	str	r3, [r2, #4]
 800980a:	4421      	add	r1, r4
 800980c:	6011      	str	r1, [r2, #0]
 800980e:	e7da      	b.n	80097c6 <_free_r+0x26>
 8009810:	d902      	bls.n	8009818 <_free_r+0x78>
 8009812:	230c      	movs	r3, #12
 8009814:	6003      	str	r3, [r0, #0]
 8009816:	e7d6      	b.n	80097c6 <_free_r+0x26>
 8009818:	6825      	ldr	r5, [r4, #0]
 800981a:	1961      	adds	r1, r4, r5
 800981c:	428b      	cmp	r3, r1
 800981e:	bf04      	itt	eq
 8009820:	6819      	ldreq	r1, [r3, #0]
 8009822:	685b      	ldreq	r3, [r3, #4]
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	bf04      	itt	eq
 8009828:	1949      	addeq	r1, r1, r5
 800982a:	6021      	streq	r1, [r4, #0]
 800982c:	6054      	str	r4, [r2, #4]
 800982e:	e7ca      	b.n	80097c6 <_free_r+0x26>
 8009830:	b003      	add	sp, #12
 8009832:	bd30      	pop	{r4, r5, pc}
 8009834:	20004464 	.word	0x20004464

08009838 <__ssputs_r>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	688e      	ldr	r6, [r1, #8]
 800983e:	429e      	cmp	r6, r3
 8009840:	4682      	mov	sl, r0
 8009842:	460c      	mov	r4, r1
 8009844:	4690      	mov	r8, r2
 8009846:	461f      	mov	r7, r3
 8009848:	d838      	bhi.n	80098bc <__ssputs_r+0x84>
 800984a:	898a      	ldrh	r2, [r1, #12]
 800984c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009850:	d032      	beq.n	80098b8 <__ssputs_r+0x80>
 8009852:	6825      	ldr	r5, [r4, #0]
 8009854:	6909      	ldr	r1, [r1, #16]
 8009856:	eba5 0901 	sub.w	r9, r5, r1
 800985a:	6965      	ldr	r5, [r4, #20]
 800985c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009864:	3301      	adds	r3, #1
 8009866:	444b      	add	r3, r9
 8009868:	106d      	asrs	r5, r5, #1
 800986a:	429d      	cmp	r5, r3
 800986c:	bf38      	it	cc
 800986e:	461d      	movcc	r5, r3
 8009870:	0553      	lsls	r3, r2, #21
 8009872:	d531      	bpl.n	80098d8 <__ssputs_r+0xa0>
 8009874:	4629      	mov	r1, r5
 8009876:	f7ff fba3 	bl	8008fc0 <_malloc_r>
 800987a:	4606      	mov	r6, r0
 800987c:	b950      	cbnz	r0, 8009894 <__ssputs_r+0x5c>
 800987e:	230c      	movs	r3, #12
 8009880:	f8ca 3000 	str.w	r3, [sl]
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	6921      	ldr	r1, [r4, #16]
 8009896:	464a      	mov	r2, r9
 8009898:	f7ff fb5b 	bl	8008f52 <memcpy>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	6126      	str	r6, [r4, #16]
 80098aa:	6165      	str	r5, [r4, #20]
 80098ac:	444e      	add	r6, r9
 80098ae:	eba5 0509 	sub.w	r5, r5, r9
 80098b2:	6026      	str	r6, [r4, #0]
 80098b4:	60a5      	str	r5, [r4, #8]
 80098b6:	463e      	mov	r6, r7
 80098b8:	42be      	cmp	r6, r7
 80098ba:	d900      	bls.n	80098be <__ssputs_r+0x86>
 80098bc:	463e      	mov	r6, r7
 80098be:	6820      	ldr	r0, [r4, #0]
 80098c0:	4632      	mov	r2, r6
 80098c2:	4641      	mov	r1, r8
 80098c4:	f000 fadc 	bl	8009e80 <memmove>
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	1b9b      	subs	r3, r3, r6
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	4433      	add	r3, r6
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	2000      	movs	r0, #0
 80098d6:	e7db      	b.n	8009890 <__ssputs_r+0x58>
 80098d8:	462a      	mov	r2, r5
 80098da:	f000 faeb 	bl	8009eb4 <_realloc_r>
 80098de:	4606      	mov	r6, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d1e1      	bne.n	80098a8 <__ssputs_r+0x70>
 80098e4:	6921      	ldr	r1, [r4, #16]
 80098e6:	4650      	mov	r0, sl
 80098e8:	f7ff ff5a 	bl	80097a0 <_free_r>
 80098ec:	e7c7      	b.n	800987e <__ssputs_r+0x46>
	...

080098f0 <_svfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4698      	mov	r8, r3
 80098f6:	898b      	ldrh	r3, [r1, #12]
 80098f8:	061b      	lsls	r3, r3, #24
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4607      	mov	r7, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	4614      	mov	r4, r2
 8009902:	d50e      	bpl.n	8009922 <_svfiprintf_r+0x32>
 8009904:	690b      	ldr	r3, [r1, #16]
 8009906:	b963      	cbnz	r3, 8009922 <_svfiprintf_r+0x32>
 8009908:	2140      	movs	r1, #64	; 0x40
 800990a:	f7ff fb59 	bl	8008fc0 <_malloc_r>
 800990e:	6028      	str	r0, [r5, #0]
 8009910:	6128      	str	r0, [r5, #16]
 8009912:	b920      	cbnz	r0, 800991e <_svfiprintf_r+0x2e>
 8009914:	230c      	movs	r3, #12
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	e0d1      	b.n	8009ac2 <_svfiprintf_r+0x1d2>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	616b      	str	r3, [r5, #20]
 8009922:	2300      	movs	r3, #0
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	2320      	movs	r3, #32
 8009928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009930:	2330      	movs	r3, #48	; 0x30
 8009932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009adc <_svfiprintf_r+0x1ec>
 8009936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993a:	f04f 0901 	mov.w	r9, #1
 800993e:	4623      	mov	r3, r4
 8009940:	469a      	mov	sl, r3
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	b10a      	cbz	r2, 800994c <_svfiprintf_r+0x5c>
 8009948:	2a25      	cmp	r2, #37	; 0x25
 800994a:	d1f9      	bne.n	8009940 <_svfiprintf_r+0x50>
 800994c:	ebba 0b04 	subs.w	fp, sl, r4
 8009950:	d00b      	beq.n	800996a <_svfiprintf_r+0x7a>
 8009952:	465b      	mov	r3, fp
 8009954:	4622      	mov	r2, r4
 8009956:	4629      	mov	r1, r5
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff ff6d 	bl	8009838 <__ssputs_r>
 800995e:	3001      	adds	r0, #1
 8009960:	f000 80aa 	beq.w	8009ab8 <_svfiprintf_r+0x1c8>
 8009964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009966:	445a      	add	r2, fp
 8009968:	9209      	str	r2, [sp, #36]	; 0x24
 800996a:	f89a 3000 	ldrb.w	r3, [sl]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80a2 	beq.w	8009ab8 <_svfiprintf_r+0x1c8>
 8009974:	2300      	movs	r3, #0
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997e:	f10a 0a01 	add.w	sl, sl, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998a:	931a      	str	r3, [sp, #104]	; 0x68
 800998c:	4654      	mov	r4, sl
 800998e:	2205      	movs	r2, #5
 8009990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009994:	4851      	ldr	r0, [pc, #324]	; (8009adc <_svfiprintf_r+0x1ec>)
 8009996:	f7f6 fc33 	bl	8000200 <memchr>
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	b9d8      	cbnz	r0, 80099d6 <_svfiprintf_r+0xe6>
 800999e:	06d0      	lsls	r0, r2, #27
 80099a0:	bf44      	itt	mi
 80099a2:	2320      	movmi	r3, #32
 80099a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a8:	0711      	lsls	r1, r2, #28
 80099aa:	bf44      	itt	mi
 80099ac:	232b      	movmi	r3, #43	; 0x2b
 80099ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b2:	f89a 3000 	ldrb.w	r3, [sl]
 80099b6:	2b2a      	cmp	r3, #42	; 0x2a
 80099b8:	d015      	beq.n	80099e6 <_svfiprintf_r+0xf6>
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4654      	mov	r4, sl
 80099be:	2000      	movs	r0, #0
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4621      	mov	r1, r4
 80099c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ca:	3b30      	subs	r3, #48	; 0x30
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d94e      	bls.n	8009a6e <_svfiprintf_r+0x17e>
 80099d0:	b1b0      	cbz	r0, 8009a00 <_svfiprintf_r+0x110>
 80099d2:	9207      	str	r2, [sp, #28]
 80099d4:	e014      	b.n	8009a00 <_svfiprintf_r+0x110>
 80099d6:	eba0 0308 	sub.w	r3, r0, r8
 80099da:	fa09 f303 	lsl.w	r3, r9, r3
 80099de:	4313      	orrs	r3, r2
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	46a2      	mov	sl, r4
 80099e4:	e7d2      	b.n	800998c <_svfiprintf_r+0x9c>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	1d19      	adds	r1, r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	9103      	str	r1, [sp, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfbb      	ittet	lt
 80099f2:	425b      	neglt	r3, r3
 80099f4:	f042 0202 	orrlt.w	r2, r2, #2
 80099f8:	9307      	strge	r3, [sp, #28]
 80099fa:	9307      	strlt	r3, [sp, #28]
 80099fc:	bfb8      	it	lt
 80099fe:	9204      	strlt	r2, [sp, #16]
 8009a00:	7823      	ldrb	r3, [r4, #0]
 8009a02:	2b2e      	cmp	r3, #46	; 0x2e
 8009a04:	d10c      	bne.n	8009a20 <_svfiprintf_r+0x130>
 8009a06:	7863      	ldrb	r3, [r4, #1]
 8009a08:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0a:	d135      	bne.n	8009a78 <_svfiprintf_r+0x188>
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	9203      	str	r2, [sp, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfb8      	it	lt
 8009a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a1c:	3402      	adds	r4, #2
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009aec <_svfiprintf_r+0x1fc>
 8009a24:	7821      	ldrb	r1, [r4, #0]
 8009a26:	2203      	movs	r2, #3
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7f6 fbe9 	bl	8000200 <memchr>
 8009a2e:	b140      	cbz	r0, 8009a42 <_svfiprintf_r+0x152>
 8009a30:	2340      	movs	r3, #64	; 0x40
 8009a32:	eba0 000a 	sub.w	r0, r0, sl
 8009a36:	fa03 f000 	lsl.w	r0, r3, r0
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	4303      	orrs	r3, r0
 8009a3e:	3401      	adds	r4, #1
 8009a40:	9304      	str	r3, [sp, #16]
 8009a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a46:	4826      	ldr	r0, [pc, #152]	; (8009ae0 <_svfiprintf_r+0x1f0>)
 8009a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4c:	2206      	movs	r2, #6
 8009a4e:	f7f6 fbd7 	bl	8000200 <memchr>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d038      	beq.n	8009ac8 <_svfiprintf_r+0x1d8>
 8009a56:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <_svfiprintf_r+0x1f4>)
 8009a58:	bb1b      	cbnz	r3, 8009aa2 <_svfiprintf_r+0x1b2>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	3307      	adds	r3, #7
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	3308      	adds	r3, #8
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a68:	4433      	add	r3, r6
 8009a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6c:	e767      	b.n	800993e <_svfiprintf_r+0x4e>
 8009a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a72:	460c      	mov	r4, r1
 8009a74:	2001      	movs	r0, #1
 8009a76:	e7a5      	b.n	80099c4 <_svfiprintf_r+0xd4>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	3401      	adds	r4, #1
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f04f 0c0a 	mov.w	ip, #10
 8009a84:	4620      	mov	r0, r4
 8009a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a8a:	3a30      	subs	r2, #48	; 0x30
 8009a8c:	2a09      	cmp	r2, #9
 8009a8e:	d903      	bls.n	8009a98 <_svfiprintf_r+0x1a8>
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0c5      	beq.n	8009a20 <_svfiprintf_r+0x130>
 8009a94:	9105      	str	r1, [sp, #20]
 8009a96:	e7c3      	b.n	8009a20 <_svfiprintf_r+0x130>
 8009a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e7f0      	b.n	8009a84 <_svfiprintf_r+0x194>
 8009aa2:	ab03      	add	r3, sp, #12
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <_svfiprintf_r+0x1f8>)
 8009aaa:	a904      	add	r1, sp, #16
 8009aac:	4638      	mov	r0, r7
 8009aae:	f3af 8000 	nop.w
 8009ab2:	1c42      	adds	r2, r0, #1
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	d1d6      	bne.n	8009a66 <_svfiprintf_r+0x176>
 8009ab8:	89ab      	ldrh	r3, [r5, #12]
 8009aba:	065b      	lsls	r3, r3, #25
 8009abc:	f53f af2c 	bmi.w	8009918 <_svfiprintf_r+0x28>
 8009ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac2:	b01d      	add	sp, #116	; 0x74
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	462a      	mov	r2, r5
 8009ace:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <_svfiprintf_r+0x1f8>)
 8009ad0:	a904      	add	r1, sp, #16
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	f000 f87a 	bl	8009bcc <_printf_i>
 8009ad8:	e7eb      	b.n	8009ab2 <_svfiprintf_r+0x1c2>
 8009ada:	bf00      	nop
 8009adc:	0800a2c4 	.word	0x0800a2c4
 8009ae0:	0800a2ce 	.word	0x0800a2ce
 8009ae4:	00000000 	.word	0x00000000
 8009ae8:	08009839 	.word	0x08009839
 8009aec:	0800a2ca 	.word	0x0800a2ca

08009af0 <_printf_common>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	4616      	mov	r6, r2
 8009af6:	4699      	mov	r9, r3
 8009af8:	688a      	ldr	r2, [r1, #8]
 8009afa:	690b      	ldr	r3, [r1, #16]
 8009afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	bfb8      	it	lt
 8009b04:	4613      	movlt	r3, r2
 8009b06:	6033      	str	r3, [r6, #0]
 8009b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	b10a      	cbz	r2, 8009b16 <_printf_common+0x26>
 8009b12:	3301      	adds	r3, #1
 8009b14:	6033      	str	r3, [r6, #0]
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	0699      	lsls	r1, r3, #26
 8009b1a:	bf42      	ittt	mi
 8009b1c:	6833      	ldrmi	r3, [r6, #0]
 8009b1e:	3302      	addmi	r3, #2
 8009b20:	6033      	strmi	r3, [r6, #0]
 8009b22:	6825      	ldr	r5, [r4, #0]
 8009b24:	f015 0506 	ands.w	r5, r5, #6
 8009b28:	d106      	bne.n	8009b38 <_printf_common+0x48>
 8009b2a:	f104 0a19 	add.w	sl, r4, #25
 8009b2e:	68e3      	ldr	r3, [r4, #12]
 8009b30:	6832      	ldr	r2, [r6, #0]
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	dc26      	bgt.n	8009b86 <_printf_common+0x96>
 8009b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b3c:	1e13      	subs	r3, r2, #0
 8009b3e:	6822      	ldr	r2, [r4, #0]
 8009b40:	bf18      	it	ne
 8009b42:	2301      	movne	r3, #1
 8009b44:	0692      	lsls	r2, r2, #26
 8009b46:	d42b      	bmi.n	8009ba0 <_printf_common+0xb0>
 8009b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4638      	mov	r0, r7
 8009b50:	47c0      	blx	r8
 8009b52:	3001      	adds	r0, #1
 8009b54:	d01e      	beq.n	8009b94 <_printf_common+0xa4>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	68e5      	ldr	r5, [r4, #12]
 8009b5a:	6832      	ldr	r2, [r6, #0]
 8009b5c:	f003 0306 	and.w	r3, r3, #6
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	bf08      	it	eq
 8009b64:	1aad      	subeq	r5, r5, r2
 8009b66:	68a3      	ldr	r3, [r4, #8]
 8009b68:	6922      	ldr	r2, [r4, #16]
 8009b6a:	bf0c      	ite	eq
 8009b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b70:	2500      	movne	r5, #0
 8009b72:	4293      	cmp	r3, r2
 8009b74:	bfc4      	itt	gt
 8009b76:	1a9b      	subgt	r3, r3, r2
 8009b78:	18ed      	addgt	r5, r5, r3
 8009b7a:	2600      	movs	r6, #0
 8009b7c:	341a      	adds	r4, #26
 8009b7e:	42b5      	cmp	r5, r6
 8009b80:	d11a      	bne.n	8009bb8 <_printf_common+0xc8>
 8009b82:	2000      	movs	r0, #0
 8009b84:	e008      	b.n	8009b98 <_printf_common+0xa8>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4652      	mov	r2, sl
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	47c0      	blx	r8
 8009b90:	3001      	adds	r0, #1
 8009b92:	d103      	bne.n	8009b9c <_printf_common+0xac>
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	e7c6      	b.n	8009b2e <_printf_common+0x3e>
 8009ba0:	18e1      	adds	r1, r4, r3
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	2030      	movs	r0, #48	; 0x30
 8009ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009baa:	4422      	add	r2, r4
 8009bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	e7c7      	b.n	8009b48 <_printf_common+0x58>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4622      	mov	r2, r4
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	47c0      	blx	r8
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	d0e6      	beq.n	8009b94 <_printf_common+0xa4>
 8009bc6:	3601      	adds	r6, #1
 8009bc8:	e7d9      	b.n	8009b7e <_printf_common+0x8e>
	...

08009bcc <_printf_i>:
 8009bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	7e0f      	ldrb	r7, [r1, #24]
 8009bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bd4:	2f78      	cmp	r7, #120	; 0x78
 8009bd6:	4691      	mov	r9, r2
 8009bd8:	4680      	mov	r8, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	469a      	mov	sl, r3
 8009bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009be2:	d807      	bhi.n	8009bf4 <_printf_i+0x28>
 8009be4:	2f62      	cmp	r7, #98	; 0x62
 8009be6:	d80a      	bhi.n	8009bfe <_printf_i+0x32>
 8009be8:	2f00      	cmp	r7, #0
 8009bea:	f000 80d8 	beq.w	8009d9e <_printf_i+0x1d2>
 8009bee:	2f58      	cmp	r7, #88	; 0x58
 8009bf0:	f000 80a3 	beq.w	8009d3a <_printf_i+0x16e>
 8009bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bfc:	e03a      	b.n	8009c74 <_printf_i+0xa8>
 8009bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c02:	2b15      	cmp	r3, #21
 8009c04:	d8f6      	bhi.n	8009bf4 <_printf_i+0x28>
 8009c06:	a101      	add	r1, pc, #4	; (adr r1, 8009c0c <_printf_i+0x40>)
 8009c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c0c:	08009c65 	.word	0x08009c65
 8009c10:	08009c79 	.word	0x08009c79
 8009c14:	08009bf5 	.word	0x08009bf5
 8009c18:	08009bf5 	.word	0x08009bf5
 8009c1c:	08009bf5 	.word	0x08009bf5
 8009c20:	08009bf5 	.word	0x08009bf5
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009bf5 	.word	0x08009bf5
 8009c2c:	08009bf5 	.word	0x08009bf5
 8009c30:	08009bf5 	.word	0x08009bf5
 8009c34:	08009bf5 	.word	0x08009bf5
 8009c38:	08009d85 	.word	0x08009d85
 8009c3c:	08009ca9 	.word	0x08009ca9
 8009c40:	08009d67 	.word	0x08009d67
 8009c44:	08009bf5 	.word	0x08009bf5
 8009c48:	08009bf5 	.word	0x08009bf5
 8009c4c:	08009da7 	.word	0x08009da7
 8009c50:	08009bf5 	.word	0x08009bf5
 8009c54:	08009ca9 	.word	0x08009ca9
 8009c58:	08009bf5 	.word	0x08009bf5
 8009c5c:	08009bf5 	.word	0x08009bf5
 8009c60:	08009d6f 	.word	0x08009d6f
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	1d1a      	adds	r2, r3, #4
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	602a      	str	r2, [r5, #0]
 8009c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0a3      	b.n	8009dc0 <_printf_i+0x1f4>
 8009c78:	6820      	ldr	r0, [r4, #0]
 8009c7a:	6829      	ldr	r1, [r5, #0]
 8009c7c:	0606      	lsls	r6, r0, #24
 8009c7e:	f101 0304 	add.w	r3, r1, #4
 8009c82:	d50a      	bpl.n	8009c9a <_printf_i+0xce>
 8009c84:	680e      	ldr	r6, [r1, #0]
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	da03      	bge.n	8009c94 <_printf_i+0xc8>
 8009c8c:	232d      	movs	r3, #45	; 0x2d
 8009c8e:	4276      	negs	r6, r6
 8009c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c94:	485e      	ldr	r0, [pc, #376]	; (8009e10 <_printf_i+0x244>)
 8009c96:	230a      	movs	r3, #10
 8009c98:	e019      	b.n	8009cce <_printf_i+0x102>
 8009c9a:	680e      	ldr	r6, [r1, #0]
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ca2:	bf18      	it	ne
 8009ca4:	b236      	sxthne	r6, r6
 8009ca6:	e7ef      	b.n	8009c88 <_printf_i+0xbc>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	1d19      	adds	r1, r3, #4
 8009cae:	6029      	str	r1, [r5, #0]
 8009cb0:	0601      	lsls	r1, r0, #24
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_i+0xec>
 8009cb4:	681e      	ldr	r6, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <_printf_i+0xf2>
 8009cb8:	0646      	lsls	r6, r0, #25
 8009cba:	d5fb      	bpl.n	8009cb4 <_printf_i+0xe8>
 8009cbc:	881e      	ldrh	r6, [r3, #0]
 8009cbe:	4854      	ldr	r0, [pc, #336]	; (8009e10 <_printf_i+0x244>)
 8009cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8009cc2:	bf0c      	ite	eq
 8009cc4:	2308      	moveq	r3, #8
 8009cc6:	230a      	movne	r3, #10
 8009cc8:	2100      	movs	r1, #0
 8009cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cce:	6865      	ldr	r5, [r4, #4]
 8009cd0:	60a5      	str	r5, [r4, #8]
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	bfa2      	ittt	ge
 8009cd6:	6821      	ldrge	r1, [r4, #0]
 8009cd8:	f021 0104 	bicge.w	r1, r1, #4
 8009cdc:	6021      	strge	r1, [r4, #0]
 8009cde:	b90e      	cbnz	r6, 8009ce4 <_printf_i+0x118>
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	d04d      	beq.n	8009d80 <_printf_i+0x1b4>
 8009ce4:	4615      	mov	r5, r2
 8009ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cea:	fb03 6711 	mls	r7, r3, r1, r6
 8009cee:	5dc7      	ldrb	r7, [r0, r7]
 8009cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cf4:	4637      	mov	r7, r6
 8009cf6:	42bb      	cmp	r3, r7
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	d9f4      	bls.n	8009ce6 <_printf_i+0x11a>
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d10b      	bne.n	8009d18 <_printf_i+0x14c>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	07de      	lsls	r6, r3, #31
 8009d04:	d508      	bpl.n	8009d18 <_printf_i+0x14c>
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	6861      	ldr	r1, [r4, #4]
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	bfde      	ittt	le
 8009d0e:	2330      	movle	r3, #48	; 0x30
 8009d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d18:	1b52      	subs	r2, r2, r5
 8009d1a:	6122      	str	r2, [r4, #16]
 8009d1c:	f8cd a000 	str.w	sl, [sp]
 8009d20:	464b      	mov	r3, r9
 8009d22:	aa03      	add	r2, sp, #12
 8009d24:	4621      	mov	r1, r4
 8009d26:	4640      	mov	r0, r8
 8009d28:	f7ff fee2 	bl	8009af0 <_printf_common>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d14c      	bne.n	8009dca <_printf_i+0x1fe>
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	b004      	add	sp, #16
 8009d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3a:	4835      	ldr	r0, [pc, #212]	; (8009e10 <_printf_i+0x244>)
 8009d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d40:	6829      	ldr	r1, [r5, #0]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d48:	6029      	str	r1, [r5, #0]
 8009d4a:	061d      	lsls	r5, r3, #24
 8009d4c:	d514      	bpl.n	8009d78 <_printf_i+0x1ac>
 8009d4e:	07df      	lsls	r7, r3, #31
 8009d50:	bf44      	itt	mi
 8009d52:	f043 0320 	orrmi.w	r3, r3, #32
 8009d56:	6023      	strmi	r3, [r4, #0]
 8009d58:	b91e      	cbnz	r6, 8009d62 <_printf_i+0x196>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	f023 0320 	bic.w	r3, r3, #32
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	2310      	movs	r3, #16
 8009d64:	e7b0      	b.n	8009cc8 <_printf_i+0xfc>
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	f043 0320 	orr.w	r3, r3, #32
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	2378      	movs	r3, #120	; 0x78
 8009d70:	4828      	ldr	r0, [pc, #160]	; (8009e14 <_printf_i+0x248>)
 8009d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d76:	e7e3      	b.n	8009d40 <_printf_i+0x174>
 8009d78:	0659      	lsls	r1, r3, #25
 8009d7a:	bf48      	it	mi
 8009d7c:	b2b6      	uxthmi	r6, r6
 8009d7e:	e7e6      	b.n	8009d4e <_printf_i+0x182>
 8009d80:	4615      	mov	r5, r2
 8009d82:	e7bb      	b.n	8009cfc <_printf_i+0x130>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	6826      	ldr	r6, [r4, #0]
 8009d88:	6961      	ldr	r1, [r4, #20]
 8009d8a:	1d18      	adds	r0, r3, #4
 8009d8c:	6028      	str	r0, [r5, #0]
 8009d8e:	0635      	lsls	r5, r6, #24
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	d501      	bpl.n	8009d98 <_printf_i+0x1cc>
 8009d94:	6019      	str	r1, [r3, #0]
 8009d96:	e002      	b.n	8009d9e <_printf_i+0x1d2>
 8009d98:	0670      	lsls	r0, r6, #25
 8009d9a:	d5fb      	bpl.n	8009d94 <_printf_i+0x1c8>
 8009d9c:	8019      	strh	r1, [r3, #0]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	4615      	mov	r5, r2
 8009da4:	e7ba      	b.n	8009d1c <_printf_i+0x150>
 8009da6:	682b      	ldr	r3, [r5, #0]
 8009da8:	1d1a      	adds	r2, r3, #4
 8009daa:	602a      	str	r2, [r5, #0]
 8009dac:	681d      	ldr	r5, [r3, #0]
 8009dae:	6862      	ldr	r2, [r4, #4]
 8009db0:	2100      	movs	r1, #0
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7f6 fa24 	bl	8000200 <memchr>
 8009db8:	b108      	cbz	r0, 8009dbe <_printf_i+0x1f2>
 8009dba:	1b40      	subs	r0, r0, r5
 8009dbc:	6060      	str	r0, [r4, #4]
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc8:	e7a8      	b.n	8009d1c <_printf_i+0x150>
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d0ab      	beq.n	8009d30 <_printf_i+0x164>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	079b      	lsls	r3, r3, #30
 8009ddc:	d413      	bmi.n	8009e06 <_printf_i+0x23a>
 8009dde:	68e0      	ldr	r0, [r4, #12]
 8009de0:	9b03      	ldr	r3, [sp, #12]
 8009de2:	4298      	cmp	r0, r3
 8009de4:	bfb8      	it	lt
 8009de6:	4618      	movlt	r0, r3
 8009de8:	e7a4      	b.n	8009d34 <_printf_i+0x168>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4632      	mov	r2, r6
 8009dee:	4649      	mov	r1, r9
 8009df0:	4640      	mov	r0, r8
 8009df2:	47d0      	blx	sl
 8009df4:	3001      	adds	r0, #1
 8009df6:	d09b      	beq.n	8009d30 <_printf_i+0x164>
 8009df8:	3501      	adds	r5, #1
 8009dfa:	68e3      	ldr	r3, [r4, #12]
 8009dfc:	9903      	ldr	r1, [sp, #12]
 8009dfe:	1a5b      	subs	r3, r3, r1
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	dcf2      	bgt.n	8009dea <_printf_i+0x21e>
 8009e04:	e7eb      	b.n	8009dde <_printf_i+0x212>
 8009e06:	2500      	movs	r5, #0
 8009e08:	f104 0619 	add.w	r6, r4, #25
 8009e0c:	e7f5      	b.n	8009dfa <_printf_i+0x22e>
 8009e0e:	bf00      	nop
 8009e10:	0800a2d5 	.word	0x0800a2d5
 8009e14:	0800a2e6 	.word	0x0800a2e6

08009e18 <_read_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d07      	ldr	r5, [pc, #28]	; (8009e38 <_read_r+0x20>)
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	602a      	str	r2, [r5, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f7f7 fdca 	bl	80019c0 <_read>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_read_r+0x1e>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_read_r+0x1e>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	2000446c 	.word	0x2000446c

08009e3c <_fstat_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4d07      	ldr	r5, [pc, #28]	; (8009e5c <_fstat_r+0x20>)
 8009e40:	2300      	movs	r3, #0
 8009e42:	4604      	mov	r4, r0
 8009e44:	4608      	mov	r0, r1
 8009e46:	4611      	mov	r1, r2
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	f7f7 fdfe 	bl	8001a4a <_fstat>
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d102      	bne.n	8009e58 <_fstat_r+0x1c>
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	b103      	cbz	r3, 8009e58 <_fstat_r+0x1c>
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000446c 	.word	0x2000446c

08009e60 <_isatty_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_isatty_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	f7f7 fdfd 	bl	8001a6a <_isatty>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_isatty_r+0x1a>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_isatty_r+0x1a>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	2000446c 	.word	0x2000446c

08009e80 <memmove>:
 8009e80:	4288      	cmp	r0, r1
 8009e82:	b510      	push	{r4, lr}
 8009e84:	eb01 0402 	add.w	r4, r1, r2
 8009e88:	d902      	bls.n	8009e90 <memmove+0x10>
 8009e8a:	4284      	cmp	r4, r0
 8009e8c:	4623      	mov	r3, r4
 8009e8e:	d807      	bhi.n	8009ea0 <memmove+0x20>
 8009e90:	1e43      	subs	r3, r0, #1
 8009e92:	42a1      	cmp	r1, r4
 8009e94:	d008      	beq.n	8009ea8 <memmove+0x28>
 8009e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e9e:	e7f8      	b.n	8009e92 <memmove+0x12>
 8009ea0:	4402      	add	r2, r0
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	428a      	cmp	r2, r1
 8009ea6:	d100      	bne.n	8009eaa <memmove+0x2a>
 8009ea8:	bd10      	pop	{r4, pc}
 8009eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eb2:	e7f7      	b.n	8009ea4 <memmove+0x24>

08009eb4 <_realloc_r>:
 8009eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb8:	4680      	mov	r8, r0
 8009eba:	4614      	mov	r4, r2
 8009ebc:	460e      	mov	r6, r1
 8009ebe:	b921      	cbnz	r1, 8009eca <_realloc_r+0x16>
 8009ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	f7ff b87b 	b.w	8008fc0 <_malloc_r>
 8009eca:	b92a      	cbnz	r2, 8009ed8 <_realloc_r+0x24>
 8009ecc:	f7ff fc68 	bl	80097a0 <_free_r>
 8009ed0:	4625      	mov	r5, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	f000 f81b 	bl	8009f12 <_malloc_usable_size_r>
 8009edc:	4284      	cmp	r4, r0
 8009ede:	4607      	mov	r7, r0
 8009ee0:	d802      	bhi.n	8009ee8 <_realloc_r+0x34>
 8009ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ee6:	d812      	bhi.n	8009f0e <_realloc_r+0x5a>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4640      	mov	r0, r8
 8009eec:	f7ff f868 	bl	8008fc0 <_malloc_r>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0ed      	beq.n	8009ed2 <_realloc_r+0x1e>
 8009ef6:	42bc      	cmp	r4, r7
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4631      	mov	r1, r6
 8009efc:	bf28      	it	cs
 8009efe:	463a      	movcs	r2, r7
 8009f00:	f7ff f827 	bl	8008f52 <memcpy>
 8009f04:	4631      	mov	r1, r6
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7ff fc4a 	bl	80097a0 <_free_r>
 8009f0c:	e7e1      	b.n	8009ed2 <_realloc_r+0x1e>
 8009f0e:	4635      	mov	r5, r6
 8009f10:	e7df      	b.n	8009ed2 <_realloc_r+0x1e>

08009f12 <_malloc_usable_size_r>:
 8009f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f16:	1f18      	subs	r0, r3, #4
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	bfbc      	itt	lt
 8009f1c:	580b      	ldrlt	r3, [r1, r0]
 8009f1e:	18c0      	addlt	r0, r0, r3
 8009f20:	4770      	bx	lr
	...

08009f24 <_init>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr

08009f30 <_fini>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr
