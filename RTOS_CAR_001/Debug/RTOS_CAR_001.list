
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a07c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800a22c  0800a22c  0001a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5fc  0800a5fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a604  0800a604  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00004410  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044a0  200044a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fbfe  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004898  00000000  00000000  0003fcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00044558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001788  00000000  00000000  00045ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad5  00000000  00000000  00047648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201ae  00000000  00000000  0007011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed673  00000000  00000000  000902cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d93e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007088  00000000  00000000  0017d990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a214 	.word	0x0800a214

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800a214 	.word	0x0800a214

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <__io_putchar+0x20>)
 80005b6:	f005 fb5c 	bl	8005c72 <HAL_UART_Transmit>
    return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200006b0 	.word	0x200006b0

080005c8 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000fc 	.word	0x200000fc
 80005f8:	200001b0 	.word	0x200001b0

080005fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  Motor_Init();
 8000602:	f001 f9dd 	bl	80019c0 <Motor_Init>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000606:	2100      	movs	r1, #0
 8000608:	482b      	ldr	r0, [pc, #172]	; (80006b8 <MX_FREERTOS_Init+0xbc>)
 800060a:	f004 f963 	bl	80048d4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	482a      	ldr	r0, [pc, #168]	; (80006bc <MX_FREERTOS_Init+0xc0>)
 8000612:	f004 f95f 	bl	80048d4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4829      	ldr	r0, [pc, #164]	; (80006c0 <MX_FREERTOS_Init+0xc4>)
 800061a:	f004 f95b 	bl	80048d4 <HAL_TIM_IC_Start_IT>

	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4828      	ldr	r0, [pc, #160]	; (80006c4 <MX_FREERTOS_Init+0xc8>)
 8000622:	f004 f957 	bl	80048d4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000626:	2104      	movs	r1, #4
 8000628:	4826      	ldr	r0, [pc, #152]	; (80006c4 <MX_FREERTOS_Init+0xc8>)
 800062a:	f004 f953 	bl	80048d4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_3);
 800062e:	2108      	movs	r1, #8
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <MX_FREERTOS_Init+0xc8>)
 8000632:	f004 f94f 	bl	80048d4 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8000636:	210c      	movs	r1, #12
 8000638:	4822      	ldr	r0, [pc, #136]	; (80006c4 <MX_FREERTOS_Init+0xc8>)
 800063a:	f004 f94b 	bl	80048d4 <HAL_TIM_IC_Start_IT>

	  HAL_UART_Receive_IT(&huart3, &rx, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	4921      	ldr	r1, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xcc>)
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <MX_FREERTOS_Init+0xd0>)
 8000644:	f005 fba7 	bl	8005d96 <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000648:	2201      	movs	r2, #1
 800064a:	4921      	ldr	r1, [pc, #132]	; (80006d0 <MX_FREERTOS_Init+0xd4>)
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <MX_FREERTOS_Init+0xd8>)
 800064e:	f005 fba2 	bl	8005d96 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 8000652:	2300      	movs	r3, #0
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
 8000656:	2300      	movs	r3, #0
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 800065a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f006 fbb0 	bl	8006dc6 <osSemaphoreCreate>
 8000666:	4603      	mov	r3, r0
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <MX_FREERTOS_Init+0xdc>)
 800066a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 256, uint8_t);
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_FREERTOS_Init+0xe0>)
 800066e:	f107 0420 	add.w	r4, r7, #32
 8000672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f006 fbd3 	bl	8006e2a <osMessageCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_FREERTOS_Init+0xe4>)
 8000688:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_FREERTOS_Init+0xe8>)
 800068c:	1d3c      	adds	r4, r7, #4
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 fb30 	bl	8006d06 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_FREERTOS_Init+0xec>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ThreadInit ();
 80006ac:	f000 fa62 	bl	8000b74 <ThreadInit>
  /* USER CODE END RTOS_THREADS */

}
 80006b0:	bf00      	nop
 80006b2:	3738      	adds	r7, #56	; 0x38
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bdb0      	pop	{r4, r5, r7, pc}
 80006b8:	200004c0 	.word	0x200004c0
 80006bc:	20000550 	.word	0x20000550
 80006c0:	20000598 	.word	0x20000598
 80006c4:	200005e0 	.word	0x200005e0
 80006c8:	200000d0 	.word	0x200000d0
 80006cc:	200006b0 	.word	0x200006b0
 80006d0:	200000ec 	.word	0x200000ec
 80006d4:	200006f4 	.word	0x200006f4
 80006d8:	200000f8 	.word	0x200000f8
 80006dc:	0800a298 	.word	0x0800a298
 80006e0:	200000f4 	.word	0x200000f4
 80006e4:	0800a2a8 	.word	0x0800a2a8
 80006e8:	200000f0 	.word	0x200000f0

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0'; // this value is what you receive
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <StartDefaultTask+0x88>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f107 0210 	add.w	r2, r7, #16
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f006 ffca 	bl	80076a4 <xQueueReceiveFromISR>
 8000710:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d129      	bne.n	800076c <StartDefaultTask+0x80>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <StartDefaultTask+0x8c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f107 0210 	add.w	r2, r7, #16
 8000720:	f107 010f 	add.w	r1, r7, #15
 8000724:	4618      	mov	r0, r3
 8000726:	f006 ffbd 	bl	80076a4 <xQueueReceiveFromISR>
 800072a:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01c      	beq.n	800076c <StartDefaultTask+0x80>
				// do something . . .
				if (cByteRxed - '0' < 7) {
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	2b36      	cmp	r3, #54	; 0x36
 8000738:	dc05      	bgt.n	8000746 <StartDefaultTask+0x5a>
					Move(cByteRxed - '0');
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	3b30      	subs	r3, #48	; 0x30
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fee1 	bl	8001508 <Move>
				}

				if (cByteRxed == 'w') {
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	2b77      	cmp	r3, #119	; 0x77
 800074c:	d105      	bne.n	800075a <StartDefaultTask+0x6e>
					speed += 10;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <StartDefaultTask+0x90>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	330a      	adds	r3, #10
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <StartDefaultTask+0x90>)
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	e008      	b.n	800076c <StartDefaultTask+0x80>
				}
				else if (cByteRxed == 's') {
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	2b73      	cmp	r3, #115	; 0x73
 8000760:	d104      	bne.n	800076c <StartDefaultTask+0x80>
					speed -= 10;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <StartDefaultTask+0x90>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b0a      	subs	r3, #10
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <StartDefaultTask+0x90>)
 800076a:	6013      	str	r3, [r2, #0]
				}
			}
		}
		osDelay(50);
 800076c:	2032      	movs	r0, #50	; 0x32
 800076e:	f006 fb16 	bl	8006d9e <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000772:	e7c5      	b.n	8000700 <StartDefaultTask+0x14>
 8000774:	200000f8 	.word	0x200000f8
 8000778:	200000f4 	.word	0x200000f4
 800077c:	20000018 	.word	0x20000018

08000780 <odometryTask>:
 * Distance[2], Difference[2] = Right
 * */

// Task ---------------------------------------------------------------------------------------
void odometryTask (void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	for (;;) {

		// check the safety maximun speed
		// and add some Algorithms
		for(int i = 0; i < 4; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e036      	b.n	80007fc <odometryTask+0x7c>
			temp_count[i] = odo_count[i];
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <odometryTask+0x98>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000796:	4921      	ldr	r1, [pc, #132]	; (800081c <odometryTask+0x9c>)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			odo_count[i] = 0;
 800079e:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <odometryTask+0x98>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2100      	movs	r1, #0
 80007a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(odo_flag[i] == 1) {
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <odometryTask+0xa0>)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d120      	bne.n	80007f6 <odometryTask+0x76>
				if (temp_count[i] < (speed/ratio) ) {
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <odometryTask+0x9c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <odometryTask+0xa4>)
 80007be:	6811      	ldr	r1, [r2, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <odometryTask+0xa8>)
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	fb91 f2f2 	sdiv	r2, r1, r2
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d204      	bcs.n	80007d6 <odometryTask+0x56>
					odo_adjust(i, UP);
 80007cc:	2100      	movs	r1, #0
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 faee 	bl	8000db0 <odo_adjust>
 80007d4:	e00f      	b.n	80007f6 <odometryTask+0x76>
				}
				else if (temp_count[i] > (speed/ratio)) {
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <odometryTask+0x9c>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <odometryTask+0xa4>)
 80007e0:	6811      	ldr	r1, [r2, #0]
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <odometryTask+0xa8>)
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	fb91 f2f2 	sdiv	r2, r1, r2
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d903      	bls.n	80007f6 <odometryTask+0x76>
					odo_adjust(i, DOWN);
 80007ee:	2101      	movs	r1, #1
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f000 fadd 	bl	8000db0 <odo_adjust>
		for(int i = 0; i < 4; i++) {
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	ddc5      	ble.n	800078e <odometryTask+0xe>
				}
			}
		}

		osDelay(time/ratio);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <odometryTask+0xac>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <odometryTask+0xa8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	fb92 f3f3 	sdiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f006 fac5 	bl	8006d9e <osDelay>
		for(int i = 0; i < 4; i++) {
 8000814:	e7b8      	b.n	8000788 <odometryTask+0x8>
 8000816:	bf00      	nop
 8000818:	20000444 	.word	0x20000444
 800081c:	200000c0 	.word	0x200000c0
 8000820:	20000440 	.word	0x20000440
 8000824:	20000018 	.word	0x20000018
 8000828:	20000010 	.word	0x20000010
 800082c:	20000014 	.word	0x20000014

08000830 <CarLeftSide>:
	}
}

void CarLeftSide (void const * argument){
 8000830:	b580      	push	{r7, lr}
 8000832:	b0ce      	sub	sp, #312	; 0x138
 8000834:	af00      	add	r7, sp, #0
 8000836:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800083a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800083e:	6018      	str	r0, [r3, #0]
//			if(hcsr04_dis[i] < 200) {
//				Move(0);
//			}
//		}

		sprintf(dis[0],"L%03d", (int)hcsr04_dis[0]);
 8000840:	4b34      	ldr	r3, [pc, #208]	; (8000914 <CarLeftSide+0xe4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4933      	ldr	r1, [pc, #204]	; (8000918 <CarLeftSide+0xe8>)
 800084c:	4618      	mov	r0, r3
 800084e:	f008 fe93 	bl	8009578 <siprintf>
		sprintf(dis[1],"F%03d", (int)hcsr04_dis[1]);
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <CarLeftSide+0xe4>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	461a      	mov	r2, r3
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	3364      	adds	r3, #100	; 0x64
 800085e:	492f      	ldr	r1, [pc, #188]	; (800091c <CarLeftSide+0xec>)
 8000860:	4618      	mov	r0, r3
 8000862:	f008 fe89 	bl	8009578 <siprintf>
		sprintf(dis[2],"R%03d", (int)hcsr04_dis[2]);
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <CarLeftSide+0xe4>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	461a      	mov	r2, r3
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	33c8      	adds	r3, #200	; 0xc8
 8000872:	492b      	ldr	r1, [pc, #172]	; (8000920 <CarLeftSide+0xf0>)
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fe7f 	bl	8009578 <siprintf>
//		HAL_UART_Transmit(&huart6, (uint8_t*)dis[0], strlen(dis[0]), 100);
//		HAL_UART_Transmit(&huart6, (uint8_t*)dis[1], strlen(dis[1]), 100);
//		HAL_UART_Transmit(&huart6, (uint8_t*)dis[2], strlen(dis[2]), 100);
//		HAL_UART_Transmit(&huart6, (uint8_t *)rx_end, 1, 100);

		uint8_t rx_start = '<';
 800087a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800087e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8000882:	223c      	movs	r2, #60	; 0x3c
 8000884:	701a      	strb	r2, [r3, #0]
		uint8_t rx_end = '>';
 8000886:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800088a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800088e:	223e      	movs	r2, #62	; 0x3e
 8000890:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart6, &rx_start, 1, 100);
 8000892:	f107 010b 	add.w	r1, r7, #11
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	2201      	movs	r2, #1
 800089a:	4822      	ldr	r0, [pc, #136]	; (8000924 <CarLeftSide+0xf4>)
 800089c:	f005 f9e9 	bl	8005c72 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*)dis[0], strlen(dis[0]), 100);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fca3 	bl	80001f0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f107 010c 	add.w	r1, r7, #12
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	481b      	ldr	r0, [pc, #108]	; (8000924 <CarLeftSide+0xf4>)
 80008b6:	f005 f9dc 	bl	8005c72 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*)dis[1], strlen(dis[1]), 100);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	3364      	adds	r3, #100	; 0x64
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc95 	bl	80001f0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <CarLeftSide+0xf4>)
 80008d6:	f005 f9cc 	bl	8005c72 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*)dis[2], strlen(dis[2]), 100);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	33c8      	adds	r3, #200	; 0xc8
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc85 	bl	80001f0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
 80008f2:	2364      	movs	r3, #100	; 0x64
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <CarLeftSide+0xf4>)
 80008f6:	f005 f9bc 	bl	8005c72 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &rx_end, 1, 100);
 80008fa:	f107 010a 	add.w	r1, r7, #10
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	2201      	movs	r2, #1
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <CarLeftSide+0xf4>)
 8000904:	f005 f9b5 	bl	8005c72 <HAL_UART_Transmit>


		osDelay(1000);
 8000908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090c:	f006 fa47 	bl	8006d9e <osDelay>
	for (;;) {
 8000910:	e796      	b.n	8000840 <CarLeftSide+0x10>
 8000912:	bf00      	nop
 8000914:	200000b4 	.word	0x200000b4
 8000918:	0800a2c4 	.word	0x0800a2c4
 800091c:	0800a2cc 	.word	0x0800a2cc
 8000920:	0800a2d4 	.word	0x0800a2d4
 8000924:	200006f4 	.word	0x200006f4

08000928 <CarFrontSide>:
	}
}

void CarFrontSide (void const * argument){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	for (;;) {
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	4903      	ldr	r1, [pc, #12]	; (8000944 <CarFrontSide+0x1c>)
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <CarFrontSide+0x20>)
 8000938:	f000 fbca 	bl	80010d0 <HCSR04_Read>
    	osDelay(60);
 800093c:	203c      	movs	r0, #60	; 0x3c
 800093e:	f006 fa2e 	bl	8006d9e <osDelay>
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 8000942:	e7f5      	b.n	8000930 <CarFrontSide+0x8>
 8000944:	40021400 	.word	0x40021400
 8000948:	200004c0 	.word	0x200004c0

0800094c <CarRightSide>:
	}
}
void CarRightSide (void const * argument){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 8000954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000958:	f006 fa21 	bl	8006d9e <osDelay>
 800095c:	e7fa      	b.n	8000954 <CarRightSide+0x8>
	...

08000960 <CheckingUartReceive>:


// ISR Checking-------------------------------------------------------------------------------

void CheckingUartReceive (void const * argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart3, &rx, 1);
 8000968:	2201      	movs	r2, #1
 800096a:	4906      	ldr	r1, [pc, #24]	; (8000984 <CheckingUartReceive+0x24>)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <CheckingUartReceive+0x28>)
 800096e:	f005 fa12 	bl	8005d96 <HAL_UART_Receive_IT>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000972:	2201      	movs	r2, #1
 8000974:	4905      	ldr	r1, [pc, #20]	; (800098c <CheckingUartReceive+0x2c>)
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <CheckingUartReceive+0x30>)
 8000978:	f005 fa0d 	bl	8005d96 <HAL_UART_Receive_IT>
    	osDelay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f006 fa0e 	bl	8006d9e <osDelay>
    	HAL_UART_Receive_IT(&huart3, &rx, 1);
 8000982:	e7f1      	b.n	8000968 <CheckingUartReceive+0x8>
 8000984:	200000d0 	.word	0x200000d0
 8000988:	200006b0 	.word	0x200006b0
 800098c:	200000ec 	.word	0x200000ec
 8000990:	200006f4 	.word	0x200006f4

08000994 <CheckingLeft>:
    }
}
void CheckingLeft (void const * argument) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
//    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
    	osDelay(60);
 800099c:	203c      	movs	r0, #60	; 0x3c
 800099e:	f006 f9fe 	bl	8006d9e <osDelay>
 80009a2:	e7fb      	b.n	800099c <CheckingLeft+0x8>

080009a4 <CheckingFront>:
    }
}
void CheckingFront (void const * argument) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 80009ac:	2220      	movs	r2, #32
 80009ae:	4904      	ldr	r1, [pc, #16]	; (80009c0 <CheckingFront+0x1c>)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <CheckingFront+0x20>)
 80009b2:	f000 fb8d 	bl	80010d0 <HCSR04_Read>
    	osDelay(60);
 80009b6:	203c      	movs	r0, #60	; 0x3c
 80009b8:	f006 f9f1 	bl	8006d9e <osDelay>
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 80009bc:	e7f6      	b.n	80009ac <CheckingFront+0x8>
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000
 80009c4:	20000550 	.word	0x20000550

080009c8 <CheckingRight>:
    }
}
void CheckingRight (void const * argument) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 80009d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d4:	4903      	ldr	r1, [pc, #12]	; (80009e4 <CheckingRight+0x1c>)
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <CheckingRight+0x20>)
 80009d8:	f000 fb7a 	bl	80010d0 <HCSR04_Read>
    	osDelay(60);
 80009dc:	203c      	movs	r0, #60	; 0x3c
 80009de:	f006 f9de 	bl	8006d9e <osDelay>
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 80009e2:	e7f5      	b.n	80009d0 <CheckingRight+0x8>
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	20000598 	.word	0x20000598

080009ec <HAL_UART_RxCpltCallback>:
    }
}

// CallBack Session
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_RxCpltCallback+0x70>)
 80009f6:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <HAL_UART_RxCpltCallback+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d124      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_UART_RxCpltCallback+0x78>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f107 020c 	add.w	r2, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	4914      	ldr	r1, [pc, #80]	; (8000a68 <HAL_UART_RxCpltCallback+0x7c>)
 8000a16:	f006 fd1d 	bl	8007454 <xQueueGenericSendFromISR>
 8000a1a:	6138      	str	r0, [r7, #16]
		if(ret) {
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_UART_RxCpltCallback+0x80>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f107 020c 	add.w	r2, r7, #12
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f006 fdac 	bl	800758a <xQueueGiveFromISR>
 8000a32:	e00a      	b.n	8000a4a <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f7ff fbdb 	bl	80001f0 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	480a      	ldr	r0, [pc, #40]	; (8000a70 <HAL_UART_RxCpltCallback+0x84>)
 8000a46:	f005 f914 	bl	8005c72 <HAL_UART_Transmit>
		}
		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4906      	ldr	r1, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x7c>)
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <HAL_UART_RxCpltCallback+0x84>)
 8000a50:	f005 f9a1 	bl	8005d96 <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	0800a2dc 	.word	0x0800a2dc
 8000a60:	40011400 	.word	0x40011400
 8000a64:	200000f4 	.word	0x200000f4
 8000a68:	200000ec 	.word	0x200000ec
 8000a6c:	200000f8 	.word	0x200000f8
 8000a70:	200006f4 	.word	0x200006f4

08000a74 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	//Checking the left Distance
	if (htim->Instance == TIM1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10a      	bne.n	8000a9c <HAL_TIM_IC_CaptureCallback+0x28>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7f1b      	ldrb	r3, [r3, #28]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d106      	bne.n	8000a9c <HAL_TIM_IC_CaptureCallback+0x28>
		{
			hcsr04_dis[0] = HC_SRO4_Dis(htim, 0);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fb41 	bl	8001118 <HC_SRO4_Dis>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a9a:	6013      	str	r3, [r2, #0]
		}
	}

	//Checking the Front Distance
	if (htim->Instance == TIM3) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10a      	bne.n	8000abc <HAL_TIM_IC_CaptureCallback+0x48>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7f1b      	ldrb	r3, [r3, #28]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d106      	bne.n	8000abc <HAL_TIM_IC_CaptureCallback+0x48>
		{
			hcsr04_dis[1] = HC_SRO4_Dis(htim, 1);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fb31 	bl	8001118 <HC_SRO4_Dis>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000aba:	6053      	str	r3, [r2, #4]
		}
	}

	//Checking the Right Distance
	if (htim->Instance == TIM4) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10a      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x68>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7f1b      	ldrb	r3, [r3, #28]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d106      	bne.n	8000adc <HAL_TIM_IC_CaptureCallback+0x68>
		{
			hcsr04_dis[2] = HC_SRO4_Dis(htim, 2);
 8000ace:	2102      	movs	r1, #2
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 fb21 	bl	8001118 <HC_SRO4_Dis>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ada:	6093      	str	r3, [r2, #8]
		}
	}

	//using the general purpose timer because i will use checking the signal only
	if (htim->Instance == TIM8) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d133      	bne.n	8000b4e <HAL_TIM_IC_CaptureCallback+0xda>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d108      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x8c>
			if (odo_flag[0] == 1) {
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x8c>
				odo_count[0]++;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000afe:	6013      	str	r3, [r2, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7f1b      	ldrb	r3, [r3, #28]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d108      	bne.n	8000b1a <HAL_TIM_IC_CaptureCallback+0xa6>
			if (odo_flag[1] == 1) {
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000b0a:	785b      	ldrb	r3, [r3, #1]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d104      	bne.n	8000b1a <HAL_TIM_IC_CaptureCallback+0xa6>
				odo_count[1]++;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b18:	6053      	str	r3, [r2, #4]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7f1b      	ldrb	r3, [r3, #28]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d108      	bne.n	8000b34 <HAL_TIM_IC_CaptureCallback+0xc0>
			if (odo_flag[2] == 1) {
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000b24:	789b      	ldrb	r3, [r3, #2]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d104      	bne.n	8000b34 <HAL_TIM_IC_CaptureCallback+0xc0>
				odo_count[2]++;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b32:	6093      	str	r3, [r2, #8]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7f1b      	ldrb	r3, [r3, #28]
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d108      	bne.n	8000b4e <HAL_TIM_IC_CaptureCallback+0xda>
			if (odo_flag[3] == 1) {
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d104      	bne.n	8000b4e <HAL_TIM_IC_CaptureCallback+0xda>
				odo_count[3]++;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b4c:	60d3      	str	r3, [r2, #12]
			}
		}
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	200000b4 	.word	0x200000b4
 8000b60:	40000400 	.word	0x40000400
 8000b64:	40000800 	.word	0x40000800
 8000b68:	40010400 	.word	0x40010400
 8000b6c:	20000440 	.word	0x20000440
 8000b70:	20000444 	.word	0x20000444

08000b74 <ThreadInit>:

void ThreadInit () {
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b0c0      	sub	sp, #256	; 0x100
 8000b78:	af00      	add	r7, sp, #0
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b7a:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <ThreadInit+0x1d4>)
 8000b7c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000b80:	461d      	mov	r5, r3
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 f8b6 	bl	8006d06 <osThreadCreate>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a6b      	ldr	r2, [pc, #428]	; (8000d4c <ThreadInit+0x1d8>)
 8000b9e:	6013      	str	r3, [r2, #0]


	  osThreadDef(UartCheck, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <ThreadInit+0x1dc>)
 8000ba2:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000ba6:	461d      	mov	r5, r3
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task1Handle = osThreadCreate(osThread(UartCheck), NULL);
 8000bb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 f8a3 	bl	8006d06 <osThreadCreate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a64      	ldr	r2, [pc, #400]	; (8000d54 <ThreadInit+0x1e0>)
 8000bc4:	6013      	str	r3, [r2, #0]
	  if(!Task1Handle)
 8000bc6:	4b63      	ldr	r3, [pc, #396]	; (8000d54 <ThreadInit+0x1e0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <ThreadInit+0x60>
		  printf("ERR : Console Task Creation Failure !\r\n");
 8000bce:	4862      	ldr	r0, [pc, #392]	; (8000d58 <ThreadInit+0x1e4>)
 8000bd0:	f008 fc50 	bl	8009474 <puts>

	  osThreadDef(UartTask, odometryTask, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000bd4:	4b61      	ldr	r3, [pc, #388]	; (8000d5c <ThreadInit+0x1e8>)
 8000bd6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task2Handle = osThreadCreate(osThread(UartTask), NULL);
 8000be8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f006 f889 	bl	8006d06 <osThreadCreate>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <ThreadInit+0x1ec>)
 8000bf8:	6013      	str	r3, [r2, #0]

	  if(!Task2Handle)
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <ThreadInit+0x1ec>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <ThreadInit+0x94>
	     printf("ERR : CLI Task Creation Failure !\r\n");
 8000c02:	4858      	ldr	r0, [pc, #352]	; (8000d64 <ThreadInit+0x1f0>)
 8000c04:	f008 fc36 	bl	8009474 <puts>

	  // HC-SR04 LEFT -------------------------------------------------------------------------------------------------------
	  osThreadDef(LeftCheck, CheckingLeft, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000c08:	4b57      	ldr	r3, [pc, #348]	; (8000d68 <ThreadInit+0x1f4>)
 8000c0a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c0e:	461d      	mov	r5, r3
 8000c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Checking = osThreadCreate(osThread(LeftCheck), NULL);
 8000c1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 f86f 	bl	8006d06 <osThreadCreate>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a50      	ldr	r2, [pc, #320]	; (8000d6c <ThreadInit+0x1f8>)
 8000c2c:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Checking)
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <ThreadInit+0x1f8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <ThreadInit+0xc8>
		  printf("ERR : HS_SR04_left_Checking Creation Failure !\r\n");
 8000c36:	484e      	ldr	r0, [pc, #312]	; (8000d70 <ThreadInit+0x1fc>)
 8000c38:	f008 fc1c 	bl	8009474 <puts>

	  osThreadDef(LeftTask, CarLeftSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000c3c:	4b4d      	ldr	r3, [pc, #308]	; (8000d74 <ThreadInit+0x200>)
 8000c3e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Handle = osThreadCreate(osThread(LeftTask), NULL);
 8000c50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 f855 	bl	8006d06 <osThreadCreate>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a46      	ldr	r2, [pc, #280]	; (8000d78 <ThreadInit+0x204>)
 8000c60:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Handle)
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <ThreadInit+0x204>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <ThreadInit+0xfc>
		  printf("ERR : HS_SR04_left_Handle Creation Failure !\r\n");
 8000c6a:	4844      	ldr	r0, [pc, #272]	; (8000d7c <ThreadInit+0x208>)
 8000c6c:	f008 fc02 	bl	8009474 <puts>

	  // HC-SR04 FRONT -------------------------------------------------------------------------------------------------------
	  osThreadDef(FrontCheck, CheckingFront, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000c70:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <ThreadInit+0x20c>)
 8000c72:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c76:	461d      	mov	r5, r3
 8000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Checking = osThreadCreate(osThread(FrontCheck), NULL);
 8000c84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f006 f83b 	bl	8006d06 <osThreadCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a3c      	ldr	r2, [pc, #240]	; (8000d84 <ThreadInit+0x210>)
 8000c94:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Checking)
 8000c96:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <ThreadInit+0x210>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <ThreadInit+0x130>
		  printf("ERR : HS_SR04_Front_Checking Creation Failure !\r\n");
 8000c9e:	483a      	ldr	r0, [pc, #232]	; (8000d88 <ThreadInit+0x214>)
 8000ca0:	f008 fbe8 	bl	8009474 <puts>

	  osThreadDef(FrontTask, CarFrontSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <ThreadInit+0x218>)
 8000ca6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000caa:	461d      	mov	r5, r3
 8000cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Handle = osThreadCreate(osThread(FrontTask), NULL);
 8000cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 f821 	bl	8006d06 <osThreadCreate>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <ThreadInit+0x21c>)
 8000cc8:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Handle)
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <ThreadInit+0x21c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <ThreadInit+0x164>
		  printf("ERR : HS_SR04_Front_Handle Creation Failure !\r\n");
 8000cd2:	4830      	ldr	r0, [pc, #192]	; (8000d94 <ThreadInit+0x220>)
 8000cd4:	f008 fbce 	bl	8009474 <puts>

	  // HC-SR04 RIGHT -------------------------------------------------------------------------------------------------------
	  osThreadDef(RightCheck, CheckingRight, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <ThreadInit+0x224>)
 8000cda:	f107 0420 	add.w	r4, r7, #32
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Checking = osThreadCreate(osThread(RightCheck), NULL);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 f807 	bl	8006d06 <osThreadCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <ThreadInit+0x228>)
 8000cfc:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Checking)
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <ThreadInit+0x228>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <ThreadInit+0x198>
		  printf("ERR : HS_SR04_Right_Checking Creation Failure !\r\n");
 8000d06:	4826      	ldr	r0, [pc, #152]	; (8000da0 <ThreadInit+0x22c>)
 8000d08:	f008 fbb4 	bl	8009474 <puts>

	  osThreadDef(RightTask, CarRightSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <ThreadInit+0x230>)
 8000d0e:	1d3c      	adds	r4, r7, #4
 8000d10:	461d      	mov	r5, r3
 8000d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Handle = osThreadCreate(osThread(RightTask), NULL);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f005 ffef 	bl	8006d06 <osThreadCreate>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <ThreadInit+0x234>)
 8000d2c:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Handle)
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <ThreadInit+0x234>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <ThreadInit+0x1c8>
		  printf("ERR : HS_SR04_Right_Handle Creation Failure !\r\n");
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <ThreadInit+0x238>)
 8000d38:	f008 fb9c 	bl	8009474 <puts>
}
 8000d3c:	bf00      	nop
 8000d3e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bdb0      	pop	{r4, r5, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800a2a8 	.word	0x0800a2a8
 8000d4c:	200000f0 	.word	0x200000f0
 8000d50:	0800a464 	.word	0x0800a464
 8000d54:	200000ac 	.word	0x200000ac
 8000d58:	0800a2f0 	.word	0x0800a2f0
 8000d5c:	0800a480 	.word	0x0800a480
 8000d60:	200000b0 	.word	0x200000b0
 8000d64:	0800a318 	.word	0x0800a318
 8000d68:	0800a49c 	.word	0x0800a49c
 8000d6c:	200000d4 	.word	0x200000d4
 8000d70:	0800a33c 	.word	0x0800a33c
 8000d74:	0800a4b8 	.word	0x0800a4b8
 8000d78:	200000e0 	.word	0x200000e0
 8000d7c:	0800a36c 	.word	0x0800a36c
 8000d80:	0800a4d4 	.word	0x0800a4d4
 8000d84:	200000d8 	.word	0x200000d8
 8000d88:	0800a39c 	.word	0x0800a39c
 8000d8c:	0800a4f0 	.word	0x0800a4f0
 8000d90:	200000e4 	.word	0x200000e4
 8000d94:	0800a3d0 	.word	0x0800a3d0
 8000d98:	0800a50c 	.word	0x0800a50c
 8000d9c:	200000dc 	.word	0x200000dc
 8000da0:	0800a400 	.word	0x0800a400
 8000da4:	0800a528 	.word	0x0800a528
 8000da8:	200000e8 	.word	0x200000e8
 8000dac:	0800a434 	.word	0x0800a434

08000db0 <odo_adjust>:



//Func
int odo_adjust (int odo_num, ODO_STAT odo_status) {
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]

	// safety speed
	for(int i = 0; i < 4; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	e010      	b.n	8000de4 <odo_adjust+0x34>
		if (pwm_val[i] > 950) {
 8000dc2:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <odo_adjust+0x128>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dca:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d905      	bls.n	8000dde <odo_adjust+0x2e>
			pwm_val[i] = 950;
 8000dd2:	4a41      	ldr	r2, [pc, #260]	; (8000ed8 <odo_adjust+0x128>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000dda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 4; i++) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	ddeb      	ble.n	8000dc2 <odo_adjust+0x12>
		}
	}

	if (odo_num == 0 && odo_status == UP) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d108      	bne.n	8000e02 <odo_adjust+0x52>
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <odo_adjust+0x52>
		pwm_val[0] += 5;
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <odo_adjust+0x128>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3305      	adds	r3, #5
 8000dfc:	4a36      	ldr	r2, [pc, #216]	; (8000ed8 <odo_adjust+0x128>)
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e00a      	b.n	8000e18 <odo_adjust+0x68>
	}
	else if (odo_num == 0 && odo_status == DOWN) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d107      	bne.n	8000e18 <odo_adjust+0x68>
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <odo_adjust+0x68>
		pwm_val[0] -= 5;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <odo_adjust+0x128>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3b05      	subs	r3, #5
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <odo_adjust+0x128>)
 8000e16:	6013      	str	r3, [r2, #0]
	}
//---------------------------------------------------------------------
	if (odo_num == 1 && odo_status == UP) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <odo_adjust+0x80>
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <odo_adjust+0x80>
		pwm_val[1] += 5;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <odo_adjust+0x128>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	3305      	adds	r3, #5
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <odo_adjust+0x128>)
 8000e2c:	6053      	str	r3, [r2, #4]
 8000e2e:	e00a      	b.n	8000e46 <odo_adjust+0x96>
	}
	else if (odo_num == 1 && odo_status == DOWN) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d107      	bne.n	8000e46 <odo_adjust+0x96>
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d104      	bne.n	8000e46 <odo_adjust+0x96>
		pwm_val[1] -= 5;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <odo_adjust+0x128>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	3b05      	subs	r3, #5
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <odo_adjust+0x128>)
 8000e44:	6053      	str	r3, [r2, #4]
	}
//---------------------------------------------------------------------
	if (odo_num == 2 && odo_status == UP) {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d108      	bne.n	8000e5e <odo_adjust+0xae>
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d105      	bne.n	8000e5e <odo_adjust+0xae>
		pwm_val[2] += 5;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <odo_adjust+0x128>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	3305      	adds	r3, #5
 8000e58:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <odo_adjust+0x128>)
 8000e5a:	6093      	str	r3, [r2, #8]
 8000e5c:	e00a      	b.n	8000e74 <odo_adjust+0xc4>
	}
	else if (odo_num == 2 && odo_status == DOWN) {
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d107      	bne.n	8000e74 <odo_adjust+0xc4>
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d104      	bne.n	8000e74 <odo_adjust+0xc4>
		pwm_val[2] -= 5;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <odo_adjust+0x128>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	3b05      	subs	r3, #5
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <odo_adjust+0x128>)
 8000e72:	6093      	str	r3, [r2, #8]
	}
//---------------------------------------------------------------------
	if (odo_num == 3 && odo_status == UP) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d108      	bne.n	8000e8c <odo_adjust+0xdc>
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d105      	bne.n	8000e8c <odo_adjust+0xdc>
		pwm_val[3] += 5;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <odo_adjust+0x128>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	3305      	adds	r3, #5
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <odo_adjust+0x128>)
 8000e88:	60d3      	str	r3, [r2, #12]
 8000e8a:	e00a      	b.n	8000ea2 <odo_adjust+0xf2>
	}
	else if (odo_num == 3 && odo_status == DOWN) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d107      	bne.n	8000ea2 <odo_adjust+0xf2>
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d104      	bne.n	8000ea2 <odo_adjust+0xf2>
		pwm_val[3] -= 5;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <odo_adjust+0x128>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3b05      	subs	r3, #5
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <odo_adjust+0x128>)
 8000ea0:	60d3      	str	r3, [r2, #12]
	}
//---------------------------------------------------------------------

	TIM2->CCR4 = pwm_val[0];		//odo_count[0]
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <odo_adjust+0x128>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CCR3 = pwm_val[1];		//odo_count[1]
 8000eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <odo_adjust+0x128>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->CCR1 = pwm_val[2];		//odo_count[2]
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <odo_adjust+0x128>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = pwm_val[3];		//odo_count[3]
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <odo_adjust+0x128>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	6393      	str	r3, [r2, #56]	; 0x38

	return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000000 	.word	0x20000000

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	4b64      	ldr	r3, [pc, #400]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a63      	ldr	r2, [pc, #396]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b61      	ldr	r3, [pc, #388]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b56      	ldr	r3, [pc, #344]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a55      	ldr	r2, [pc, #340]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b4f      	ldr	r3, [pc, #316]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b48      	ldr	r3, [pc, #288]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a47      	ldr	r2, [pc, #284]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b41      	ldr	r3, [pc, #260]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a40      	ldr	r2, [pc, #256]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a39      	ldr	r2, [pc, #228]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <MX_GPIO_Init+0x1ac>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 510e 	mov.w	r1, #9088	; 0x2380
 8000fbc:	4833      	ldr	r0, [pc, #204]	; (800108c <MX_GPIO_Init+0x1b0>)
 8000fbe:	f002 f86f 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4832      	ldr	r0, [pc, #200]	; (8001090 <MX_GPIO_Init+0x1b4>)
 8000fc8:	f002 f86a 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fd2:	4830      	ldr	r0, [pc, #192]	; (8001094 <MX_GPIO_Init+0x1b8>)
 8000fd4:	f002 f864 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2102      	movs	r1, #2
 8000fdc:	482e      	ldr	r0, [pc, #184]	; (8001098 <MX_GPIO_Init+0x1bc>)
 8000fde:	f002 f85f 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	482c      	ldr	r0, [pc, #176]	; (800109c <MX_GPIO_Init+0x1c0>)
 8000fea:	f002 f859 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000fee:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4821      	ldr	r0, [pc, #132]	; (800108c <MX_GPIO_Init+0x1b0>)
 8001008:	f001 fe9e 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800100c:	2320      	movs	r3, #32
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_GPIO_Init+0x1b4>)
 8001024:	f001 fe90 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8001028:	f244 0381 	movw	r3, #16513	; 0x4081
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4814      	ldr	r0, [pc, #80]	; (8001094 <MX_GPIO_Init+0x1b8>)
 8001042:	f001 fe81 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x1bc>)
 800105e:	f001 fe73 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <MX_GPIO_Init+0x1c0>)
 800107c:	f001 fe64 	bl	8002d48 <HAL_GPIO_Init>

}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	; 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40021400 	.word	0x40021400
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40021800 	.word	0x40021800
 800109c:	40020c00 	.word	0x40020c00

080010a0 <HCSR04_Delay>:
uint32_t Difference[3] = {0};
int Is_First_Captured[3] = {0};
float refClock = TIMCLOCK/(PRESCALAR);

void HCSR04_Delay (uint16_t time, TIM_HandleTypeDef *htim)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim) < time);
 80010b4:	bf00      	nop
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3f9      	bcc.n	80010b6 <HCSR04_Delay+0x16>

}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HCSR04_Read>:

void HCSR04_Read (TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);	// pull the TRIG pin HIGH
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f001 ffdb 	bl	80030a0 <HAL_GPIO_WritePin>
	HCSR04_Delay(10, htim);  // wait for 10 us
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	200a      	movs	r0, #10
 80010ee:	f7ff ffd7 	bl	80010a0 <HCSR04_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);  // pull the TRIG pin low
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f001 ffd1 	bl	80030a0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1); // enable Interrupt
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0202 	orr.w	r2, r2, #2
 800110c:	60da      	str	r2, [r3, #12]
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HC_SRO4_Dis>:


// calculate the distance of HC_SR04
uint32_t HC_SRO4_Dis(TIM_HandleTypeDef *htim, int num) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]

	if (Is_First_Captured[num] == 0) // if the first rising edge is not captured
 8001122:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HC_SRO4_Dis+0x120>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d117      	bne.n	800115e <HC_SRO4_Dis+0x46>
	{
		Is_First_Captured[num] = 1;  // set the first captured as true
 800112e:	4a42      	ldr	r2, [pc, #264]	; (8001238 <HC_SRO4_Dis+0x120>)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		IC_Val1[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001138:	2100      	movs	r1, #0
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f004 f820 	bl	8005180 <HAL_TIM_ReadCapturedValue>
 8001140:	4602      	mov	r2, r0
 8001142:	493e      	ldr	r1, [pc, #248]	; (800123c <HC_SRO4_Dis+0x124>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		IC_Val1[num] = htim->Instance->CNT; // read the first value
		IC_Val2[num] = 0;
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <HC_SRO4_Dis+0x128>)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2100      	movs	r1, #0
 8001150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
		return Distance[num];
 8001154:	4a3b      	ldr	r2, [pc, #236]	; (8001244 <HC_SRO4_Dis+0x12c>)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	e068      	b.n	8001230 <HC_SRO4_Dis+0x118>
	}

	else   // If the first rising edge is captured, now we will capture the second edge
	{
		IC_Val2[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f004 f80d 	bl	8005180 <HAL_TIM_ReadCapturedValue>
 8001166:	4602      	mov	r2, r0
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HC_SRO4_Dis+0x128>)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//IC_Val2[num] = htim->Instance->CNT;

		if (IC_Val2[num] > IC_Val1[num])
 8001170:	4a33      	ldr	r2, [pc, #204]	; (8001240 <HC_SRO4_Dis+0x128>)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001178:	4930      	ldr	r1, [pc, #192]	; (800123c <HC_SRO4_Dis+0x124>)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001180:	429a      	cmp	r2, r3
 8001182:	d90d      	bls.n	80011a0 <HC_SRO4_Dis+0x88>
		{
			Difference[num] = IC_Val2[num]-IC_Val1[num];
 8001184:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <HC_SRO4_Dis+0x128>)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800118c:	492b      	ldr	r1, [pc, #172]	; (800123c <HC_SRO4_Dis+0x124>)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001194:	1ad2      	subs	r2, r2, r3
 8001196:	492c      	ldr	r1, [pc, #176]	; (8001248 <HC_SRO4_Dis+0x130>)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800119e:	e019      	b.n	80011d4 <HC_SRO4_Dis+0xbc>
		}

		else if (IC_Val1[num] > IC_Val2[num])
 80011a0:	4a26      	ldr	r2, [pc, #152]	; (800123c <HC_SRO4_Dis+0x124>)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011a8:	4925      	ldr	r1, [pc, #148]	; (8001240 <HC_SRO4_Dis+0x128>)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d90f      	bls.n	80011d4 <HC_SRO4_Dis+0xbc>
		{

			//TIM 1,3,4 is 16bit so overflow is occured when the cnt value is 0xffff
			Difference[num] = (0xffff + IC_Val2[num]) - IC_Val1[num];
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HC_SRO4_Dis+0x128>)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011bc:	491f      	ldr	r1, [pc, #124]	; (800123c <HC_SRO4_Dis+0x124>)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011ca:	33ff      	adds	r3, #255	; 0xff
 80011cc:	491e      	ldr	r1, [pc, #120]	; (8001248 <HC_SRO4_Dis+0x130>)
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		}

//		frequency[num] = refClock/Difference[num];
		Distance[num] = Difference[num]*340/2000;
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HC_SRO4_Dis+0x130>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HC_SRO4_Dis+0x134>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	09da      	lsrs	r2, r3, #7
 80011ec:	4915      	ldr	r1, [pc, #84]	; (8001244 <HC_SRO4_Dis+0x12c>)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Distance[num] > 500) {
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HC_SRO4_Dis+0x12c>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001200:	d905      	bls.n	800120e <HC_SRO4_Dis+0xf6>
			Distance[num] = 500;
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HC_SRO4_Dis+0x12c>)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800120a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
//		htim->Instance->CNT = 0;

//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		Is_First_Captured[num] = 0; // set it back to false
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HC_SRO4_Dis+0x120>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2100      	movs	r1, #0
 8001214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//htim is address
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0202 	bic.w	r2, r2, #2
 8001226:	60da      	str	r2, [r3, #12]

		return Distance[num];
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HC_SRO4_Dis+0x12c>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}

	return Distance[num];
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200003e0 	.word	0x200003e0
 800123c:	200003b0 	.word	0x200003b0
 8001240:	200003bc 	.word	0x200003bc
 8001244:	200003c8 	.word	0x200003c8
 8001248:	200003d4 	.word	0x200003d4
 800124c:	10624dd3 	.word	0x10624dd3

08001250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_I2C1_Init+0x74>)
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <MX_I2C1_Init+0x7c>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_I2C1_Init+0x74>)
 800126e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_I2C1_Init+0x74>)
 800128e:	f001 ff21 	bl	80030d4 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 f930 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_I2C1_Init+0x74>)
 80012a0:	f002 f85c 	bl	800335c <HAL_I2CEx_ConfigAnalogFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012aa:	f000 f927 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C1_Init+0x74>)
 80012b2:	f002 f88f 	bl	80033d4 <HAL_I2CEx_ConfigDigitalFilter>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f91e 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200003ec 	.word	0x200003ec
 80012c8:	40005400 	.word	0x40005400
 80012cc:	000186a0 	.word	0x000186a0

080012d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_I2C_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12c      	bne.n	800134c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001320:	2304      	movs	r3, #4
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <HAL_I2C_MspInit+0x8c>)
 800132c:	f001 fd0c 	bl	8002d48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_I2C_MspInit+0x88>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001364:	f001 fb3a 	bl	80029dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001368:	f000 f820 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136c:	f7ff fdb6 	bl	8000edc <MX_GPIO_Init>
  MX_RTC_Init();
 8001370:	f000 fb42 	bl	80019f8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001374:	f001 f968 	bl	8002648 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001378:	f001 f990 	bl	800269c <MX_USART3_UART_Init>
  MX_UART7_Init();
 800137c:	f001 f93a 	bl	80025f4 <MX_UART7_Init>
  MX_I2C1_Init();
 8001380:	f7ff ff66 	bl	8001250 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001384:	f000 fdbc 	bl	8001f00 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8001388:	f001 f9b2 	bl	80026f0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800138c:	f000 fd44 	bl	8001e18 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001390:	f000 fe4c 	bl	800202c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001394:	f000 feba 	bl	800210c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001398:	f000 ff28 	bl	80021ec <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800139c:	f000 f878 	bl	8001490 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80013a0:	f7ff f92c 	bl	80005fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013a4:	f005 fca8 	bl	8006cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x48>
	...

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f007 ff4f 	bl	800925e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <SystemClock_Config+0xdc>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <SystemClock_Config+0xdc>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <SystemClock_Config+0xdc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <SystemClock_Config+0xe0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a25      	ldr	r2, [pc, #148]	; (800148c <SystemClock_Config+0xe0>)
 80013f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <SystemClock_Config+0xe0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001408:	2306      	movs	r3, #6
 800140a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800140c:	2301      	movs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001424:	23b4      	movs	r3, #180	; 0xb4
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f002 f85d 	bl	80034f4 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001440:	f000 f85c 	bl	80014fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001444:	f002 f806 	bl	8003454 <HAL_PWREx_EnableOverDrive>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800144e:	f000 f855 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2105      	movs	r1, #5
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fab7 	bl	80039e4 <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800147c:	f000 f83e 	bl	80014fc <Error_Handler>
  }
}
 8001480:	bf00      	nop
 8001482:	3750      	adds	r7, #80	; 0x50
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2047      	movs	r0, #71	; 0x47
 800149a:	f001 fb99 	bl	8002bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800149e:	2047      	movs	r0, #71	; 0x47
 80014a0:	f001 fbb2 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2105      	movs	r1, #5
 80014a8:	201b      	movs	r0, #27
 80014aa:	f001 fb91 	bl	8002bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80014ae:	201b      	movs	r0, #27
 80014b0:	f001 fbaa 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2105      	movs	r1, #5
 80014b8:	201d      	movs	r0, #29
 80014ba:	f001 fb89 	bl	8002bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014be:	201d      	movs	r0, #29
 80014c0:	f001 fba2 	bl	8002c08 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2105      	movs	r1, #5
 80014c8:	201e      	movs	r0, #30
 80014ca:	f001 fb81 	bl	8002bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014ce:	201e      	movs	r0, #30
 80014d0:	f001 fb9a 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ea:	f001 fa99 	bl	8002a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40000c00 	.word	0x40000c00

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <Move>:
#include "motor.h"

uint8_t odo_flag[4];
uint32_t odo_count[4];

void Move(int controlcmd){
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b06      	cmp	r3, #6
 8001514:	f200 80fe 	bhi.w	8001714 <Move+0x20c>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <Move+0x18>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	080016c9 	.word	0x080016c9
 8001524:	0800153d 	.word	0x0800153d
 8001528:	08001603 	.word	0x08001603
 800152c:	0800157f 	.word	0x0800157f
 8001530:	080015c1 	.word	0x080015c1
 8001534:	08001645 	.word	0x08001645
 8001538:	08001687 	.word	0x08001687
		case FORWARD:
			Forward();
 800153c:	f000 f90a 	bl	8001754 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2101      	movs	r1, #1
 8001544:	4880      	ldr	r0, [pc, #512]	; (8001748 <Move+0x240>)
 8001546:	f001 fdab 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	487e      	ldr	r0, [pc, #504]	; (8001748 <Move+0x240>)
 8001550:	f001 fda6 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155a:	487b      	ldr	r0, [pc, #492]	; (8001748 <Move+0x240>)
 800155c:	f001 fda0 	bl	80030a0 <HAL_GPIO_WritePin>

			for(int i = 0; i < 4; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	e007      	b.n	8001576 <Move+0x6e>
				odo_flag[i] = 1;
 8001566:	4a79      	ldr	r2, [pc, #484]	; (800174c <Move+0x244>)
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	4413      	add	r3, r2
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3301      	adds	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2b03      	cmp	r3, #3
 800157a:	ddf4      	ble.n	8001566 <Move+0x5e>
			}
			break;
 800157c:	e0e0      	b.n	8001740 <Move+0x238>
		case BACKWARD:
			Backward();
 800157e:	f000 f919 	bl	80017b4 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2101      	movs	r1, #1
 8001586:	4870      	ldr	r0, [pc, #448]	; (8001748 <Move+0x240>)
 8001588:	f001 fd8a 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800158c:	2201      	movs	r2, #1
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	486d      	ldr	r0, [pc, #436]	; (8001748 <Move+0x240>)
 8001592:	f001 fd85 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159c:	486a      	ldr	r0, [pc, #424]	; (8001748 <Move+0x240>)
 800159e:	f001 fd7f 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
 80015a6:	e007      	b.n	80015b8 <Move+0xb0>
				odo_flag[i] = 1;
 80015a8:	4a68      	ldr	r2, [pc, #416]	; (800174c <Move+0x244>)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	4413      	add	r3, r2
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	3301      	adds	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	ddf4      	ble.n	80015a8 <Move+0xa0>
			}
			break;
 80015be:	e0bf      	b.n	8001740 <Move+0x238>
		case LEFT:
			Left();
 80015c0:	f000 f958 	bl	8001874 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2101      	movs	r1, #1
 80015c8:	485f      	ldr	r0, [pc, #380]	; (8001748 <Move+0x240>)
 80015ca:	f001 fd69 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	485d      	ldr	r0, [pc, #372]	; (8001748 <Move+0x240>)
 80015d4:	f001 fd64 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015de:	485a      	ldr	r0, [pc, #360]	; (8001748 <Move+0x240>)
 80015e0:	f001 fd5e 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e007      	b.n	80015fa <Move+0xf2>
				odo_flag[i] = 1;
 80015ea:	4a58      	ldr	r2, [pc, #352]	; (800174c <Move+0x244>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	ddf4      	ble.n	80015ea <Move+0xe2>
			}
			break;
 8001600:	e09e      	b.n	8001740 <Move+0x238>
		case RIGHT:
			Right();
 8001602:	f000 f907 	bl	8001814 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	484f      	ldr	r0, [pc, #316]	; (8001748 <Move+0x240>)
 800160c:	f001 fd48 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	484c      	ldr	r0, [pc, #304]	; (8001748 <Move+0x240>)
 8001616:	f001 fd43 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	4849      	ldr	r0, [pc, #292]	; (8001748 <Move+0x240>)
 8001622:	f001 fd3d 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	e007      	b.n	800163c <Move+0x134>
				odo_flag[i] = 1;
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <Move+0x244>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4413      	add	r3, r2
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	3301      	adds	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b03      	cmp	r3, #3
 8001640:	ddf4      	ble.n	800162c <Move+0x124>
			}
			break;
 8001642:	e07d      	b.n	8001740 <Move+0x238>
		case CW:
			Cw();
 8001644:	f000 f946 	bl	80018d4 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	2101      	movs	r1, #1
 800164c:	483e      	ldr	r0, [pc, #248]	; (8001748 <Move+0x240>)
 800164e:	f001 fd27 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	483c      	ldr	r0, [pc, #240]	; (8001748 <Move+0x240>)
 8001658:	f001 fd22 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001662:	4839      	ldr	r0, [pc, #228]	; (8001748 <Move+0x240>)
 8001664:	f001 fd1c 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e007      	b.n	800167e <Move+0x176>
				odo_flag[i] = 1;
 800166e:	4a37      	ldr	r2, [pc, #220]	; (800174c <Move+0x244>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b03      	cmp	r3, #3
 8001682:	ddf4      	ble.n	800166e <Move+0x166>
			}
			break;
 8001684:	e05c      	b.n	8001740 <Move+0x238>
		case CCW:
			Ccw();
 8001686:	f000 f955 	bl	8001934 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	482e      	ldr	r0, [pc, #184]	; (8001748 <Move+0x240>)
 8001690:	f001 fd06 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001694:	2201      	movs	r2, #1
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	482b      	ldr	r0, [pc, #172]	; (8001748 <Move+0x240>)
 800169a:	f001 fd01 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	4828      	ldr	r0, [pc, #160]	; (8001748 <Move+0x240>)
 80016a6:	f001 fcfb 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e007      	b.n	80016c0 <Move+0x1b8>
				odo_flag[i] = 1;
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <Move+0x244>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4413      	add	r3, r2
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	3301      	adds	r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	ddf4      	ble.n	80016b0 <Move+0x1a8>
			}
			break;
 80016c6:	e03b      	b.n	8001740 <Move+0x238>
		case STOP:
			Stop();
 80016c8:	f000 f964 	bl	8001994 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	481d      	ldr	r0, [pc, #116]	; (8001748 <Move+0x240>)
 80016d2:	f001 fce5 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	481b      	ldr	r0, [pc, #108]	; (8001748 <Move+0x240>)
 80016dc:	f001 fce0 	bl	80030a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	4818      	ldr	r0, [pc, #96]	; (8001748 <Move+0x240>)
 80016e8:	f001 fcda 	bl	80030a0 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e00c      	b.n	800170c <Move+0x204>
				odo_flag[i] = 0;
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <Move+0x244>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <Move+0x248>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2100      	movs	r1, #0
 8001702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b03      	cmp	r3, #3
 8001710:	ddef      	ble.n	80016f2 <Move+0x1ea>
			}
			break;
 8001712:	e015      	b.n	8001740 <Move+0x238>
		default:
			Stop();
 8001714:	f000 f93e 	bl	8001994 <Stop>
			for(int i = 0; i < 4; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	e00c      	b.n	8001738 <Move+0x230>
				odo_flag[i] = 0;
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <Move+0x244>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 8001728:	4a09      	ldr	r2, [pc, #36]	; (8001750 <Move+0x248>)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2100      	movs	r1, #0
 800172e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b03      	cmp	r3, #3
 800173c:	ddef      	ble.n	800171e <Move+0x216>
			}
			break;
 800173e:	bf00      	nop
		}
}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40020400 	.word	0x40020400
 800174c:	20000440 	.word	0x20000440
 8001750:	20000444 	.word	0x20000444

08001754 <Forward>:

void Forward()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 8001758:	2200      	movs	r2, #0
 800175a:	2102      	movs	r1, #2
 800175c:	4812      	ldr	r0, [pc, #72]	; (80017a8 <Forward+0x54>)
 800175e:	f001 fc9f 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4810      	ldr	r0, [pc, #64]	; (80017ac <Forward+0x58>)
 800176a:	f001 fc99 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 800176e:	2201      	movs	r2, #1
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <Forward+0x58>)
 8001774:	f001 fc94 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <Forward+0x58>)
 8001780:	f001 fc8e 	bl	80030a0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001784:	2100      	movs	r1, #0
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <Forward+0x5c>)
 8001788:	f002 ff12 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800178c:	2104      	movs	r1, #4
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <Forward+0x5c>)
 8001790:	f002 ff0e 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001794:	2108      	movs	r1, #8
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <Forward+0x5c>)
 8001798:	f002 ff0a 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800179c:	210c      	movs	r1, #12
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <Forward+0x5c>)
 80017a0:	f002 ff06 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40021400 	.word	0x40021400
 80017b0:	20000508 	.word	0x20000508

080017b4 <Backward>:

void Backward()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2102      	movs	r1, #2
 80017bc:	4812      	ldr	r0, [pc, #72]	; (8001808 <Backward+0x54>)
 80017be:	f001 fc6f 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c8:	4810      	ldr	r0, [pc, #64]	; (800180c <Backward+0x58>)
 80017ca:	f001 fc69 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <Backward+0x58>)
 80017d4:	f001 fc64 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017de:	480b      	ldr	r0, [pc, #44]	; (800180c <Backward+0x58>)
 80017e0:	f001 fc5e 	bl	80030a0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017e4:	2100      	movs	r1, #0
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <Backward+0x5c>)
 80017e8:	f002 fee2 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017ec:	2104      	movs	r1, #4
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <Backward+0x5c>)
 80017f0:	f002 fede 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80017f4:	2108      	movs	r1, #8
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <Backward+0x5c>)
 80017f8:	f002 feda 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80017fc:	210c      	movs	r1, #12
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <Backward+0x5c>)
 8001800:	f002 fed6 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021800 	.word	0x40021800
 800180c:	40021400 	.word	0x40021400
 8001810:	20000508 	.word	0x20000508

08001814 <Right>:

void Right()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2102      	movs	r1, #2
 800181c:	4812      	ldr	r0, [pc, #72]	; (8001868 <Right+0x54>)
 800181e:	f001 fc3f 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001828:	4810      	ldr	r0, [pc, #64]	; (800186c <Right+0x58>)
 800182a:	f001 fc39 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	480e      	ldr	r0, [pc, #56]	; (800186c <Right+0x58>)
 8001834:	f001 fc34 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <Right+0x58>)
 8001840:	f001 fc2e 	bl	80030a0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001844:	2100      	movs	r1, #0
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <Right+0x5c>)
 8001848:	f002 feb2 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800184c:	2104      	movs	r1, #4
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <Right+0x5c>)
 8001850:	f002 feae 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001854:	2108      	movs	r1, #8
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <Right+0x5c>)
 8001858:	f002 feaa 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800185c:	210c      	movs	r1, #12
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <Right+0x5c>)
 8001860:	f002 fea6 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021800 	.word	0x40021800
 800186c:	40021400 	.word	0x40021400
 8001870:	20000508 	.word	0x20000508

08001874 <Left>:

void Left()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2102      	movs	r1, #2
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <Left+0x54>)
 800187e:	f001 fc0f 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <Left+0x58>)
 800188a:	f001 fc09 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <Left+0x58>)
 8001894:	f001 fc04 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <Left+0x58>)
 80018a0:	f001 fbfe 	bl	80030a0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018a4:	2100      	movs	r1, #0
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <Left+0x5c>)
 80018a8:	f002 fe82 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018ac:	2104      	movs	r1, #4
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <Left+0x5c>)
 80018b0:	f002 fe7e 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80018b4:	2108      	movs	r1, #8
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <Left+0x5c>)
 80018b8:	f002 fe7a 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80018bc:	210c      	movs	r1, #12
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <Left+0x5c>)
 80018c0:	f002 fe76 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021400 	.word	0x40021400
 80018d0:	20000508 	.word	0x20000508

080018d4 <Cw>:

void Cw()
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2102      	movs	r1, #2
 80018dc:	4812      	ldr	r0, [pc, #72]	; (8001928 <Cw+0x54>)
 80018de:	f001 fbdf 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <Cw+0x58>)
 80018ea:	f001 fbd9 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	480e      	ldr	r0, [pc, #56]	; (800192c <Cw+0x58>)
 80018f4:	f001 fbd4 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <Cw+0x58>)
 8001900:	f001 fbce 	bl	80030a0 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001904:	2100      	movs	r1, #0
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <Cw+0x5c>)
 8001908:	f002 fe52 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800190c:	2104      	movs	r1, #4
 800190e:	4808      	ldr	r0, [pc, #32]	; (8001930 <Cw+0x5c>)
 8001910:	f002 fe4e 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001914:	2108      	movs	r1, #8
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <Cw+0x5c>)
 8001918:	f002 fe4a 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800191c:	210c      	movs	r1, #12
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <Cw+0x5c>)
 8001920:	f002 fe46 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021800 	.word	0x40021800
 800192c:	40021400 	.word	0x40021400
 8001930:	20000508 	.word	0x20000508

08001934 <Ccw>:

void Ccw()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <Ccw+0x54>)
 800193e:	f001 fbaf 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <Ccw+0x58>)
 800194a:	f001 fba9 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <Ccw+0x58>)
 8001954:	f001 fba4 	bl	80030a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <Ccw+0x58>)
 8001960:	f001 fb9e 	bl	80030a0 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001964:	2100      	movs	r1, #0
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <Ccw+0x5c>)
 8001968:	f002 fe22 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800196c:	2104      	movs	r1, #4
 800196e:	4808      	ldr	r0, [pc, #32]	; (8001990 <Ccw+0x5c>)
 8001970:	f002 fe1e 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001974:	2108      	movs	r1, #8
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <Ccw+0x5c>)
 8001978:	f002 fe1a 	bl	80045b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800197c:	210c      	movs	r1, #12
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <Ccw+0x5c>)
 8001980:	f002 fe16 	bl	80045b0 <HAL_TIM_PWM_Start>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	20000508 	.word	0x20000508

08001994 <Stop>:

void Stop()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <Stop+0x28>)
 800199c:	f002 fed0 	bl	8004740 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80019a0:	2104      	movs	r1, #4
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <Stop+0x28>)
 80019a4:	f002 fecc 	bl	8004740 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80019a8:	2108      	movs	r1, #8
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <Stop+0x28>)
 80019ac:	f002 fec8 	bl	8004740 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80019b0:	210c      	movs	r1, #12
 80019b2:	4802      	ldr	r0, [pc, #8]	; (80019bc <Stop+0x28>)
 80019b4:	f002 fec4 	bl	8004740 <HAL_TIM_PWM_Stop>


}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000508 	.word	0x20000508

080019c0 <Motor_Init>:

void Motor_Init(){
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 80019c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 80019ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019d6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 80019d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_RTC_Init+0x44>)
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <MX_RTC_Init+0x48>)
 8001a00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a0a:	227f      	movs	r2, #127	; 0x7f
 8001a0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_RTC_Init+0x44>)
 8001a28:	f002 fbae 	bl	8004188 <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001a32:	f7ff fd63 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000454 	.word	0x20000454
 8001a40:	40002800 	.word	0x40002800

08001a44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	2230      	movs	r2, #48	; 0x30
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fc02 	bl	800925e <memset>
  if(rtcHandle->Instance==RTC)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_RTC_MspInit+0x4c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a64:	2320      	movs	r3, #32
 8001a66:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 f9c8 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a7e:	f7ff fd3d 	bl	80014fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_RTC_MspInit+0x50>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3738      	adds	r7, #56	; 0x38
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40002800 	.word	0x40002800
 8001a94:	42470e3c 	.word	0x42470e3c

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_MspInit+0x54>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_MspInit+0x54>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_MspInit+0x54>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_MspInit+0x54>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_MspInit+0x54>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_MspInit+0x54>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	210f      	movs	r1, #15
 8001ada:	f06f 0001 	mvn.w	r0, #1
 8001ade:	f001 f877 	bl	8002bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 f863 	bl	8002bd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b0a:	2032      	movs	r0, #50	; 0x32
 8001b0c:	f001 f87c 	bl	8002c08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f934 	bl	8003da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b3c:	f002 f90a 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_InitTick+0xa8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9b      	lsrs	r3, r3, #18
 8001b50:	3b01      	subs	r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_InitTick+0xac>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_InitTick+0xb0>)
 8001b58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_InitTick+0xac>)
 8001b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b60:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_InitTick+0xac>)
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_InitTick+0xac>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_InitTick+0xac>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_InitTick+0xac>)
 8001b76:	f002 fc01 	bl	800437c <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <HAL_InitTick+0xac>)
 8001b82:	f002 fc4b 	bl	800441c <HAL_TIM_Base_Start_IT>
 8001b86:	4603      	mov	r3, r0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	431bde83 	.word	0x431bde83
 8001b9c:	20000474 	.word	0x20000474
 8001ba0:	40000c00 	.word	0x40000c00

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bd6:	f002 ffa5 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200004c0 	.word	0x200004c0

08001be4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM1_CC_IRQHandler+0x10>)
 8001bea:	f002 ff9b 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004c0 	.word	0x200004c0

08001bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM3_IRQHandler+0x10>)
 8001bfe:	f002 ff91 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000550 	.word	0x20000550

08001c0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM4_IRQHandler+0x10>)
 8001c12:	f002 ff87 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000598 	.word	0x20000598

08001c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <USART2_IRQHandler+0x10>)
 8001c26:	f004 f8e7 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000066c 	.word	0x2000066c

08001c34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART3_IRQHandler+0x10>)
 8001c3a:	f004 f8dd 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200006b0 	.word	0x200006b0

08001c48 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c4e:	f002 ff69 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200005e0 	.word	0x200005e0

08001c5c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM8_CC_IRQHandler+0x10>)
 8001c62:	f002 ff5f 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200005e0 	.word	0x200005e0

08001c70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM5_IRQHandler+0x10>)
 8001c76:	f002 ff55 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000474 	.word	0x20000474

08001c84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART6_IRQHandler+0x10>)
 8001c8a:	f004 f8b5 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200006f4 	.word	0x200006f4

08001c98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <UART7_IRQHandler+0x10>)
 8001c9e:	f004 f8ab 	bl	8005df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000628 	.word	0x20000628

08001cac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cbe:	f3af 8000 	nop.w
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
	}

return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e009      	b.n	8001d0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc4f 	bl	80005a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf1      	blt.n	8001cf8 <_write+0x12>
	}
	return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_close>:

int _close(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_isatty>:

int _isatty(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f007 f920 	bl	8008ffc <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20030000 	.word	0x20030000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	200004bc 	.word	0x200004bc
 8001df0:	200044a0 	.word	0x200044a0

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0318 	add.w	r3, r7, #24
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e44:	4a2d      	ldr	r2, [pc, #180]	; (8001efc <MX_TIM1_Init+0xe4>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e4a:	22b3      	movs	r2, #179	; 0xb3
 8001e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e6e:	4822      	ldr	r0, [pc, #136]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e70:	f002 fa84 	bl	800437c <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001e7a:	f7ff fb3f 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481b      	ldr	r0, [pc, #108]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e8c:	f003 f8b0 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e96:	f7ff fb31 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001e9a:	4817      	ldr	r0, [pc, #92]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001e9c:	f002 fcc0 	bl	8004820 <HAL_TIM_IC_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ea6:	f7ff fb29 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001eba:	f003 fdfd 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001ec4:	f7ff fb1a 	bl	80014fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ec8:	230a      	movs	r3, #10
 8001eca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_TIM1_Init+0xe0>)
 8001ee0:	f002 ff28 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001eea:	f7ff fb07 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200004c0 	.word	0x200004c0
 8001efc:	40010000 	.word	0x40010000

08001f00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f3a:	2259      	movs	r2, #89	; 0x59
 8001f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f58:	4833      	ldr	r0, [pc, #204]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f5a:	f002 fa0f 	bl	800437c <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f64:	f7ff faca 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4619      	mov	r1, r3
 8001f74:	482c      	ldr	r0, [pc, #176]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f76:	f003 f83b 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f80:	f7ff fabc 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM2_Init+0x128>)
 8001f86:	f002 fab9 	bl	80044fc <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f90:	f7ff fab4 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4821      	ldr	r0, [pc, #132]	; (8002028 <MX_TIM2_Init+0x128>)
 8001fa4:	f003 fd88 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001fae:	f7ff faa5 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001fb2:	2370      	movs	r3, #112	; 0x70
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4817      	ldr	r0, [pc, #92]	; (8002028 <MX_TIM2_Init+0x128>)
 8001fca:	f002 ff4f 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fd4:	f7ff fa92 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4812      	ldr	r0, [pc, #72]	; (8002028 <MX_TIM2_Init+0x128>)
 8001fe0:	f002 ff44 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001fea:	f7ff fa87 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <MX_TIM2_Init+0x128>)
 8001ff6:	f002 ff39 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002000:	f7ff fa7c 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	220c      	movs	r2, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM2_Init+0x128>)
 800200c:	f002 ff2e 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002016:	f7ff fa71 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM2_Init+0x128>)
 800201c:	f000 fa92 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3738      	adds	r7, #56	; 0x38
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000508 	.word	0x20000508

0800202c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800204a:	463b      	mov	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <MX_TIM3_Init+0xd8>)
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <MX_TIM3_Init+0xdc>)
 800205a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <MX_TIM3_Init+0xd8>)
 800205e:	2259      	movs	r2, #89	; 0x59
 8002060:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b28      	ldr	r3, [pc, #160]	; (8002104 <MX_TIM3_Init+0xd8>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <MX_TIM3_Init+0xd8>)
 800206a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800206e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <MX_TIM3_Init+0xd8>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <MX_TIM3_Init+0xd8>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800207c:	4821      	ldr	r0, [pc, #132]	; (8002104 <MX_TIM3_Init+0xd8>)
 800207e:	f002 f97d 	bl	800437c <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002088:	f7ff fa38 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4619      	mov	r1, r3
 8002098:	481a      	ldr	r0, [pc, #104]	; (8002104 <MX_TIM3_Init+0xd8>)
 800209a:	f002 ffa9 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020a4:	f7ff fa2a 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80020a8:	4816      	ldr	r0, [pc, #88]	; (8002104 <MX_TIM3_Init+0xd8>)
 80020aa:	f002 fbb9 	bl	8004820 <HAL_TIM_IC_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020b4:	f7ff fa22 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	480f      	ldr	r0, [pc, #60]	; (8002104 <MX_TIM3_Init+0xd8>)
 80020c8:	f003 fcf6 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80020d2:	f7ff fa13 	bl	80014fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80020d6:	230a      	movs	r3, #10
 80020d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020da:	2301      	movs	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 80020e2:	2305      	movs	r3, #5
 80020e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_TIM3_Init+0xd8>)
 80020ee:	f002 fe21 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80020f8:	f7ff fa00 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000550 	.word	0x20000550
 8002108:	40000400 	.word	0x40000400

0800210c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <MX_TIM4_Init+0xd8>)
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <MX_TIM4_Init+0xdc>)
 800213a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <MX_TIM4_Init+0xd8>)
 800213e:	2259      	movs	r2, #89	; 0x59
 8002140:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <MX_TIM4_Init+0xd8>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_TIM4_Init+0xd8>)
 800214a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800214e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <MX_TIM4_Init+0xd8>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <MX_TIM4_Init+0xd8>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800215c:	4821      	ldr	r0, [pc, #132]	; (80021e4 <MX_TIM4_Init+0xd8>)
 800215e:	f002 f90d 	bl	800437c <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002168:	f7ff f9c8 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002170:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4619      	mov	r1, r3
 8002178:	481a      	ldr	r0, [pc, #104]	; (80021e4 <MX_TIM4_Init+0xd8>)
 800217a:	f002 ff39 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002184:	f7ff f9ba 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002188:	4816      	ldr	r0, [pc, #88]	; (80021e4 <MX_TIM4_Init+0xd8>)
 800218a:	f002 fb49 	bl	8004820 <HAL_TIM_IC_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002194:	f7ff f9b2 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	480f      	ldr	r0, [pc, #60]	; (80021e4 <MX_TIM4_Init+0xd8>)
 80021a8:	f003 fc86 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80021b2:	f7ff f9a3 	bl	80014fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021b6:	230a      	movs	r3, #10
 80021b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ba:	2301      	movs	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 80021c2:	2305      	movs	r3, #5
 80021c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_TIM4_Init+0xd8>)
 80021ce:	f002 fdb1 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80021d8:	f7ff f990 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000598 	.word	0x20000598
 80021e8:	40000800 	.word	0x40000800

080021ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <MX_TIM8_Init+0x120>)
 8002218:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <MX_TIM8_Init+0x124>)
 800221a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <MX_TIM8_Init+0x120>)
 800221e:	2201      	movs	r2, #1
 8002220:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <MX_TIM8_Init+0x120>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <MX_TIM8_Init+0x120>)
 800222a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <MX_TIM8_Init+0x120>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <MX_TIM8_Init+0x120>)
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <MX_TIM8_Init+0x120>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002242:	4832      	ldr	r0, [pc, #200]	; (800230c <MX_TIM8_Init+0x120>)
 8002244:	f002 f89a 	bl	800437c <HAL_TIM_Base_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800224e:	f7ff f955 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002258:	f107 0318 	add.w	r3, r7, #24
 800225c:	4619      	mov	r1, r3
 800225e:	482b      	ldr	r0, [pc, #172]	; (800230c <MX_TIM8_Init+0x120>)
 8002260:	f002 fec6 	bl	8004ff0 <HAL_TIM_ConfigClockSource>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800226a:	f7ff f947 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800226e:	4827      	ldr	r0, [pc, #156]	; (800230c <MX_TIM8_Init+0x120>)
 8002270:	f002 fad6 	bl	8004820 <HAL_TIM_IC_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800227a:	f7ff f93f 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	4619      	mov	r1, r3
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <MX_TIM8_Init+0x120>)
 800228e:	f003 fc13 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002298:	f7ff f930 	bl	80014fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800229c:	2300      	movs	r3, #0
 800229e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022a0:	2301      	movs	r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	4619      	mov	r1, r3
 80022b2:	4816      	ldr	r0, [pc, #88]	; (800230c <MX_TIM8_Init+0x120>)
 80022b4:	f002 fd3e 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80022be:	f7ff f91d 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022c2:	463b      	mov	r3, r7
 80022c4:	2204      	movs	r2, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <MX_TIM8_Init+0x120>)
 80022ca:	f002 fd33 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80022d4:	f7ff f912 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	2208      	movs	r2, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	480b      	ldr	r0, [pc, #44]	; (800230c <MX_TIM8_Init+0x120>)
 80022e0:	f002 fd28 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 80022ea:	f7ff f907 	bl	80014fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022ee:	463b      	mov	r3, r7
 80022f0:	220c      	movs	r2, #12
 80022f2:	4619      	mov	r1, r3
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_TIM8_Init+0x120>)
 80022f6:	f002 fd1d 	bl	8004d34 <HAL_TIM_IC_ConfigChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8002300:	f7ff f8fc 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200005e0 	.word	0x200005e0
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b090      	sub	sp, #64	; 0x40
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7b      	ldr	r2, [pc, #492]	; (8002520 <HAL_TIM_Base_MspInit+0x20c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d135      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
 800233a:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a79      	ldr	r2, [pc, #484]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b77      	ldr	r3, [pc, #476]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800235c:	f043 0310 	orr.w	r3, r3, #16
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800236e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002380:	2301      	movs	r3, #1
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002388:	4619      	mov	r1, r3
 800238a:	4867      	ldr	r0, [pc, #412]	; (8002528 <HAL_TIM_Base_MspInit+0x214>)
 800238c:	f000 fcdc 	bl	8002d48 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2105      	movs	r1, #5
 8002394:	2018      	movs	r0, #24
 8002396:	f000 fc1b 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800239a:	2018      	movs	r0, #24
 800239c:	f000 fc34 	bl	8002c08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80023a0:	e0ba      	b.n	8002518 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d10e      	bne.n	80023ca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	4b5c      	ldr	r3, [pc, #368]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6413      	str	r3, [r2, #64]	; 0x40
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	6a3b      	ldr	r3, [r7, #32]
}
 80023c8:	e0a6      	b.n	8002518 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a57      	ldr	r2, [pc, #348]	; (800252c <HAL_TIM_Base_MspInit+0x218>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d12c      	bne.n	800242e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023de:	f043 0302 	orr.w	r3, r3, #2
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b4f      	ldr	r3, [pc, #316]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a4a      	ldr	r2, [pc, #296]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800241c:	2302      	movs	r3, #2
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002424:	4619      	mov	r1, r3
 8002426:	4842      	ldr	r0, [pc, #264]	; (8002530 <HAL_TIM_Base_MspInit+0x21c>)
 8002428:	f000 fc8e 	bl	8002d48 <HAL_GPIO_Init>
}
 800242c:	e074      	b.n	8002518 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <HAL_TIM_Base_MspInit+0x220>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d12d      	bne.n	8002494 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6413      	str	r3, [r2, #64]	; 0x40
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b32      	ldr	r3, [pc, #200]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a31      	ldr	r2, [pc, #196]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002482:	2302      	movs	r3, #2
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248a:	4619      	mov	r1, r3
 800248c:	482a      	ldr	r0, [pc, #168]	; (8002538 <HAL_TIM_Base_MspInit+0x224>)
 800248e:	f000 fc5b 	bl	8002d48 <HAL_GPIO_Init>
}
 8002492:	e041      	b.n	8002518 <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM8)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_TIM_Base_MspInit+0x228>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d13c      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_TIM_Base_MspInit+0x210>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80024d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024e8:	2303      	movs	r3, #3
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <HAL_TIM_Base_MspInit+0x22c>)
 80024f4:	f000 fc28 	bl	8002d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2105      	movs	r1, #5
 80024fc:	202c      	movs	r0, #44	; 0x2c
 80024fe:	f000 fb67 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002502:	202c      	movs	r0, #44	; 0x2c
 8002504:	f000 fb80 	bl	8002c08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2105      	movs	r1, #5
 800250c:	202e      	movs	r0, #46	; 0x2e
 800250e:	f000 fb5f 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002512:	202e      	movs	r0, #46	; 0x2e
 8002514:	f000 fb78 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 8002518:	bf00      	nop
 800251a:	3740      	adds	r7, #64	; 0x40
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40010000 	.word	0x40010000
 8002524:	40023800 	.word	0x40023800
 8002528:	40021000 	.word	0x40021000
 800252c:	40000400 	.word	0x40000400
 8002530:	40020000 	.word	0x40020000
 8002534:	40000800 	.word	0x40000800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40010400 	.word	0x40010400
 8002540:	40020800 	.word	0x40020800

08002544 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002564:	d13c      	bne.n	80025e0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_TIM_MspPostInit+0xa4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025ae:	2301      	movs	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <HAL_TIM_MspPostInit+0xa8>)
 80025ba:	f000 fbc5 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80025be:	f640 4308 	movw	r3, #3080	; 0xc08
 80025c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <HAL_TIM_MspPostInit+0xac>)
 80025dc:	f000 fbb4 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400

080025f4 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_UART7_Init+0x4c>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_UART7_Init+0x50>)
 80025fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_UART7_Init+0x4c>)
 8002600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002604:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_UART7_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_UART7_Init+0x4c>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_UART7_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_UART7_Init+0x4c>)
 800261a:	220c      	movs	r2, #12
 800261c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_UART7_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_UART7_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_UART7_Init+0x4c>)
 800262c:	f003 fad4 	bl	8005bd8 <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002636:	f7fe ff61 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000628 	.word	0x20000628
 8002644:	40007800 	.word	0x40007800

08002648 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_USART2_UART_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_USART2_UART_Init+0x4c>)
 8002680:	f003 faaa 	bl	8005bd8 <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800268a:	f7fe ff37 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000066c 	.word	0x2000066c
 8002698:	40004400 	.word	0x40004400

0800269c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART3_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026d4:	f003 fa80 	bl	8005bd8 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f7fe ff0d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200006b0 	.word	0x200006b0
 80026ec:	40004800 	.word	0x40004800

080026f0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <MX_USART6_UART_Init+0x50>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002728:	f003 fa56 	bl	8005bd8 <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002732:	f7fe fee3 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200006f4 	.word	0x200006f4
 8002740:	40011400 	.word	0x40011400

08002744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b090      	sub	sp, #64	; 0x40
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_UART_MspInit+0x220>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d135      	bne.n	80027d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	4b7f      	ldr	r3, [pc, #508]	; (8002968 <HAL_UART_MspInit+0x224>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a7e      	ldr	r2, [pc, #504]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	4b78      	ldr	r3, [pc, #480]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a77      	ldr	r2, [pc, #476]	; (8002968 <HAL_UART_MspInit+0x224>)
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b75      	ldr	r3, [pc, #468]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800279e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80027b0:	2308      	movs	r3, #8
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b8:	4619      	mov	r1, r3
 80027ba:	486c      	ldr	r0, [pc, #432]	; (800296c <HAL_UART_MspInit+0x228>)
 80027bc:	f000 fac4 	bl	8002d48 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2105      	movs	r1, #5
 80027c4:	2052      	movs	r0, #82	; 0x52
 80027c6:	f000 fa03 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80027ca:	2052      	movs	r0, #82	; 0x52
 80027cc:	f000 fa1c 	bl	8002c08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80027d0:	e0c4      	b.n	800295c <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a66      	ldr	r2, [pc, #408]	; (8002970 <HAL_UART_MspInit+0x22c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d152      	bne.n	8002882 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_UART_MspInit+0x224>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_UART_MspInit+0x224>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_UART_MspInit+0x224>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <HAL_UART_MspInit+0x224>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a59      	ldr	r2, [pc, #356]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b57      	ldr	r3, [pc, #348]	; (8002968 <HAL_UART_MspInit+0x224>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_UART_MspInit+0x224>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_UART_MspInit+0x224>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002830:	2308      	movs	r3, #8
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002840:	2307      	movs	r3, #7
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002848:	4619      	mov	r1, r3
 800284a:	484a      	ldr	r0, [pc, #296]	; (8002974 <HAL_UART_MspInit+0x230>)
 800284c:	f000 fa7c 	bl	8002d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002850:	2320      	movs	r3, #32
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002860:	2307      	movs	r3, #7
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4843      	ldr	r0, [pc, #268]	; (8002978 <HAL_UART_MspInit+0x234>)
 800286c:	f000 fa6c 	bl	8002d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2105      	movs	r1, #5
 8002874:	2026      	movs	r0, #38	; 0x26
 8002876:	f000 f9ab 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800287a:	2026      	movs	r0, #38	; 0x26
 800287c:	f000 f9c4 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 8002880:	e06c      	b.n	800295c <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3d      	ldr	r2, [pc, #244]	; (800297c <HAL_UART_MspInit+0x238>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d135      	bne.n	80028f8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	4a34      	ldr	r2, [pc, #208]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289a:	6413      	str	r3, [r2, #64]	; 0x40
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_UART_MspInit+0x224>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_UART_MspInit+0x224>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_UART_MspInit+0x224>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_UART_MspInit+0x224>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028d6:	2307      	movs	r3, #7
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028de:	4619      	mov	r1, r3
 80028e0:	4825      	ldr	r0, [pc, #148]	; (8002978 <HAL_UART_MspInit+0x234>)
 80028e2:	f000 fa31 	bl	8002d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2105      	movs	r1, #5
 80028ea:	2027      	movs	r0, #39	; 0x27
 80028ec:	f000 f970 	bl	8002bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028f0:	2027      	movs	r0, #39	; 0x27
 80028f2:	f000 f989 	bl	8002c08 <HAL_NVIC_EnableIRQ>
}
 80028f6:	e031      	b.n	800295c <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_UART_MspInit+0x23c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12c      	bne.n	800295c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_UART_MspInit+0x224>)
 800290c:	f043 0320 	orr.w	r3, r3, #32
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_UART_MspInit+0x224>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800293a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800294c:	2308      	movs	r3, #8
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002954:	4619      	mov	r1, r3
 8002956:	480b      	ldr	r0, [pc, #44]	; (8002984 <HAL_UART_MspInit+0x240>)
 8002958:	f000 f9f6 	bl	8002d48 <HAL_GPIO_Init>
}
 800295c:	bf00      	nop
 800295e:	3740      	adds	r7, #64	; 0x40
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40007800 	.word	0x40007800
 8002968:	40023800 	.word	0x40023800
 800296c:	40021000 	.word	0x40021000
 8002970:	40004400 	.word	0x40004400
 8002974:	40020000 	.word	0x40020000
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40004800 	.word	0x40004800
 8002980:	40011400 	.word	0x40011400
 8002984:	40021800 	.word	0x40021800

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029b2:	f7ff fa1f 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f006 fc1d 	bl	80091f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fcd1 	bl	8001360 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80029cc:	0800a60c 	.word	0x0800a60c
  ldr r2, =_sbss
 80029d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80029d4:	200044a0 	.word	0x200044a0

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_Init+0x40>)
 80029e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_Init+0x40>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_Init+0x40>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 f8d8 	bl	8002bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	f7ff f870 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f7ff f842 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_IncTick+0x20>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x24>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_IncTick+0x24>)
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000024 	.word	0x20000024
 8002a44:	20000738 	.word	0x20000738

08002a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_GetTick+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000738 	.word	0x20000738

08002a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a92:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60d3      	str	r3, [r2, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0307 	and.w	r3, r3, #7
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db0b      	blt.n	8002aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <__NVIC_EnableIRQ+0x38>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f1c3 0307 	rsb	r3, r3, #7
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf28      	it	cs
 8002b72:	2304      	movcs	r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d902      	bls.n	8002b84 <NVIC_EncodePriority+0x30>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b03      	subs	r3, #3
 8002b82:	e000      	b.n	8002b86 <NVIC_EncodePriority+0x32>
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4313      	orrs	r3, r2
         );
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ff4c 	bl	8002a60 <__NVIC_SetPriorityGrouping>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be2:	f7ff ff61 	bl	8002aa8 <__NVIC_GetPriorityGrouping>
 8002be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f7ff ffb1 	bl	8002b54 <NVIC_EncodePriority>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff80 	bl	8002b00 <__NVIC_SetPriority>
}
 8002c00:	bf00      	nop
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff54 	bl	8002ac4 <__NVIC_EnableIRQ>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c32:	f7ff ff09 	bl	8002a48 <HAL_GetTick>
 8002c36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d008      	beq.n	8002c56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e052      	b.n	8002cfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0216 	bic.w	r2, r2, #22
 8002c64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_DMA_Abort+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0208 	bic.w	r2, r2, #8
 8002c94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca6:	e013      	b.n	8002cd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca8:	f7ff fece 	bl	8002a48 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d90c      	bls.n	8002cd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e015      	b.n	8002cfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e4      	bne.n	8002ca8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	223f      	movs	r2, #63	; 0x3f
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d004      	beq.n	8002d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00c      	b.n	8002d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2205      	movs	r2, #5
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e177      	b.n	8003054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8166 	bne.w	800304e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80c0 	beq.w	800304e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d037      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a55      	ldr	r2, [pc, #340]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a53      	ldr	r2, [pc, #332]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a51      	ldr	r2, [pc, #324]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x222>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a50      	ldr	r2, [pc, #320]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x21e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x21a>
 8002f5e:	2309      	movs	r3, #9
 8002f60:	e012      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f62:	230a      	movs	r3, #10
 8002f64:	e010      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e00e      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e00c      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00a      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_GPIO_Init+0x354>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_GPIO_Init+0x354>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_GPIO_Init+0x354>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f ae84 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40013800 	.word	0x40013800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020400 	.word	0x40020400
 800307c:	40020800 	.word	0x40020800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	40021000 	.word	0x40021000
 8003088:	40021400 	.word	0x40021400
 800308c:	40021800 	.word	0x40021800
 8003090:	40021c00 	.word	0x40021c00
 8003094:	40022000 	.word	0x40022000
 8003098:	40022400 	.word	0x40022400
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fe f8e8 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f000 fe0c 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	; (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	; (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	; (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	; (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	d129      	bne.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	; 0x24
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0210 	bic.w	r2, r2, #16
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d12a      	bne.n	8003444 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2224      	movs	r2, #36	; 0x24
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	f023 030f 	bic.w	r3, r3, #15
 8003414:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b29a      	uxth	r2, r3
 800341a:	89fb      	ldrh	r3, [r7, #14]
 800341c:	4313      	orrs	r3, r2
 800341e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	89fa      	ldrh	r2, [r7, #14]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003480:	f7ff fae2 	bl	8002a48 <HAL_GetTick>
 8003484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003486:	e009      	b.n	800349c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003488:	f7ff fade 	bl	8002a48 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003496:	d901      	bls.n	800349c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e01f      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <HAL_PWREx_EnableOverDrive+0x98>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d1ee      	bne.n	8003488 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034b0:	f7ff faca 	bl	8002a48 <HAL_GetTick>
 80034b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034b6:	e009      	b.n	80034cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034b8:	f7ff fac6 	bl	8002a48 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c6:	d901      	bls.n	80034cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e007      	b.n	80034dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_PWREx_EnableOverDrive+0x98>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034d8:	d1ee      	bne.n	80034b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	420e0040 	.word	0x420e0040
 80034ec:	40007000 	.word	0x40007000
 80034f0:	420e0044 	.word	0x420e0044

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e267      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	2b08      	cmp	r3, #8
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e242      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7ff fa4c 	bl	8002a48 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7ff fa48 	bl	8002a48 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e207      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7ff fa38 	bl	8002a48 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fa34 	bl	8002a48 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1f3      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7ff f9ed 	bl	8002a48 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7ff f9e9 	bl	8002a48 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a8      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7ff f9cc 	bl	8002a48 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7ff f9c8 	bl	8002a48 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e187      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x248>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7ff f9ac 	bl	8002a48 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f4:	f7ff f9a8 	bl	8002a48 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e167      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x248>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7ff f995 	bl	8002a48 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7ff f991 	bl	8002a48 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e150      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b74      	ldr	r3, [pc, #464]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a73      	ldr	r2, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7ff f951 	bl	8002a48 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7ff f94d 	bl	8002a48 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e10c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x2ea>
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a63      	ldr	r2, [pc, #396]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x30c>
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7ff f912 	bl	8002a48 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7ff f90e 	bl	8002a48 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0cb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x334>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7ff f8fc 	bl	8002a48 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7ff f8f8 	bl	8002a48 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b5      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a1 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d05c      	beq.n	8003958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d141      	bne.n	800392a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7ff f8cc 	bl	8002a48 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7ff f8c8 	bl	8002a48 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e087      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7ff f8a1 	bl	8002a48 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7ff f89d 	bl	8002a48 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e05c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x416>
 8003928:	e054      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7ff f88a 	bl	8002a48 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7ff f886 	bl	8002a48 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e045      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
 8003956:	e03d      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
 800396c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4ec>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d028      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d111      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cc      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d90c      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e067      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fe ffb8 	bl	8002a48 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fe ffb4 	bl	8002a48 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d20c      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd ffb0 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800a54c 	.word	0x0800a54c
 8003ba8:	2000001c 	.word	0x2000001c
 8003bac:	20000020 	.word	0x20000020

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b090      	sub	sp, #64	; 0x40
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e09b      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003be8:	e09b      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bee:	e098      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	627a      	str	r2, [r7, #36]	; 0x24
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c1c:	fb03 f201 	mul.w	r2, r3, r1
 8003c20:	2300      	movs	r3, #0
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	4a43      	ldr	r2, [pc, #268]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	460a      	mov	r2, r1
 8003c32:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	4413      	add	r3, r2
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c4a:	f7fc fb29 	bl	80002a0 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4613      	mov	r3, r2
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c56:	e053      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	617a      	str	r2, [r7, #20]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c6a:	f04f 0b00 	mov.w	fp, #0
 8003c6e:	4652      	mov	r2, sl
 8003c70:	465b      	mov	r3, fp
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	ebb2 080a 	subs.w	r8, r2, sl
 8003c8a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ca2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca6:	eb63 0509 	sbc.w	r5, r3, r9
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	00eb      	lsls	r3, r5, #3
 8003cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb8:	00e2      	lsls	r2, r4, #3
 8003cba:	4614      	mov	r4, r2
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	eb14 030a 	adds.w	r3, r4, sl
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	eb45 030b 	adc.w	r3, r5, fp
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	2200      	movs	r2, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf4:	f7fc fad4 	bl	80002a0 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3740      	adds	r7, #64	; 0x40
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	017d7840 	.word	0x017d7840

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	2000001c 	.word	0x2000001c

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800a55c 	.word	0x0800a55c

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	0800a55c 	.word	0x0800a55c

08003da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	220f      	movs	r2, #15
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RCC_GetClockConfig+0x60>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 020f 	and.w	r2, r3, #15
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40023c00 	.word	0x40023c00

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d075      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e3c:	4b91      	ldr	r3, [pc, #580]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e42:	f7fe fe01 	bl	8002a48 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e4a:	f7fe fdfd 	bl	8002a48 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e189      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	071b      	lsls	r3, r3, #28
 8003e80:	4981      	ldr	r1, [pc, #516]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01f      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e94:	4b7c      	ldr	r3, [pc, #496]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	0f1b      	lsrs	r3, r3, #28
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	019a      	lsls	r2, r3, #6
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	061b      	lsls	r3, r3, #24
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	071b      	lsls	r3, r3, #28
 8003eb4:	4974      	ldr	r1, [pc, #464]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec2:	f023 021f 	bic.w	r2, r3, #31
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	496e      	ldr	r1, [pc, #440]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	019a      	lsls	r2, r3, #6
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	4964      	ldr	r1, [pc, #400]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f02:	f7fe fda1 	bl	8002a48 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f0a:	f7fe fd9d 	bl	8002a48 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e129      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d079      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f40:	4b52      	ldr	r3, [pc, #328]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f46:	f7fe fd7f 	bl	8002a48 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f4e:	f7fe fd7b 	bl	8002a48 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e107      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d0ef      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	0f1b      	lsrs	r3, r3, #28
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	019a      	lsls	r2, r3, #6
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	431a      	orrs	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	071b      	lsls	r3, r3, #28
 8003f9a:	493b      	ldr	r1, [pc, #236]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	4934      	ldr	r1, [pc, #208]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	0e1b      	lsrs	r3, r3, #24
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	019a      	lsls	r2, r3, #6
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	071b      	lsls	r3, r3, #28
 8003fe8:	4927      	ldr	r1, [pc, #156]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	4922      	ldr	r1, [pc, #136]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe fd1c 	bl	8002a48 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004014:	f7fe fd18 	bl	8002a48 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0a4      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004032:	d1ef      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 808b 	beq.w	8004158 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004050:	6413      	str	r3, [r2, #64]	; 0x40
 8004052:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800406a:	f7fe fced 	bl	8002a48 <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004070:	e010      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004072:	f7fe fce9 	bl	8002a48 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d909      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e075      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004084:	42470068 	.word	0x42470068
 8004088:	40023800 	.word	0x40023800
 800408c:	42470070 	.word	0x42470070
 8004090:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004094:	4b38      	ldr	r3, [pc, #224]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0e8      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d028      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040be:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040d4:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040da:	4b28      	ldr	r3, [pc, #160]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d114      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe fcaf 	bl	8002a48 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fe fcab 	bl	8002a48 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e035      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0ee      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411c:	d10d      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	4912      	ldr	r1, [pc, #72]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
 8004138:	e005      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a0f      	ldr	r2, [pc, #60]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004140:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004144:	6093      	str	r3, [r2, #8]
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004154:	4313      	orrs	r3, r2
 8004156:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800416c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40007000 	.word	0x40007000
 800417c:	40023800 	.word	0x40023800
 8004180:	42470e40 	.word	0x42470e40
 8004184:	424711e0 	.word	0x424711e0

08004188 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e066      	b.n	800426c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f5b      	ldrb	r3, [r3, #29]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fc48 	bl	8001a44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	22ca      	movs	r2, #202	; 0xca
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2253      	movs	r2, #83	; 0x53
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f87a 	bl	80042c4 <RTC_EnterInitMode>
 80041d0:	4603      	mov	r3, r0
 80041d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12c      	bne.n	8004234 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68d2      	ldr	r2, [r2, #12]
 8004214:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6919      	ldr	r1, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	041a      	lsls	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f881 	bl	8004332 <RTC_ExitInitMode>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d113      	bne.n	8004262 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	22ff      	movs	r2, #255	; 0xff
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800428e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004290:	f7fe fbda 	bl	8002a48 <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004296:	e009      	b.n	80042ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004298:	f7fe fbd6 	bl	8002a48 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a6:	d901      	bls.n	80042ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e007      	b.n	80042bc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d122      	bne.n	8004328 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042f2:	f7fe fba9 	bl	8002a48 <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80042f8:	e00c      	b.n	8004314 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042fa:	f7fe fba5 	bl	8002a48 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004308:	d904      	bls.n	8004314 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2204      	movs	r2, #4
 800430e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <RTC_EnterInitMode+0x64>
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d1e8      	bne.n	80042fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800434c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff89 	bl	8004274 <HAL_RTC_WaitForSynchro>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e041      	b.n	8004412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd ffb6 	bl	8002314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 ff42 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04e      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d01d      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start_IT+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d010      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e007      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40001800 	.word	0x40001800

080044fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e041      	b.n	8004592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f839 	bl	800459a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 fe82 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x24>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e022      	b.n	800461a <HAL_TIM_PWM_Start+0x6a>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d109      	bne.n	80045ee <HAL_TIM_PWM_Start+0x3e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e015      	b.n	800461a <HAL_TIM_PWM_Start+0x6a>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start+0x58>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e008      	b.n	800461a <HAL_TIM_PWM_Start+0x6a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07c      	b.n	800471c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0x82>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004630:	e013      	b.n	800465a <HAL_TIM_PWM_Start+0xaa>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0x92>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004640:	e00b      	b.n	800465a <HAL_TIM_PWM_Start+0xaa>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d104      	bne.n	8004652 <HAL_TIM_PWM_Start+0xa2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	e003      	b.n	800465a <HAL_TIM_PWM_Start+0xaa>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2201      	movs	r2, #1
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f001 fa02 	bl	8005a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_TIM_PWM_Start+0x174>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_TIM_PWM_Start+0xcc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <HAL_TIM_PWM_Start+0x178>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_TIM_PWM_Start+0xd0>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_TIM_PWM_Start+0xd2>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a22      	ldr	r2, [pc, #136]	; (8004724 <HAL_TIM_PWM_Start+0x174>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d01d      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1f      	ldr	r2, [pc, #124]	; (800472c <HAL_TIM_PWM_Start+0x17c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_TIM_PWM_Start+0x180>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_TIM_PWM_Start+0x184>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <HAL_TIM_PWM_Start+0x178>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_TIM_PWM_Start+0x188>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIM_PWM_Start+0x136>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_TIM_PWM_Start+0x18c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b06      	cmp	r3, #6
 80046f6:	d010      	beq.n	800471a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	e007      	b.n	800471a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010000 	.word	0x40010000
 8004728:	40010400 	.word	0x40010400
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	40000c00 	.word	0x40000c00
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800

08004740 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f98a 	bl	8005a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <HAL_TIM_PWM_Stop+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_PWM_Stop+0x2c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_TIM_PWM_Stop+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_TIM_PWM_Stop+0x30>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_TIM_PWM_Stop+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d017      	beq.n	80047a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <HAL_TIM_PWM_Stop+0x66>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	f240 4344 	movw	r3, #1092	; 0x444
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_PWM_Stop+0x66>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_TIM_PWM_Stop+0x96>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	f240 4344 	movw	r3, #1092	; 0x444
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_PWM_Stop+0x96>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_PWM_Stop+0xa6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	e013      	b.n	800480e <HAL_TIM_PWM_Stop+0xce>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Stop+0xb6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f4:	e00b      	b.n	800480e <HAL_TIM_PWM_Stop+0xce>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Stop+0xc6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004804:	e003      	b.n	800480e <HAL_TIM_PWM_Stop+0xce>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e041      	b.n	80048b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f839 	bl	80048be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fcf0 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_IC_Start_IT+0x1e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e013      	b.n	800491a <HAL_TIM_IC_Start_IT+0x46>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_IC_Start_IT+0x2e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <HAL_TIM_IC_Start_IT+0x46>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d104      	bne.n	8004912 <HAL_TIM_IC_Start_IT+0x3e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e003      	b.n	800491a <HAL_TIM_IC_Start_IT+0x46>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <HAL_TIM_IC_Start_IT+0x58>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e013      	b.n	8004954 <HAL_TIM_IC_Start_IT+0x80>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d104      	bne.n	800493c <HAL_TIM_IC_Start_IT+0x68>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e00b      	b.n	8004954 <HAL_TIM_IC_Start_IT+0x80>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b08      	cmp	r3, #8
 8004940:	d104      	bne.n	800494c <HAL_TIM_IC_Start_IT+0x78>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e003      	b.n	8004954 <HAL_TIM_IC_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004952:	b2db      	uxtb	r3, r3
 8004954:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004956:	7bbb      	ldrb	r3, [r7, #14]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800495c:	7b7b      	ldrb	r3, [r7, #13]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d001      	beq.n	8004966 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0cc      	b.n	8004b00 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_TIM_IC_Start_IT+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004974:	e013      	b.n	800499e <HAL_TIM_IC_Start_IT+0xca>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d104      	bne.n	8004986 <HAL_TIM_IC_Start_IT+0xb2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004984:	e00b      	b.n	800499e <HAL_TIM_IC_Start_IT+0xca>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d104      	bne.n	8004996 <HAL_TIM_IC_Start_IT+0xc2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004994:	e003      	b.n	800499e <HAL_TIM_IC_Start_IT+0xca>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0xda>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	e013      	b.n	80049d6 <HAL_TIM_IC_Start_IT+0x102>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Start_IT+0xea>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049bc:	e00b      	b.n	80049d6 <HAL_TIM_IC_Start_IT+0x102>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_IC_Start_IT+0xfa>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049cc:	e003      	b.n	80049d6 <HAL_TIM_IC_Start_IT+0x102>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d841      	bhi.n	8004a60 <HAL_TIM_IC_Start_IT+0x18c>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <HAL_TIM_IC_Start_IT+0x110>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a61 	.word	0x08004a61
 80049ec:	08004a61 	.word	0x08004a61
 80049f0:	08004a61 	.word	0x08004a61
 80049f4:	08004a2b 	.word	0x08004a2b
 80049f8:	08004a61 	.word	0x08004a61
 80049fc:	08004a61 	.word	0x08004a61
 8004a00:	08004a61 	.word	0x08004a61
 8004a04:	08004a3d 	.word	0x08004a3d
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a4f 	.word	0x08004a4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0202 	orr.w	r2, r2, #2
 8004a26:	60da      	str	r2, [r3, #12]
      break;
 8004a28:	e01d      	b.n	8004a66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0204 	orr.w	r2, r2, #4
 8004a38:	60da      	str	r2, [r3, #12]
      break;
 8004a3a:	e014      	b.n	8004a66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	60da      	str	r2, [r3, #12]
      break;
 8004a4c:	e00b      	b.n	8004a66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0210 	orr.w	r2, r2, #16
 8004a5c:	60da      	str	r2, [r3, #12]
      break;
 8004a5e:	e002      	b.n	8004a66 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d148      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fff9 	bl	8005a6c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_TIM_IC_Start_IT+0x234>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIM_IC_Start_IT+0x238>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIM_IC_Start_IT+0x23c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_TIM_IC_Start_IT+0x240>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_TIM_IC_Start_IT+0x244>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_TIM_IC_Start_IT+0x248>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_IC_Start_IT+0x1f6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_TIM_IC_Start_IT+0x24c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d010      	beq.n	8004afe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e007      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40001800 	.word	0x40001800

08004b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0202 	mvn.w	r2, #2
 8004b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fb ff84 	bl	8000a74 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fb4a 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb51 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0204 	mvn.w	r2, #4
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fb ff5a 	bl	8000a74 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fb20 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fb27 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d122      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d11b      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0208 	mvn.w	r2, #8
 8004bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fb ff30 	bl	8000a74 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e005      	b.n	8004c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 faf6 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fafd 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0210 	mvn.w	r2, #16
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2208      	movs	r2, #8
 8004c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fb ff06 	bl	8000a74 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 facc 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fad3 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10e      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d107      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0201 	mvn.w	r2, #1
 8004ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fc18 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d107      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 ff78 	bl	8005bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa98 	bl	8005230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0220 	mvn.w	r2, #32
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff42 	bl	8005bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e088      	b.n	8004e64 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11b      	bne.n	8004d98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6819      	ldr	r1, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f000 fcb8 	bl	80056e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 020c 	bic.w	r2, r2, #12
 8004d82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6999      	ldr	r1, [r3, #24]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	619a      	str	r2, [r3, #24]
 8004d96:	e060      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 fd3c 	bl	800582a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6999      	ldr	r1, [r3, #24]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
 8004dd6:	e040      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d11b      	bne.n	8004e16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6819      	ldr	r1, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f000 fd89 	bl	8005904 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 020c 	bic.w	r2, r2, #12
 8004e00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]
 8004e14:	e021      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d11c      	bne.n	8004e56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	6819      	ldr	r1, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f000 fda6 	bl	800597c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69d9      	ldr	r1, [r3, #28]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	61da      	str	r2, [r3, #28]
 8004e54:	e001      	b.n	8004e5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e0ae      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b0c      	cmp	r3, #12
 8004e96:	f200 809f 	bhi.w	8004fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ed5 	.word	0x08004ed5
 8004ea4:	08004fd9 	.word	0x08004fd9
 8004ea8:	08004fd9 	.word	0x08004fd9
 8004eac:	08004fd9 	.word	0x08004fd9
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004fd9 	.word	0x08004fd9
 8004eb8:	08004fd9 	.word	0x08004fd9
 8004ebc:	08004fd9 	.word	0x08004fd9
 8004ec0:	08004f57 	.word	0x08004f57
 8004ec4:	08004fd9 	.word	0x08004fd9
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	08004fd9 	.word	0x08004fd9
 8004ed0:	08004f97 	.word	0x08004f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fa52 	bl	8005384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6999      	ldr	r1, [r3, #24]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	619a      	str	r2, [r3, #24]
      break;
 8004f12:	e064      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 faa2 	bl	8005464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6999      	ldr	r1, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	021a      	lsls	r2, r3, #8
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	619a      	str	r2, [r3, #24]
      break;
 8004f54:	e043      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 faf7 	bl	8005550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0208 	orr.w	r2, r2, #8
 8004f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69d9      	ldr	r1, [r3, #28]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	61da      	str	r2, [r3, #28]
      break;
 8004f94:	e023      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fb4b 	bl	8005638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69d9      	ldr	r1, [r3, #28]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	021a      	lsls	r2, r3, #8
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
      break;
 8004fd6:	e002      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIM_ConfigClockSource+0x1c>
 8005008:	2302      	movs	r3, #2
 800500a:	e0b4      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x186>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800502a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005044:	d03e      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504a:	f200 8087 	bhi.w	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	f000 8086 	beq.w	8005162 <HAL_TIM_ConfigClockSource+0x172>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d87f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800505c:	2b70      	cmp	r3, #112	; 0x70
 800505e:	d01a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xa6>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d87b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005064:	2b60      	cmp	r3, #96	; 0x60
 8005066:	d050      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x11a>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d877      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b50      	cmp	r3, #80	; 0x50
 800506e:	d03c      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xfa>
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d873      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d058      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x13a>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d86f      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b30      	cmp	r3, #48	; 0x30
 800507e:	d064      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d86b      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b20      	cmp	r3, #32
 8005086:	d060      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d867      	bhi.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d05c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d05a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	e062      	b.n	800515c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f000 fcc1 	bl	8005a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	609a      	str	r2, [r3, #8]
      break;
 80050c2:	e04f      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f000 fcaa 	bl	8005a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e03c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 fb68 	bl	80057cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2150      	movs	r1, #80	; 0x50
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fc77 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005108:	e02c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fbc4 	bl	80058a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2160      	movs	r1, #96	; 0x60
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc67 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005128:	e01c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fb48 	bl	80057cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc57 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 8005148:	e00c      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 fc4e 	bl	80059f6 <TIM_ITRx_SetConfig>
      break;
 800515a:	e003      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      break;
 8005160:	e000      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d831      	bhi.n	80051f8 <HAL_TIM_ReadCapturedValue+0x78>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051f9 	.word	0x080051f9
 80051b4:	080051f9 	.word	0x080051f9
 80051b8:	080051f9 	.word	0x080051f9
 80051bc:	080051e5 	.word	0x080051e5
 80051c0:	080051f9 	.word	0x080051f9
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	080051f9 	.word	0x080051f9
 80051cc:	080051ef 	.word	0x080051ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	60fb      	str	r3, [r7, #12]

      break;
 80051d8:	e00f      	b.n	80051fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	60fb      	str	r3, [r7, #12]

      break;
 80051e2:	e00a      	b.n	80051fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	60fb      	str	r3, [r7, #12]

      break;
 80051ec:	e005      	b.n	80051fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	60fb      	str	r3, [r7, #12]

      break;
 80051f6:	e000      	b.n	80051fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80051f8:	bf00      	nop
  }

  return tmpreg;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a40      	ldr	r2, [pc, #256]	; (8005358 <TIM_Base_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d00f      	beq.n	8005284 <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3d      	ldr	r2, [pc, #244]	; (800535c <TIM_Base_SetConfig+0x118>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00b      	beq.n	8005284 <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <TIM_Base_SetConfig+0x11c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d007      	beq.n	8005284 <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3b      	ldr	r2, [pc, #236]	; (8005364 <TIM_Base_SetConfig+0x120>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3a      	ldr	r2, [pc, #232]	; (8005368 <TIM_Base_SetConfig+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d108      	bne.n	8005296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2f      	ldr	r2, [pc, #188]	; (8005358 <TIM_Base_SetConfig+0x114>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02b      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d027      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <TIM_Base_SetConfig+0x118>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d023      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <TIM_Base_SetConfig+0x11c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01f      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <TIM_Base_SetConfig+0x120>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01b      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a29      	ldr	r2, [pc, #164]	; (8005368 <TIM_Base_SetConfig+0x124>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d017      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a28      	ldr	r2, [pc, #160]	; (800536c <TIM_Base_SetConfig+0x128>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a27      	ldr	r2, [pc, #156]	; (8005370 <TIM_Base_SetConfig+0x12c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a26      	ldr	r2, [pc, #152]	; (8005374 <TIM_Base_SetConfig+0x130>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a25      	ldr	r2, [pc, #148]	; (8005378 <TIM_Base_SetConfig+0x134>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a24      	ldr	r2, [pc, #144]	; (800537c <TIM_Base_SetConfig+0x138>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <TIM_Base_SetConfig+0x13c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <TIM_Base_SetConfig+0x114>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0xf8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <TIM_Base_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d103      	bne.n	8005344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	615a      	str	r2, [r3, #20]
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40010400 	.word	0x40010400
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800
 8005378:	40001800 	.word	0x40001800
 800537c:	40001c00 	.word	0x40001c00
 8005380:	40002000 	.word	0x40002000

08005384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 0302 	bic.w	r3, r3, #2
 80053cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a20      	ldr	r2, [pc, #128]	; (800545c <TIM_OC1_SetConfig+0xd8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC1_SetConfig+0x64>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <TIM_OC1_SetConfig+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10c      	bne.n	8005402 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0308 	bic.w	r3, r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <TIM_OC1_SetConfig+0xd8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC1_SetConfig+0x8e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <TIM_OC1_SetConfig+0xdc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d111      	bne.n	8005436 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40010000 	.word	0x40010000
 8005460:	40010400 	.word	0x40010400

08005464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0210 	bic.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0320 	bic.w	r3, r3, #32
 80054ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a22      	ldr	r2, [pc, #136]	; (8005548 <TIM_OC2_SetConfig+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC2_SetConfig+0x68>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <TIM_OC2_SetConfig+0xe8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d10d      	bne.n	80054e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <TIM_OC2_SetConfig+0xe4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0x94>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a16      	ldr	r2, [pc, #88]	; (800554c <TIM_OC2_SetConfig+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40010400 	.word	0x40010400

08005550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a21      	ldr	r2, [pc, #132]	; (8005630 <TIM_OC3_SetConfig+0xe0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_OC3_SetConfig+0x66>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <TIM_OC3_SetConfig+0xe4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10d      	bne.n	80055d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a16      	ldr	r2, [pc, #88]	; (8005630 <TIM_OC3_SetConfig+0xe0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC3_SetConfig+0x92>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <TIM_OC3_SetConfig+0xe4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d113      	bne.n	800560a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	40010000 	.word	0x40010000
 8005634:	40010400 	.word	0x40010400

08005638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	031b      	lsls	r3, r3, #12
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <TIM_OC4_SetConfig+0xa4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0x68>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <TIM_OC4_SetConfig+0xa8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40010400 	.word	0x40010400

080056e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <TIM_TI1_SetConfig+0xcc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01b      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d017      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_TI1_SetConfig+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <TIM_TI1_SetConfig+0xd4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a23      	ldr	r2, [pc, #140]	; (80057bc <TIM_TI1_SetConfig+0xd8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <TIM_TI1_SetConfig+0xdc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a21      	ldr	r2, [pc, #132]	; (80057c4 <TIM_TI1_SetConfig+0xe0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_TI1_SetConfig+0x66>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <TIM_TI1_SetConfig+0xe4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <TIM_TI1_SetConfig+0x6a>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <TIM_TI1_SetConfig+0x6c>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e003      	b.n	800576e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	b2db      	uxtb	r3, r3
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f003 030a 	and.w	r3, r3, #10
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800

080057cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 030a 	bic.w	r3, r3, #10
 8005808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005856:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	b29b      	uxth	r3, r3
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800587c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f023 0210 	bic.w	r2, r3, #16
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	031b      	lsls	r3, r3, #12
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 0303 	bic.w	r3, r3, #3
 8005930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005940:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	b2db      	uxtb	r3, r3
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005954:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	621a      	str	r2, [r3, #32]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	031b      	lsls	r3, r3, #12
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	031b      	lsls	r3, r3, #12
 80059d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f043 0307 	orr.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2201      	movs	r2, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e05a      	b.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d022      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1c:	d01d      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1a      	ldr	r2, [pc, #104]	; (8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a15      	ldr	r2, [pc, #84]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d10c      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40010400 	.word	0x40010400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40001800 	.word	0x40001800

08005bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e03f      	b.n	8005c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fc fda0 	bl	8002744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fddf 	bl	80067e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b08a      	sub	sp, #40	; 0x28
 8005c76:	af02      	add	r7, sp, #8
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d17c      	bne.n	8005d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_UART_Transmit+0x2c>
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e075      	b.n	8005d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_UART_Transmit+0x3e>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e06e      	b.n	8005d8e <HAL_UART_Transmit+0x11c>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2221      	movs	r2, #33	; 0x21
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cc6:	f7fc febf 	bl	8002a48 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce0:	d108      	bne.n	8005cf4 <HAL_UART_Transmit+0x82>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	e003      	b.n	8005cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d04:	e02a      	b.n	8005d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fb1f 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e036      	b.n	8005d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	3302      	adds	r3, #2
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e007      	b.n	8005d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1cf      	bne.n	8005d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2140      	movs	r1, #64	; 0x40
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 faef 	bl	8006354 <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
  }
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4613      	mov	r3, r2
 8005da2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d11d      	bne.n	8005dec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_UART_Receive_IT+0x26>
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e016      	b.n	8005dee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Receive_IT+0x38>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e00f      	b.n	8005dee <HAL_UART_Receive_IT+0x58>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fb24 	bl	8006430 <UART_Start_Receive_IT>
 8005de8:	4603      	mov	r3, r0
 8005dea:	e000      	b.n	8005dee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b0ba      	sub	sp, #232	; 0xe8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_UART_IRQHandler+0x66>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fc07 	bl	800666a <UART_Receive_IT>
      return;
 8005e5c:	e256      	b.n	800630c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80de 	beq.w	8006024 <HAL_UART_IRQHandler+0x22c>
 8005e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80d1 	beq.w	8006024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xae>
 8005e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_UART_IRQHandler+0xd2>
 8005eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	f043 0202 	orr.w	r2, r3, #2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_UART_IRQHandler+0xf6>
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d005      	beq.n	8005eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f043 0204 	orr.w	r2, r3, #4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d011      	beq.n	8005f1e <HAL_UART_IRQHandler+0x126>
 8005efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f043 0208 	orr.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 81ed 	beq.w	8006302 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14e>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fb92 	bl	800666a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <HAL_UART_IRQHandler+0x17a>
 8005f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04f      	beq.n	8006012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa9a 	bl	80064ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d141      	bne.n	800600a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3314      	adds	r3, #20
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d9      	bne.n	8005f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4a7d      	ldr	r2, [pc, #500]	; (80061d4 <HAL_UART_IRQHandler+0x3dc>)
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fc fe8c 	bl	8002d04 <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00e      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f990 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00a      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f98c 	bl	8006328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e006      	b.n	8006020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f988 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800601e:	e170      	b.n	8006302 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	bf00      	nop
    return;
 8006022:	e16e      	b.n	8006302 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	f040 814a 	bne.w	80062c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8143 	beq.w	80062c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 813c 	beq.w	80062c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	f040 80b4 	bne.w	80061d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800607c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8140 	beq.w	8006306 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800608a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800608e:	429a      	cmp	r2, r3
 8006090:	f080 8139 	bcs.w	8006306 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800609a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a6:	f000 8088 	beq.w	80061ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1d9      	bne.n	80060aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800611a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800611e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800612c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e1      	bne.n	80060f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3314      	adds	r3, #20
 8006152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800615c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e3      	bne.n	8006132 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618a:	f023 0310 	bic.w	r3, r3, #16
 800618e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800619c:	65ba      	str	r2, [r7, #88]	; 0x58
 800619e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e3      	bne.n	8006178 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fc fd35 	bl	8002c24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8b6 	bl	800633c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061d0:	e099      	b.n	8006306 <HAL_UART_IRQHandler+0x50e>
 80061d2:	bf00      	nop
 80061d4:	08006573 	.word	0x08006573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 808b 	beq.w	800630a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80061f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8086 	beq.w	800630a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	330c      	adds	r3, #12
 8006204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006222:	647a      	str	r2, [r7, #68]	; 0x44
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e3      	bne.n	80061fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3314      	adds	r3, #20
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	623b      	str	r3, [r7, #32]
   return(result);
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800625a:	633a      	str	r2, [r7, #48]	; 0x30
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e3      	bne.n	8006236 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	60fb      	str	r3, [r7, #12]
   return(result);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0310 	bic.w	r3, r3, #16
 8006292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062a0:	61fa      	str	r2, [r7, #28]
 80062a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	69b9      	ldr	r1, [r7, #24]
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	617b      	str	r3, [r7, #20]
   return(result);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e3      	bne.n	800627c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f83e 	bl	800633c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c0:	e023      	b.n	800630a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_UART_IRQHandler+0x4ea>
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f95d 	bl	800659a <UART_Transmit_IT>
    return;
 80062e0:	e014      	b.n	800630c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <HAL_UART_IRQHandler+0x514>
 80062ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f99d 	bl	800663a <UART_EndTransmit_IT>
    return;
 8006300:	e004      	b.n	800630c <HAL_UART_IRQHandler+0x514>
    return;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <HAL_UART_IRQHandler+0x514>
      return;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <HAL_UART_IRQHandler+0x514>
      return;
 800630a:	bf00      	nop
  }
}
 800630c:	37e8      	adds	r7, #232	; 0xe8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop

08006314 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b090      	sub	sp, #64	; 0x40
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006364:	e050      	b.n	8006408 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d04c      	beq.n	8006408 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800636e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0x30>
 8006374:	f7fc fb68 	bl	8002a48 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006380:	429a      	cmp	r2, r3
 8006382:	d241      	bcs.n	8006408 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800639a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a4:	637a      	str	r2, [r7, #52]	; 0x34
 80063a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	613b      	str	r3, [r7, #16]
   return(result);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d8:	623a      	str	r2, [r7, #32]
 80063da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e5      	bne.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e00f      	b.n	8006428 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	4013      	ands	r3, r2
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	429a      	cmp	r2, r3
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	429a      	cmp	r2, r3
 8006424:	d09f      	beq.n	8006366 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3740      	adds	r7, #64	; 0x40
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	4613      	mov	r3, r2
 800643c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2222      	movs	r2, #34	; 0x22
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0220 	orr.w	r2, r2, #32
 800649c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b095      	sub	sp, #84	; 0x54
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064d4:	643a      	str	r2, [r7, #64]	; 0x40
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3314      	adds	r3, #20
 80064ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3314      	adds	r3, #20
 8006506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	2b01      	cmp	r3, #1
 8006522:	d119      	bne.n	8006558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	60bb      	str	r3, [r7, #8]
   return(result);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 0310 	bic.w	r3, r3, #16
 800653a:	647b      	str	r3, [r7, #68]	; 0x44
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006544:	61ba      	str	r2, [r7, #24]
 8006546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	613b      	str	r3, [r7, #16]
   return(result);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006566:	bf00      	nop
 8006568:	3754      	adds	r7, #84	; 0x54
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fecb 	bl	8006328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b21      	cmp	r3, #33	; 0x21
 80065ac:	d13e      	bne.n	800662c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	d114      	bne.n	80065e2 <UART_Transmit_IT+0x48>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d110      	bne.n	80065e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]
 80065e0:	e008      	b.n	80065f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6211      	str	r1, [r2, #32]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	4619      	mov	r1, r3
 8006602:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10f      	bne.n	8006628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fe5a 	bl	8006314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b08c      	sub	sp, #48	; 0x30
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b22      	cmp	r3, #34	; 0x22
 800667c:	f040 80ab 	bne.w	80067d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d117      	bne.n	80066ba <UART_Receive_IT+0x50>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d113      	bne.n	80066ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28
 80066b8:	e026      	b.n	8006708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d007      	beq.n	80066de <UART_Receive_IT+0x74>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <UART_Receive_IT+0x82>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e008      	b.n	80066fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006718:	2b00      	cmp	r3, #0
 800671a:	d15a      	bne.n	80067d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0220 	bic.w	r2, r2, #32
 800672a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0201 	bic.w	r2, r2, #1
 800674a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	2b01      	cmp	r3, #1
 800675a:	d135      	bne.n	80067c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	613b      	str	r3, [r7, #16]
   return(result);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f023 0310 	bic.w	r3, r3, #16
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	623a      	str	r2, [r7, #32]
 8006784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	69f9      	ldr	r1, [r7, #28]
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d10a      	bne.n	80067ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff fdbb 	bl	800633c <HAL_UARTEx_RxEventCallback>
 80067c6:	e002      	b.n	80067ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fa f90f 	bl	80009ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e002      	b.n	80067d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3730      	adds	r7, #48	; 0x30
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067e4:	b0c0      	sub	sp, #256	; 0x100
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fc:	68d9      	ldr	r1, [r3, #12]
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	ea40 0301 	orr.w	r3, r0, r1
 8006808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	431a      	orrs	r2, r3
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006838:	f021 010c 	bic.w	r1, r1, #12
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006846:	430b      	orrs	r3, r1
 8006848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685a:	6999      	ldr	r1, [r3, #24]
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	ea40 0301 	orr.w	r3, r0, r1
 8006866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b8f      	ldr	r3, [pc, #572]	; (8006aac <UART_SetConfig+0x2cc>)
 8006870:	429a      	cmp	r2, r3
 8006872:	d005      	beq.n	8006880 <UART_SetConfig+0xa0>
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <UART_SetConfig+0x2d0>)
 800687c:	429a      	cmp	r2, r3
 800687e:	d104      	bne.n	800688a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fd fa7c 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8006884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006888:	e003      	b.n	8006892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800688a:	f7fd fa63 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 800688e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689c:	f040 810c 	bne.w	8006ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80068ba:	415b      	adcs	r3, r3
 80068bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068c2:	4621      	mov	r1, r4
 80068c4:	eb12 0801 	adds.w	r8, r2, r1
 80068c8:	4629      	mov	r1, r5
 80068ca:	eb43 0901 	adc.w	r9, r3, r1
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068e2:	4690      	mov	r8, r2
 80068e4:	4699      	mov	r9, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	eb18 0303 	adds.w	r3, r8, r3
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f0:	462b      	mov	r3, r5
 80068f2:	eb49 0303 	adc.w	r3, r9, r3
 80068f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006906:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800690a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800690e:	460b      	mov	r3, r1
 8006910:	18db      	adds	r3, r3, r3
 8006912:	653b      	str	r3, [r7, #80]	; 0x50
 8006914:	4613      	mov	r3, r2
 8006916:	eb42 0303 	adc.w	r3, r2, r3
 800691a:	657b      	str	r3, [r7, #84]	; 0x54
 800691c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006924:	f7f9 fcbc 	bl	80002a0 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4b61      	ldr	r3, [pc, #388]	; (8006ab4 <UART_SetConfig+0x2d4>)
 800692e:	fba3 2302 	umull	r2, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	011c      	lsls	r4, r3, #4
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006940:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	1891      	adds	r1, r2, r2
 800694e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006950:	415b      	adcs	r3, r3
 8006952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006958:	4641      	mov	r1, r8
 800695a:	eb12 0a01 	adds.w	sl, r2, r1
 800695e:	4649      	mov	r1, r9
 8006960:	eb43 0b01 	adc.w	fp, r3, r1
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006978:	4692      	mov	sl, r2
 800697a:	469b      	mov	fp, r3
 800697c:	4643      	mov	r3, r8
 800697e:	eb1a 0303 	adds.w	r3, sl, r3
 8006982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006986:	464b      	mov	r3, r9
 8006988:	eb4b 0303 	adc.w	r3, fp, r3
 800698c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800699c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069a4:	460b      	mov	r3, r1
 80069a6:	18db      	adds	r3, r3, r3
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
 80069aa:	4613      	mov	r3, r2
 80069ac:	eb42 0303 	adc.w	r3, r2, r3
 80069b0:	647b      	str	r3, [r7, #68]	; 0x44
 80069b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069ba:	f7f9 fc71 	bl	80002a0 <__aeabi_uldivmod>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	4b3b      	ldr	r3, [pc, #236]	; (8006ab4 <UART_SetConfig+0x2d4>)
 80069c6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2264      	movs	r2, #100	; 0x64
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069da:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <UART_SetConfig+0x2d4>)
 80069dc:	fba3 2302 	umull	r2, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069e8:	441c      	add	r4, r3
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	1891      	adds	r1, r2, r2
 8006a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a04:	415b      	adcs	r3, r3
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	1851      	adds	r1, r2, r1
 8006a10:	6339      	str	r1, [r7, #48]	; 0x30
 8006a12:	4649      	mov	r1, r9
 8006a14:	414b      	adcs	r3, r1
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a24:	4659      	mov	r1, fp
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4651      	mov	r1, sl
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4642      	mov	r2, r8
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a40:	464b      	mov	r3, r9
 8006a42:	460a      	mov	r2, r1
 8006a44:	eb42 0303 	adc.w	r3, r2, r3
 8006a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a60:	460b      	mov	r3, r1
 8006a62:	18db      	adds	r3, r3, r3
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a66:	4613      	mov	r3, r2
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a76:	f7f9 fc13 	bl	80002a0 <__aeabi_uldivmod>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006a80:	fba3 1302 	umull	r1, r3, r3, r2
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	2164      	movs	r1, #100	; 0x64
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	3332      	adds	r3, #50	; 0x32
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <UART_SetConfig+0x2d4>)
 8006a94:	fba2 2303 	umull	r2, r3, r2, r3
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	f003 0207 	and.w	r2, r3, #7
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4422      	add	r2, r4
 8006aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aa8:	e105      	b.n	8006cb6 <UART_SetConfig+0x4d6>
 8006aaa:	bf00      	nop
 8006aac:	40011000 	.word	0x40011000
 8006ab0:	40011400 	.word	0x40011400
 8006ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006abc:	2200      	movs	r2, #0
 8006abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aca:	4642      	mov	r2, r8
 8006acc:	464b      	mov	r3, r9
 8006ace:	1891      	adds	r1, r2, r2
 8006ad0:	6239      	str	r1, [r7, #32]
 8006ad2:	415b      	adcs	r3, r3
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ada:	4641      	mov	r1, r8
 8006adc:	1854      	adds	r4, r2, r1
 8006ade:	4649      	mov	r1, r9
 8006ae0:	eb43 0501 	adc.w	r5, r3, r1
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	00eb      	lsls	r3, r5, #3
 8006aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af2:	00e2      	lsls	r2, r4, #3
 8006af4:	4614      	mov	r4, r2
 8006af6:	461d      	mov	r5, r3
 8006af8:	4643      	mov	r3, r8
 8006afa:	18e3      	adds	r3, r4, r3
 8006afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b00:	464b      	mov	r3, r9
 8006b02:	eb45 0303 	adc.w	r3, r5, r3
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b26:	4629      	mov	r1, r5
 8006b28:	008b      	lsls	r3, r1, #2
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b30:	4621      	mov	r1, r4
 8006b32:	008a      	lsls	r2, r1, #2
 8006b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b38:	f7f9 fbb2 	bl	80002a0 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4b60      	ldr	r3, [pc, #384]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006b42:	fba3 2302 	umull	r2, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	011c      	lsls	r4, r3, #4
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	1891      	adds	r1, r2, r2
 8006b62:	61b9      	str	r1, [r7, #24]
 8006b64:	415b      	adcs	r3, r3
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	1851      	adds	r1, r2, r1
 8006b70:	6139      	str	r1, [r7, #16]
 8006b72:	4649      	mov	r1, r9
 8006b74:	414b      	adcs	r3, r1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b84:	4659      	mov	r1, fp
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4651      	mov	r1, sl
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4651      	mov	r1, sl
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	008b      	lsls	r3, r1, #2
 8006bc8:	4641      	mov	r1, r8
 8006bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bce:	4641      	mov	r1, r8
 8006bd0:	008a      	lsls	r2, r1, #2
 8006bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bd6:	f7f9 fb63 	bl	80002a0 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	; 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	3332      	adds	r3, #50	; 0x32
 8006bf2:	4a34      	ldr	r2, [pc, #208]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bfe:	441c      	add	r4, r3
 8006c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c04:	2200      	movs	r2, #0
 8006c06:	673b      	str	r3, [r7, #112]	; 0x70
 8006c08:	677a      	str	r2, [r7, #116]	; 0x74
 8006c0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	415b      	adcs	r3, r3
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c1e:	4641      	mov	r1, r8
 8006c20:	1851      	adds	r1, r2, r1
 8006c22:	6039      	str	r1, [r7, #0]
 8006c24:	4649      	mov	r1, r9
 8006c26:	414b      	adcs	r3, r1
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c36:	4659      	mov	r1, fp
 8006c38:	00cb      	lsls	r3, r1, #3
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c40:	4651      	mov	r1, sl
 8006c42:	00ca      	lsls	r2, r1, #3
 8006c44:	4610      	mov	r0, r2
 8006c46:	4619      	mov	r1, r3
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4642      	mov	r2, r8
 8006c4c:	189b      	adds	r3, r3, r2
 8006c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c50:	464b      	mov	r3, r9
 8006c52:	460a      	mov	r2, r1
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	663b      	str	r3, [r7, #96]	; 0x60
 8006c64:	667a      	str	r2, [r7, #100]	; 0x64
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c72:	4649      	mov	r1, r9
 8006c74:	008b      	lsls	r3, r1, #2
 8006c76:	4641      	mov	r1, r8
 8006c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	008a      	lsls	r2, r1, #2
 8006c80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c84:	f7f9 fb0c 	bl	80002a0 <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	2164      	movs	r1, #100	; 0x64
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	3332      	adds	r3, #50	; 0x32
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <UART_SetConfig+0x4e4>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	f003 020f 	and.w	r2, r3, #15
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4422      	add	r2, r4
 8006cb4:	609a      	str	r2, [r3, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc2:	bf00      	nop
 8006cc4:	51eb851f 	.word	0x51eb851f

08006cc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cda:	2b84      	cmp	r3, #132	; 0x84
 8006cdc:	d005      	beq.n	8006cea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006cde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3303      	adds	r3, #3
 8006ce8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006cea:	68fb      	ldr	r3, [r7, #12]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006cfc:	f001 f82a 	bl	8007d54 <vTaskStartScheduler>
  
  return osOK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d08:	b089      	sub	sp, #36	; 0x24
 8006d0a:	af04      	add	r7, sp, #16
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <osThreadCreate+0x54>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01c      	beq.n	8006d5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685c      	ldr	r4, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681d      	ldr	r5, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691e      	ldr	r6, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff ffc8 	bl	8006cc8 <makeFreeRtosPriority>
 8006d38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d42:	9202      	str	r2, [sp, #8]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	9100      	str	r1, [sp, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 fe22 	bl	8007998 <xTaskCreateStatic>
 8006d54:	4603      	mov	r3, r0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e01c      	b.n	8006d94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685c      	ldr	r4, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d66:	b29e      	uxth	r6, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff ffaa 	bl	8006cc8 <makeFreeRtosPriority>
 8006d74:	4602      	mov	r2, r0
 8006d76:	f107 030c 	add.w	r3, r7, #12
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	9200      	str	r2, [sp, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	4632      	mov	r2, r6
 8006d82:	4629      	mov	r1, r5
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fe64 	bl	8007a52 <xTaskCreate>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e000      	b.n	8006d96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d94:	68fb      	ldr	r3, [r7, #12]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <osDelay+0x16>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	e000      	b.n	8006db6 <osDelay+0x18>
 8006db4:	2301      	movs	r3, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 ff98 	bl	8007cec <vTaskDelay>
  
  return osOK;
 8006dbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b086      	sub	sp, #24
 8006dca:	af02      	add	r7, sp, #8
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10a      	bne.n	8006df4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2203      	movs	r2, #3
 8006de4:	9200      	str	r2, [sp, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	2100      	movs	r1, #0
 8006dea:	2001      	movs	r0, #1
 8006dec:	f000 f962 	bl	80070b4 <xQueueGenericCreateStatic>
 8006df0:	4603      	mov	r3, r0
 8006df2:	e016      	b.n	8006e22 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e014      	b.n	8006e22 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d110      	bne.n	8006e20 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006dfe:	2203      	movs	r2, #3
 8006e00:	2100      	movs	r1, #0
 8006e02:	2001      	movs	r0, #1
 8006e04:	f000 f9ce 	bl	80071a4 <xQueueGenericCreate>
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <osSemaphoreCreate+0x56>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fa1e 	bl	8007258 <xQueueGenericSend>
      return sema;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	e000      	b.n	8006e22 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006e20:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006e2a:	b590      	push	{r4, r7, lr}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af02      	add	r7, sp, #8
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <osMessageCreate+0x36>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6859      	ldr	r1, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2400      	movs	r4, #0
 8006e56:	9400      	str	r4, [sp, #0]
 8006e58:	f000 f92c 	bl	80070b4 <xQueueGenericCreateStatic>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	e008      	b.n	8006e72 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f000 f99a 	bl	80071a4 <xQueueGenericCreate>
 8006e70:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd90      	pop	{r4, r7, pc}

08006e7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f103 0208 	add.w	r2, r3, #8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 0208 	add.w	r2, r3, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f103 0208 	add.w	r2, r3, #8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d103      	bne.n	8006f3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e00c      	b.n	8006f56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e002      	b.n	8006f4a <vListInsert+0x2e>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d2f6      	bcs.n	8006f44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6892      	ldr	r2, [r2, #8]
 8006fa4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6852      	ldr	r2, [r2, #4]
 8006fae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d103      	bne.n	8006fc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800700e:	f001 fce9 	bl	80089e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	441a      	add	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	3b01      	subs	r3, #1
 8007040:	68f9      	ldr	r1, [r7, #12]
 8007042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	441a      	add	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	22ff      	movs	r2, #255	; 0xff
 8007052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	22ff      	movs	r2, #255	; 0xff
 800705a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d114      	bne.n	800708e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3310      	adds	r3, #16
 8007070:	4618      	mov	r0, r3
 8007072:	f001 f8c1 	bl	80081f8 <xTaskRemoveFromEventList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d012      	beq.n	80070a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800707c:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <xQueueGenericReset+0xcc>)
 800707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	e009      	b.n	80070a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3310      	adds	r3, #16
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fef1 	bl	8006e7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3324      	adds	r3, #36	; 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff feec 	bl	8006e7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070a2:	f001 fccf 	bl	8008a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070a6:	2301      	movs	r3, #1
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08e      	sub	sp, #56	; 0x38
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <xQueueGenericCreateStatic+0x52>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <xQueueGenericCreateStatic+0x56>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <xQueueGenericCreateStatic+0x58>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	623b      	str	r3, [r7, #32]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <xQueueGenericCreateStatic+0x7e>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <xQueueGenericCreateStatic+0x82>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueGenericCreateStatic+0x84>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	61fb      	str	r3, [r7, #28]
}
 800714e:	bf00      	nop
 8007150:	e7fe      	b.n	8007150 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007152:	2348      	movs	r3, #72	; 0x48
 8007154:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b48      	cmp	r3, #72	; 0x48
 800715a:	d00a      	beq.n	8007172 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	61bb      	str	r3, [r7, #24]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007172:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007186:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f83f 	bl	8007218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800719c:	4618      	mov	r0, r3
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10a      	bne.n	80071ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	613b      	str	r3, [r7, #16]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3348      	adds	r3, #72	; 0x48
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fd23 	bl	8008c28 <pvPortMalloc>
 80071e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	3348      	adds	r3, #72	; 0x48
 80071f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	4613      	mov	r3, r2
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f805 	bl	8007218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800720e:	69bb      	ldr	r3, [r7, #24]
	}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e002      	b.n	800723a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007246:	2101      	movs	r1, #1
 8007248:	69b8      	ldr	r0, [r7, #24]
 800724a:	f7ff fecb 	bl	8006fe4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08e      	sub	sp, #56	; 0x38
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <xQueueGenericSend+0x32>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <xQueueGenericSend+0x40>
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <xQueueGenericSend+0x44>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <xQueueGenericSend+0x46>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <xQueueGenericSend+0x60>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d103      	bne.n	80072c6 <xQueueGenericSend+0x6e>
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <xQueueGenericSend+0x72>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <xQueueGenericSend+0x74>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	623b      	str	r3, [r7, #32]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072e6:	f001 f947 	bl	8008578 <xTaskGetSchedulerState>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <xQueueGenericSend+0x9e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xQueueGenericSend+0xa2>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericSend+0xa4>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <xQueueGenericSend+0xbe>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	61fb      	str	r3, [r7, #28]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007316:	f001 fb65 	bl	80089e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <xQueueGenericSend+0xd4>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d129      	bne.n	8007380 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fa37 	bl	80077a4 <prvCopyDataToQueue>
 8007336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	3324      	adds	r3, #36	; 0x24
 8007344:	4618      	mov	r0, r3
 8007346:	f000 ff57 	bl	80081f8 <xTaskRemoveFromEventList>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d013      	beq.n	8007378 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b3f      	ldr	r3, [pc, #252]	; (8007450 <xQueueGenericSend+0x1f8>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	e00a      	b.n	8007378 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007368:	4b39      	ldr	r3, [pc, #228]	; (8007450 <xQueueGenericSend+0x1f8>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007378:	f001 fb64 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 800737c:	2301      	movs	r3, #1
 800737e:	e063      	b.n	8007448 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007386:	f001 fb5d 	bl	8008a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800738a:	2300      	movs	r3, #0
 800738c:	e05c      	b.n	8007448 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ff8f 	bl	80082bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073a2:	f001 fb4f 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073a6:	f000 fd3f 	bl	8007e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073aa:	f001 fb1b 	bl	80089e4 <vPortEnterCritical>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d103      	bne.n	80073c4 <xQueueGenericSend+0x16c>
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ca:	b25b      	sxtb	r3, r3
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x182>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073da:	f001 fb33 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073de:	1d3a      	adds	r2, r7, #4
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 ff7e 	bl	80082e8 <xTaskCheckForTimeOut>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d124      	bne.n	800743c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f4:	f000 fab8 	bl	8007968 <prvIsQueueFull>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d018      	beq.n	8007430 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	3310      	adds	r3, #16
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fed2 	bl	80081b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800740c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740e:	f000 fa59 	bl	80078c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f000 fd17 	bl	8007e44 <xTaskResumeAll>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f af7c 	bne.w	8007316 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800741e:	4b0c      	ldr	r3, [pc, #48]	; (8007450 <xQueueGenericSend+0x1f8>)
 8007420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	e772      	b.n	8007316 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007432:	f000 fa47 	bl	80078c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007436:	f000 fd05 	bl	8007e44 <xTaskResumeAll>
 800743a:	e76c      	b.n	8007316 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800743c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800743e:	f000 fa41 	bl	80078c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007442:	f000 fcff 	bl	8007e44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007448:	4618      	mov	r0, r3
 800744a:	3738      	adds	r7, #56	; 0x38
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b090      	sub	sp, #64	; 0x40
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <xQueueGenericSendFromISR+0x3c>
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <xQueueGenericSendFromISR+0x40>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <xQueueGenericSendFromISR+0x42>
 8007494:	2300      	movs	r3, #0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d103      	bne.n	80074be <xQueueGenericSendFromISR+0x6a>
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <xQueueGenericSendFromISR+0x6e>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <xQueueGenericSendFromISR+0x70>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	623b      	str	r3, [r7, #32]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074de:	f001 fb63 	bl	8008ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074e2:	f3ef 8211 	mrs	r2, BASEPRI
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61fa      	str	r2, [r7, #28]
 80074f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007506:	429a      	cmp	r2, r3
 8007508:	d302      	bcc.n	8007510 <xQueueGenericSendFromISR+0xbc>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d12f      	bne.n	8007570 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007526:	f000 f93d 	bl	80077a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800752a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d112      	bne.n	800755a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d016      	beq.n	800756a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	3324      	adds	r3, #36	; 0x24
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fe59 	bl	80081f8 <xTaskRemoveFromEventList>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	e007      	b.n	800756a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800755a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800755e:	3301      	adds	r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	b25a      	sxtb	r2, r3
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800756a:	2301      	movs	r3, #1
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800756e:	e001      	b.n	8007574 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007570:	2300      	movs	r3, #0
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800757e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007582:	4618      	mov	r0, r3
 8007584:	3740      	adds	r7, #64	; 0x40
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b08e      	sub	sp, #56	; 0x38
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	623b      	str	r3, [r7, #32]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	61fb      	str	r3, [r7, #28]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <xQueueGiveFromISR+0x58>
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <xQueueGiveFromISR+0x5c>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <xQueueGiveFromISR+0x5e>
 80075e6:	2300      	movs	r3, #0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <xQueueGiveFromISR+0x78>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	61bb      	str	r3, [r7, #24]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007602:	f001 fad1 	bl	8008ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8007606:	f3ef 8211 	mrs	r2, BASEPRI
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	617a      	str	r2, [r7, #20]
 800761c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800761e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007620:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762e:	429a      	cmp	r2, r3
 8007630:	d22b      	bcs.n	800768a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d112      	bne.n	8007674 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	3324      	adds	r3, #36	; 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fdcc 	bl	80081f8 <xTaskRemoveFromEventList>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00e      	beq.n	8007684 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2201      	movs	r2, #1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e007      	b.n	8007684 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007678:	3301      	adds	r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	b25a      	sxtb	r2, r3
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007684:	2301      	movs	r3, #1
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
 8007688:	e001      	b.n	800768e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800768a:	2300      	movs	r3, #0
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f383 8811 	msr	BASEPRI, r3
}
 8007698:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800769c:	4618      	mov	r0, r3
 800769e:	3738      	adds	r7, #56	; 0x38
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08e      	sub	sp, #56	; 0x38
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	623b      	str	r3, [r7, #32]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <xQueueReceiveFromISR+0x3a>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xQueueReceiveFromISR+0x3e>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <xQueueReceiveFromISR+0x40>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	61fb      	str	r3, [r7, #28]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076fe:	f001 fa53 	bl	8008ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8007702:	f3ef 8211 	mrs	r2, BASEPRI
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	61ba      	str	r2, [r7, #24]
 8007718:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800771a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02f      	beq.n	800778a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007738:	f000 f89e 	bl	8007878 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	1e5a      	subs	r2, r3, #1
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d112      	bne.n	8007774 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	3310      	adds	r3, #16
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fd4c 	bl	80081f8 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e007      	b.n	8007784 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007778:	3301      	adds	r3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	b25a      	sxtb	r2, r3
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
 8007788:	e001      	b.n	800778e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800778a:	2300      	movs	r3, #0
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f383 8811 	msr	BASEPRI, r3
}
 8007798:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800779c:	4618      	mov	r0, r3
 800779e:	3738      	adds	r7, #56	; 0x38
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d14d      	bne.n	8007866 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fef0 	bl	80085b4 <xTaskPriorityDisinherit>
 80077d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	e043      	b.n	8007866 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d119      	bne.n	8007818 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6858      	ldr	r0, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	461a      	mov	r2, r3
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	f001 fd27 	bl	8009242 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	d32b      	bcc.n	8007866 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e026      	b.n	8007866 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68d8      	ldr	r0, [r3, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	461a      	mov	r2, r3
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	f001 fd0d 	bl	8009242 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	425b      	negs	r3, r3
 8007832:	441a      	add	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d207      	bcs.n	8007854 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	425b      	negs	r3, r3
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d105      	bne.n	8007866 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	3b01      	subs	r3, #1
 8007864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800786e:	697b      	ldr	r3, [r7, #20]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	441a      	add	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d303      	bcc.n	80078ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68d9      	ldr	r1, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	461a      	mov	r2, r3
 80078b6:	6838      	ldr	r0, [r7, #0]
 80078b8:	f001 fcc3 	bl	8009242 <memcpy>
	}
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078cc:	f001 f88a 	bl	80089e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d8:	e011      	b.n	80078fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d012      	beq.n	8007908 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fc86 	bl	80081f8 <xTaskRemoveFromEventList>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078f2:	f000 fd5b 	bl	80083ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dce9      	bgt.n	80078da <prvUnlockQueue+0x16>
 8007906:	e000      	b.n	800790a <prvUnlockQueue+0x46>
					break;
 8007908:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007912:	f001 f897 	bl	8008a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007916:	f001 f865 	bl	80089e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007920:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007922:	e011      	b.n	8007948 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d012      	beq.n	8007952 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3310      	adds	r3, #16
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fc61 	bl	80081f8 <xTaskRemoveFromEventList>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800793c:	f000 fd36 	bl	80083ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	3b01      	subs	r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dce9      	bgt.n	8007924 <prvUnlockQueue+0x60>
 8007950:	e000      	b.n	8007954 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007952:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	22ff      	movs	r2, #255	; 0xff
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800795c:	f001 f872 	bl	8008a44 <vPortExitCritical>
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007970:	f001 f838 	bl	80089e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	429a      	cmp	r2, r3
 800797e:	d102      	bne.n	8007986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007980:	2301      	movs	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e001      	b.n	800798a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800798a:	f001 f85b 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af04      	add	r7, sp, #16
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xTaskCreateStatic+0x46>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61fb      	str	r3, [r7, #28]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079de:	23b4      	movs	r3, #180	; 0xb4
 80079e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2bb4      	cmp	r3, #180	; 0xb4
 80079e6:	d00a      	beq.n	80079fe <xTaskCreateStatic+0x66>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	61bb      	str	r3, [r7, #24]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01e      	beq.n	8007a44 <xTaskCreateStatic+0xac>
 8007a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	2202      	movs	r2, #2
 8007a1a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	f107 0314 	add.w	r3, r7, #20
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f850 	bl	8007adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a3e:	f000 f8eb 	bl	8007c18 <prvAddNewTaskToReadyList>
 8007a42:	e001      	b.n	8007a48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a48:	697b      	ldr	r3, [r7, #20]
	}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3728      	adds	r7, #40	; 0x28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b08c      	sub	sp, #48	; 0x30
 8007a56:	af04      	add	r7, sp, #16
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f8de 	bl	8008c28 <pvPortMalloc>
 8007a6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00e      	beq.n	8007a92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a74:	20b4      	movs	r0, #180	; 0xb4
 8007a76:	f001 f8d7 	bl	8008c28 <pvPortMalloc>
 8007a7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
 8007a88:	e005      	b.n	8007a96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a8a:	6978      	ldr	r0, [r7, #20]
 8007a8c:	f001 f998 	bl	8008dc0 <vPortFree>
 8007a90:	e001      	b.n	8007a96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d017      	beq.n	8007acc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f80e 	bl	8007adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac0:	69f8      	ldr	r0, [r7, #28]
 8007ac2:	f000 f8a9 	bl	8007c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	e002      	b.n	8007ad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007af4:	3b01      	subs	r3, #1
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f023 0307 	bic.w	r3, r3, #7
 8007b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	617b      	str	r3, [r7, #20]
}
 8007b20:	bf00      	nop
 8007b22:	e7fe      	b.n	8007b22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01f      	beq.n	8007b6a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
 8007b2e:	e012      	b.n	8007b56 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	7819      	ldrb	r1, [r3, #0]
 8007b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3334      	adds	r3, #52	; 0x34
 8007b40:	460a      	mov	r2, r1
 8007b42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d006      	beq.n	8007b5e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	3301      	adds	r3, #1
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2b0f      	cmp	r3, #15
 8007b5a:	d9e9      	bls.n	8007b30 <prvInitialiseNewTask+0x54>
 8007b5c:	e000      	b.n	8007b60 <prvInitialiseNewTask+0x84>
			{
				break;
 8007b5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b68:	e003      	b.n	8007b72 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2b06      	cmp	r3, #6
 8007b76:	d901      	bls.n	8007b7c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b78:	2306      	movs	r3, #6
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	3304      	adds	r3, #4
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff f991 	bl	8006eba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff f98c 	bl	8006eba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	f1c3 0207 	rsb	r2, r3, #7
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	334c      	adds	r3, #76	; 0x4c
 8007bcc:	2260      	movs	r2, #96	; 0x60
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fb44 	bl	800925e <memset>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	4a0c      	ldr	r2, [pc, #48]	; (8007c0c <prvInitialiseNewTask+0x130>)
 8007bda:	651a      	str	r2, [r3, #80]	; 0x50
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <prvInitialiseNewTask+0x134>)
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	4a0b      	ldr	r2, [pc, #44]	; (8007c14 <prvInitialiseNewTask+0x138>)
 8007be6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	69b8      	ldr	r0, [r7, #24]
 8007bee:	f000 fdcd 	bl	800878c <pxPortInitialiseStack>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c04:	bf00      	nop
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	0800a584 	.word	0x0800a584
 8007c10:	0800a5a4 	.word	0x0800a5a4
 8007c14:	0800a564 	.word	0x0800a564

08007c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c20:	f000 fee0 	bl	80089e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c24:	4b2a      	ldr	r3, [pc, #168]	; (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a29      	ldr	r2, [pc, #164]	; (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c2e:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c36:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <prvAddNewTaskToReadyList+0xb8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c44:	f000 fbd6 	bl	80083f4 <prvInitialiseTaskLists>
 8007c48:	e00d      	b.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c52:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d802      	bhi.n	8007c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c66:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a1b      	ldr	r2, [pc, #108]	; (8007cdc <prvAddNewTaskToReadyList+0xc4>)
 8007c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <prvAddNewTaskToReadyList+0xc8>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a15      	ldr	r2, [pc, #84]	; (8007ce4 <prvAddNewTaskToReadyList+0xcc>)
 8007c90:	441a      	add	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7ff f91b 	bl	8006ed4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c9e:	f000 fed1 	bl	8008a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <prvAddNewTaskToReadyList+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <prvAddNewTaskToReadyList+0xbc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d207      	bcs.n	8007cc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <prvAddNewTaskToReadyList+0xd0>)
 8007cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	2000083c 	.word	0x2000083c
 8007cd4:	2000073c 	.word	0x2000073c
 8007cd8:	20000848 	.word	0x20000848
 8007cdc:	20000858 	.word	0x20000858
 8007ce0:	20000844 	.word	0x20000844
 8007ce4:	20000740 	.word	0x20000740
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d017      	beq.n	8007d2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <vTaskDelay+0x60>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <vTaskDelay+0x30>
	__asm volatile
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	60bb      	str	r3, [r7, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	e7fe      	b.n	8007d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d1c:	f000 f884 	bl	8007e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d20:	2100      	movs	r1, #0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fccc 	bl	80086c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d28:	f000 f88c 	bl	8007e44 <xTaskResumeAll>
 8007d2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d107      	bne.n	8007d44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <vTaskDelay+0x64>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000864 	.word	0x20000864
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08a      	sub	sp, #40	; 0x28
 8007d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d62:	463a      	mov	r2, r7
 8007d64:	1d39      	adds	r1, r7, #4
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f8 fc2c 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	9202      	str	r2, [sp, #8]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	460a      	mov	r2, r1
 8007d82:	4921      	ldr	r1, [pc, #132]	; (8007e08 <vTaskStartScheduler+0xb4>)
 8007d84:	4821      	ldr	r0, [pc, #132]	; (8007e0c <vTaskStartScheduler+0xb8>)
 8007d86:	f7ff fe07 	bl	8007998 <xTaskCreateStatic>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <vTaskStartScheduler+0xbc>)
 8007d8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d90:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <vTaskStartScheduler+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e001      	b.n	8007da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d11b      	bne.n	8007de0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	613b      	str	r3, [r7, #16]
}
 8007dba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007dbc:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <vTaskStartScheduler+0xc0>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	334c      	adds	r3, #76	; 0x4c
 8007dc2:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <vTaskStartScheduler+0xc4>)
 8007dc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <vTaskStartScheduler+0xc8>)
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <vTaskStartScheduler+0xcc>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <vTaskStartScheduler+0xd0>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dda:	f000 fd61 	bl	80088a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dde:	e00e      	b.n	8007dfe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d10a      	bne.n	8007dfe <vTaskStartScheduler+0xaa>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	60fb      	str	r3, [r7, #12]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <vTaskStartScheduler+0xa8>
}
 8007dfe:	bf00      	nop
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	0800a544 	.word	0x0800a544
 8007e0c:	080083c5 	.word	0x080083c5
 8007e10:	20000860 	.word	0x20000860
 8007e14:	2000073c 	.word	0x2000073c
 8007e18:	2000002c 	.word	0x2000002c
 8007e1c:	2000085c 	.word	0x2000085c
 8007e20:	20000848 	.word	0x20000848
 8007e24:	20000840 	.word	0x20000840

08007e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <vTaskSuspendAll+0x18>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	4a03      	ldr	r2, [pc, #12]	; (8007e40 <vTaskSuspendAll+0x18>)
 8007e34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e36:	bf00      	nop
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000864 	.word	0x20000864

08007e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e52:	4b41      	ldr	r3, [pc, #260]	; (8007f58 <xTaskResumeAll+0x114>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10a      	bne.n	8007e70 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	603b      	str	r3, [r7, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e70:	f000 fdb8 	bl	80089e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e74:	4b38      	ldr	r3, [pc, #224]	; (8007f58 <xTaskResumeAll+0x114>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	4a37      	ldr	r2, [pc, #220]	; (8007f58 <xTaskResumeAll+0x114>)
 8007e7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7e:	4b36      	ldr	r3, [pc, #216]	; (8007f58 <xTaskResumeAll+0x114>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d161      	bne.n	8007f4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e86:	4b35      	ldr	r3, [pc, #212]	; (8007f5c <xTaskResumeAll+0x118>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d05d      	beq.n	8007f4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e8e:	e02e      	b.n	8007eee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e90:	4b33      	ldr	r3, [pc, #204]	; (8007f60 <xTaskResumeAll+0x11c>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3318      	adds	r3, #24
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff f876 	bl	8006f8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f871 	bl	8006f8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <xTaskResumeAll+0x120>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	4a2a      	ldr	r2, [pc, #168]	; (8007f64 <xTaskResumeAll+0x120>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4a27      	ldr	r2, [pc, #156]	; (8007f68 <xTaskResumeAll+0x124>)
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fe fffd 	bl	8006ed4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4b23      	ldr	r3, [pc, #140]	; (8007f6c <xTaskResumeAll+0x128>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d302      	bcc.n	8007eee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ee8:	4b21      	ldr	r3, [pc, #132]	; (8007f70 <xTaskResumeAll+0x12c>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eee:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <xTaskResumeAll+0x11c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1cc      	bne.n	8007e90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007efc:	f000 fb1c 	bl	8008538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f00:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <xTaskResumeAll+0x130>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d010      	beq.n	8007f2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f0c:	f000 f836 	bl	8007f7c <xTaskIncrementTick>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007f16:	4b16      	ldr	r3, [pc, #88]	; (8007f70 <xTaskResumeAll+0x12c>)
 8007f18:	2201      	movs	r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f1      	bne.n	8007f0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007f28:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <xTaskResumeAll+0x130>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <xTaskResumeAll+0x12c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f36:	2301      	movs	r3, #1
 8007f38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f3a:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <xTaskResumeAll+0x134>)
 8007f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f4a:	f000 fd7b 	bl	8008a44 <vPortExitCritical>

	return xAlreadyYielded;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000864 	.word	0x20000864
 8007f5c:	2000083c 	.word	0x2000083c
 8007f60:	200007fc 	.word	0x200007fc
 8007f64:	20000844 	.word	0x20000844
 8007f68:	20000740 	.word	0x20000740
 8007f6c:	2000073c 	.word	0x2000073c
 8007f70:	20000850 	.word	0x20000850
 8007f74:	2000084c 	.word	0x2000084c
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f86:	4b4e      	ldr	r3, [pc, #312]	; (80080c0 <xTaskIncrementTick+0x144>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 808e 	bne.w	80080ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f90:	4b4c      	ldr	r3, [pc, #304]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f98:	4a4a      	ldr	r2, [pc, #296]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d120      	bne.n	8007fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa4:	4b48      	ldr	r3, [pc, #288]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	603b      	str	r3, [r7, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xTaskIncrementTick+0x46>
 8007fc4:	4b40      	ldr	r3, [pc, #256]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b40      	ldr	r3, [pc, #256]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3e      	ldr	r2, [pc, #248]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4a3e      	ldr	r2, [pc, #248]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a3c      	ldr	r2, [pc, #240]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f000 faa9 	bl	8008538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe6:	4b3b      	ldr	r3, [pc, #236]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d348      	bcc.n	8008082 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff0:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	4b36      	ldr	r3, [pc, #216]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	601a      	str	r2, [r3, #0]
					break;
 8008002:	e03e      	b.n	8008082 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b30      	ldr	r3, [pc, #192]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d203      	bcs.n	8008024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800801c:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <xTaskIncrementTick+0x158>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008022:	e02e      	b.n	8008082 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe ffb0 	bl	8006f8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe ffa7 	bl	8006f8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	2201      	movs	r2, #1
 8008046:	409a      	lsls	r2, r3
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <xTaskIncrementTick+0x15c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4313      	orrs	r3, r2
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <xTaskIncrementTick+0x160>)
 8008060:	441a      	add	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f7fe ff33 	bl	8006ed4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008072:	4b1b      	ldr	r3, [pc, #108]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	429a      	cmp	r2, r3
 800807a:	d3b9      	bcc.n	8007ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008080:	e7b6      	b.n	8007ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008082:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4914      	ldr	r1, [pc, #80]	; (80080dc <xTaskIncrementTick+0x160>)
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d901      	bls.n	800809e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800809a:	2301      	movs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <xTaskIncrementTick+0x168>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e004      	b.n	80080b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b6:	697b      	ldr	r3, [r7, #20]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20000864 	.word	0x20000864
 80080c4:	20000840 	.word	0x20000840
 80080c8:	200007f4 	.word	0x200007f4
 80080cc:	200007f8 	.word	0x200007f8
 80080d0:	20000854 	.word	0x20000854
 80080d4:	2000085c 	.word	0x2000085c
 80080d8:	20000844 	.word	0x20000844
 80080dc:	20000740 	.word	0x20000740
 80080e0:	2000073c 	.word	0x2000073c
 80080e4:	20000850 	.word	0x20000850
 80080e8:	2000084c 	.word	0x2000084c

080080ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <vTaskSwitchContext+0xac>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fa:	4b28      	ldr	r3, [pc, #160]	; (800819c <vTaskSwitchContext+0xb0>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008100:	e044      	b.n	800818c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008102:	4b26      	ldr	r3, [pc, #152]	; (800819c <vTaskSwitchContext+0xb0>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <vTaskSwitchContext+0xb4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	fab3 f383 	clz	r3, r3
 8008114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	f1c3 031f 	rsb	r3, r3, #31
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	4921      	ldr	r1, [pc, #132]	; (80081a4 <vTaskSwitchContext+0xb8>)
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	607b      	str	r3, [r7, #4]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <vTaskSwitchContext+0x5a>
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a14      	ldr	r2, [pc, #80]	; (80081a4 <vTaskSwitchContext+0xb8>)
 8008154:	4413      	add	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	3308      	adds	r3, #8
 800816a:	429a      	cmp	r2, r3
 800816c:	d104      	bne.n	8008178 <vTaskSwitchContext+0x8c>
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4a0a      	ldr	r2, [pc, #40]	; (80081a8 <vTaskSwitchContext+0xbc>)
 8008180:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <vTaskSwitchContext+0xbc>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	334c      	adds	r3, #76	; 0x4c
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <vTaskSwitchContext+0xc0>)
 800818a:	6013      	str	r3, [r2, #0]
}
 800818c:	bf00      	nop
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	20000864 	.word	0x20000864
 800819c:	20000850 	.word	0x20000850
 80081a0:	20000844 	.word	0x20000844
 80081a4:	20000740 	.word	0x20000740
 80081a8:	2000073c 	.word	0x2000073c
 80081ac:	2000002c 	.word	0x2000002c

080081b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60fb      	str	r3, [r7, #12]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <vTaskPlaceOnEventList+0x44>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3318      	adds	r3, #24
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7fe fe9c 	bl	8006f1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081e4:	2101      	movs	r1, #1
 80081e6:	6838      	ldr	r0, [r7, #0]
 80081e8:	f000 fa6a 	bl	80086c0 <prvAddCurrentTaskToDelayedList>
}
 80081ec:	bf00      	nop
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	2000073c 	.word	0x2000073c

080081f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3318      	adds	r3, #24
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe feb0 	bl	8006f8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822e:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <xTaskRemoveFromEventList+0xac>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d11c      	bne.n	8008270 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fea7 	bl	8006f8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	2201      	movs	r2, #1
 8008246:	409a      	lsls	r2, r3
 8008248:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <xTaskRemoveFromEventList+0xb0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4313      	orrs	r3, r2
 800824e:	4a16      	ldr	r2, [pc, #88]	; (80082a8 <xTaskRemoveFromEventList+0xb0>)
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4a13      	ldr	r2, [pc, #76]	; (80082ac <xTaskRemoveFromEventList+0xb4>)
 8008260:	441a      	add	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7fe fe33 	bl	8006ed4 <vListInsertEnd>
 800826e:	e005      	b.n	800827c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3318      	adds	r3, #24
 8008274:	4619      	mov	r1, r3
 8008276:	480e      	ldr	r0, [pc, #56]	; (80082b0 <xTaskRemoveFromEventList+0xb8>)
 8008278:	f7fe fe2c 	bl	8006ed4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <xTaskRemoveFromEventList+0xbc>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	429a      	cmp	r2, r3
 8008288:	d905      	bls.n	8008296 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800828e:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <xTaskRemoveFromEventList+0xc0>)
 8008290:	2201      	movs	r2, #1
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e001      	b.n	800829a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800829a:	697b      	ldr	r3, [r7, #20]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000864 	.word	0x20000864
 80082a8:	20000844 	.word	0x20000844
 80082ac:	20000740 	.word	0x20000740
 80082b0:	200007fc 	.word	0x200007fc
 80082b4:	2000073c 	.word	0x2000073c
 80082b8:	20000850 	.word	0x20000850

080082bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082c4:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <vTaskInternalSetTimeOutState+0x24>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <vTaskInternalSetTimeOutState+0x28>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	605a      	str	r2, [r3, #4]
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	20000854 	.word	0x20000854
 80082e4:	20000840 	.word	0x20000840

080082e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	613b      	str	r3, [r7, #16]
}
 800830a:	bf00      	nop
 800830c:	e7fe      	b.n	800830c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	60fb      	str	r3, [r7, #12]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800832a:	f000 fb5b 	bl	80089e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800832e:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <xTaskCheckForTimeOut+0xbc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d102      	bne.n	800834e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008348:	2300      	movs	r3, #0
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	e023      	b.n	8008396 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <xTaskCheckForTimeOut+0xc0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d007      	beq.n	800836a <xTaskCheckForTimeOut+0x82>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	429a      	cmp	r2, r3
 8008362:	d302      	bcc.n	800836a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e015      	b.n	8008396 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	429a      	cmp	r2, r3
 8008372:	d20b      	bcs.n	800838c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ff9b 	bl	80082bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
 800838a:	e004      	b.n	8008396 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008392:	2301      	movs	r3, #1
 8008394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008396:	f000 fb55 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000840 	.word	0x20000840
 80083a8:	20000854 	.word	0x20000854

080083ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80083b0:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <vTaskMissedYield+0x14>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	601a      	str	r2, [r3, #0]
}
 80083b6:	bf00      	nop
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000850 	.word	0x20000850

080083c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083cc:	f000 f852 	bl	8008474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <prvIdleTask+0x28>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d9f9      	bls.n	80083cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80083d8:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <prvIdleTask+0x2c>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083e8:	e7f0      	b.n	80083cc <prvIdleTask+0x8>
 80083ea:	bf00      	nop
 80083ec:	20000740 	.word	0x20000740
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083fa:	2300      	movs	r3, #0
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	e00c      	b.n	800841a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <prvInitialiseTaskLists+0x60>)
 800840c:	4413      	add	r3, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fd33 	bl	8006e7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3301      	adds	r3, #1
 8008418:	607b      	str	r3, [r7, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b06      	cmp	r3, #6
 800841e:	d9ef      	bls.n	8008400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008420:	480d      	ldr	r0, [pc, #52]	; (8008458 <prvInitialiseTaskLists+0x64>)
 8008422:	f7fe fd2a 	bl	8006e7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008426:	480d      	ldr	r0, [pc, #52]	; (800845c <prvInitialiseTaskLists+0x68>)
 8008428:	f7fe fd27 	bl	8006e7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800842c:	480c      	ldr	r0, [pc, #48]	; (8008460 <prvInitialiseTaskLists+0x6c>)
 800842e:	f7fe fd24 	bl	8006e7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008432:	480c      	ldr	r0, [pc, #48]	; (8008464 <prvInitialiseTaskLists+0x70>)
 8008434:	f7fe fd21 	bl	8006e7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008438:	480b      	ldr	r0, [pc, #44]	; (8008468 <prvInitialiseTaskLists+0x74>)
 800843a:	f7fe fd1e 	bl	8006e7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <prvInitialiseTaskLists+0x78>)
 8008440:	4a05      	ldr	r2, [pc, #20]	; (8008458 <prvInitialiseTaskLists+0x64>)
 8008442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <prvInitialiseTaskLists+0x7c>)
 8008446:	4a05      	ldr	r2, [pc, #20]	; (800845c <prvInitialiseTaskLists+0x68>)
 8008448:	601a      	str	r2, [r3, #0]
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000740 	.word	0x20000740
 8008458:	200007cc 	.word	0x200007cc
 800845c:	200007e0 	.word	0x200007e0
 8008460:	200007fc 	.word	0x200007fc
 8008464:	20000810 	.word	0x20000810
 8008468:	20000828 	.word	0x20000828
 800846c:	200007f4 	.word	0x200007f4
 8008470:	200007f8 	.word	0x200007f8

08008474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800847a:	e019      	b.n	80084b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800847c:	f000 fab2 	bl	80089e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008480:	4b10      	ldr	r3, [pc, #64]	; (80084c4 <prvCheckTasksWaitingTermination+0x50>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fd7e 	bl	8006f8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008492:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <prvCheckTasksWaitingTermination+0x54>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3b01      	subs	r3, #1
 8008498:	4a0b      	ldr	r2, [pc, #44]	; (80084c8 <prvCheckTasksWaitingTermination+0x54>)
 800849a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <prvCheckTasksWaitingTermination+0x58>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <prvCheckTasksWaitingTermination+0x58>)
 80084a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084a6:	f000 facd 	bl	8008a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f810 	bl	80084d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <prvCheckTasksWaitingTermination+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e1      	bne.n	800847c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000810 	.word	0x20000810
 80084c8:	2000083c 	.word	0x2000083c
 80084cc:	20000824 	.word	0x20000824

080084d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	334c      	adds	r3, #76	; 0x4c
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 ffdf 	bl	80094a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d108      	bne.n	80084fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fc65 	bl	8008dc0 <vPortFree>
				vPortFree( pxTCB );
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fc62 	bl	8008dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084fc:	e018      	b.n	8008530 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008504:	2b01      	cmp	r3, #1
 8008506:	d103      	bne.n	8008510 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fc59 	bl	8008dc0 <vPortFree>
	}
 800850e:	e00f      	b.n	8008530 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008516:	2b02      	cmp	r3, #2
 8008518:	d00a      	beq.n	8008530 <prvDeleteTCB+0x60>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	60fb      	str	r3, [r7, #12]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <prvDeleteTCB+0x5e>
	}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800853e:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <prvResetNextTaskUnblockTime+0x38>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008548:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <prvResetNextTaskUnblockTime+0x3c>)
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008550:	e008      	b.n	8008564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <prvResetNextTaskUnblockTime+0x38>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4a04      	ldr	r2, [pc, #16]	; (8008574 <prvResetNextTaskUnblockTime+0x3c>)
 8008562:	6013      	str	r3, [r2, #0]
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	200007f4 	.word	0x200007f4
 8008574:	2000085c 	.word	0x2000085c

08008578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <xTaskGetSchedulerState+0x34>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008586:	2301      	movs	r3, #1
 8008588:	607b      	str	r3, [r7, #4]
 800858a:	e008      	b.n	800859e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800858c:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <xTaskGetSchedulerState+0x38>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008594:	2302      	movs	r3, #2
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	e001      	b.n	800859e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800859e:	687b      	ldr	r3, [r7, #4]
	}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20000848 	.word	0x20000848
 80085b0:	20000864 	.word	0x20000864

080085b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d06e      	beq.n	80086a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085ca:	4b3a      	ldr	r3, [pc, #232]	; (80086b4 <xTaskPriorityDisinherit+0x100>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d00a      	beq.n	80085ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60bb      	str	r3, [r7, #8]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860c:	1e5a      	subs	r2, r3, #1
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861a:	429a      	cmp	r2, r3
 800861c:	d044      	beq.n	80086a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008622:	2b00      	cmp	r3, #0
 8008624:	d140      	bne.n	80086a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3304      	adds	r3, #4
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fcaf 	bl	8006f8e <uxListRemove>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d115      	bne.n	8008662 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	491f      	ldr	r1, [pc, #124]	; (80086b8 <xTaskPriorityDisinherit+0x104>)
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xTaskPriorityDisinherit+0xae>
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	2201      	movs	r2, #1
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	43da      	mvns	r2, r3
 8008658:	4b18      	ldr	r3, [pc, #96]	; (80086bc <xTaskPriorityDisinherit+0x108>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4013      	ands	r3, r2
 800865e:	4a17      	ldr	r2, [pc, #92]	; (80086bc <xTaskPriorityDisinherit+0x108>)
 8008660:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	f1c3 0207 	rsb	r2, r3, #7
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	2201      	movs	r2, #1
 800867c:	409a      	lsls	r2, r3
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <xTaskPriorityDisinherit+0x108>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4313      	orrs	r3, r2
 8008684:	4a0d      	ldr	r2, [pc, #52]	; (80086bc <xTaskPriorityDisinherit+0x108>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <xTaskPriorityDisinherit+0x104>)
 8008696:	441a      	add	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7fe fc18 	bl	8006ed4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a8:	697b      	ldr	r3, [r7, #20]
	}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000073c 	.word	0x2000073c
 80086b8:	20000740 	.word	0x20000740
 80086bc:	20000844 	.word	0x20000844

080086c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ca:	4b29      	ldr	r3, [pc, #164]	; (8008770 <prvAddCurrentTaskToDelayedList+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086d0:	4b28      	ldr	r3, [pc, #160]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fc59 	bl	8006f8e <uxListRemove>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10b      	bne.n	80086fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	2201      	movs	r2, #1
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43da      	mvns	r2, r3
 80086f0:	4b21      	ldr	r3, [pc, #132]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4013      	ands	r3, r2
 80086f6:	4a20      	ldr	r2, [pc, #128]	; (8008778 <prvAddCurrentTaskToDelayedList+0xb8>)
 80086f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d10a      	bne.n	8008718 <prvAddCurrentTaskToDelayedList+0x58>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008708:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3304      	adds	r3, #4
 800870e:	4619      	mov	r1, r3
 8008710:	481a      	ldr	r0, [pc, #104]	; (800877c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008712:	f7fe fbdf 	bl	8006ed4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008716:	e026      	b.n	8008766 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	429a      	cmp	r2, r3
 800872e:	d209      	bcs.n	8008744 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008730:	4b13      	ldr	r3, [pc, #76]	; (8008780 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3304      	adds	r3, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f7fe fbed 	bl	8006f1c <vListInsert>
}
 8008742:	e010      	b.n	8008766 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008744:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <prvAddCurrentTaskToDelayedList+0xb4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f7fe fbe3 	bl	8006f1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	d202      	bcs.n	8008766 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008760:	4a09      	ldr	r2, [pc, #36]	; (8008788 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6013      	str	r3, [r2, #0]
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000840 	.word	0x20000840
 8008774:	2000073c 	.word	0x2000073c
 8008778:	20000844 	.word	0x20000844
 800877c:	20000828 	.word	0x20000828
 8008780:	200007f8 	.word	0x200007f8
 8008784:	200007f4 	.word	0x200007f4
 8008788:	2000085c 	.word	0x2000085c

0800878c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3b04      	subs	r3, #4
 800879c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b04      	subs	r3, #4
 80087aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0201 	bic.w	r2, r3, #1
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3b04      	subs	r3, #4
 80087ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087bc:	4a0c      	ldr	r2, [pc, #48]	; (80087f0 <pxPortInitialiseStack+0x64>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b14      	subs	r3, #20
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f06f 0202 	mvn.w	r2, #2
 80087da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b20      	subs	r3, #32
 80087e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087e2:	68fb      	ldr	r3, [r7, #12]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	080087f5 	.word	0x080087f5

080087f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <prvTaskExitError+0x54>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d00a      	beq.n	800881e <prvTaskExitError+0x2a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	60fb      	str	r3, [r7, #12]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <prvTaskExitError+0x28>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
}
 8008830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008832:	bf00      	nop
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0fc      	beq.n	8008834 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000028 	.word	0x20000028
 800884c:	00000000 	.word	0x00000000

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800889a:	bf00      	nop
 800889c:	e000ed08 	.word	0xe000ed08

080088a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088a6:	4b46      	ldr	r3, [pc, #280]	; (80089c0 <xPortStartScheduler+0x120>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a46      	ldr	r2, [pc, #280]	; (80089c4 <xPortStartScheduler+0x124>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10a      	bne.n	80088c6 <xPortStartScheduler+0x26>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	613b      	str	r3, [r7, #16]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088c6:	4b3e      	ldr	r3, [pc, #248]	; (80089c0 <xPortStartScheduler+0x120>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <xPortStartScheduler+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10a      	bne.n	80088e6 <xPortStartScheduler+0x46>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xPortStartScheduler+0x12c>)
 80088e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	22ff      	movs	r2, #255	; 0xff
 80088f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <xPortStartScheduler+0x130>)
 800890c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <xPortStartScheduler+0x134>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008914:	e009      	b.n	800892a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <xPortStartScheduler+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <xPortStartScheduler+0x134>)
 800891e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008932:	2b80      	cmp	r3, #128	; 0x80
 8008934:	d0ef      	beq.n	8008916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008936:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <xPortStartScheduler+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1c3 0307 	rsb	r3, r3, #7
 800893e:	2b04      	cmp	r3, #4
 8008940:	d00a      	beq.n	8008958 <xPortStartScheduler+0xb8>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60bb      	str	r3, [r7, #8]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <xPortStartScheduler+0x134>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <xPortStartScheduler+0x134>)
 8008960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008962:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <xPortStartScheduler+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <xPortStartScheduler+0x134>)
 800896c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <xPortStartScheduler+0x138>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <xPortStartScheduler+0x138>)
 800897c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <xPortStartScheduler+0x138>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a14      	ldr	r2, [pc, #80]	; (80089d8 <xPortStartScheduler+0x138>)
 8008988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800898c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800898e:	f000 f8dd 	bl	8008b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <xPortStartScheduler+0x13c>)
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008998:	f000 f8fc 	bl	8008b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <xPortStartScheduler+0x140>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0f      	ldr	r2, [pc, #60]	; (80089e0 <xPortStartScheduler+0x140>)
 80089a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089a8:	f7ff ff66 	bl	8008878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ac:	f7ff fb9e 	bl	80080ec <vTaskSwitchContext>
	prvTaskExitError();
 80089b0:	f7ff ff20 	bl	80087f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	e000ed00 	.word	0xe000ed00
 80089c4:	410fc271 	.word	0x410fc271
 80089c8:	410fc270 	.word	0x410fc270
 80089cc:	e000e400 	.word	0xe000e400
 80089d0:	20000868 	.word	0x20000868
 80089d4:	2000086c 	.word	0x2000086c
 80089d8:	e000ed20 	.word	0xe000ed20
 80089dc:	20000028 	.word	0x20000028
 80089e0:	e000ef34 	.word	0xe000ef34

080089e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	607b      	str	r3, [r7, #4]
}
 80089fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d10f      	bne.n	8008a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortEnterCritical+0x5c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	603b      	str	r3, [r7, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vPortEnterCritical+0x4a>
	}
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20000028 	.word	0x20000028
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <vPortExitCritical+0x50>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vPortExitCritical+0x24>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	607b      	str	r3, [r7, #4]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <vPortExitCritical+0x50>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <vPortExitCritical+0x50>)
 8008a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <vPortExitCritical+0x50>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <vPortExitCritical+0x42>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f383 8811 	msr	BASEPRI, r3
}
 8008a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000028 	.word	0x20000028
	...

08008aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7ff fb0c 	bl	80080ec <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b22:	f7ff fa2b 	bl	8007f7c <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <SysTick_Handler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
}
 8008b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <vPortSetupTimerInterrupt+0x38>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <vPortSetupTimerInterrupt+0x3c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <vPortSetupTimerInterrupt+0x40>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	4a09      	ldr	r2, [pc, #36]	; (8008b90 <vPortSetupTimerInterrupt+0x44>)
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e010 	.word	0xe000e010
 8008b84:	e000e018 	.word	0xe000e018
 8008b88:	2000001c 	.word	0x2000001c
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	e000e014 	.word	0xe000e014

08008b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ba4 <vPortEnableVFP+0x10>
 8008b98:	6801      	ldr	r1, [r0, #0]
 8008b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b9e:	6001      	str	r1, [r0, #0]
 8008ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ba2:	bf00      	nop
 8008ba4:	e000ed88 	.word	0xe000ed88

08008ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bae:	f3ef 8305 	mrs	r3, IPSR
 8008bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d914      	bls.n	8008be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <vPortValidateInterruptPriority+0x70>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bc4:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <vPortValidateInterruptPriority+0x74>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7afa      	ldrb	r2, [r7, #11]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d20a      	bcs.n	8008be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	607b      	str	r3, [r7, #4]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008be4:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <vPortValidateInterruptPriority+0x78>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <vPortValidateInterruptPriority+0x7c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d90a      	bls.n	8008c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	603b      	str	r3, [r7, #0]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <vPortValidateInterruptPriority+0x60>
	}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	e000e3f0 	.word	0xe000e3f0
 8008c1c:	20000868 	.word	0x20000868
 8008c20:	e000ed0c 	.word	0xe000ed0c
 8008c24:	2000086c 	.word	0x2000086c

08008c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c34:	f7ff f8f8 	bl	8007e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c38:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <pvPortMalloc+0x180>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c40:	f000 f920 	bl	8008e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c44:	4b59      	ldr	r3, [pc, #356]	; (8008dac <pvPortMalloc+0x184>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8093 	bne.w	8008d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01d      	beq.n	8008c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c58:	2208      	movs	r2, #8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d014      	beq.n	8008c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f023 0307 	bic.w	r3, r3, #7
 8008c70:	3308      	adds	r3, #8
 8008c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <pvPortMalloc+0x6c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	617b      	str	r3, [r7, #20]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d06e      	beq.n	8008d78 <pvPortMalloc+0x150>
 8008c9a:	4b45      	ldr	r3, [pc, #276]	; (8008db0 <pvPortMalloc+0x188>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d869      	bhi.n	8008d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ca4:	4b43      	ldr	r3, [pc, #268]	; (8008db4 <pvPortMalloc+0x18c>)
 8008ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ca8:	4b42      	ldr	r3, [pc, #264]	; (8008db4 <pvPortMalloc+0x18c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cae:	e004      	b.n	8008cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d903      	bls.n	8008ccc <pvPortMalloc+0xa4>
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1f1      	bne.n	8008cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ccc:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <pvPortMalloc+0x180>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d050      	beq.n	8008d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2208      	movs	r2, #8
 8008cdc:	4413      	add	r3, r2
 8008cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	1ad2      	subs	r2, r2, r3
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d91f      	bls.n	8008d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <pvPortMalloc+0xf8>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	613b      	str	r3, [r7, #16]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	1ad2      	subs	r2, r2, r3
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d32:	69b8      	ldr	r0, [r7, #24]
 8008d34:	f000 f908 	bl	8008f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d38:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <pvPortMalloc+0x188>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	4a1b      	ldr	r2, [pc, #108]	; (8008db0 <pvPortMalloc+0x188>)
 8008d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d46:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <pvPortMalloc+0x188>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <pvPortMalloc+0x190>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d203      	bcs.n	8008d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d52:	4b17      	ldr	r3, [pc, #92]	; (8008db0 <pvPortMalloc+0x188>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <pvPortMalloc+0x190>)
 8008d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <pvPortMalloc+0x184>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d6e:	4b13      	ldr	r3, [pc, #76]	; (8008dbc <pvPortMalloc+0x194>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a11      	ldr	r2, [pc, #68]	; (8008dbc <pvPortMalloc+0x194>)
 8008d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d78:	f7ff f864 	bl	8007e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <pvPortMalloc+0x174>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60fb      	str	r3, [r7, #12]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <pvPortMalloc+0x172>
	return pvReturn;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3728      	adds	r7, #40	; 0x28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20004478 	.word	0x20004478
 8008dac:	2000448c 	.word	0x2000448c
 8008db0:	2000447c 	.word	0x2000447c
 8008db4:	20004470 	.word	0x20004470
 8008db8:	20004480 	.word	0x20004480
 8008dbc:	20004484 	.word	0x20004484

08008dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d04d      	beq.n	8008e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <vPortFree+0xb8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4013      	ands	r3, r2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <vPortFree+0x44>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60fb      	str	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <vPortFree+0x62>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	60bb      	str	r3, [r7, #8]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <vPortFree+0xb8>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01e      	beq.n	8008e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11a      	bne.n	8008e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <vPortFree+0xb8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	43db      	mvns	r3, r3
 8008e42:	401a      	ands	r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e48:	f7fe ffee 	bl	8007e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <vPortFree+0xbc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4413      	add	r3, r2
 8008e56:	4a09      	ldr	r2, [pc, #36]	; (8008e7c <vPortFree+0xbc>)
 8008e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e5a:	6938      	ldr	r0, [r7, #16]
 8008e5c:	f000 f874 	bl	8008f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <vPortFree+0xc0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a06      	ldr	r2, [pc, #24]	; (8008e80 <vPortFree+0xc0>)
 8008e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e6a:	f7fe ffeb 	bl	8007e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e6e:	bf00      	nop
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	2000448c 	.word	0x2000448c
 8008e7c:	2000447c 	.word	0x2000447c
 8008e80:	20004488 	.word	0x20004488

08008e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e90:	4b27      	ldr	r3, [pc, #156]	; (8008f30 <prvHeapInit+0xac>)
 8008e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3307      	adds	r3, #7
 8008ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <prvHeapInit+0xac>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ebc:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <prvHeapInit+0xb0>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <prvHeapInit+0xb0>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0307 	bic.w	r3, r3, #7
 8008ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <prvHeapInit+0xb4>)
 8008ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <prvHeapInit+0xb4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eee:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <prvHeapInit+0xb4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <prvHeapInit+0xb4>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <prvHeapInit+0xb8>)
 8008f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <prvHeapInit+0xbc>)
 8008f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <prvHeapInit+0xc0>)
 8008f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f22:	601a      	str	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20000870 	.word	0x20000870
 8008f34:	20004470 	.word	0x20004470
 8008f38:	20004478 	.word	0x20004478
 8008f3c:	20004480 	.word	0x20004480
 8008f40:	2000447c 	.word	0x2000447c
 8008f44:	2000448c 	.word	0x2000448c

08008f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <prvInsertBlockIntoFreeList+0xac>)
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e002      	b.n	8008f5c <prvInsertBlockIntoFreeList+0x14>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d8f7      	bhi.n	8008f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d108      	bne.n	8008f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	441a      	add	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	441a      	add	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d118      	bne.n	8008fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d00d      	beq.n	8008fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	441a      	add	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	e008      	b.n	8008fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	; (8008ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e003      	b.n	8008fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d002      	beq.n	8008fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20004470 	.word	0x20004470
 8008ff8:	20004478 	.word	0x20004478

08008ffc <__errno>:
 8008ffc:	4b01      	ldr	r3, [pc, #4]	; (8009004 <__errno+0x8>)
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	2000002c 	.word	0x2000002c

08009008 <std>:
 8009008:	2300      	movs	r3, #0
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	e9c0 3300 	strd	r3, r3, [r0]
 8009012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009016:	6083      	str	r3, [r0, #8]
 8009018:	8181      	strh	r1, [r0, #12]
 800901a:	6643      	str	r3, [r0, #100]	; 0x64
 800901c:	81c2      	strh	r2, [r0, #14]
 800901e:	6183      	str	r3, [r0, #24]
 8009020:	4619      	mov	r1, r3
 8009022:	2208      	movs	r2, #8
 8009024:	305c      	adds	r0, #92	; 0x5c
 8009026:	f000 f91a 	bl	800925e <memset>
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x38>)
 800902c:	6263      	str	r3, [r4, #36]	; 0x24
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <std+0x3c>)
 8009030:	62a3      	str	r3, [r4, #40]	; 0x28
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x40>)
 8009034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x44>)
 8009038:	6224      	str	r4, [r4, #32]
 800903a:	6323      	str	r3, [r4, #48]	; 0x30
 800903c:	bd10      	pop	{r4, pc}
 800903e:	bf00      	nop
 8009040:	080095b9 	.word	0x080095b9
 8009044:	080095db 	.word	0x080095db
 8009048:	08009613 	.word	0x08009613
 800904c:	08009637 	.word	0x08009637

08009050 <_cleanup_r>:
 8009050:	4901      	ldr	r1, [pc, #4]	; (8009058 <_cleanup_r+0x8>)
 8009052:	f000 b8af 	b.w	80091b4 <_fwalk_reent>
 8009056:	bf00      	nop
 8009058:	08009911 	.word	0x08009911

0800905c <__sfmoreglue>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	2268      	movs	r2, #104	; 0x68
 8009060:	1e4d      	subs	r5, r1, #1
 8009062:	4355      	muls	r5, r2
 8009064:	460e      	mov	r6, r1
 8009066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800906a:	f000 f921 	bl	80092b0 <_malloc_r>
 800906e:	4604      	mov	r4, r0
 8009070:	b140      	cbz	r0, 8009084 <__sfmoreglue+0x28>
 8009072:	2100      	movs	r1, #0
 8009074:	e9c0 1600 	strd	r1, r6, [r0]
 8009078:	300c      	adds	r0, #12
 800907a:	60a0      	str	r0, [r4, #8]
 800907c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009080:	f000 f8ed 	bl	800925e <memset>
 8009084:	4620      	mov	r0, r4
 8009086:	bd70      	pop	{r4, r5, r6, pc}

08009088 <__sfp_lock_acquire>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sfp_lock_acquire+0x8>)
 800908a:	f000 b8d8 	b.w	800923e <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	20004491 	.word	0x20004491

08009094 <__sfp_lock_release>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_release+0x8>)
 8009096:	f000 b8d3 	b.w	8009240 <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	20004491 	.word	0x20004491

080090a0 <__sinit_lock_acquire>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sinit_lock_acquire+0x8>)
 80090a2:	f000 b8cc 	b.w	800923e <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20004492 	.word	0x20004492

080090ac <__sinit_lock_release>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_release+0x8>)
 80090ae:	f000 b8c7 	b.w	8009240 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20004492 	.word	0x20004492

080090b8 <__sinit>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	f7ff fff0 	bl	80090a0 <__sinit_lock_acquire>
 80090c0:	69a3      	ldr	r3, [r4, #24]
 80090c2:	b11b      	cbz	r3, 80090cc <__sinit+0x14>
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f7ff bff0 	b.w	80090ac <__sinit_lock_release>
 80090cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090d0:	6523      	str	r3, [r4, #80]	; 0x50
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <__sinit+0x68>)
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <__sinit+0x6c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090da:	42a3      	cmp	r3, r4
 80090dc:	bf04      	itt	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	61a3      	streq	r3, [r4, #24]
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 f820 	bl	8009128 <__sfp>
 80090e8:	6060      	str	r0, [r4, #4]
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f81c 	bl	8009128 <__sfp>
 80090f0:	60a0      	str	r0, [r4, #8]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f818 	bl	8009128 <__sfp>
 80090f8:	2200      	movs	r2, #0
 80090fa:	60e0      	str	r0, [r4, #12]
 80090fc:	2104      	movs	r1, #4
 80090fe:	6860      	ldr	r0, [r4, #4]
 8009100:	f7ff ff82 	bl	8009008 <std>
 8009104:	68a0      	ldr	r0, [r4, #8]
 8009106:	2201      	movs	r2, #1
 8009108:	2109      	movs	r1, #9
 800910a:	f7ff ff7d 	bl	8009008 <std>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	2202      	movs	r2, #2
 8009112:	2112      	movs	r1, #18
 8009114:	f7ff ff78 	bl	8009008 <std>
 8009118:	2301      	movs	r3, #1
 800911a:	61a3      	str	r3, [r4, #24]
 800911c:	e7d2      	b.n	80090c4 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	0800a5c4 	.word	0x0800a5c4
 8009124:	08009051 	.word	0x08009051

08009128 <__sfp>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	f7ff ffac 	bl	8009088 <__sfp_lock_acquire>
 8009130:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <__sfp+0x84>)
 8009132:	681e      	ldr	r6, [r3, #0]
 8009134:	69b3      	ldr	r3, [r6, #24]
 8009136:	b913      	cbnz	r3, 800913e <__sfp+0x16>
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ffbd 	bl	80090b8 <__sinit>
 800913e:	3648      	adds	r6, #72	; 0x48
 8009140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009144:	3b01      	subs	r3, #1
 8009146:	d503      	bpl.n	8009150 <__sfp+0x28>
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	b30b      	cbz	r3, 8009190 <__sfp+0x68>
 800914c:	6836      	ldr	r6, [r6, #0]
 800914e:	e7f7      	b.n	8009140 <__sfp+0x18>
 8009150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009154:	b9d5      	cbnz	r5, 800918c <__sfp+0x64>
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <__sfp+0x88>)
 8009158:	60e3      	str	r3, [r4, #12]
 800915a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800915e:	6665      	str	r5, [r4, #100]	; 0x64
 8009160:	f000 f86c 	bl	800923c <__retarget_lock_init_recursive>
 8009164:	f7ff ff96 	bl	8009094 <__sfp_lock_release>
 8009168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800916c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009170:	6025      	str	r5, [r4, #0]
 8009172:	61a5      	str	r5, [r4, #24]
 8009174:	2208      	movs	r2, #8
 8009176:	4629      	mov	r1, r5
 8009178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800917c:	f000 f86f 	bl	800925e <memset>
 8009180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009188:	4620      	mov	r0, r4
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	3468      	adds	r4, #104	; 0x68
 800918e:	e7d9      	b.n	8009144 <__sfp+0x1c>
 8009190:	2104      	movs	r1, #4
 8009192:	4638      	mov	r0, r7
 8009194:	f7ff ff62 	bl	800905c <__sfmoreglue>
 8009198:	4604      	mov	r4, r0
 800919a:	6030      	str	r0, [r6, #0]
 800919c:	2800      	cmp	r0, #0
 800919e:	d1d5      	bne.n	800914c <__sfp+0x24>
 80091a0:	f7ff ff78 	bl	8009094 <__sfp_lock_release>
 80091a4:	230c      	movs	r3, #12
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	e7ee      	b.n	8009188 <__sfp+0x60>
 80091aa:	bf00      	nop
 80091ac:	0800a5c4 	.word	0x0800a5c4
 80091b0:	ffff0001 	.word	0xffff0001

080091b4 <_fwalk_reent>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	4688      	mov	r8, r1
 80091bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091c0:	2700      	movs	r7, #0
 80091c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091c6:	f1b9 0901 	subs.w	r9, r9, #1
 80091ca:	d505      	bpl.n	80091d8 <_fwalk_reent+0x24>
 80091cc:	6824      	ldr	r4, [r4, #0]
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	d1f7      	bne.n	80091c2 <_fwalk_reent+0xe>
 80091d2:	4638      	mov	r0, r7
 80091d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d907      	bls.n	80091ee <_fwalk_reent+0x3a>
 80091de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091e2:	3301      	adds	r3, #1
 80091e4:	d003      	beq.n	80091ee <_fwalk_reent+0x3a>
 80091e6:	4629      	mov	r1, r5
 80091e8:	4630      	mov	r0, r6
 80091ea:	47c0      	blx	r8
 80091ec:	4307      	orrs	r7, r0
 80091ee:	3568      	adds	r5, #104	; 0x68
 80091f0:	e7e9      	b.n	80091c6 <_fwalk_reent+0x12>
	...

080091f4 <__libc_init_array>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4d0d      	ldr	r5, [pc, #52]	; (800922c <__libc_init_array+0x38>)
 80091f8:	4c0d      	ldr	r4, [pc, #52]	; (8009230 <__libc_init_array+0x3c>)
 80091fa:	1b64      	subs	r4, r4, r5
 80091fc:	10a4      	asrs	r4, r4, #2
 80091fe:	2600      	movs	r6, #0
 8009200:	42a6      	cmp	r6, r4
 8009202:	d109      	bne.n	8009218 <__libc_init_array+0x24>
 8009204:	4d0b      	ldr	r5, [pc, #44]	; (8009234 <__libc_init_array+0x40>)
 8009206:	4c0c      	ldr	r4, [pc, #48]	; (8009238 <__libc_init_array+0x44>)
 8009208:	f001 f804 	bl	800a214 <_init>
 800920c:	1b64      	subs	r4, r4, r5
 800920e:	10a4      	asrs	r4, r4, #2
 8009210:	2600      	movs	r6, #0
 8009212:	42a6      	cmp	r6, r4
 8009214:	d105      	bne.n	8009222 <__libc_init_array+0x2e>
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	f855 3b04 	ldr.w	r3, [r5], #4
 800921c:	4798      	blx	r3
 800921e:	3601      	adds	r6, #1
 8009220:	e7ee      	b.n	8009200 <__libc_init_array+0xc>
 8009222:	f855 3b04 	ldr.w	r3, [r5], #4
 8009226:	4798      	blx	r3
 8009228:	3601      	adds	r6, #1
 800922a:	e7f2      	b.n	8009212 <__libc_init_array+0x1e>
 800922c:	0800a604 	.word	0x0800a604
 8009230:	0800a604 	.word	0x0800a604
 8009234:	0800a604 	.word	0x0800a604
 8009238:	0800a608 	.word	0x0800a608

0800923c <__retarget_lock_init_recursive>:
 800923c:	4770      	bx	lr

0800923e <__retarget_lock_acquire_recursive>:
 800923e:	4770      	bx	lr

08009240 <__retarget_lock_release_recursive>:
 8009240:	4770      	bx	lr

08009242 <memcpy>:
 8009242:	440a      	add	r2, r1
 8009244:	4291      	cmp	r1, r2
 8009246:	f100 33ff 	add.w	r3, r0, #4294967295
 800924a:	d100      	bne.n	800924e <memcpy+0xc>
 800924c:	4770      	bx	lr
 800924e:	b510      	push	{r4, lr}
 8009250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009258:	4291      	cmp	r1, r2
 800925a:	d1f9      	bne.n	8009250 <memcpy+0xe>
 800925c:	bd10      	pop	{r4, pc}

0800925e <memset>:
 800925e:	4402      	add	r2, r0
 8009260:	4603      	mov	r3, r0
 8009262:	4293      	cmp	r3, r2
 8009264:	d100      	bne.n	8009268 <memset+0xa>
 8009266:	4770      	bx	lr
 8009268:	f803 1b01 	strb.w	r1, [r3], #1
 800926c:	e7f9      	b.n	8009262 <memset+0x4>
	...

08009270 <sbrk_aligned>:
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	4e0e      	ldr	r6, [pc, #56]	; (80092ac <sbrk_aligned+0x3c>)
 8009274:	460c      	mov	r4, r1
 8009276:	6831      	ldr	r1, [r6, #0]
 8009278:	4605      	mov	r5, r0
 800927a:	b911      	cbnz	r1, 8009282 <sbrk_aligned+0x12>
 800927c:	f000 f96c 	bl	8009558 <_sbrk_r>
 8009280:	6030      	str	r0, [r6, #0]
 8009282:	4621      	mov	r1, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f000 f967 	bl	8009558 <_sbrk_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d00a      	beq.n	80092a4 <sbrk_aligned+0x34>
 800928e:	1cc4      	adds	r4, r0, #3
 8009290:	f024 0403 	bic.w	r4, r4, #3
 8009294:	42a0      	cmp	r0, r4
 8009296:	d007      	beq.n	80092a8 <sbrk_aligned+0x38>
 8009298:	1a21      	subs	r1, r4, r0
 800929a:	4628      	mov	r0, r5
 800929c:	f000 f95c 	bl	8009558 <_sbrk_r>
 80092a0:	3001      	adds	r0, #1
 80092a2:	d101      	bne.n	80092a8 <sbrk_aligned+0x38>
 80092a4:	f04f 34ff 	mov.w	r4, #4294967295
 80092a8:	4620      	mov	r0, r4
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	20004498 	.word	0x20004498

080092b0 <_malloc_r>:
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	1ccd      	adds	r5, r1, #3
 80092b6:	f025 0503 	bic.w	r5, r5, #3
 80092ba:	3508      	adds	r5, #8
 80092bc:	2d0c      	cmp	r5, #12
 80092be:	bf38      	it	cc
 80092c0:	250c      	movcc	r5, #12
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	4607      	mov	r7, r0
 80092c6:	db01      	blt.n	80092cc <_malloc_r+0x1c>
 80092c8:	42a9      	cmp	r1, r5
 80092ca:	d905      	bls.n	80092d8 <_malloc_r+0x28>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	2600      	movs	r6, #0
 80092d2:	4630      	mov	r0, r6
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d8:	4e2e      	ldr	r6, [pc, #184]	; (8009394 <_malloc_r+0xe4>)
 80092da:	f000 fbcd 	bl	8009a78 <__malloc_lock>
 80092de:	6833      	ldr	r3, [r6, #0]
 80092e0:	461c      	mov	r4, r3
 80092e2:	bb34      	cbnz	r4, 8009332 <_malloc_r+0x82>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7ff ffc2 	bl	8009270 <sbrk_aligned>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	4604      	mov	r4, r0
 80092f0:	d14d      	bne.n	800938e <_malloc_r+0xde>
 80092f2:	6834      	ldr	r4, [r6, #0]
 80092f4:	4626      	mov	r6, r4
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	d140      	bne.n	800937c <_malloc_r+0xcc>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	4631      	mov	r1, r6
 80092fe:	4638      	mov	r0, r7
 8009300:	eb04 0803 	add.w	r8, r4, r3
 8009304:	f000 f928 	bl	8009558 <_sbrk_r>
 8009308:	4580      	cmp	r8, r0
 800930a:	d13a      	bne.n	8009382 <_malloc_r+0xd2>
 800930c:	6821      	ldr	r1, [r4, #0]
 800930e:	3503      	adds	r5, #3
 8009310:	1a6d      	subs	r5, r5, r1
 8009312:	f025 0503 	bic.w	r5, r5, #3
 8009316:	3508      	adds	r5, #8
 8009318:	2d0c      	cmp	r5, #12
 800931a:	bf38      	it	cc
 800931c:	250c      	movcc	r5, #12
 800931e:	4629      	mov	r1, r5
 8009320:	4638      	mov	r0, r7
 8009322:	f7ff ffa5 	bl	8009270 <sbrk_aligned>
 8009326:	3001      	adds	r0, #1
 8009328:	d02b      	beq.n	8009382 <_malloc_r+0xd2>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	442b      	add	r3, r5
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	e00e      	b.n	8009350 <_malloc_r+0xa0>
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	1b52      	subs	r2, r2, r5
 8009336:	d41e      	bmi.n	8009376 <_malloc_r+0xc6>
 8009338:	2a0b      	cmp	r2, #11
 800933a:	d916      	bls.n	800936a <_malloc_r+0xba>
 800933c:	1961      	adds	r1, r4, r5
 800933e:	42a3      	cmp	r3, r4
 8009340:	6025      	str	r5, [r4, #0]
 8009342:	bf18      	it	ne
 8009344:	6059      	strne	r1, [r3, #4]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	bf08      	it	eq
 800934a:	6031      	streq	r1, [r6, #0]
 800934c:	5162      	str	r2, [r4, r5]
 800934e:	604b      	str	r3, [r1, #4]
 8009350:	4638      	mov	r0, r7
 8009352:	f104 060b 	add.w	r6, r4, #11
 8009356:	f000 fb95 	bl	8009a84 <__malloc_unlock>
 800935a:	f026 0607 	bic.w	r6, r6, #7
 800935e:	1d23      	adds	r3, r4, #4
 8009360:	1af2      	subs	r2, r6, r3
 8009362:	d0b6      	beq.n	80092d2 <_malloc_r+0x22>
 8009364:	1b9b      	subs	r3, r3, r6
 8009366:	50a3      	str	r3, [r4, r2]
 8009368:	e7b3      	b.n	80092d2 <_malloc_r+0x22>
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	42a3      	cmp	r3, r4
 800936e:	bf0c      	ite	eq
 8009370:	6032      	streq	r2, [r6, #0]
 8009372:	605a      	strne	r2, [r3, #4]
 8009374:	e7ec      	b.n	8009350 <_malloc_r+0xa0>
 8009376:	4623      	mov	r3, r4
 8009378:	6864      	ldr	r4, [r4, #4]
 800937a:	e7b2      	b.n	80092e2 <_malloc_r+0x32>
 800937c:	4634      	mov	r4, r6
 800937e:	6876      	ldr	r6, [r6, #4]
 8009380:	e7b9      	b.n	80092f6 <_malloc_r+0x46>
 8009382:	230c      	movs	r3, #12
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	4638      	mov	r0, r7
 8009388:	f000 fb7c 	bl	8009a84 <__malloc_unlock>
 800938c:	e7a1      	b.n	80092d2 <_malloc_r+0x22>
 800938e:	6025      	str	r5, [r4, #0]
 8009390:	e7de      	b.n	8009350 <_malloc_r+0xa0>
 8009392:	bf00      	nop
 8009394:	20004494 	.word	0x20004494

08009398 <_puts_r>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	460e      	mov	r6, r1
 800939c:	4605      	mov	r5, r0
 800939e:	b118      	cbz	r0, 80093a8 <_puts_r+0x10>
 80093a0:	6983      	ldr	r3, [r0, #24]
 80093a2:	b90b      	cbnz	r3, 80093a8 <_puts_r+0x10>
 80093a4:	f7ff fe88 	bl	80090b8 <__sinit>
 80093a8:	69ab      	ldr	r3, [r5, #24]
 80093aa:	68ac      	ldr	r4, [r5, #8]
 80093ac:	b913      	cbnz	r3, 80093b4 <_puts_r+0x1c>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f7ff fe82 	bl	80090b8 <__sinit>
 80093b4:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <_puts_r+0xd0>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d120      	bne.n	80093fc <_puts_r+0x64>
 80093ba:	686c      	ldr	r4, [r5, #4]
 80093bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093be:	07db      	lsls	r3, r3, #31
 80093c0:	d405      	bmi.n	80093ce <_puts_r+0x36>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	0598      	lsls	r0, r3, #22
 80093c6:	d402      	bmi.n	80093ce <_puts_r+0x36>
 80093c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ca:	f7ff ff38 	bl	800923e <__retarget_lock_acquire_recursive>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	0719      	lsls	r1, r3, #28
 80093d2:	d51d      	bpl.n	8009410 <_puts_r+0x78>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	b1db      	cbz	r3, 8009410 <_puts_r+0x78>
 80093d8:	3e01      	subs	r6, #1
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093e0:	3b01      	subs	r3, #1
 80093e2:	60a3      	str	r3, [r4, #8]
 80093e4:	bb39      	cbnz	r1, 8009436 <_puts_r+0x9e>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	da38      	bge.n	800945c <_puts_r+0xc4>
 80093ea:	4622      	mov	r2, r4
 80093ec:	210a      	movs	r1, #10
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f926 	bl	8009640 <__swbuf_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d011      	beq.n	800941c <_puts_r+0x84>
 80093f8:	250a      	movs	r5, #10
 80093fa:	e011      	b.n	8009420 <_puts_r+0x88>
 80093fc:	4b1b      	ldr	r3, [pc, #108]	; (800946c <_puts_r+0xd4>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d101      	bne.n	8009406 <_puts_r+0x6e>
 8009402:	68ac      	ldr	r4, [r5, #8]
 8009404:	e7da      	b.n	80093bc <_puts_r+0x24>
 8009406:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <_puts_r+0xd8>)
 8009408:	429c      	cmp	r4, r3
 800940a:	bf08      	it	eq
 800940c:	68ec      	ldreq	r4, [r5, #12]
 800940e:	e7d5      	b.n	80093bc <_puts_r+0x24>
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f978 	bl	8009708 <__swsetup_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	d0dd      	beq.n	80093d8 <_puts_r+0x40>
 800941c:	f04f 35ff 	mov.w	r5, #4294967295
 8009420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d405      	bmi.n	8009432 <_puts_r+0x9a>
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	059b      	lsls	r3, r3, #22
 800942a:	d402      	bmi.n	8009432 <_puts_r+0x9a>
 800942c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800942e:	f7ff ff07 	bl	8009240 <__retarget_lock_release_recursive>
 8009432:	4628      	mov	r0, r5
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	2b00      	cmp	r3, #0
 8009438:	da04      	bge.n	8009444 <_puts_r+0xac>
 800943a:	69a2      	ldr	r2, [r4, #24]
 800943c:	429a      	cmp	r2, r3
 800943e:	dc06      	bgt.n	800944e <_puts_r+0xb6>
 8009440:	290a      	cmp	r1, #10
 8009442:	d004      	beq.n	800944e <_puts_r+0xb6>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	7019      	strb	r1, [r3, #0]
 800944c:	e7c5      	b.n	80093da <_puts_r+0x42>
 800944e:	4622      	mov	r2, r4
 8009450:	4628      	mov	r0, r5
 8009452:	f000 f8f5 	bl	8009640 <__swbuf_r>
 8009456:	3001      	adds	r0, #1
 8009458:	d1bf      	bne.n	80093da <_puts_r+0x42>
 800945a:	e7df      	b.n	800941c <_puts_r+0x84>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	250a      	movs	r5, #10
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	6022      	str	r2, [r4, #0]
 8009464:	701d      	strb	r5, [r3, #0]
 8009466:	e7db      	b.n	8009420 <_puts_r+0x88>
 8009468:	0800a584 	.word	0x0800a584
 800946c:	0800a5a4 	.word	0x0800a5a4
 8009470:	0800a564 	.word	0x0800a564

08009474 <puts>:
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <puts+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f7ff bf8d 	b.w	8009398 <_puts_r>
 800947e:	bf00      	nop
 8009480:	2000002c 	.word	0x2000002c

08009484 <cleanup_glue>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	460c      	mov	r4, r1
 8009488:	6809      	ldr	r1, [r1, #0]
 800948a:	4605      	mov	r5, r0
 800948c:	b109      	cbz	r1, 8009492 <cleanup_glue+0xe>
 800948e:	f7ff fff9 	bl	8009484 <cleanup_glue>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800949a:	f000 baf9 	b.w	8009a90 <_free_r>
	...

080094a0 <_reclaim_reent>:
 80094a0:	4b2c      	ldr	r3, [pc, #176]	; (8009554 <_reclaim_reent+0xb4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4283      	cmp	r3, r0
 80094a6:	b570      	push	{r4, r5, r6, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	d051      	beq.n	8009550 <_reclaim_reent+0xb0>
 80094ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094ae:	b143      	cbz	r3, 80094c2 <_reclaim_reent+0x22>
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d14a      	bne.n	800954c <_reclaim_reent+0xac>
 80094b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	b111      	cbz	r1, 80094c2 <_reclaim_reent+0x22>
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fae7 	bl	8009a90 <_free_r>
 80094c2:	6961      	ldr	r1, [r4, #20]
 80094c4:	b111      	cbz	r1, 80094cc <_reclaim_reent+0x2c>
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 fae2 	bl	8009a90 <_free_r>
 80094cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094ce:	b111      	cbz	r1, 80094d6 <_reclaim_reent+0x36>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fadd 	bl	8009a90 <_free_r>
 80094d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094d8:	b111      	cbz	r1, 80094e0 <_reclaim_reent+0x40>
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fad8 	bl	8009a90 <_free_r>
 80094e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80094e2:	b111      	cbz	r1, 80094ea <_reclaim_reent+0x4a>
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fad3 	bl	8009a90 <_free_r>
 80094ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094ec:	b111      	cbz	r1, 80094f4 <_reclaim_reent+0x54>
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 face 	bl	8009a90 <_free_r>
 80094f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80094f6:	b111      	cbz	r1, 80094fe <_reclaim_reent+0x5e>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fac9 	bl	8009a90 <_free_r>
 80094fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009500:	b111      	cbz	r1, 8009508 <_reclaim_reent+0x68>
 8009502:	4620      	mov	r0, r4
 8009504:	f000 fac4 	bl	8009a90 <_free_r>
 8009508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800950a:	b111      	cbz	r1, 8009512 <_reclaim_reent+0x72>
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fabf 	bl	8009a90 <_free_r>
 8009512:	69a3      	ldr	r3, [r4, #24]
 8009514:	b1e3      	cbz	r3, 8009550 <_reclaim_reent+0xb0>
 8009516:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009518:	4620      	mov	r0, r4
 800951a:	4798      	blx	r3
 800951c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800951e:	b1b9      	cbz	r1, 8009550 <_reclaim_reent+0xb0>
 8009520:	4620      	mov	r0, r4
 8009522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009526:	f7ff bfad 	b.w	8009484 <cleanup_glue>
 800952a:	5949      	ldr	r1, [r1, r5]
 800952c:	b941      	cbnz	r1, 8009540 <_reclaim_reent+0xa0>
 800952e:	3504      	adds	r5, #4
 8009530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009532:	2d80      	cmp	r5, #128	; 0x80
 8009534:	68d9      	ldr	r1, [r3, #12]
 8009536:	d1f8      	bne.n	800952a <_reclaim_reent+0x8a>
 8009538:	4620      	mov	r0, r4
 800953a:	f000 faa9 	bl	8009a90 <_free_r>
 800953e:	e7ba      	b.n	80094b6 <_reclaim_reent+0x16>
 8009540:	680e      	ldr	r6, [r1, #0]
 8009542:	4620      	mov	r0, r4
 8009544:	f000 faa4 	bl	8009a90 <_free_r>
 8009548:	4631      	mov	r1, r6
 800954a:	e7ef      	b.n	800952c <_reclaim_reent+0x8c>
 800954c:	2500      	movs	r5, #0
 800954e:	e7ef      	b.n	8009530 <_reclaim_reent+0x90>
 8009550:	bd70      	pop	{r4, r5, r6, pc}
 8009552:	bf00      	nop
 8009554:	2000002c 	.word	0x2000002c

08009558 <_sbrk_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d06      	ldr	r5, [pc, #24]	; (8009574 <_sbrk_r+0x1c>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	602b      	str	r3, [r5, #0]
 8009564:	f7f8 fc10 	bl	8001d88 <_sbrk>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_sbrk_r+0x1a>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_sbrk_r+0x1a>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	2000449c 	.word	0x2000449c

08009578 <siprintf>:
 8009578:	b40e      	push	{r1, r2, r3}
 800957a:	b500      	push	{lr}
 800957c:	b09c      	sub	sp, #112	; 0x70
 800957e:	ab1d      	add	r3, sp, #116	; 0x74
 8009580:	9002      	str	r0, [sp, #8]
 8009582:	9006      	str	r0, [sp, #24]
 8009584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009588:	4809      	ldr	r0, [pc, #36]	; (80095b0 <siprintf+0x38>)
 800958a:	9107      	str	r1, [sp, #28]
 800958c:	9104      	str	r1, [sp, #16]
 800958e:	4909      	ldr	r1, [pc, #36]	; (80095b4 <siprintf+0x3c>)
 8009590:	f853 2b04 	ldr.w	r2, [r3], #4
 8009594:	9105      	str	r1, [sp, #20]
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	a902      	add	r1, sp, #8
 800959c:	f000 fb20 	bl	8009be0 <_svfiprintf_r>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	b01c      	add	sp, #112	; 0x70
 80095a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095ac:	b003      	add	sp, #12
 80095ae:	4770      	bx	lr
 80095b0:	2000002c 	.word	0x2000002c
 80095b4:	ffff0208 	.word	0xffff0208

080095b8 <__sread>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	460c      	mov	r4, r1
 80095bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c0:	f000 fda2 	bl	800a108 <_read_r>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	bfab      	itete	ge
 80095c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095ca:	89a3      	ldrhlt	r3, [r4, #12]
 80095cc:	181b      	addge	r3, r3, r0
 80095ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095d2:	bfac      	ite	ge
 80095d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80095d6:	81a3      	strhlt	r3, [r4, #12]
 80095d8:	bd10      	pop	{r4, pc}

080095da <__swrite>:
 80095da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095de:	461f      	mov	r7, r3
 80095e0:	898b      	ldrh	r3, [r1, #12]
 80095e2:	05db      	lsls	r3, r3, #23
 80095e4:	4605      	mov	r5, r0
 80095e6:	460c      	mov	r4, r1
 80095e8:	4616      	mov	r6, r2
 80095ea:	d505      	bpl.n	80095f8 <__swrite+0x1e>
 80095ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f0:	2302      	movs	r3, #2
 80095f2:	2200      	movs	r2, #0
 80095f4:	f000 f9c8 	bl	8009988 <_lseek_r>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	4632      	mov	r2, r6
 8009606:	463b      	mov	r3, r7
 8009608:	4628      	mov	r0, r5
 800960a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960e:	f000 b869 	b.w	80096e4 <_write_r>

08009612 <__sseek>:
 8009612:	b510      	push	{r4, lr}
 8009614:	460c      	mov	r4, r1
 8009616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961a:	f000 f9b5 	bl	8009988 <_lseek_r>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	bf15      	itete	ne
 8009624:	6560      	strne	r0, [r4, #84]	; 0x54
 8009626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800962a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800962e:	81a3      	strheq	r3, [r4, #12]
 8009630:	bf18      	it	ne
 8009632:	81a3      	strhne	r3, [r4, #12]
 8009634:	bd10      	pop	{r4, pc}

08009636 <__sclose>:
 8009636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963a:	f000 b8d3 	b.w	80097e4 <_close_r>
	...

08009640 <__swbuf_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	460e      	mov	r6, r1
 8009644:	4614      	mov	r4, r2
 8009646:	4605      	mov	r5, r0
 8009648:	b118      	cbz	r0, 8009652 <__swbuf_r+0x12>
 800964a:	6983      	ldr	r3, [r0, #24]
 800964c:	b90b      	cbnz	r3, 8009652 <__swbuf_r+0x12>
 800964e:	f7ff fd33 	bl	80090b8 <__sinit>
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <__swbuf_r+0x98>)
 8009654:	429c      	cmp	r4, r3
 8009656:	d12b      	bne.n	80096b0 <__swbuf_r+0x70>
 8009658:	686c      	ldr	r4, [r5, #4]
 800965a:	69a3      	ldr	r3, [r4, #24]
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	071a      	lsls	r2, r3, #28
 8009662:	d52f      	bpl.n	80096c4 <__swbuf_r+0x84>
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	b36b      	cbz	r3, 80096c4 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	1ac0      	subs	r0, r0, r3
 800966e:	6963      	ldr	r3, [r4, #20]
 8009670:	b2f6      	uxtb	r6, r6
 8009672:	4283      	cmp	r3, r0
 8009674:	4637      	mov	r7, r6
 8009676:	dc04      	bgt.n	8009682 <__swbuf_r+0x42>
 8009678:	4621      	mov	r1, r4
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f948 	bl	8009910 <_fflush_r>
 8009680:	bb30      	cbnz	r0, 80096d0 <__swbuf_r+0x90>
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	3b01      	subs	r3, #1
 8009686:	60a3      	str	r3, [r4, #8]
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	701e      	strb	r6, [r3, #0]
 8009690:	6963      	ldr	r3, [r4, #20]
 8009692:	3001      	adds	r0, #1
 8009694:	4283      	cmp	r3, r0
 8009696:	d004      	beq.n	80096a2 <__swbuf_r+0x62>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d506      	bpl.n	80096ac <__swbuf_r+0x6c>
 800969e:	2e0a      	cmp	r6, #10
 80096a0:	d104      	bne.n	80096ac <__swbuf_r+0x6c>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	f000 f933 	bl	8009910 <_fflush_r>
 80096aa:	b988      	cbnz	r0, 80096d0 <__swbuf_r+0x90>
 80096ac:	4638      	mov	r0, r7
 80096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <__swbuf_r+0x9c>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d101      	bne.n	80096ba <__swbuf_r+0x7a>
 80096b6:	68ac      	ldr	r4, [r5, #8]
 80096b8:	e7cf      	b.n	800965a <__swbuf_r+0x1a>
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <__swbuf_r+0xa0>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	bf08      	it	eq
 80096c0:	68ec      	ldreq	r4, [r5, #12]
 80096c2:	e7ca      	b.n	800965a <__swbuf_r+0x1a>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f81e 	bl	8009708 <__swsetup_r>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d0cb      	beq.n	8009668 <__swbuf_r+0x28>
 80096d0:	f04f 37ff 	mov.w	r7, #4294967295
 80096d4:	e7ea      	b.n	80096ac <__swbuf_r+0x6c>
 80096d6:	bf00      	nop
 80096d8:	0800a584 	.word	0x0800a584
 80096dc:	0800a5a4 	.word	0x0800a5a4
 80096e0:	0800a564 	.word	0x0800a564

080096e4 <_write_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_write_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f8 faf7 	bl	8001ce6 <_write>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_write_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_write_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	2000449c 	.word	0x2000449c

08009708 <__swsetup_r>:
 8009708:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <__swsetup_r+0xcc>)
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	4606      	mov	r6, r0
 8009710:	460c      	mov	r4, r1
 8009712:	b125      	cbz	r5, 800971e <__swsetup_r+0x16>
 8009714:	69ab      	ldr	r3, [r5, #24]
 8009716:	b913      	cbnz	r3, 800971e <__swsetup_r+0x16>
 8009718:	4628      	mov	r0, r5
 800971a:	f7ff fccd 	bl	80090b8 <__sinit>
 800971e:	4b2e      	ldr	r3, [pc, #184]	; (80097d8 <__swsetup_r+0xd0>)
 8009720:	429c      	cmp	r4, r3
 8009722:	d10f      	bne.n	8009744 <__swsetup_r+0x3c>
 8009724:	686c      	ldr	r4, [r5, #4]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800972c:	0719      	lsls	r1, r3, #28
 800972e:	d42c      	bmi.n	800978a <__swsetup_r+0x82>
 8009730:	06dd      	lsls	r5, r3, #27
 8009732:	d411      	bmi.n	8009758 <__swsetup_r+0x50>
 8009734:	2309      	movs	r3, #9
 8009736:	6033      	str	r3, [r6, #0]
 8009738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	e03e      	b.n	80097c2 <__swsetup_r+0xba>
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <__swsetup_r+0xd4>)
 8009746:	429c      	cmp	r4, r3
 8009748:	d101      	bne.n	800974e <__swsetup_r+0x46>
 800974a:	68ac      	ldr	r4, [r5, #8]
 800974c:	e7eb      	b.n	8009726 <__swsetup_r+0x1e>
 800974e:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <__swsetup_r+0xd8>)
 8009750:	429c      	cmp	r4, r3
 8009752:	bf08      	it	eq
 8009754:	68ec      	ldreq	r4, [r5, #12]
 8009756:	e7e6      	b.n	8009726 <__swsetup_r+0x1e>
 8009758:	0758      	lsls	r0, r3, #29
 800975a:	d512      	bpl.n	8009782 <__swsetup_r+0x7a>
 800975c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800975e:	b141      	cbz	r1, 8009772 <__swsetup_r+0x6a>
 8009760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009764:	4299      	cmp	r1, r3
 8009766:	d002      	beq.n	800976e <__swsetup_r+0x66>
 8009768:	4630      	mov	r0, r6
 800976a:	f000 f991 	bl	8009a90 <_free_r>
 800976e:	2300      	movs	r3, #0
 8009770:	6363      	str	r3, [r4, #52]	; 0x34
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	2300      	movs	r3, #0
 800977c:	6063      	str	r3, [r4, #4]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f043 0308 	orr.w	r3, r3, #8
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	b94b      	cbnz	r3, 80097a2 <__swsetup_r+0x9a>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009798:	d003      	beq.n	80097a2 <__swsetup_r+0x9a>
 800979a:	4621      	mov	r1, r4
 800979c:	4630      	mov	r0, r6
 800979e:	f000 f92b 	bl	80099f8 <__smakebuf_r>
 80097a2:	89a0      	ldrh	r0, [r4, #12]
 80097a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a8:	f010 0301 	ands.w	r3, r0, #1
 80097ac:	d00a      	beq.n	80097c4 <__swsetup_r+0xbc>
 80097ae:	2300      	movs	r3, #0
 80097b0:	60a3      	str	r3, [r4, #8]
 80097b2:	6963      	ldr	r3, [r4, #20]
 80097b4:	425b      	negs	r3, r3
 80097b6:	61a3      	str	r3, [r4, #24]
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	b943      	cbnz	r3, 80097ce <__swsetup_r+0xc6>
 80097bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097c0:	d1ba      	bne.n	8009738 <__swsetup_r+0x30>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	0781      	lsls	r1, r0, #30
 80097c6:	bf58      	it	pl
 80097c8:	6963      	ldrpl	r3, [r4, #20]
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	e7f4      	b.n	80097b8 <__swsetup_r+0xb0>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7f7      	b.n	80097c2 <__swsetup_r+0xba>
 80097d2:	bf00      	nop
 80097d4:	2000002c 	.word	0x2000002c
 80097d8:	0800a584 	.word	0x0800a584
 80097dc:	0800a5a4 	.word	0x0800a5a4
 80097e0:	0800a564 	.word	0x0800a564

080097e4 <_close_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d06      	ldr	r5, [pc, #24]	; (8009800 <_close_r+0x1c>)
 80097e8:	2300      	movs	r3, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	602b      	str	r3, [r5, #0]
 80097f0:	f7f8 fa95 	bl	8001d1e <_close>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_close_r+0x1a>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_close_r+0x1a>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	2000449c 	.word	0x2000449c

08009804 <__sflush_r>:
 8009804:	898a      	ldrh	r2, [r1, #12]
 8009806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980a:	4605      	mov	r5, r0
 800980c:	0710      	lsls	r0, r2, #28
 800980e:	460c      	mov	r4, r1
 8009810:	d458      	bmi.n	80098c4 <__sflush_r+0xc0>
 8009812:	684b      	ldr	r3, [r1, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	dc05      	bgt.n	8009824 <__sflush_r+0x20>
 8009818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	dc02      	bgt.n	8009824 <__sflush_r+0x20>
 800981e:	2000      	movs	r0, #0
 8009820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009826:	2e00      	cmp	r6, #0
 8009828:	d0f9      	beq.n	800981e <__sflush_r+0x1a>
 800982a:	2300      	movs	r3, #0
 800982c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009830:	682f      	ldr	r7, [r5, #0]
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	d032      	beq.n	800989c <__sflush_r+0x98>
 8009836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	075a      	lsls	r2, r3, #29
 800983c:	d505      	bpl.n	800984a <__sflush_r+0x46>
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	1ac0      	subs	r0, r0, r3
 8009842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009844:	b10b      	cbz	r3, 800984a <__sflush_r+0x46>
 8009846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009848:	1ac0      	subs	r0, r0, r3
 800984a:	2300      	movs	r3, #0
 800984c:	4602      	mov	r2, r0
 800984e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009850:	6a21      	ldr	r1, [r4, #32]
 8009852:	4628      	mov	r0, r5
 8009854:	47b0      	blx	r6
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	d106      	bne.n	800986a <__sflush_r+0x66>
 800985c:	6829      	ldr	r1, [r5, #0]
 800985e:	291d      	cmp	r1, #29
 8009860:	d82c      	bhi.n	80098bc <__sflush_r+0xb8>
 8009862:	4a2a      	ldr	r2, [pc, #168]	; (800990c <__sflush_r+0x108>)
 8009864:	40ca      	lsrs	r2, r1
 8009866:	07d6      	lsls	r6, r2, #31
 8009868:	d528      	bpl.n	80098bc <__sflush_r+0xb8>
 800986a:	2200      	movs	r2, #0
 800986c:	6062      	str	r2, [r4, #4]
 800986e:	04d9      	lsls	r1, r3, #19
 8009870:	6922      	ldr	r2, [r4, #16]
 8009872:	6022      	str	r2, [r4, #0]
 8009874:	d504      	bpl.n	8009880 <__sflush_r+0x7c>
 8009876:	1c42      	adds	r2, r0, #1
 8009878:	d101      	bne.n	800987e <__sflush_r+0x7a>
 800987a:	682b      	ldr	r3, [r5, #0]
 800987c:	b903      	cbnz	r3, 8009880 <__sflush_r+0x7c>
 800987e:	6560      	str	r0, [r4, #84]	; 0x54
 8009880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009882:	602f      	str	r7, [r5, #0]
 8009884:	2900      	cmp	r1, #0
 8009886:	d0ca      	beq.n	800981e <__sflush_r+0x1a>
 8009888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800988c:	4299      	cmp	r1, r3
 800988e:	d002      	beq.n	8009896 <__sflush_r+0x92>
 8009890:	4628      	mov	r0, r5
 8009892:	f000 f8fd 	bl	8009a90 <_free_r>
 8009896:	2000      	movs	r0, #0
 8009898:	6360      	str	r0, [r4, #52]	; 0x34
 800989a:	e7c1      	b.n	8009820 <__sflush_r+0x1c>
 800989c:	6a21      	ldr	r1, [r4, #32]
 800989e:	2301      	movs	r3, #1
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b0      	blx	r6
 80098a4:	1c41      	adds	r1, r0, #1
 80098a6:	d1c7      	bne.n	8009838 <__sflush_r+0x34>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c4      	beq.n	8009838 <__sflush_r+0x34>
 80098ae:	2b1d      	cmp	r3, #29
 80098b0:	d001      	beq.n	80098b6 <__sflush_r+0xb2>
 80098b2:	2b16      	cmp	r3, #22
 80098b4:	d101      	bne.n	80098ba <__sflush_r+0xb6>
 80098b6:	602f      	str	r7, [r5, #0]
 80098b8:	e7b1      	b.n	800981e <__sflush_r+0x1a>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	e7ad      	b.n	8009820 <__sflush_r+0x1c>
 80098c4:	690f      	ldr	r7, [r1, #16]
 80098c6:	2f00      	cmp	r7, #0
 80098c8:	d0a9      	beq.n	800981e <__sflush_r+0x1a>
 80098ca:	0793      	lsls	r3, r2, #30
 80098cc:	680e      	ldr	r6, [r1, #0]
 80098ce:	bf08      	it	eq
 80098d0:	694b      	ldreq	r3, [r1, #20]
 80098d2:	600f      	str	r7, [r1, #0]
 80098d4:	bf18      	it	ne
 80098d6:	2300      	movne	r3, #0
 80098d8:	eba6 0807 	sub.w	r8, r6, r7
 80098dc:	608b      	str	r3, [r1, #8]
 80098de:	f1b8 0f00 	cmp.w	r8, #0
 80098e2:	dd9c      	ble.n	800981e <__sflush_r+0x1a>
 80098e4:	6a21      	ldr	r1, [r4, #32]
 80098e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098e8:	4643      	mov	r3, r8
 80098ea:	463a      	mov	r2, r7
 80098ec:	4628      	mov	r0, r5
 80098ee:	47b0      	blx	r6
 80098f0:	2800      	cmp	r0, #0
 80098f2:	dc06      	bgt.n	8009902 <__sflush_r+0xfe>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fa:	81a3      	strh	r3, [r4, #12]
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	e78e      	b.n	8009820 <__sflush_r+0x1c>
 8009902:	4407      	add	r7, r0
 8009904:	eba8 0800 	sub.w	r8, r8, r0
 8009908:	e7e9      	b.n	80098de <__sflush_r+0xda>
 800990a:	bf00      	nop
 800990c:	20400001 	.word	0x20400001

08009910 <_fflush_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	690b      	ldr	r3, [r1, #16]
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	b913      	cbnz	r3, 8009920 <_fflush_r+0x10>
 800991a:	2500      	movs	r5, #0
 800991c:	4628      	mov	r0, r5
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	b118      	cbz	r0, 800992a <_fflush_r+0x1a>
 8009922:	6983      	ldr	r3, [r0, #24]
 8009924:	b90b      	cbnz	r3, 800992a <_fflush_r+0x1a>
 8009926:	f7ff fbc7 	bl	80090b8 <__sinit>
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <_fflush_r+0x6c>)
 800992c:	429c      	cmp	r4, r3
 800992e:	d11b      	bne.n	8009968 <_fflush_r+0x58>
 8009930:	686c      	ldr	r4, [r5, #4]
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0ef      	beq.n	800991a <_fflush_r+0xa>
 800993a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800993c:	07d0      	lsls	r0, r2, #31
 800993e:	d404      	bmi.n	800994a <_fflush_r+0x3a>
 8009940:	0599      	lsls	r1, r3, #22
 8009942:	d402      	bmi.n	800994a <_fflush_r+0x3a>
 8009944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009946:	f7ff fc7a 	bl	800923e <__retarget_lock_acquire_recursive>
 800994a:	4628      	mov	r0, r5
 800994c:	4621      	mov	r1, r4
 800994e:	f7ff ff59 	bl	8009804 <__sflush_r>
 8009952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	4605      	mov	r5, r0
 8009958:	d4e0      	bmi.n	800991c <_fflush_r+0xc>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	059b      	lsls	r3, r3, #22
 800995e:	d4dd      	bmi.n	800991c <_fflush_r+0xc>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f7ff fc6d 	bl	8009240 <__retarget_lock_release_recursive>
 8009966:	e7d9      	b.n	800991c <_fflush_r+0xc>
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <_fflush_r+0x70>)
 800996a:	429c      	cmp	r4, r3
 800996c:	d101      	bne.n	8009972 <_fflush_r+0x62>
 800996e:	68ac      	ldr	r4, [r5, #8]
 8009970:	e7df      	b.n	8009932 <_fflush_r+0x22>
 8009972:	4b04      	ldr	r3, [pc, #16]	; (8009984 <_fflush_r+0x74>)
 8009974:	429c      	cmp	r4, r3
 8009976:	bf08      	it	eq
 8009978:	68ec      	ldreq	r4, [r5, #12]
 800997a:	e7da      	b.n	8009932 <_fflush_r+0x22>
 800997c:	0800a584 	.word	0x0800a584
 8009980:	0800a5a4 	.word	0x0800a5a4
 8009984:	0800a564 	.word	0x0800a564

08009988 <_lseek_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_lseek_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 f9e8 	bl	8001d6c <_lseek>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_lseek_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_lseek_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	2000449c 	.word	0x2000449c

080099ac <__swhatbuf_r>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	460e      	mov	r6, r1
 80099b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	b096      	sub	sp, #88	; 0x58
 80099b8:	4614      	mov	r4, r2
 80099ba:	461d      	mov	r5, r3
 80099bc:	da08      	bge.n	80099d0 <__swhatbuf_r+0x24>
 80099be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	061a      	lsls	r2, r3, #24
 80099c8:	d410      	bmi.n	80099ec <__swhatbuf_r+0x40>
 80099ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ce:	e00e      	b.n	80099ee <__swhatbuf_r+0x42>
 80099d0:	466a      	mov	r2, sp
 80099d2:	f000 fbab 	bl	800a12c <_fstat_r>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	dbf1      	blt.n	80099be <__swhatbuf_r+0x12>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e4:	425a      	negs	r2, r3
 80099e6:	415a      	adcs	r2, r3
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	e7ee      	b.n	80099ca <__swhatbuf_r+0x1e>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	2000      	movs	r0, #0
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	b016      	add	sp, #88	; 0x58
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099f8 <__smakebuf_r>:
 80099f8:	898b      	ldrh	r3, [r1, #12]
 80099fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099fc:	079d      	lsls	r5, r3, #30
 80099fe:	4606      	mov	r6, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	d507      	bpl.n	8009a14 <__smakebuf_r+0x1c>
 8009a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	b002      	add	sp, #8
 8009a12:	bd70      	pop	{r4, r5, r6, pc}
 8009a14:	ab01      	add	r3, sp, #4
 8009a16:	466a      	mov	r2, sp
 8009a18:	f7ff ffc8 	bl	80099ac <__swhatbuf_r>
 8009a1c:	9900      	ldr	r1, [sp, #0]
 8009a1e:	4605      	mov	r5, r0
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff fc45 	bl	80092b0 <_malloc_r>
 8009a26:	b948      	cbnz	r0, 8009a3c <__smakebuf_r+0x44>
 8009a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2c:	059a      	lsls	r2, r3, #22
 8009a2e:	d4ef      	bmi.n	8009a10 <__smakebuf_r+0x18>
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	f043 0302 	orr.w	r3, r3, #2
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7e3      	b.n	8009a04 <__smakebuf_r+0xc>
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <__smakebuf_r+0x7c>)
 8009a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	6163      	str	r3, [r4, #20]
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	6120      	str	r0, [r4, #16]
 8009a52:	b15b      	cbz	r3, 8009a6c <__smakebuf_r+0x74>
 8009a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 fb79 	bl	800a150 <_isatty_r>
 8009a5e:	b128      	cbz	r0, 8009a6c <__smakebuf_r+0x74>
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	89a0      	ldrh	r0, [r4, #12]
 8009a6e:	4305      	orrs	r5, r0
 8009a70:	81a5      	strh	r5, [r4, #12]
 8009a72:	e7cd      	b.n	8009a10 <__smakebuf_r+0x18>
 8009a74:	08009051 	.word	0x08009051

08009a78 <__malloc_lock>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__malloc_lock+0x8>)
 8009a7a:	f7ff bbe0 	b.w	800923e <__retarget_lock_acquire_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20004490 	.word	0x20004490

08009a84 <__malloc_unlock>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__malloc_unlock+0x8>)
 8009a86:	f7ff bbdb 	b.w	8009240 <__retarget_lock_release_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20004490 	.word	0x20004490

08009a90 <_free_r>:
 8009a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a92:	2900      	cmp	r1, #0
 8009a94:	d044      	beq.n	8009b20 <_free_r+0x90>
 8009a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a9a:	9001      	str	r0, [sp, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009aa2:	bfb8      	it	lt
 8009aa4:	18e4      	addlt	r4, r4, r3
 8009aa6:	f7ff ffe7 	bl	8009a78 <__malloc_lock>
 8009aaa:	4a1e      	ldr	r2, [pc, #120]	; (8009b24 <_free_r+0x94>)
 8009aac:	9801      	ldr	r0, [sp, #4]
 8009aae:	6813      	ldr	r3, [r2, #0]
 8009ab0:	b933      	cbnz	r3, 8009ac0 <_free_r+0x30>
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	6014      	str	r4, [r2, #0]
 8009ab6:	b003      	add	sp, #12
 8009ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009abc:	f7ff bfe2 	b.w	8009a84 <__malloc_unlock>
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	d908      	bls.n	8009ad6 <_free_r+0x46>
 8009ac4:	6825      	ldr	r5, [r4, #0]
 8009ac6:	1961      	adds	r1, r4, r5
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	bf01      	itttt	eq
 8009acc:	6819      	ldreq	r1, [r3, #0]
 8009ace:	685b      	ldreq	r3, [r3, #4]
 8009ad0:	1949      	addeq	r1, r1, r5
 8009ad2:	6021      	streq	r1, [r4, #0]
 8009ad4:	e7ed      	b.n	8009ab2 <_free_r+0x22>
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	b10b      	cbz	r3, 8009ae0 <_free_r+0x50>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d9fa      	bls.n	8009ad6 <_free_r+0x46>
 8009ae0:	6811      	ldr	r1, [r2, #0]
 8009ae2:	1855      	adds	r5, r2, r1
 8009ae4:	42a5      	cmp	r5, r4
 8009ae6:	d10b      	bne.n	8009b00 <_free_r+0x70>
 8009ae8:	6824      	ldr	r4, [r4, #0]
 8009aea:	4421      	add	r1, r4
 8009aec:	1854      	adds	r4, r2, r1
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	6011      	str	r1, [r2, #0]
 8009af2:	d1e0      	bne.n	8009ab6 <_free_r+0x26>
 8009af4:	681c      	ldr	r4, [r3, #0]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	6053      	str	r3, [r2, #4]
 8009afa:	4421      	add	r1, r4
 8009afc:	6011      	str	r1, [r2, #0]
 8009afe:	e7da      	b.n	8009ab6 <_free_r+0x26>
 8009b00:	d902      	bls.n	8009b08 <_free_r+0x78>
 8009b02:	230c      	movs	r3, #12
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	e7d6      	b.n	8009ab6 <_free_r+0x26>
 8009b08:	6825      	ldr	r5, [r4, #0]
 8009b0a:	1961      	adds	r1, r4, r5
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	bf04      	itt	eq
 8009b10:	6819      	ldreq	r1, [r3, #0]
 8009b12:	685b      	ldreq	r3, [r3, #4]
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	bf04      	itt	eq
 8009b18:	1949      	addeq	r1, r1, r5
 8009b1a:	6021      	streq	r1, [r4, #0]
 8009b1c:	6054      	str	r4, [r2, #4]
 8009b1e:	e7ca      	b.n	8009ab6 <_free_r+0x26>
 8009b20:	b003      	add	sp, #12
 8009b22:	bd30      	pop	{r4, r5, pc}
 8009b24:	20004494 	.word	0x20004494

08009b28 <__ssputs_r>:
 8009b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	688e      	ldr	r6, [r1, #8]
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	4682      	mov	sl, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	4690      	mov	r8, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	d838      	bhi.n	8009bac <__ssputs_r+0x84>
 8009b3a:	898a      	ldrh	r2, [r1, #12]
 8009b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b40:	d032      	beq.n	8009ba8 <__ssputs_r+0x80>
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	6909      	ldr	r1, [r1, #16]
 8009b46:	eba5 0901 	sub.w	r9, r5, r1
 8009b4a:	6965      	ldr	r5, [r4, #20]
 8009b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b54:	3301      	adds	r3, #1
 8009b56:	444b      	add	r3, r9
 8009b58:	106d      	asrs	r5, r5, #1
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	bf38      	it	cc
 8009b5e:	461d      	movcc	r5, r3
 8009b60:	0553      	lsls	r3, r2, #21
 8009b62:	d531      	bpl.n	8009bc8 <__ssputs_r+0xa0>
 8009b64:	4629      	mov	r1, r5
 8009b66:	f7ff fba3 	bl	80092b0 <_malloc_r>
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	b950      	cbnz	r0, 8009b84 <__ssputs_r+0x5c>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	f8ca 3000 	str.w	r3, [sl]
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	6921      	ldr	r1, [r4, #16]
 8009b86:	464a      	mov	r2, r9
 8009b88:	f7ff fb5b 	bl	8009242 <memcpy>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	6126      	str	r6, [r4, #16]
 8009b9a:	6165      	str	r5, [r4, #20]
 8009b9c:	444e      	add	r6, r9
 8009b9e:	eba5 0509 	sub.w	r5, r5, r9
 8009ba2:	6026      	str	r6, [r4, #0]
 8009ba4:	60a5      	str	r5, [r4, #8]
 8009ba6:	463e      	mov	r6, r7
 8009ba8:	42be      	cmp	r6, r7
 8009baa:	d900      	bls.n	8009bae <__ssputs_r+0x86>
 8009bac:	463e      	mov	r6, r7
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	f000 fadc 	bl	800a170 <memmove>
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	1b9b      	subs	r3, r3, r6
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4433      	add	r3, r6
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7db      	b.n	8009b80 <__ssputs_r+0x58>
 8009bc8:	462a      	mov	r2, r5
 8009bca:	f000 faeb 	bl	800a1a4 <_realloc_r>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1e1      	bne.n	8009b98 <__ssputs_r+0x70>
 8009bd4:	6921      	ldr	r1, [r4, #16]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7ff ff5a 	bl	8009a90 <_free_r>
 8009bdc:	e7c7      	b.n	8009b6e <__ssputs_r+0x46>
	...

08009be0 <_svfiprintf_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	4698      	mov	r8, r3
 8009be6:	898b      	ldrh	r3, [r1, #12]
 8009be8:	061b      	lsls	r3, r3, #24
 8009bea:	b09d      	sub	sp, #116	; 0x74
 8009bec:	4607      	mov	r7, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	d50e      	bpl.n	8009c12 <_svfiprintf_r+0x32>
 8009bf4:	690b      	ldr	r3, [r1, #16]
 8009bf6:	b963      	cbnz	r3, 8009c12 <_svfiprintf_r+0x32>
 8009bf8:	2140      	movs	r1, #64	; 0x40
 8009bfa:	f7ff fb59 	bl	80092b0 <_malloc_r>
 8009bfe:	6028      	str	r0, [r5, #0]
 8009c00:	6128      	str	r0, [r5, #16]
 8009c02:	b920      	cbnz	r0, 8009c0e <_svfiprintf_r+0x2e>
 8009c04:	230c      	movs	r3, #12
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e0d1      	b.n	8009db2 <_svfiprintf_r+0x1d2>
 8009c0e:	2340      	movs	r3, #64	; 0x40
 8009c10:	616b      	str	r3, [r5, #20]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	2320      	movs	r3, #32
 8009c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c20:	2330      	movs	r3, #48	; 0x30
 8009c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dcc <_svfiprintf_r+0x1ec>
 8009c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c2a:	f04f 0901 	mov.w	r9, #1
 8009c2e:	4623      	mov	r3, r4
 8009c30:	469a      	mov	sl, r3
 8009c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c36:	b10a      	cbz	r2, 8009c3c <_svfiprintf_r+0x5c>
 8009c38:	2a25      	cmp	r2, #37	; 0x25
 8009c3a:	d1f9      	bne.n	8009c30 <_svfiprintf_r+0x50>
 8009c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c40:	d00b      	beq.n	8009c5a <_svfiprintf_r+0x7a>
 8009c42:	465b      	mov	r3, fp
 8009c44:	4622      	mov	r2, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f7ff ff6d 	bl	8009b28 <__ssputs_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f000 80aa 	beq.w	8009da8 <_svfiprintf_r+0x1c8>
 8009c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c56:	445a      	add	r2, fp
 8009c58:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80a2 	beq.w	8009da8 <_svfiprintf_r+0x1c8>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6e:	f10a 0a01 	add.w	sl, sl, #1
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	9307      	str	r3, [sp, #28]
 8009c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c7c:	4654      	mov	r4, sl
 8009c7e:	2205      	movs	r2, #5
 8009c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c84:	4851      	ldr	r0, [pc, #324]	; (8009dcc <_svfiprintf_r+0x1ec>)
 8009c86:	f7f6 fabb 	bl	8000200 <memchr>
 8009c8a:	9a04      	ldr	r2, [sp, #16]
 8009c8c:	b9d8      	cbnz	r0, 8009cc6 <_svfiprintf_r+0xe6>
 8009c8e:	06d0      	lsls	r0, r2, #27
 8009c90:	bf44      	itt	mi
 8009c92:	2320      	movmi	r3, #32
 8009c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c98:	0711      	lsls	r1, r2, #28
 8009c9a:	bf44      	itt	mi
 8009c9c:	232b      	movmi	r3, #43	; 0x2b
 8009c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ca8:	d015      	beq.n	8009cd6 <_svfiprintf_r+0xf6>
 8009caa:	9a07      	ldr	r2, [sp, #28]
 8009cac:	4654      	mov	r4, sl
 8009cae:	2000      	movs	r0, #0
 8009cb0:	f04f 0c0a 	mov.w	ip, #10
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cba:	3b30      	subs	r3, #48	; 0x30
 8009cbc:	2b09      	cmp	r3, #9
 8009cbe:	d94e      	bls.n	8009d5e <_svfiprintf_r+0x17e>
 8009cc0:	b1b0      	cbz	r0, 8009cf0 <_svfiprintf_r+0x110>
 8009cc2:	9207      	str	r2, [sp, #28]
 8009cc4:	e014      	b.n	8009cf0 <_svfiprintf_r+0x110>
 8009cc6:	eba0 0308 	sub.w	r3, r0, r8
 8009cca:	fa09 f303 	lsl.w	r3, r9, r3
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	46a2      	mov	sl, r4
 8009cd4:	e7d2      	b.n	8009c7c <_svfiprintf_r+0x9c>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	9103      	str	r1, [sp, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bfbb      	ittet	lt
 8009ce2:	425b      	neglt	r3, r3
 8009ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce8:	9307      	strge	r3, [sp, #28]
 8009cea:	9307      	strlt	r3, [sp, #28]
 8009cec:	bfb8      	it	lt
 8009cee:	9204      	strlt	r2, [sp, #16]
 8009cf0:	7823      	ldrb	r3, [r4, #0]
 8009cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf4:	d10c      	bne.n	8009d10 <_svfiprintf_r+0x130>
 8009cf6:	7863      	ldrb	r3, [r4, #1]
 8009cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfa:	d135      	bne.n	8009d68 <_svfiprintf_r+0x188>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	9203      	str	r2, [sp, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bfb8      	it	lt
 8009d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d0c:	3402      	adds	r4, #2
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ddc <_svfiprintf_r+0x1fc>
 8009d14:	7821      	ldrb	r1, [r4, #0]
 8009d16:	2203      	movs	r2, #3
 8009d18:	4650      	mov	r0, sl
 8009d1a:	f7f6 fa71 	bl	8000200 <memchr>
 8009d1e:	b140      	cbz	r0, 8009d32 <_svfiprintf_r+0x152>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	eba0 000a 	sub.w	r0, r0, sl
 8009d26:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2a:	9b04      	ldr	r3, [sp, #16]
 8009d2c:	4303      	orrs	r3, r0
 8009d2e:	3401      	adds	r4, #1
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d36:	4826      	ldr	r0, [pc, #152]	; (8009dd0 <_svfiprintf_r+0x1f0>)
 8009d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d3c:	2206      	movs	r2, #6
 8009d3e:	f7f6 fa5f 	bl	8000200 <memchr>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d038      	beq.n	8009db8 <_svfiprintf_r+0x1d8>
 8009d46:	4b23      	ldr	r3, [pc, #140]	; (8009dd4 <_svfiprintf_r+0x1f4>)
 8009d48:	bb1b      	cbnz	r3, 8009d92 <_svfiprintf_r+0x1b2>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	3307      	adds	r3, #7
 8009d4e:	f023 0307 	bic.w	r3, r3, #7
 8009d52:	3308      	adds	r3, #8
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d58:	4433      	add	r3, r6
 8009d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5c:	e767      	b.n	8009c2e <_svfiprintf_r+0x4e>
 8009d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d62:	460c      	mov	r4, r1
 8009d64:	2001      	movs	r0, #1
 8009d66:	e7a5      	b.n	8009cb4 <_svfiprintf_r+0xd4>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	3401      	adds	r4, #1
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	f04f 0c0a 	mov.w	ip, #10
 8009d74:	4620      	mov	r0, r4
 8009d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d7a:	3a30      	subs	r2, #48	; 0x30
 8009d7c:	2a09      	cmp	r2, #9
 8009d7e:	d903      	bls.n	8009d88 <_svfiprintf_r+0x1a8>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d0c5      	beq.n	8009d10 <_svfiprintf_r+0x130>
 8009d84:	9105      	str	r1, [sp, #20]
 8009d86:	e7c3      	b.n	8009d10 <_svfiprintf_r+0x130>
 8009d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e7f0      	b.n	8009d74 <_svfiprintf_r+0x194>
 8009d92:	ab03      	add	r3, sp, #12
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	462a      	mov	r2, r5
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <_svfiprintf_r+0x1f8>)
 8009d9a:	a904      	add	r1, sp, #16
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f3af 8000 	nop.w
 8009da2:	1c42      	adds	r2, r0, #1
 8009da4:	4606      	mov	r6, r0
 8009da6:	d1d6      	bne.n	8009d56 <_svfiprintf_r+0x176>
 8009da8:	89ab      	ldrh	r3, [r5, #12]
 8009daa:	065b      	lsls	r3, r3, #25
 8009dac:	f53f af2c 	bmi.w	8009c08 <_svfiprintf_r+0x28>
 8009db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009db2:	b01d      	add	sp, #116	; 0x74
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	ab03      	add	r3, sp, #12
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	462a      	mov	r2, r5
 8009dbe:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <_svfiprintf_r+0x1f8>)
 8009dc0:	a904      	add	r1, sp, #16
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	f000 f87a 	bl	8009ebc <_printf_i>
 8009dc8:	e7eb      	b.n	8009da2 <_svfiprintf_r+0x1c2>
 8009dca:	bf00      	nop
 8009dcc:	0800a5c8 	.word	0x0800a5c8
 8009dd0:	0800a5d2 	.word	0x0800a5d2
 8009dd4:	00000000 	.word	0x00000000
 8009dd8:	08009b29 	.word	0x08009b29
 8009ddc:	0800a5ce 	.word	0x0800a5ce

08009de0 <_printf_common>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	4616      	mov	r6, r2
 8009de6:	4699      	mov	r9, r3
 8009de8:	688a      	ldr	r2, [r1, #8]
 8009dea:	690b      	ldr	r3, [r1, #16]
 8009dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009df0:	4293      	cmp	r3, r2
 8009df2:	bfb8      	it	lt
 8009df4:	4613      	movlt	r3, r2
 8009df6:	6033      	str	r3, [r6, #0]
 8009df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b10a      	cbz	r2, 8009e06 <_printf_common+0x26>
 8009e02:	3301      	adds	r3, #1
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	0699      	lsls	r1, r3, #26
 8009e0a:	bf42      	ittt	mi
 8009e0c:	6833      	ldrmi	r3, [r6, #0]
 8009e0e:	3302      	addmi	r3, #2
 8009e10:	6033      	strmi	r3, [r6, #0]
 8009e12:	6825      	ldr	r5, [r4, #0]
 8009e14:	f015 0506 	ands.w	r5, r5, #6
 8009e18:	d106      	bne.n	8009e28 <_printf_common+0x48>
 8009e1a:	f104 0a19 	add.w	sl, r4, #25
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	6832      	ldr	r2, [r6, #0]
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dc26      	bgt.n	8009e76 <_printf_common+0x96>
 8009e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e2c:	1e13      	subs	r3, r2, #0
 8009e2e:	6822      	ldr	r2, [r4, #0]
 8009e30:	bf18      	it	ne
 8009e32:	2301      	movne	r3, #1
 8009e34:	0692      	lsls	r2, r2, #26
 8009e36:	d42b      	bmi.n	8009e90 <_printf_common+0xb0>
 8009e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c0      	blx	r8
 8009e42:	3001      	adds	r0, #1
 8009e44:	d01e      	beq.n	8009e84 <_printf_common+0xa4>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	68e5      	ldr	r5, [r4, #12]
 8009e4a:	6832      	ldr	r2, [r6, #0]
 8009e4c:	f003 0306 	and.w	r3, r3, #6
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	bf08      	it	eq
 8009e54:	1aad      	subeq	r5, r5, r2
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	bf0c      	ite	eq
 8009e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e60:	2500      	movne	r5, #0
 8009e62:	4293      	cmp	r3, r2
 8009e64:	bfc4      	itt	gt
 8009e66:	1a9b      	subgt	r3, r3, r2
 8009e68:	18ed      	addgt	r5, r5, r3
 8009e6a:	2600      	movs	r6, #0
 8009e6c:	341a      	adds	r4, #26
 8009e6e:	42b5      	cmp	r5, r6
 8009e70:	d11a      	bne.n	8009ea8 <_printf_common+0xc8>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e008      	b.n	8009e88 <_printf_common+0xa8>
 8009e76:	2301      	movs	r3, #1
 8009e78:	4652      	mov	r2, sl
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	47c0      	blx	r8
 8009e80:	3001      	adds	r0, #1
 8009e82:	d103      	bne.n	8009e8c <_printf_common+0xac>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	e7c6      	b.n	8009e1e <_printf_common+0x3e>
 8009e90:	18e1      	adds	r1, r4, r3
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	2030      	movs	r0, #48	; 0x30
 8009e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e9a:	4422      	add	r2, r4
 8009e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	e7c7      	b.n	8009e38 <_printf_common+0x58>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4622      	mov	r2, r4
 8009eac:	4649      	mov	r1, r9
 8009eae:	4638      	mov	r0, r7
 8009eb0:	47c0      	blx	r8
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d0e6      	beq.n	8009e84 <_printf_common+0xa4>
 8009eb6:	3601      	adds	r6, #1
 8009eb8:	e7d9      	b.n	8009e6e <_printf_common+0x8e>
	...

08009ebc <_printf_i>:
 8009ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	7e0f      	ldrb	r7, [r1, #24]
 8009ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ec4:	2f78      	cmp	r7, #120	; 0x78
 8009ec6:	4691      	mov	r9, r2
 8009ec8:	4680      	mov	r8, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	469a      	mov	sl, r3
 8009ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ed2:	d807      	bhi.n	8009ee4 <_printf_i+0x28>
 8009ed4:	2f62      	cmp	r7, #98	; 0x62
 8009ed6:	d80a      	bhi.n	8009eee <_printf_i+0x32>
 8009ed8:	2f00      	cmp	r7, #0
 8009eda:	f000 80d8 	beq.w	800a08e <_printf_i+0x1d2>
 8009ede:	2f58      	cmp	r7, #88	; 0x58
 8009ee0:	f000 80a3 	beq.w	800a02a <_printf_i+0x16e>
 8009ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009eec:	e03a      	b.n	8009f64 <_printf_i+0xa8>
 8009eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ef2:	2b15      	cmp	r3, #21
 8009ef4:	d8f6      	bhi.n	8009ee4 <_printf_i+0x28>
 8009ef6:	a101      	add	r1, pc, #4	; (adr r1, 8009efc <_printf_i+0x40>)
 8009ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009efc:	08009f55 	.word	0x08009f55
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009ee5 	.word	0x08009ee5
 8009f08:	08009ee5 	.word	0x08009ee5
 8009f0c:	08009ee5 	.word	0x08009ee5
 8009f10:	08009ee5 	.word	0x08009ee5
 8009f14:	08009f69 	.word	0x08009f69
 8009f18:	08009ee5 	.word	0x08009ee5
 8009f1c:	08009ee5 	.word	0x08009ee5
 8009f20:	08009ee5 	.word	0x08009ee5
 8009f24:	08009ee5 	.word	0x08009ee5
 8009f28:	0800a075 	.word	0x0800a075
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	0800a057 	.word	0x0800a057
 8009f34:	08009ee5 	.word	0x08009ee5
 8009f38:	08009ee5 	.word	0x08009ee5
 8009f3c:	0800a097 	.word	0x0800a097
 8009f40:	08009ee5 	.word	0x08009ee5
 8009f44:	08009f99 	.word	0x08009f99
 8009f48:	08009ee5 	.word	0x08009ee5
 8009f4c:	08009ee5 	.word	0x08009ee5
 8009f50:	0800a05f 	.word	0x0800a05f
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	1d1a      	adds	r2, r3, #4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	602a      	str	r2, [r5, #0]
 8009f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f64:	2301      	movs	r3, #1
 8009f66:	e0a3      	b.n	800a0b0 <_printf_i+0x1f4>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	6829      	ldr	r1, [r5, #0]
 8009f6c:	0606      	lsls	r6, r0, #24
 8009f6e:	f101 0304 	add.w	r3, r1, #4
 8009f72:	d50a      	bpl.n	8009f8a <_printf_i+0xce>
 8009f74:	680e      	ldr	r6, [r1, #0]
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	2e00      	cmp	r6, #0
 8009f7a:	da03      	bge.n	8009f84 <_printf_i+0xc8>
 8009f7c:	232d      	movs	r3, #45	; 0x2d
 8009f7e:	4276      	negs	r6, r6
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f84:	485e      	ldr	r0, [pc, #376]	; (800a100 <_printf_i+0x244>)
 8009f86:	230a      	movs	r3, #10
 8009f88:	e019      	b.n	8009fbe <_printf_i+0x102>
 8009f8a:	680e      	ldr	r6, [r1, #0]
 8009f8c:	602b      	str	r3, [r5, #0]
 8009f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f92:	bf18      	it	ne
 8009f94:	b236      	sxthne	r6, r6
 8009f96:	e7ef      	b.n	8009f78 <_printf_i+0xbc>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	6820      	ldr	r0, [r4, #0]
 8009f9c:	1d19      	adds	r1, r3, #4
 8009f9e:	6029      	str	r1, [r5, #0]
 8009fa0:	0601      	lsls	r1, r0, #24
 8009fa2:	d501      	bpl.n	8009fa8 <_printf_i+0xec>
 8009fa4:	681e      	ldr	r6, [r3, #0]
 8009fa6:	e002      	b.n	8009fae <_printf_i+0xf2>
 8009fa8:	0646      	lsls	r6, r0, #25
 8009faa:	d5fb      	bpl.n	8009fa4 <_printf_i+0xe8>
 8009fac:	881e      	ldrh	r6, [r3, #0]
 8009fae:	4854      	ldr	r0, [pc, #336]	; (800a100 <_printf_i+0x244>)
 8009fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fb2:	bf0c      	ite	eq
 8009fb4:	2308      	moveq	r3, #8
 8009fb6:	230a      	movne	r3, #10
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fbe:	6865      	ldr	r5, [r4, #4]
 8009fc0:	60a5      	str	r5, [r4, #8]
 8009fc2:	2d00      	cmp	r5, #0
 8009fc4:	bfa2      	ittt	ge
 8009fc6:	6821      	ldrge	r1, [r4, #0]
 8009fc8:	f021 0104 	bicge.w	r1, r1, #4
 8009fcc:	6021      	strge	r1, [r4, #0]
 8009fce:	b90e      	cbnz	r6, 8009fd4 <_printf_i+0x118>
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	d04d      	beq.n	800a070 <_printf_i+0x1b4>
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fda:	fb03 6711 	mls	r7, r3, r1, r6
 8009fde:	5dc7      	ldrb	r7, [r0, r7]
 8009fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fe4:	4637      	mov	r7, r6
 8009fe6:	42bb      	cmp	r3, r7
 8009fe8:	460e      	mov	r6, r1
 8009fea:	d9f4      	bls.n	8009fd6 <_printf_i+0x11a>
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d10b      	bne.n	800a008 <_printf_i+0x14c>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	07de      	lsls	r6, r3, #31
 8009ff4:	d508      	bpl.n	800a008 <_printf_i+0x14c>
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	6861      	ldr	r1, [r4, #4]
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	bfde      	ittt	le
 8009ffe:	2330      	movle	r3, #48	; 0x30
 800a000:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a004:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a008:	1b52      	subs	r2, r2, r5
 800a00a:	6122      	str	r2, [r4, #16]
 800a00c:	f8cd a000 	str.w	sl, [sp]
 800a010:	464b      	mov	r3, r9
 800a012:	aa03      	add	r2, sp, #12
 800a014:	4621      	mov	r1, r4
 800a016:	4640      	mov	r0, r8
 800a018:	f7ff fee2 	bl	8009de0 <_printf_common>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d14c      	bne.n	800a0ba <_printf_i+0x1fe>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	b004      	add	sp, #16
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	4835      	ldr	r0, [pc, #212]	; (800a100 <_printf_i+0x244>)
 800a02c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a030:	6829      	ldr	r1, [r5, #0]
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	f851 6b04 	ldr.w	r6, [r1], #4
 800a038:	6029      	str	r1, [r5, #0]
 800a03a:	061d      	lsls	r5, r3, #24
 800a03c:	d514      	bpl.n	800a068 <_printf_i+0x1ac>
 800a03e:	07df      	lsls	r7, r3, #31
 800a040:	bf44      	itt	mi
 800a042:	f043 0320 	orrmi.w	r3, r3, #32
 800a046:	6023      	strmi	r3, [r4, #0]
 800a048:	b91e      	cbnz	r6, 800a052 <_printf_i+0x196>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	f023 0320 	bic.w	r3, r3, #32
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	2310      	movs	r3, #16
 800a054:	e7b0      	b.n	8009fb8 <_printf_i+0xfc>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	f043 0320 	orr.w	r3, r3, #32
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	2378      	movs	r3, #120	; 0x78
 800a060:	4828      	ldr	r0, [pc, #160]	; (800a104 <_printf_i+0x248>)
 800a062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a066:	e7e3      	b.n	800a030 <_printf_i+0x174>
 800a068:	0659      	lsls	r1, r3, #25
 800a06a:	bf48      	it	mi
 800a06c:	b2b6      	uxthmi	r6, r6
 800a06e:	e7e6      	b.n	800a03e <_printf_i+0x182>
 800a070:	4615      	mov	r5, r2
 800a072:	e7bb      	b.n	8009fec <_printf_i+0x130>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	6826      	ldr	r6, [r4, #0]
 800a078:	6961      	ldr	r1, [r4, #20]
 800a07a:	1d18      	adds	r0, r3, #4
 800a07c:	6028      	str	r0, [r5, #0]
 800a07e:	0635      	lsls	r5, r6, #24
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	d501      	bpl.n	800a088 <_printf_i+0x1cc>
 800a084:	6019      	str	r1, [r3, #0]
 800a086:	e002      	b.n	800a08e <_printf_i+0x1d2>
 800a088:	0670      	lsls	r0, r6, #25
 800a08a:	d5fb      	bpl.n	800a084 <_printf_i+0x1c8>
 800a08c:	8019      	strh	r1, [r3, #0]
 800a08e:	2300      	movs	r3, #0
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	4615      	mov	r5, r2
 800a094:	e7ba      	b.n	800a00c <_printf_i+0x150>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	681d      	ldr	r5, [r3, #0]
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f7f6 f8ac 	bl	8000200 <memchr>
 800a0a8:	b108      	cbz	r0, 800a0ae <_printf_i+0x1f2>
 800a0aa:	1b40      	subs	r0, r0, r5
 800a0ac:	6060      	str	r0, [r4, #4]
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0b8:	e7a8      	b.n	800a00c <_printf_i+0x150>
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	462a      	mov	r2, r5
 800a0be:	4649      	mov	r1, r9
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	47d0      	blx	sl
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d0ab      	beq.n	800a020 <_printf_i+0x164>
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	079b      	lsls	r3, r3, #30
 800a0cc:	d413      	bmi.n	800a0f6 <_printf_i+0x23a>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	4298      	cmp	r0, r3
 800a0d4:	bfb8      	it	lt
 800a0d6:	4618      	movlt	r0, r3
 800a0d8:	e7a4      	b.n	800a024 <_printf_i+0x168>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	47d0      	blx	sl
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d09b      	beq.n	800a020 <_printf_i+0x164>
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	9903      	ldr	r1, [sp, #12]
 800a0ee:	1a5b      	subs	r3, r3, r1
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	dcf2      	bgt.n	800a0da <_printf_i+0x21e>
 800a0f4:	e7eb      	b.n	800a0ce <_printf_i+0x212>
 800a0f6:	2500      	movs	r5, #0
 800a0f8:	f104 0619 	add.w	r6, r4, #25
 800a0fc:	e7f5      	b.n	800a0ea <_printf_i+0x22e>
 800a0fe:	bf00      	nop
 800a100:	0800a5d9 	.word	0x0800a5d9
 800a104:	0800a5ea 	.word	0x0800a5ea

0800a108 <_read_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	; (800a128 <_read_r+0x20>)
 800a10c:	4604      	mov	r4, r0
 800a10e:	4608      	mov	r0, r1
 800a110:	4611      	mov	r1, r2
 800a112:	2200      	movs	r2, #0
 800a114:	602a      	str	r2, [r5, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f7f7 fdc8 	bl	8001cac <_read>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_read_r+0x1e>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_read_r+0x1e>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	2000449c 	.word	0x2000449c

0800a12c <_fstat_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d07      	ldr	r5, [pc, #28]	; (800a14c <_fstat_r+0x20>)
 800a130:	2300      	movs	r3, #0
 800a132:	4604      	mov	r4, r0
 800a134:	4608      	mov	r0, r1
 800a136:	4611      	mov	r1, r2
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	f7f7 fdfc 	bl	8001d36 <_fstat>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d102      	bne.n	800a148 <_fstat_r+0x1c>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	b103      	cbz	r3, 800a148 <_fstat_r+0x1c>
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	bd38      	pop	{r3, r4, r5, pc}
 800a14a:	bf00      	nop
 800a14c:	2000449c 	.word	0x2000449c

0800a150 <_isatty_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4d06      	ldr	r5, [pc, #24]	; (800a16c <_isatty_r+0x1c>)
 800a154:	2300      	movs	r3, #0
 800a156:	4604      	mov	r4, r0
 800a158:	4608      	mov	r0, r1
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	f7f7 fdfb 	bl	8001d56 <_isatty>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_isatty_r+0x1a>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_isatty_r+0x1a>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	2000449c 	.word	0x2000449c

0800a170 <memmove>:
 800a170:	4288      	cmp	r0, r1
 800a172:	b510      	push	{r4, lr}
 800a174:	eb01 0402 	add.w	r4, r1, r2
 800a178:	d902      	bls.n	800a180 <memmove+0x10>
 800a17a:	4284      	cmp	r4, r0
 800a17c:	4623      	mov	r3, r4
 800a17e:	d807      	bhi.n	800a190 <memmove+0x20>
 800a180:	1e43      	subs	r3, r0, #1
 800a182:	42a1      	cmp	r1, r4
 800a184:	d008      	beq.n	800a198 <memmove+0x28>
 800a186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a18e:	e7f8      	b.n	800a182 <memmove+0x12>
 800a190:	4402      	add	r2, r0
 800a192:	4601      	mov	r1, r0
 800a194:	428a      	cmp	r2, r1
 800a196:	d100      	bne.n	800a19a <memmove+0x2a>
 800a198:	bd10      	pop	{r4, pc}
 800a19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1a2:	e7f7      	b.n	800a194 <memmove+0x24>

0800a1a4 <_realloc_r>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4614      	mov	r4, r2
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	b921      	cbnz	r1, 800a1ba <_realloc_r+0x16>
 800a1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	f7ff b87b 	b.w	80092b0 <_malloc_r>
 800a1ba:	b92a      	cbnz	r2, 800a1c8 <_realloc_r+0x24>
 800a1bc:	f7ff fc68 	bl	8009a90 <_free_r>
 800a1c0:	4625      	mov	r5, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	f000 f81b 	bl	800a202 <_malloc_usable_size_r>
 800a1cc:	4284      	cmp	r4, r0
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	d802      	bhi.n	800a1d8 <_realloc_r+0x34>
 800a1d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1d6:	d812      	bhi.n	800a1fe <_realloc_r+0x5a>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7ff f868 	bl	80092b0 <_malloc_r>
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d0ed      	beq.n	800a1c2 <_realloc_r+0x1e>
 800a1e6:	42bc      	cmp	r4, r7
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	bf28      	it	cs
 800a1ee:	463a      	movcs	r2, r7
 800a1f0:	f7ff f827 	bl	8009242 <memcpy>
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	f7ff fc4a 	bl	8009a90 <_free_r>
 800a1fc:	e7e1      	b.n	800a1c2 <_realloc_r+0x1e>
 800a1fe:	4635      	mov	r5, r6
 800a200:	e7df      	b.n	800a1c2 <_realloc_r+0x1e>

0800a202 <_malloc_usable_size_r>:
 800a202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a206:	1f18      	subs	r0, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bfbc      	itt	lt
 800a20c:	580b      	ldrlt	r3, [r1, r0]
 800a20e:	18c0      	addlt	r0, r0, r3
 800a210:	4770      	bx	lr
	...

0800a214 <_init>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr

0800a220 <_fini>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	bf00      	nop
 800a224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a226:	bc08      	pop	{r3}
 800a228:	469e      	mov	lr, r3
 800a22a:	4770      	bx	lr
