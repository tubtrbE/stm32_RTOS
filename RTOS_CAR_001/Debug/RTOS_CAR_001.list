
RTOS_CAR_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009858  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08009a08  08009a08  00019a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d8c  08009d8c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d94  08009d94  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d94  08009d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00004410  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044a0  200044a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fba6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004898  00000000  00000000  0003fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00044500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001788  00000000  00000000  00045e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ad5  00000000  00000000  000475f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002014d  00000000  00000000  000700c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed65b  00000000  00000000  00090212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d86d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ea8  00000000  00000000  0017d8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080099f0 	.word	0x080099f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080099f0 	.word	0x080099f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__io_putchar>:
osMessageQId UartQueueHandle;
osSemaphoreId UartSemaHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
int __io_putchar(int ch) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 800050c:	1d39      	adds	r1, r7, #4
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <__io_putchar+0x20>)
 8000516:	f005 fafe 	bl	8005b16 <HAL_UART_Transmit>
    return ch;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200006b0 	.word	0x200006b0

08000528 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000fc 	.word	0x200000fc
 8000558:	200001b0 	.word	0x200001b0

0800055c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  Motor_Init();
 8000562:	f001 f97f 	bl	8001864 <Motor_Init>
	  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000566:	2100      	movs	r1, #0
 8000568:	482b      	ldr	r0, [pc, #172]	; (8000618 <MX_FREERTOS_Init+0xbc>)
 800056a:	f004 f905 	bl	8004778 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	482a      	ldr	r0, [pc, #168]	; (800061c <MX_FREERTOS_Init+0xc0>)
 8000572:	f004 f901 	bl	8004778 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <MX_FREERTOS_Init+0xc4>)
 800057a:	f004 f8fd 	bl	8004778 <HAL_TIM_IC_Start_IT>

	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	4828      	ldr	r0, [pc, #160]	; (8000624 <MX_FREERTOS_Init+0xc8>)
 8000582:	f004 f8f9 	bl	8004778 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8000586:	2104      	movs	r1, #4
 8000588:	4826      	ldr	r0, [pc, #152]	; (8000624 <MX_FREERTOS_Init+0xc8>)
 800058a:	f004 f8f5 	bl	8004778 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_3);
 800058e:	2108      	movs	r1, #8
 8000590:	4824      	ldr	r0, [pc, #144]	; (8000624 <MX_FREERTOS_Init+0xc8>)
 8000592:	f004 f8f1 	bl	8004778 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8000596:	210c      	movs	r1, #12
 8000598:	4822      	ldr	r0, [pc, #136]	; (8000624 <MX_FREERTOS_Init+0xc8>)
 800059a:	f004 f8ed 	bl	8004778 <HAL_TIM_IC_Start_IT>

	  HAL_UART_Receive_IT(&huart3, &rx, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	4921      	ldr	r1, [pc, #132]	; (8000628 <MX_FREERTOS_Init+0xcc>)
 80005a2:	4822      	ldr	r0, [pc, #136]	; (800062c <MX_FREERTOS_Init+0xd0>)
 80005a4:	f005 fb49 	bl	8005c3a <HAL_UART_Receive_IT>
	  HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4921      	ldr	r1, [pc, #132]	; (8000630 <MX_FREERTOS_Init+0xd4>)
 80005ac:	4821      	ldr	r0, [pc, #132]	; (8000634 <MX_FREERTOS_Init+0xd8>)
 80005ae:	f005 fb44 	bl	8005c3a <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of UartSema */
  osSemaphoreDef(UartSema);
 80005b2:	2300      	movs	r3, #0
 80005b4:	633b      	str	r3, [r7, #48]	; 0x30
 80005b6:	2300      	movs	r3, #0
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  UartSemaHandle = osSemaphoreCreate(osSemaphore(UartSema), 1);
 80005ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f006 fb52 	bl	8006c6a <osSemaphoreCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <MX_FREERTOS_Init+0xdc>)
 80005ca:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UartQueue */
  osMessageQDef(UartQueue, 8, uint8_t);
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_FREERTOS_Init+0xe0>)
 80005ce:	f107 0420 	add.w	r4, r7, #32
 80005d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UartQueueHandle = osMessageCreate(osMessageQ(UartQueue), NULL);
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 fb75 	bl	8006cce <osMessageCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <MX_FREERTOS_Init+0xe4>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_FREERTOS_Init+0xe8>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f006 fad2 	bl	8006baa <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_FREERTOS_Init+0xec>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ThreadInit ();
 800060c:	f000 fa04 	bl	8000a18 <ThreadInit>
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3738      	adds	r7, #56	; 0x38
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	200004c0 	.word	0x200004c0
 800061c:	20000550 	.word	0x20000550
 8000620:	20000598 	.word	0x20000598
 8000624:	200005e0 	.word	0x200005e0
 8000628:	200000d0 	.word	0x200000d0
 800062c:	200006b0 	.word	0x200006b0
 8000630:	200000ec 	.word	0x200000ec
 8000634:	200006f4 	.word	0x200006f4
 8000638:	200000f8 	.word	0x200000f8
 800063c:	08009a74 	.word	0x08009a74
 8000640:	200000f4 	.word	0x200000f4
 8000644:	08009a84 	.word	0x08009a84
 8000648:	200000f0 	.word	0x200000f0

0800064c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    BaseType_t xHigherPriorityWasTaken = pdFALSE;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
    BaseType_t ret = pdTRUE;      // if semaphore is ret you know that isr give you queue
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
    signed char cByteRxed = '\0'; // this value is what you receive
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	for (;;) {

		/* Block until the next char is available. */
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <StartDefaultTask+0x88>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f107 0210 	add.w	r2, r7, #16
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 ff6c 	bl	8007548 <xQueueReceiveFromISR>
 8000670:	6178      	str	r0, [r7, #20]
		if (ret == pdPASS) {
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d129      	bne.n	80006cc <StartDefaultTask+0x80>
			/* Handle character in QUEUE */
			ret = xQueueReceiveFromISR(UartQueueHandle, &cByteRxed,
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <StartDefaultTask+0x8c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f107 0210 	add.w	r2, r7, #16
 8000680:	f107 010f 	add.w	r1, r7, #15
 8000684:	4618      	mov	r0, r3
 8000686:	f006 ff5f 	bl	8007548 <xQueueReceiveFromISR>
 800068a:	6178      	str	r0, [r7, #20]
					&xHigherPriorityWasTaken);
			if (ret) {
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01c      	beq.n	80006cc <StartDefaultTask+0x80>
				// do something . . .
				if (cByteRxed - '0' < 7) {
 8000692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000696:	2b36      	cmp	r3, #54	; 0x36
 8000698:	dc05      	bgt.n	80006a6 <StartDefaultTask+0x5a>
					Move(cByteRxed - '0');
 800069a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069e:	3b30      	subs	r3, #48	; 0x30
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fe83 	bl	80013ac <Move>
				}

				if (cByteRxed == 'w') {
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	2b77      	cmp	r3, #119	; 0x77
 80006ac:	d105      	bne.n	80006ba <StartDefaultTask+0x6e>
					speed += 10;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <StartDefaultTask+0x90>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	330a      	adds	r3, #10
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <StartDefaultTask+0x90>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	e008      	b.n	80006cc <StartDefaultTask+0x80>
				}
				else if (cByteRxed == 's') {
 80006ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006be:	2b73      	cmp	r3, #115	; 0x73
 80006c0:	d104      	bne.n	80006cc <StartDefaultTask+0x80>
					speed -= 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <StartDefaultTask+0x90>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b0a      	subs	r3, #10
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <StartDefaultTask+0x90>)
 80006ca:	6013      	str	r3, [r2, #0]
				}
			}
		}
		osDelay(50);
 80006cc:	2032      	movs	r0, #50	; 0x32
 80006ce:	f006 fab8 	bl	8006c42 <osDelay>
		ret = xSemaphoreTakeFromISR(UartSemaHandle, &xHigherPriorityWasTaken);
 80006d2:	e7c5      	b.n	8000660 <StartDefaultTask+0x14>
 80006d4:	200000f8 	.word	0x200000f8
 80006d8:	200000f4 	.word	0x200000f4
 80006dc:	20000018 	.word	0x20000018

080006e0 <odometryTask>:
 * Distance[2], Difference[2] = Right
 * */

// Task ---------------------------------------------------------------------------------------
void odometryTask (void const * argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	for (;;) {
//		uint32_t temp_count[4];

		// check the safety maximun speed
		// and add some Algorithms
		for(int i = 0; i < 4; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e036      	b.n	800075c <odometryTask+0x7c>
			temp_count[i] = odo_count[i];
 80006ee:	4a22      	ldr	r2, [pc, #136]	; (8000778 <odometryTask+0x98>)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f6:	4921      	ldr	r1, [pc, #132]	; (800077c <odometryTask+0x9c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			odo_count[i] = 0;
 80006fe:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <odometryTask+0x98>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2100      	movs	r1, #0
 8000704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(odo_flag[i] == 1) {
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <odometryTask+0xa0>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d120      	bne.n	8000756 <odometryTask+0x76>
				if (temp_count[i] < (speed/ratio) ) {
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <odometryTask+0x9c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <odometryTask+0xa4>)
 800071e:	6811      	ldr	r1, [r2, #0]
 8000720:	4a19      	ldr	r2, [pc, #100]	; (8000788 <odometryTask+0xa8>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	fb91 f2f2 	sdiv	r2, r1, r2
 8000728:	4293      	cmp	r3, r2
 800072a:	d204      	bcs.n	8000736 <odometryTask+0x56>
					odo_adjust(i, UP);
 800072c:	2100      	movs	r1, #0
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 fa90 	bl	8000c54 <odo_adjust>
 8000734:	e00f      	b.n	8000756 <odometryTask+0x76>
				}
				else if (temp_count[i] > (speed/ratio)) {
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <odometryTask+0x9c>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <odometryTask+0xa4>)
 8000740:	6811      	ldr	r1, [r2, #0]
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <odometryTask+0xa8>)
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	fb91 f2f2 	sdiv	r2, r1, r2
 800074a:	4293      	cmp	r3, r2
 800074c:	d903      	bls.n	8000756 <odometryTask+0x76>
					odo_adjust(i, DOWN);
 800074e:	2101      	movs	r1, #1
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fa7f 	bl	8000c54 <odo_adjust>
		for(int i = 0; i < 4; i++) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2b03      	cmp	r3, #3
 8000760:	ddc5      	ble.n	80006ee <odometryTask+0xe>
				}
			}

		}

		osDelay(time/ratio);
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <odometryTask+0xac>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <odometryTask+0xa8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	fb92 f3f3 	sdiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fa67 	bl	8006c42 <osDelay>
		for(int i = 0; i < 4; i++) {
 8000774:	e7b8      	b.n	80006e8 <odometryTask+0x8>
 8000776:	bf00      	nop
 8000778:	20000444 	.word	0x20000444
 800077c:	200000c0 	.word	0x200000c0
 8000780:	20000440 	.word	0x20000440
 8000784:	20000018 	.word	0x20000018
 8000788:	20000010 	.word	0x20000010
 800078c:	20000014 	.word	0x20000014

08000790 <CarLeftSide>:
	}
}

void CarLeftSide (void const * argument){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	for (;;) {

		for(int i = 0; i < 3; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e00c      	b.n	80007b8 <CarLeftSide+0x28>
			if(hcsr04_dis[i] < 400) {
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <CarLeftSide+0x38>)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007aa:	d202      	bcs.n	80007b2 <CarLeftSide+0x22>
				Move(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fdfd 	bl	80013ac <Move>
		for(int i = 0; i < 3; i++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	ddef      	ble.n	800079e <CarLeftSide+0xe>
			}
		}
		osDelay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f006 fa3f 	bl	8006c42 <osDelay>
		for(int i = 0; i < 3; i++) {
 80007c4:	e7e8      	b.n	8000798 <CarLeftSide+0x8>
 80007c6:	bf00      	nop
 80007c8:	200000b4 	.word	0x200000b4

080007cc <CarFrontSide>:
	}
}

void CarFrontSide (void const * argument){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 80007d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007d8:	f006 fa33 	bl	8006c42 <osDelay>
 80007dc:	e7fa      	b.n	80007d4 <CarFrontSide+0x8>

080007de <CarRightSide>:
	}
}
void CarRightSide (void const * argument){
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]

	for (;;) {

		osDelay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ea:	f006 fa2a 	bl	8006c42 <osDelay>
 80007ee:	e7fa      	b.n	80007e6 <CarRightSide+0x8>

080007f0 <CheckingUartReceive>:


// ISR Checking-------------------------------------------------------------------------------

void CheckingUartReceive (void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HAL_UART_Receive_IT(&huart3, &rx, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4906      	ldr	r1, [pc, #24]	; (8000814 <CheckingUartReceive+0x24>)
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <CheckingUartReceive+0x28>)
 80007fe:	f005 fa1c 	bl	8005c3a <HAL_UART_Receive_IT>
    	HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 8000802:	2201      	movs	r2, #1
 8000804:	4905      	ldr	r1, [pc, #20]	; (800081c <CheckingUartReceive+0x2c>)
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <CheckingUartReceive+0x30>)
 8000808:	f005 fa17 	bl	8005c3a <HAL_UART_Receive_IT>
    	osDelay(10);
 800080c:	200a      	movs	r0, #10
 800080e:	f006 fa18 	bl	8006c42 <osDelay>
    	HAL_UART_Receive_IT(&huart3, &rx, 1);
 8000812:	e7f1      	b.n	80007f8 <CheckingUartReceive+0x8>
 8000814:	200000d0 	.word	0x200000d0
 8000818:	200006b0 	.word	0x200006b0
 800081c:	200000ec 	.word	0x200000ec
 8000820:	200006f4 	.word	0x200006f4

08000824 <CheckingLeft>:
    }
}
void CheckingLeft (void const * argument) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 800082c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000830:	4903      	ldr	r1, [pc, #12]	; (8000840 <CheckingLeft+0x1c>)
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <CheckingLeft+0x20>)
 8000834:	f000 fb9e 	bl	8000f74 <HCSR04_Read>

    	osDelay(60);
 8000838:	203c      	movs	r0, #60	; 0x3c
 800083a:	f006 fa02 	bl	8006c42 <osDelay>
    	HCSR04_Read(&htim1, GPIOF, GPIO_PIN_13);
 800083e:	e7f5      	b.n	800082c <CheckingLeft+0x8>
 8000840:	40021400 	.word	0x40021400
 8000844:	200004c0 	.word	0x200004c0

08000848 <CheckingFront>:
    }
}
void CheckingFront (void const * argument) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 8000850:	2220      	movs	r2, #32
 8000852:	4904      	ldr	r1, [pc, #16]	; (8000864 <CheckingFront+0x1c>)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <CheckingFront+0x20>)
 8000856:	f000 fb8d 	bl	8000f74 <HCSR04_Read>
    	osDelay(60);
 800085a:	203c      	movs	r0, #60	; 0x3c
 800085c:	f006 f9f1 	bl	8006c42 <osDelay>
    	HCSR04_Read(&htim3, GPIOA, GPIO_PIN_5);
 8000860:	e7f6      	b.n	8000850 <CheckingFront+0x8>
 8000862:	bf00      	nop
 8000864:	40020000 	.word	0x40020000
 8000868:	20000550 	.word	0x20000550

0800086c <CheckingRight>:
    }
}
void CheckingRight (void const * argument) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    /* Infinite loop */
    for(;;)
    {
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000878:	4903      	ldr	r1, [pc, #12]	; (8000888 <CheckingRight+0x1c>)
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <CheckingRight+0x20>)
 800087c:	f000 fb7a 	bl	8000f74 <HCSR04_Read>
    	osDelay(60);
 8000880:	203c      	movs	r0, #60	; 0x3c
 8000882:	f006 f9de 	bl	8006c42 <osDelay>
    	HCSR04_Read(&htim4, GPIOD, GPIO_PIN_13);
 8000886:	e7f5      	b.n	8000874 <CheckingRight+0x8>
 8000888:	40020c00 	.word	0x40020c00
 800088c:	20000598 	.word	0x20000598

08000890 <HAL_UART_RxCpltCallback>:
    }
}

// CallBack Session
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	char *pErrStr = "ERR : QTx Fail!\r\n";
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_UART_RxCpltCallback+0x70>)
 800089a:	617b      	str	r3, [r7, #20]
	// typedef long BaseType_t;
	BaseType_t ret = pdTRUE;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
	//#define portBASE_TYPE	long
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART6) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_UART_RxCpltCallback+0x74>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d124      	bne.n	80008f8 <HAL_UART_RxCpltCallback+0x68>

		ret = xQueueSendFromISR(UartQueueHandle, &rx_data[0], &xHigherPriorityTaskWoken );
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_UART_RxCpltCallback+0x78>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	2300      	movs	r3, #0
 80008b8:	4914      	ldr	r1, [pc, #80]	; (800090c <HAL_UART_RxCpltCallback+0x7c>)
 80008ba:	f006 fd1d 	bl	80072f8 <xQueueGenericSendFromISR>
 80008be:	6138      	str	r0, [r7, #16]
		if(ret) {
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d008      	beq.n	80008d8 <HAL_UART_RxCpltCallback+0x48>
			xSemaphoreGiveFromISR( UartSemaHandle, &xHigherPriorityTaskWoken );
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_UART_RxCpltCallback+0x80>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f107 020c 	add.w	r2, r7, #12
 80008ce:	4611      	mov	r1, r2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f006 fdac 	bl	800742e <xQueueGiveFromISR>
 80008d6:	e00a      	b.n	80008ee <HAL_UART_RxCpltCallback+0x5e>
		}
		else {
			HAL_UART_Transmit(&huart6, (uint8_t*)pErrStr, strlen(pErrStr), 0xffff);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	f7ff fc89 	bl	80001f0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e6:	6979      	ldr	r1, [r7, #20]
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <HAL_UART_RxCpltCallback+0x84>)
 80008ea:	f005 f914 	bl	8005b16 <HAL_UART_Transmit>
		}

		HAL_UART_Receive_IT(&huart6, &rx_data[0], 1);
 80008ee:	2201      	movs	r2, #1
 80008f0:	4906      	ldr	r1, [pc, #24]	; (800090c <HAL_UART_RxCpltCallback+0x7c>)
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <HAL_UART_RxCpltCallback+0x84>)
 80008f4:	f005 f9a1 	bl	8005c3a <HAL_UART_Receive_IT>


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	08009aa0 	.word	0x08009aa0
 8000904:	40011400 	.word	0x40011400
 8000908:	200000f4 	.word	0x200000f4
 800090c:	200000ec 	.word	0x200000ec
 8000910:	200000f8 	.word	0x200000f8
 8000914:	200006f4 	.word	0x200006f4

08000918 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	//Checking the left Distance
	if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a35      	ldr	r2, [pc, #212]	; (80009fc <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10a      	bne.n	8000940 <HAL_TIM_IC_CaptureCallback+0x28>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7f1b      	ldrb	r3, [r3, #28]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d106      	bne.n	8000940 <HAL_TIM_IC_CaptureCallback+0x28>
		{
			hcsr04_dis[0] = HC_SRO4_Dis(htim, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 fb41 	bl	8000fbc <HC_SRO4_Dis>
 800093a:	4603      	mov	r3, r0
 800093c:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800093e:	6013      	str	r3, [r2, #0]
		}
	}

	//Checking the Front Distance
	if (htim->Instance == TIM3) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10a      	bne.n	8000960 <HAL_TIM_IC_CaptureCallback+0x48>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7f1b      	ldrb	r3, [r3, #28]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d106      	bne.n	8000960 <HAL_TIM_IC_CaptureCallback+0x48>
		{
			hcsr04_dis[1] = HC_SRO4_Dis(htim, 1);
 8000952:	2101      	movs	r1, #1
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fb31 	bl	8000fbc <HC_SRO4_Dis>
 800095a:	4603      	mov	r3, r0
 800095c:	4a28      	ldr	r2, [pc, #160]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800095e:	6053      	str	r3, [r2, #4]
		}
	}

	//Checking the Right Distance
	if (htim->Instance == TIM4) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10a      	bne.n	8000980 <HAL_TIM_IC_CaptureCallback+0x68>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7f1b      	ldrb	r3, [r3, #28]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d106      	bne.n	8000980 <HAL_TIM_IC_CaptureCallback+0x68>
		{
			hcsr04_dis[2] = HC_SRO4_Dis(htim, 2);
 8000972:	2102      	movs	r1, #2
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 fb21 	bl	8000fbc <HC_SRO4_Dis>
 800097a:	4603      	mov	r3, r0
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800097e:	6093      	str	r3, [r2, #8]
		}
	}

	//using the general purpose timer because i will use checking the signal only
	if (htim->Instance == TIM8) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d133      	bne.n	80009f2 <HAL_TIM_IC_CaptureCallback+0xda>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7f1b      	ldrb	r3, [r3, #28]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d108      	bne.n	80009a4 <HAL_TIM_IC_CaptureCallback+0x8c>
			if (odo_flag[0] == 1) {
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d104      	bne.n	80009a4 <HAL_TIM_IC_CaptureCallback+0x8c>
				odo_count[0]++;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009a2:	6013      	str	r3, [r2, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7f1b      	ldrb	r3, [r3, #28]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d108      	bne.n	80009be <HAL_TIM_IC_CaptureCallback+0xa6>
			if (odo_flag[1] == 1) {
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d104      	bne.n	80009be <HAL_TIM_IC_CaptureCallback+0xa6>
				odo_count[1]++;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009bc:	6053      	str	r3, [r2, #4]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7f1b      	ldrb	r3, [r3, #28]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d108      	bne.n	80009d8 <HAL_TIM_IC_CaptureCallback+0xc0>
			if (odo_flag[2] == 1) {
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d104      	bne.n	80009d8 <HAL_TIM_IC_CaptureCallback+0xc0>
				odo_count[2]++;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009d6:	6093      	str	r3, [r2, #8]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7f1b      	ldrb	r3, [r3, #28]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d108      	bne.n	80009f2 <HAL_TIM_IC_CaptureCallback+0xda>
			if (odo_flag[3] == 1) {
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80009e2:	78db      	ldrb	r3, [r3, #3]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d104      	bne.n	80009f2 <HAL_TIM_IC_CaptureCallback+0xda>
				odo_count[3]++;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009f0:	60d3      	str	r3, [r2, #12]
			}
		}
	}
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40010000 	.word	0x40010000
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	40000400 	.word	0x40000400
 8000a08:	40000800 	.word	0x40000800
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	20000440 	.word	0x20000440
 8000a14:	20000444 	.word	0x20000444

08000a18 <ThreadInit>:

void ThreadInit () {
 8000a18:	b5b0      	push	{r4, r5, r7, lr}
 8000a1a:	b0c0      	sub	sp, #256	; 0x100
 8000a1c:	af00      	add	r7, sp, #0
	  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a1e:	4b73      	ldr	r3, [pc, #460]	; (8000bec <ThreadInit+0x1d4>)
 8000a20:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8000a24:	461d      	mov	r5, r3
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f006 f8b6 	bl	8006baa <osThreadCreate>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4a6b      	ldr	r2, [pc, #428]	; (8000bf0 <ThreadInit+0x1d8>)
 8000a42:	6013      	str	r3, [r2, #0]


	  osThreadDef(UartCheck, CheckingUartReceive, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <ThreadInit+0x1dc>)
 8000a46:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000a4a:	461d      	mov	r5, r3
 8000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task1Handle = osThreadCreate(osThread(UartCheck), NULL);
 8000a58:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f006 f8a3 	bl	8006baa <osThreadCreate>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a64      	ldr	r2, [pc, #400]	; (8000bf8 <ThreadInit+0x1e0>)
 8000a68:	6013      	str	r3, [r2, #0]
	  if(!Task1Handle)
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <ThreadInit+0x1e0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <ThreadInit+0x60>
		  printf("ERR : Console Task Creation Failure !\r\n");
 8000a72:	4862      	ldr	r0, [pc, #392]	; (8000bfc <ThreadInit+0x1e4>)
 8000a74:	f008 fc4e 	bl	8009314 <puts>

	  osThreadDef(UartTask, odometryTask, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000a78:	4b61      	ldr	r3, [pc, #388]	; (8000c00 <ThreadInit+0x1e8>)
 8000a7a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000a7e:	461d      	mov	r5, r3
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Task2Handle = osThreadCreate(osThread(UartTask), NULL);
 8000a8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 f889 	bl	8006baa <osThreadCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a5a      	ldr	r2, [pc, #360]	; (8000c04 <ThreadInit+0x1ec>)
 8000a9c:	6013      	str	r3, [r2, #0]

	  if(!Task2Handle)
 8000a9e:	4b59      	ldr	r3, [pc, #356]	; (8000c04 <ThreadInit+0x1ec>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <ThreadInit+0x94>
	     printf("ERR : CLI Task Creation Failure !\r\n");
 8000aa6:	4858      	ldr	r0, [pc, #352]	; (8000c08 <ThreadInit+0x1f0>)
 8000aa8:	f008 fc34 	bl	8009314 <puts>

	  // HC-SR04 LEFT -------------------------------------------------------------------------------------------------------
	  osThreadDef(LeftCheck, CheckingLeft, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000aac:	4b57      	ldr	r3, [pc, #348]	; (8000c0c <ThreadInit+0x1f4>)
 8000aae:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ab2:	461d      	mov	r5, r3
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Checking = osThreadCreate(osThread(LeftCheck), NULL);
 8000ac0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 f86f 	bl	8006baa <osThreadCreate>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a50      	ldr	r2, [pc, #320]	; (8000c10 <ThreadInit+0x1f8>)
 8000ad0:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Checking)
 8000ad2:	4b4f      	ldr	r3, [pc, #316]	; (8000c10 <ThreadInit+0x1f8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <ThreadInit+0xc8>
		  printf("ERR : HS_SR04_left_Checking Creation Failure !\r\n");
 8000ada:	484e      	ldr	r0, [pc, #312]	; (8000c14 <ThreadInit+0x1fc>)
 8000adc:	f008 fc1a 	bl	8009314 <puts>

	  osThreadDef(LeftTask, CarLeftSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <ThreadInit+0x200>)
 8000ae2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ae6:	461d      	mov	r5, r3
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Left_Handle = osThreadCreate(osThread(LeftTask), NULL);
 8000af4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 f855 	bl	8006baa <osThreadCreate>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <ThreadInit+0x204>)
 8000b04:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Left_Handle)
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <ThreadInit+0x204>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <ThreadInit+0xfc>
		  printf("ERR : HS_SR04_left_Handle Creation Failure !\r\n");
 8000b0e:	4844      	ldr	r0, [pc, #272]	; (8000c20 <ThreadInit+0x208>)
 8000b10:	f008 fc00 	bl	8009314 <puts>

	  // HC-SR04 FRONT -------------------------------------------------------------------------------------------------------
	  osThreadDef(FrontCheck, CheckingFront, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <ThreadInit+0x20c>)
 8000b16:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Checking = osThreadCreate(osThread(FrontCheck), NULL);
 8000b28:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f006 f83b 	bl	8006baa <osThreadCreate>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a3c      	ldr	r2, [pc, #240]	; (8000c28 <ThreadInit+0x210>)
 8000b38:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Checking)
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <ThreadInit+0x210>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <ThreadInit+0x130>
		  printf("ERR : HS_SR04_Front_Checking Creation Failure !\r\n");
 8000b42:	483a      	ldr	r0, [pc, #232]	; (8000c2c <ThreadInit+0x214>)
 8000b44:	f008 fbe6 	bl	8009314 <puts>

	  osThreadDef(FrontTask, CarFrontSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <ThreadInit+0x218>)
 8000b4a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Front_Handle = osThreadCreate(osThread(FrontTask), NULL);
 8000b5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f006 f821 	bl	8006baa <osThreadCreate>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <ThreadInit+0x21c>)
 8000b6c:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Front_Handle)
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <ThreadInit+0x21c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <ThreadInit+0x164>
		  printf("ERR : HS_SR04_Front_Handle Creation Failure !\r\n");
 8000b76:	4830      	ldr	r0, [pc, #192]	; (8000c38 <ThreadInit+0x220>)
 8000b78:	f008 fbcc 	bl	8009314 <puts>

	  // HC-SR04 RIGHT -------------------------------------------------------------------------------------------------------
	  osThreadDef(RightCheck, CheckingRight, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <ThreadInit+0x224>)
 8000b7e:	f107 0420 	add.w	r4, r7, #32
 8000b82:	461d      	mov	r5, r3
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Checking = osThreadCreate(osThread(RightCheck), NULL);
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 f807 	bl	8006baa <osThreadCreate>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <ThreadInit+0x228>)
 8000ba0:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Checking)
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <ThreadInit+0x228>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <ThreadInit+0x198>
		  printf("ERR : HS_SR04_Right_Checking Creation Failure !\r\n");
 8000baa:	4826      	ldr	r0, [pc, #152]	; (8000c44 <ThreadInit+0x22c>)
 8000bac:	f008 fbb2 	bl	8009314 <puts>

	  osThreadDef(RightTask, CarRightSide, osPriorityNormal, 0,configMINIMAL_STACK_SIZE*1);
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <ThreadInit+0x230>)
 8000bb2:	1d3c      	adds	r4, r7, #4
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  HS_SR04_Right_Handle = osThreadCreate(osThread(RightTask), NULL);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 ffef 	bl	8006baa <osThreadCreate>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <ThreadInit+0x234>)
 8000bd0:	6013      	str	r3, [r2, #0]
	  if(!HS_SR04_Right_Handle)
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <ThreadInit+0x234>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <ThreadInit+0x1c8>
		  printf("ERR : HS_SR04_Right_Handle Creation Failure !\r\n");
 8000bda:	481d      	ldr	r0, [pc, #116]	; (8000c50 <ThreadInit+0x238>)
 8000bdc:	f008 fb9a 	bl	8009314 <puts>
}
 8000be0:	bf00      	nop
 8000be2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	08009a84 	.word	0x08009a84
 8000bf0:	200000f0 	.word	0x200000f0
 8000bf4:	08009c28 	.word	0x08009c28
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	08009ab4 	.word	0x08009ab4
 8000c00:	08009c44 	.word	0x08009c44
 8000c04:	200000b0 	.word	0x200000b0
 8000c08:	08009adc 	.word	0x08009adc
 8000c0c:	08009c60 	.word	0x08009c60
 8000c10:	200000d4 	.word	0x200000d4
 8000c14:	08009b00 	.word	0x08009b00
 8000c18:	08009c7c 	.word	0x08009c7c
 8000c1c:	200000e0 	.word	0x200000e0
 8000c20:	08009b30 	.word	0x08009b30
 8000c24:	08009c98 	.word	0x08009c98
 8000c28:	200000d8 	.word	0x200000d8
 8000c2c:	08009b60 	.word	0x08009b60
 8000c30:	08009cb4 	.word	0x08009cb4
 8000c34:	200000e4 	.word	0x200000e4
 8000c38:	08009b94 	.word	0x08009b94
 8000c3c:	08009cd0 	.word	0x08009cd0
 8000c40:	200000dc 	.word	0x200000dc
 8000c44:	08009bc4 	.word	0x08009bc4
 8000c48:	08009cec 	.word	0x08009cec
 8000c4c:	200000e8 	.word	0x200000e8
 8000c50:	08009bf8 	.word	0x08009bf8

08000c54 <odo_adjust>:



//Func
int odo_adjust (int odo_num, ODO_STAT odo_status) {
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]

	// safety speed
	for(int i = 0; i < 4; i++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e010      	b.n	8000c88 <odo_adjust+0x34>
		if (pwm_val[i] > 950) {
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <odo_adjust+0x128>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d905      	bls.n	8000c82 <odo_adjust+0x2e>
			pwm_val[i] = 950;
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <odo_adjust+0x128>)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 4; i++) {
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	ddeb      	ble.n	8000c66 <odo_adjust+0x12>
		}
	}

	if (odo_num == 0 && odo_status == UP) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <odo_adjust+0x52>
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d105      	bne.n	8000ca6 <odo_adjust+0x52>
		pwm_val[0] += 5;
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <odo_adjust+0x128>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3305      	adds	r3, #5
 8000ca0:	4a36      	ldr	r2, [pc, #216]	; (8000d7c <odo_adjust+0x128>)
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e00a      	b.n	8000cbc <odo_adjust+0x68>
	}
	else if (odo_num == 0 && odo_status == DOWN) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d107      	bne.n	8000cbc <odo_adjust+0x68>
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d104      	bne.n	8000cbc <odo_adjust+0x68>
		pwm_val[0] -= 5;
 8000cb2:	4b32      	ldr	r3, [pc, #200]	; (8000d7c <odo_adjust+0x128>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3b05      	subs	r3, #5
 8000cb8:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <odo_adjust+0x128>)
 8000cba:	6013      	str	r3, [r2, #0]
	}
//---------------------------------------------------------------------
	if (odo_num == 1 && odo_status == UP) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <odo_adjust+0x80>
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <odo_adjust+0x80>
		pwm_val[1] += 5;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <odo_adjust+0x128>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	3305      	adds	r3, #5
 8000cce:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <odo_adjust+0x128>)
 8000cd0:	6053      	str	r3, [r2, #4]
 8000cd2:	e00a      	b.n	8000cea <odo_adjust+0x96>
	}
	else if (odo_num == 1 && odo_status == DOWN) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <odo_adjust+0x96>
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d104      	bne.n	8000cea <odo_adjust+0x96>
		pwm_val[1] -= 5;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <odo_adjust+0x128>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	3b05      	subs	r3, #5
 8000ce6:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <odo_adjust+0x128>)
 8000ce8:	6053      	str	r3, [r2, #4]
	}
//---------------------------------------------------------------------
	if (odo_num == 2 && odo_status == UP) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d108      	bne.n	8000d02 <odo_adjust+0xae>
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <odo_adjust+0xae>
		pwm_val[2] += 5;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <odo_adjust+0x128>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	3305      	adds	r3, #5
 8000cfc:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <odo_adjust+0x128>)
 8000cfe:	6093      	str	r3, [r2, #8]
 8000d00:	e00a      	b.n	8000d18 <odo_adjust+0xc4>
	}
	else if (odo_num == 2 && odo_status == DOWN) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d107      	bne.n	8000d18 <odo_adjust+0xc4>
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <odo_adjust+0xc4>
		pwm_val[2] -= 5;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <odo_adjust+0x128>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	3b05      	subs	r3, #5
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <odo_adjust+0x128>)
 8000d16:	6093      	str	r3, [r2, #8]
	}
//---------------------------------------------------------------------
	if (odo_num == 3 && odo_status == UP) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d108      	bne.n	8000d30 <odo_adjust+0xdc>
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <odo_adjust+0xdc>
		pwm_val[3] += 5;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <odo_adjust+0x128>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	3305      	adds	r3, #5
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <odo_adjust+0x128>)
 8000d2c:	60d3      	str	r3, [r2, #12]
 8000d2e:	e00a      	b.n	8000d46 <odo_adjust+0xf2>
	}
	else if (odo_num == 3 && odo_status == DOWN) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d107      	bne.n	8000d46 <odo_adjust+0xf2>
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d104      	bne.n	8000d46 <odo_adjust+0xf2>
		pwm_val[3] -= 5;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <odo_adjust+0x128>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	3b05      	subs	r3, #5
 8000d42:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <odo_adjust+0x128>)
 8000d44:	60d3      	str	r3, [r2, #12]
	}
//---------------------------------------------------------------------

	TIM2->CCR4 = pwm_val[0];		//odo_count[0]
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <odo_adjust+0x128>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CCR3 = pwm_val[1];		//odo_count[1]
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <odo_adjust+0x128>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM2->CCR1 = pwm_val[2];		//odo_count[2]
 8000d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <odo_adjust+0x128>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = pwm_val[3];		//odo_count[3]
 8000d64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <odo_adjust+0x128>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	6393      	str	r3, [r2, #56]	; 0x38

	return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	20000000 	.word	0x20000000

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	4b64      	ldr	r3, [pc, #400]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a63      	ldr	r2, [pc, #396]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b61      	ldr	r3, [pc, #388]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a5c      	ldr	r2, [pc, #368]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0320 	and.w	r3, r3, #32
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <MX_GPIO_Init+0x1ac>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 510e 	mov.w	r1, #9088	; 0x2380
 8000e60:	4833      	ldr	r0, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x1b0>)
 8000e62:	f002 f86f 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4832      	ldr	r0, [pc, #200]	; (8000f34 <MX_GPIO_Init+0x1b4>)
 8000e6c:	f002 f86a 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e76:	4830      	ldr	r0, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x1b8>)
 8000e78:	f002 f864 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	482e      	ldr	r0, [pc, #184]	; (8000f3c <MX_GPIO_Init+0x1bc>)
 8000e82:	f002 f85f 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_GPIO_Init+0x1c0>)
 8000e8e:	f002 f859 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF8 PF9 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000e92:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <MX_GPIO_Init+0x1b0>)
 8000eac:	f001 fe9e 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481b      	ldr	r0, [pc, #108]	; (8000f34 <MX_GPIO_Init+0x1b4>)
 8000ec8:	f001 fe90 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000ecc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x1b8>)
 8000ee6:	f001 fe81 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	480e      	ldr	r0, [pc, #56]	; (8000f3c <MX_GPIO_Init+0x1bc>)
 8000f02:	f001 fe73 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <MX_GPIO_Init+0x1c0>)
 8000f20:	f001 fe64 	bl	8002bec <HAL_GPIO_Init>

}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <HCSR04_Delay>:
uint32_t Difference[3] = {0};
int Is_First_Captured[3] = {0};
float refClock = TIMCLOCK/(PRESCALAR);

void HCSR04_Delay (uint16_t time, TIM_HandleTypeDef *htim)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (htim) < time);
 8000f58:	bf00      	nop
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3f9      	bcc.n	8000f5a <HCSR04_Delay+0x16>

}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HCSR04_Read>:

void HCSR04_Read (TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);	// pull the TRIG pin HIGH
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f001 ffdb 	bl	8002f44 <HAL_GPIO_WritePin>
	HCSR04_Delay(10, htim);  // wait for 10 us
 8000f8e:	68f9      	ldr	r1, [r7, #12]
 8000f90:	200a      	movs	r0, #10
 8000f92:	f7ff ffd7 	bl	8000f44 <HCSR04_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);  // pull the TRIG pin low
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	68b8      	ldr	r0, [r7, #8]
 8000f9e:	f001 ffd1 	bl	8002f44 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1); // enable Interrupt
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0202 	orr.w	r2, r2, #2
 8000fb0:	60da      	str	r2, [r3, #12]
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HC_SRO4_Dis>:


// calculate the distance of HC_SR04
uint32_t HC_SRO4_Dis(TIM_HandleTypeDef *htim, int num) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]

	if (Is_First_Captured[num] == 0) // if the first rising edge is not captured
 8000fc6:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HC_SRO4_Dis+0x120>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d117      	bne.n	8001002 <HC_SRO4_Dis+0x46>
	{
		Is_First_Captured[num] = 1;  // set the first captured as true
 8000fd2:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HC_SRO4_Dis+0x120>)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		IC_Val1[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fdc:	2100      	movs	r1, #0
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f004 f820 	bl	8005024 <HAL_TIM_ReadCapturedValue>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	493e      	ldr	r1, [pc, #248]	; (80010e0 <HC_SRO4_Dis+0x124>)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		IC_Val1[num] = htim->Instance->CNT; // read the first value
		IC_Val2[num] = 0;
 8000fee:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <HC_SRO4_Dis+0x128>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
		return Distance[num];
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <HC_SRO4_Dis+0x12c>)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	e068      	b.n	80010d4 <HC_SRO4_Dis+0x118>
	}

	else   // If the first rising edge is captured, now we will capture the second edge
	{
		IC_Val2[num] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001002:	2100      	movs	r1, #0
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 f80d 	bl	8005024 <HAL_TIM_ReadCapturedValue>
 800100a:	4602      	mov	r2, r0
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HC_SRO4_Dis+0x128>)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//IC_Val2[num] = htim->Instance->CNT;

		if (IC_Val2[num] > IC_Val1[num])
 8001014:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <HC_SRO4_Dis+0x128>)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101c:	4930      	ldr	r1, [pc, #192]	; (80010e0 <HC_SRO4_Dis+0x124>)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	d90d      	bls.n	8001044 <HC_SRO4_Dis+0x88>
		{
			Difference[num] = IC_Val2[num]-IC_Val1[num];
 8001028:	4a2e      	ldr	r2, [pc, #184]	; (80010e4 <HC_SRO4_Dis+0x128>)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001030:	492b      	ldr	r1, [pc, #172]	; (80010e0 <HC_SRO4_Dis+0x124>)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	492c      	ldr	r1, [pc, #176]	; (80010ec <HC_SRO4_Dis+0x130>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001042:	e019      	b.n	8001078 <HC_SRO4_Dis+0xbc>
		}

		else if (IC_Val1[num] > IC_Val2[num])
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HC_SRO4_Dis+0x124>)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800104c:	4925      	ldr	r1, [pc, #148]	; (80010e4 <HC_SRO4_Dis+0x128>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001054:	429a      	cmp	r2, r3
 8001056:	d90f      	bls.n	8001078 <HC_SRO4_Dis+0xbc>
		{

			//TIM 1,3,4 is 16bit so overflow is occured when the cnt value is 0xffff
			Difference[num] = (0xffff + IC_Val2[num]) - IC_Val1[num];
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HC_SRO4_Dis+0x128>)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001060:	491f      	ldr	r1, [pc, #124]	; (80010e0 <HC_SRO4_Dis+0x124>)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800106e:	33ff      	adds	r3, #255	; 0xff
 8001070:	491e      	ldr	r1, [pc, #120]	; (80010ec <HC_SRO4_Dis+0x130>)
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		}

//		frequency[num] = refClock/Difference[num];
		Distance[num] = Difference[num]*340/2000;
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <HC_SRO4_Dis+0x130>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HC_SRO4_Dis+0x134>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	09da      	lsrs	r2, r3, #7
 8001090:	4915      	ldr	r1, [pc, #84]	; (80010e8 <HC_SRO4_Dis+0x12c>)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Distance[num] > 500) {
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HC_SRO4_Dis+0x12c>)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010a4:	d905      	bls.n	80010b2 <HC_SRO4_Dis+0xf6>
			Distance[num] = 500;
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HC_SRO4_Dis+0x12c>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//__HAL_TIM_SET_COUNTER(&htim3, 0);  // reset the counter
//		htim->Instance->CNT = 0;

//		__HAL_TIM_SET_CAPTUREPOLARITY(htim, htim->Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		Is_First_Captured[num] = 0; // set it back to false
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HC_SRO4_Dis+0x120>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2100      	movs	r1, #0
 80010b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//htim is address
		__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0202 	bic.w	r2, r2, #2
 80010ca:	60da      	str	r2, [r3, #12]

		return Distance[num];
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HC_SRO4_Dis+0x12c>)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}

	return Distance[num];
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003e0 	.word	0x200003e0
 80010e0:	200003b0 	.word	0x200003b0
 80010e4:	200003bc 	.word	0x200003bc
 80010e8:	200003c8 	.word	0x200003c8
 80010ec:	200003d4 	.word	0x200003d4
 80010f0:	10624dd3 	.word	0x10624dd3

080010f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_I2C1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_I2C1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_I2C1_Init+0x74>)
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <MX_I2C1_Init+0x7c>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_I2C1_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_I2C1_Init+0x74>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_I2C1_Init+0x74>)
 8001132:	f001 ff21 	bl	8002f78 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f930 	bl	80013a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_I2C1_Init+0x74>)
 8001144:	f002 f85c 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800114e:	f000 f927 	bl	80013a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_I2C1_Init+0x74>)
 8001156:	f002 f88f 	bl	8003278 <HAL_I2CEx_ConfigDigitalFilter>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001160:	f000 f91e 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003ec 	.word	0x200003ec
 800116c:	40005400 	.word	0x40005400
 8001170:	000186a0 	.word	0x000186a0

08001174 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_I2C_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12c      	bne.n	80011f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_I2C_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_I2C_MspInit+0x88>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_I2C_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c4:	2304      	movs	r3, #4
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_I2C_MspInit+0x8c>)
 80011d0:	f001 fd0c 	bl	8002bec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_I2C_MspInit+0x88>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_I2C_MspInit+0x88>)
 80011de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_I2C_MspInit+0x88>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40005400 	.word	0x40005400
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020400 	.word	0x40020400

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001208:	f001 fb3a 	bl	8002880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120c:	f000 f820 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001210:	f7ff fdb6 	bl	8000d80 <MX_GPIO_Init>
  MX_RTC_Init();
 8001214:	f000 fb42 	bl	800189c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001218:	f001 f968 	bl	80024ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800121c:	f001 f990 	bl	8002540 <MX_USART3_UART_Init>
  MX_UART7_Init();
 8001220:	f001 f93a 	bl	8002498 <MX_UART7_Init>
  MX_I2C1_Init();
 8001224:	f7ff ff66 	bl	80010f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001228:	f000 fdbc 	bl	8001da4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800122c:	f001 f9b2 	bl	8002594 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001230:	f000 fd44 	bl	8001cbc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001234:	f000 fe4c 	bl	8001ed0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001238:	f000 feba 	bl	8001fb0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800123c:	f000 ff28 	bl	8002090 <MX_TIM8_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001240:	f000 f878 	bl	8001334 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001244:	f7ff f98a 	bl	800055c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001248:	f005 fca8 	bl	8006b9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800124c:	e7fe      	b.n	800124c <main+0x48>
	...

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f007 ff4d 	bl	80090fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <SystemClock_Config+0xdc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <SystemClock_Config+0xdc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <SystemClock_Config+0xdc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <SystemClock_Config+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a25      	ldr	r2, [pc, #148]	; (8001330 <SystemClock_Config+0xe0>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <SystemClock_Config+0xe0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80012ac:	2306      	movs	r3, #6
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b8:	2310      	movs	r3, #16
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012bc:	2302      	movs	r3, #2
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c4:	2308      	movs	r3, #8
 80012c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012c8:	23b4      	movs	r3, #180	; 0xb4
 80012ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f85d 	bl	8003398 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012e4:	f000 f85c 	bl	80013a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012e8:	f002 f806 	bl	80032f8 <HAL_PWREx_EnableOverDrive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012f2:	f000 f855 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	230f      	movs	r3, #15
 80012f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001302:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2105      	movs	r1, #5
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fab7 	bl	8003888 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001320:	f000 f83e 	bl	80013a0 <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3750      	adds	r7, #80	; 0x50
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2105      	movs	r1, #5
 800133c:	2047      	movs	r0, #71	; 0x47
 800133e:	f001 fb99 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001342:	2047      	movs	r0, #71	; 0x47
 8001344:	f001 fbb2 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2105      	movs	r1, #5
 800134c:	201b      	movs	r0, #27
 800134e:	f001 fb91 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001352:	201b      	movs	r0, #27
 8001354:	f001 fbaa 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2105      	movs	r1, #5
 800135c:	201d      	movs	r0, #29
 800135e:	f001 fb89 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001362:	201d      	movs	r0, #29
 8001364:	f001 fba2 	bl	8002aac <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2105      	movs	r1, #5
 800136c:	201e      	movs	r0, #30
 800136e:	f001 fb81 	bl	8002a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001372:	201e      	movs	r0, #30
 8001374:	f001 fb9a 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138e:	f001 fa99 	bl	80028c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40000c00 	.word	0x40000c00

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <Move>:
#include "motor.h"

uint8_t odo_flag[4];
uint32_t odo_count[4];

void Move(int controlcmd){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

	switch(controlcmd){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	f200 80fe 	bhi.w	80015b8 <Move+0x20c>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <Move+0x18>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	0800156d 	.word	0x0800156d
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080014a7 	.word	0x080014a7
 80013d0:	08001423 	.word	0x08001423
 80013d4:	08001465 	.word	0x08001465
 80013d8:	080014e9 	.word	0x080014e9
 80013dc:	0800152b 	.word	0x0800152b
		case FORWARD:
			Forward();
 80013e0:	f000 f90a 	bl	80015f8 <Forward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4880      	ldr	r0, [pc, #512]	; (80015ec <Move+0x240>)
 80013ea:	f001 fdab 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	487e      	ldr	r0, [pc, #504]	; (80015ec <Move+0x240>)
 80013f4:	f001 fda6 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fe:	487b      	ldr	r0, [pc, #492]	; (80015ec <Move+0x240>)
 8001400:	f001 fda0 	bl	8002f44 <HAL_GPIO_WritePin>

			for(int i = 0; i < 4; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
 8001408:	e007      	b.n	800141a <Move+0x6e>
				odo_flag[i] = 1;
 800140a:	4a79      	ldr	r2, [pc, #484]	; (80015f0 <Move+0x244>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	4413      	add	r3, r2
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3301      	adds	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	2b03      	cmp	r3, #3
 800141e:	ddf4      	ble.n	800140a <Move+0x5e>
			}
			break;
 8001420:	e0e0      	b.n	80015e4 <Move+0x238>
		case BACKWARD:
			Backward();
 8001422:	f000 f919 	bl	8001658 <Backward>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2101      	movs	r1, #1
 800142a:	4870      	ldr	r0, [pc, #448]	; (80015ec <Move+0x240>)
 800142c:	f001 fd8a 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	486d      	ldr	r0, [pc, #436]	; (80015ec <Move+0x240>)
 8001436:	f001 fd85 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001440:	486a      	ldr	r0, [pc, #424]	; (80015ec <Move+0x240>)
 8001442:	f001 fd7f 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	e007      	b.n	800145c <Move+0xb0>
				odo_flag[i] = 1;
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <Move+0x244>)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	4413      	add	r3, r2
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	3301      	adds	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	2b03      	cmp	r3, #3
 8001460:	ddf4      	ble.n	800144c <Move+0xa0>
			}
			break;
 8001462:	e0bf      	b.n	80015e4 <Move+0x238>
		case LEFT:
			Left();
 8001464:	f000 f958 	bl	8001718 <Left>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	485f      	ldr	r0, [pc, #380]	; (80015ec <Move+0x240>)
 800146e:	f001 fd69 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	485d      	ldr	r0, [pc, #372]	; (80015ec <Move+0x240>)
 8001478:	f001 fd64 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	485a      	ldr	r0, [pc, #360]	; (80015ec <Move+0x240>)
 8001484:	f001 fd5e 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e007      	b.n	800149e <Move+0xf2>
				odo_flag[i] = 1;
 800148e:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <Move+0x244>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	ddf4      	ble.n	800148e <Move+0xe2>
			}
			break;
 80014a4:	e09e      	b.n	80015e4 <Move+0x238>
		case RIGHT:
			Right();
 80014a6:	f000 f907 	bl	80016b8 <Right>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2101      	movs	r1, #1
 80014ae:	484f      	ldr	r0, [pc, #316]	; (80015ec <Move+0x240>)
 80014b0:	f001 fd48 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	484c      	ldr	r0, [pc, #304]	; (80015ec <Move+0x240>)
 80014ba:	f001 fd43 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c4:	4849      	ldr	r0, [pc, #292]	; (80015ec <Move+0x240>)
 80014c6:	f001 fd3d 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e007      	b.n	80014e0 <Move+0x134>
				odo_flag[i] = 1;
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <Move+0x244>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4413      	add	r3, r2
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	ddf4      	ble.n	80014d0 <Move+0x124>
			}
			break;
 80014e6:	e07d      	b.n	80015e4 <Move+0x238>
		case CW:
			Cw();
 80014e8:	f000 f946 	bl	8001778 <Cw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	483e      	ldr	r0, [pc, #248]	; (80015ec <Move+0x240>)
 80014f2:	f001 fd27 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	483c      	ldr	r0, [pc, #240]	; (80015ec <Move+0x240>)
 80014fc:	f001 fd22 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001506:	4839      	ldr	r0, [pc, #228]	; (80015ec <Move+0x240>)
 8001508:	f001 fd1c 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e007      	b.n	8001522 <Move+0x176>
				odo_flag[i] = 1;
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <Move+0x244>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b03      	cmp	r3, #3
 8001526:	ddf4      	ble.n	8001512 <Move+0x166>
			}
			break;
 8001528:	e05c      	b.n	80015e4 <Move+0x238>
		case CCW:
			Ccw();
 800152a:	f000 f955 	bl	80017d8 <Ccw>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800152e:	2201      	movs	r2, #1
 8001530:	2101      	movs	r1, #1
 8001532:	482e      	ldr	r0, [pc, #184]	; (80015ec <Move+0x240>)
 8001534:	f001 fd06 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	482b      	ldr	r0, [pc, #172]	; (80015ec <Move+0x240>)
 800153e:	f001 fd01 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <Move+0x240>)
 800154a:	f001 fcfb 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	e007      	b.n	8001564 <Move+0x1b8>
				odo_flag[i] = 1;
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <Move+0x244>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4413      	add	r3, r2
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 4; i++) {
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	3301      	adds	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b03      	cmp	r3, #3
 8001568:	ddf4      	ble.n	8001554 <Move+0x1a8>
			}
			break;
 800156a:	e03b      	b.n	80015e4 <Move+0x238>
		case STOP:
			Stop();
 800156c:	f000 f964 	bl	8001838 <Stop>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	481d      	ldr	r0, [pc, #116]	; (80015ec <Move+0x240>)
 8001576:	f001 fce5 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <Move+0x240>)
 8001580:	f001 fce0 	bl	8002f44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <Move+0x240>)
 800158c:	f001 fcda 	bl	8002f44 <HAL_GPIO_WritePin>
			for(int i = 0; i < 4; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e00c      	b.n	80015b0 <Move+0x204>
				odo_flag[i] = 0;
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <Move+0x244>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <Move+0x248>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2100      	movs	r1, #0
 80015a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	ddef      	ble.n	8001596 <Move+0x1ea>
			}
			break;
 80015b6:	e015      	b.n	80015e4 <Move+0x238>
		default:
			Stop();
 80015b8:	f000 f93e 	bl	8001838 <Stop>
			for(int i = 0; i < 4; i++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e00c      	b.n	80015dc <Move+0x230>
				odo_flag[i] = 0;
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <Move+0x244>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
				odo_count[i] = 0;
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <Move+0x248>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2100      	movs	r1, #0
 80015d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < 4; i++) {
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3301      	adds	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	ddef      	ble.n	80015c2 <Move+0x216>
			}
			break;
 80015e2:	bf00      	nop
		}
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020400 	.word	0x40020400
 80015f0:	20000440 	.word	0x20000440
 80015f4:	20000444 	.word	0x20000444

080015f8 <Forward>:

void Forward()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET); // Motor1 - 오른쪽 아래
 80015fc:	2200      	movs	r2, #0
 80015fe:	2102      	movs	r1, #2
 8001600:	4812      	ldr	r0, [pc, #72]	; (800164c <Forward+0x54>)
 8001602:	f001 fc9f 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);   // Motor2 - 오른쪽 위
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <Forward+0x58>)
 800160e:	f001 fc99 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET); // Motor3 - 왼쪽 위
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <Forward+0x58>)
 8001618:	f001 fc94 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);   // Motor4 - 왼쪽 아래
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	480b      	ldr	r0, [pc, #44]	; (8001650 <Forward+0x58>)
 8001624:	f001 fc8e 	bl	8002f44 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001628:	2100      	movs	r1, #0
 800162a:	480a      	ldr	r0, [pc, #40]	; (8001654 <Forward+0x5c>)
 800162c:	f002 ff12 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001630:	2104      	movs	r1, #4
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <Forward+0x5c>)
 8001634:	f002 ff0e 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001638:	2108      	movs	r1, #8
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <Forward+0x5c>)
 800163c:	f002 ff0a 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001640:	210c      	movs	r1, #12
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <Forward+0x5c>)
 8001644:	f002 ff06 	bl	8004454 <HAL_TIM_PWM_Start>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021800 	.word	0x40021800
 8001650:	40021400 	.word	0x40021400
 8001654:	20000508 	.word	0x20000508

08001658 <Backward>:

void Backward()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2102      	movs	r1, #2
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <Backward+0x54>)
 8001662:	f001 fc6f 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <Backward+0x58>)
 800166e:	f001 fc69 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <Backward+0x58>)
 8001678:	f001 fc64 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <Backward+0x58>)
 8001684:	f001 fc5e 	bl	8002f44 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001688:	2100      	movs	r1, #0
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <Backward+0x5c>)
 800168c:	f002 fee2 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001690:	2104      	movs	r1, #4
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <Backward+0x5c>)
 8001694:	f002 fede 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001698:	2108      	movs	r1, #8
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <Backward+0x5c>)
 800169c:	f002 feda 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80016a0:	210c      	movs	r1, #12
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <Backward+0x5c>)
 80016a4:	f002 fed6 	bl	8004454 <HAL_TIM_PWM_Start>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021400 	.word	0x40021400
 80016b4:	20000508 	.word	0x20000508

080016b8 <Right>:

void Right()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2102      	movs	r1, #2
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <Right+0x54>)
 80016c2:	f001 fc3f 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <Right+0x58>)
 80016ce:	f001 fc39 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <Right+0x58>)
 80016d8:	f001 fc34 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <Right+0x58>)
 80016e4:	f001 fc2e 	bl	8002f44 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016e8:	2100      	movs	r1, #0
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <Right+0x5c>)
 80016ec:	f002 feb2 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016f0:	2104      	movs	r1, #4
 80016f2:	4808      	ldr	r0, [pc, #32]	; (8001714 <Right+0x5c>)
 80016f4:	f002 feae 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016f8:	2108      	movs	r1, #8
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <Right+0x5c>)
 80016fc:	f002 feaa 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001700:	210c      	movs	r1, #12
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <Right+0x5c>)
 8001704:	f002 fea6 	bl	8004454 <HAL_TIM_PWM_Start>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021800 	.word	0x40021800
 8001710:	40021400 	.word	0x40021400
 8001714:	20000508 	.word	0x20000508

08001718 <Left>:

void Left()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2102      	movs	r1, #2
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <Left+0x54>)
 8001722:	f001 fc0f 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172c:	4810      	ldr	r0, [pc, #64]	; (8001770 <Left+0x58>)
 800172e:	f001 fc09 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <Left+0x58>)
 8001738:	f001 fc04 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <Left+0x58>)
 8001744:	f001 fbfe 	bl	8002f44 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001748:	2100      	movs	r1, #0
 800174a:	480a      	ldr	r0, [pc, #40]	; (8001774 <Left+0x5c>)
 800174c:	f002 fe82 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001750:	2104      	movs	r1, #4
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <Left+0x5c>)
 8001754:	f002 fe7e 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001758:	2108      	movs	r1, #8
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <Left+0x5c>)
 800175c:	f002 fe7a 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001760:	210c      	movs	r1, #12
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <Left+0x5c>)
 8001764:	f002 fe76 	bl	8004454 <HAL_TIM_PWM_Start>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021800 	.word	0x40021800
 8001770:	40021400 	.word	0x40021400
 8001774:	20000508 	.word	0x20000508

08001778 <Cw>:

void Cw()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2102      	movs	r1, #2
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <Cw+0x54>)
 8001782:	f001 fbdf 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178c:	4810      	ldr	r0, [pc, #64]	; (80017d0 <Cw+0x58>)
 800178e:	f001 fbd9 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	480e      	ldr	r0, [pc, #56]	; (80017d0 <Cw+0x58>)
 8001798:	f001 fbd4 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <Cw+0x58>)
 80017a4:	f001 fbce 	bl	8002f44 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017a8:	2100      	movs	r1, #0
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <Cw+0x5c>)
 80017ac:	f002 fe52 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017b0:	2104      	movs	r1, #4
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <Cw+0x5c>)
 80017b4:	f002 fe4e 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80017b8:	2108      	movs	r1, #8
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <Cw+0x5c>)
 80017bc:	f002 fe4a 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80017c0:	210c      	movs	r1, #12
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <Cw+0x5c>)
 80017c4:	f002 fe46 	bl	8004454 <HAL_TIM_PWM_Start>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40021400 	.word	0x40021400
 80017d4:	20000508 	.word	0x20000508

080017d8 <Ccw>:

void Ccw()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2102      	movs	r1, #2
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <Ccw+0x54>)
 80017e2:	f001 fbaf 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <Ccw+0x58>)
 80017ee:	f001 fba9 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <Ccw+0x58>)
 80017f8:	f001 fba4 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <Ccw+0x58>)
 8001804:	f001 fb9e 	bl	8002f44 <HAL_GPIO_WritePin>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001808:	2100      	movs	r1, #0
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <Ccw+0x5c>)
 800180c:	f002 fe22 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001810:	2104      	movs	r1, #4
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <Ccw+0x5c>)
 8001814:	f002 fe1e 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001818:	2108      	movs	r1, #8
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <Ccw+0x5c>)
 800181c:	f002 fe1a 	bl	8004454 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001820:	210c      	movs	r1, #12
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <Ccw+0x5c>)
 8001824:	f002 fe16 	bl	8004454 <HAL_TIM_PWM_Start>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021800 	.word	0x40021800
 8001830:	40021400 	.word	0x40021400
 8001834:	20000508 	.word	0x20000508

08001838 <Stop>:

void Stop()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800183c:	2100      	movs	r1, #0
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <Stop+0x28>)
 8001840:	f002 fed0 	bl	80045e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001844:	2104      	movs	r1, #4
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <Stop+0x28>)
 8001848:	f002 fecc 	bl	80045e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800184c:	2108      	movs	r1, #8
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <Stop+0x28>)
 8001850:	f002 fec8 	bl	80045e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8001854:	210c      	movs	r1, #12
 8001856:	4802      	ldr	r0, [pc, #8]	; (8001860 <Stop+0x28>)
 8001858:	f002 fec4 	bl	80045e4 <HAL_TIM_PWM_Stop>


}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000508 	.word	0x20000508

08001864 <Motor_Init>:

void Motor_Init(){
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	TIM2->CCR1 = SPEED;
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = SPEED;
 8001872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001876:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800187a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = SPEED;
 800187c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001880:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001884:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = SPEED;
 8001886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_RTC_Init+0x44>)
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <MX_RTC_Init+0x48>)
 80018a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_RTC_Init+0x44>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_RTC_Init+0x44>)
 80018ae:	227f      	movs	r2, #127	; 0x7f
 80018b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_RTC_Init+0x44>)
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_RTC_Init+0x44>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_RTC_Init+0x44>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_RTC_Init+0x44>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_RTC_Init+0x44>)
 80018cc:	f002 fbae 	bl	800402c <HAL_RTC_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80018d6:	f7ff fd63 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000454 	.word	0x20000454
 80018e4:	40002800 	.word	0x40002800

080018e8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2230      	movs	r2, #48	; 0x30
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 fc00 	bl	80090fe <memset>
  if(rtcHandle->Instance==RTC)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <HAL_RTC_MspInit+0x4c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d111      	bne.n	800192c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001908:	2320      	movs	r3, #32
 800190a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f9c8 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001922:	f7ff fd3d 	bl	80013a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RTC_MspInit+0x50>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800192c:	bf00      	nop
 800192e:	3738      	adds	r7, #56	; 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40002800 	.word	0x40002800
 8001938:	42470e3c 	.word	0x42470e3c

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_MspInit+0x54>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_MspInit+0x54>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_MspInit+0x54>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_MspInit+0x54>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_MspInit+0x54>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_MspInit+0x54>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	210f      	movs	r1, #15
 800197e:	f06f 0001 	mvn.w	r0, #1
 8001982:	f001 f877 	bl	8002a74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2032      	movs	r0, #50	; 0x32
 80019aa:	f001 f863 	bl	8002a74 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019ae:	2032      	movs	r0, #50	; 0x32
 80019b0:	f001 f87c 	bl	8002aac <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_InitTick+0xa4>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_InitTick+0xa4>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_InitTick+0xa4>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d0:	f107 0210 	add.w	r2, r7, #16
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 f934 	bl	8003c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019e0:	f002 f90a 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80019e4:	4603      	mov	r3, r0
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_InitTick+0xa8>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3b01      	subs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_InitTick+0xac>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_InitTick+0xb0>)
 80019fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_InitTick+0xac>)
 8001a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a04:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_InitTick+0xac>)
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_InitTick+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_InitTick+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_InitTick+0xac>)
 8001a1a:	f002 fc01 	bl	8004220 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_InitTick+0xac>)
 8001a26:	f002 fc4b 	bl	80042c0 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	20000474 	.word	0x20000474
 8001a44:	40000c00 	.word	0x40000c00

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001a7a:	f002 ffa5 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004c0 	.word	0x200004c0

08001a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM1_CC_IRQHandler+0x10>)
 8001a8e:	f002 ff9b 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200004c0 	.word	0x200004c0

08001a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM3_IRQHandler+0x10>)
 8001aa2:	f002 ff91 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000550 	.word	0x20000550

08001ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM4_IRQHandler+0x10>)
 8001ab6:	f002 ff87 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000598 	.word	0x20000598

08001ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <USART2_IRQHandler+0x10>)
 8001aca:	f004 f8e7 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000066c 	.word	0x2000066c

08001ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USART3_IRQHandler+0x10>)
 8001ade:	f004 f8dd 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200006b0 	.word	0x200006b0

08001aec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001af2:	f002 ff69 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200005e0 	.word	0x200005e0

08001b00 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM8_CC_IRQHandler+0x10>)
 8001b06:	f002 ff5f 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200005e0 	.word	0x200005e0

08001b14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM5_IRQHandler+0x10>)
 8001b1a:	f002 ff55 	bl	80049c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000474 	.word	0x20000474

08001b28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <USART6_IRQHandler+0x10>)
 8001b2e:	f004 f8b5 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200006f4 	.word	0x200006f4

08001b3c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <UART7_IRQHandler+0x10>)
 8001b42:	f004 f8ab 	bl	8005c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000628 	.word	0x20000628

08001b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
	}

return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e009      	b.n	8001bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcad 	bl	8000504 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf1      	blt.n	8001b9c <_write+0x12>
	}
	return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_close>:

int _close(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f007 f91e 	bl	8008e9c <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20030000 	.word	0x20030000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	200004bc 	.word	0x200004bc
 8001c94:	200044a0 	.word	0x200044a0

08001c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0318 	add.w	r3, r7, #24
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001ce8:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <MX_TIM1_Init+0xe4>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001cee:	22b3      	movs	r2, #179	; 0xb3
 8001cf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d12:	4822      	ldr	r0, [pc, #136]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d14:	f002 fa84 	bl	8004220 <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001d1e:	f7ff fb3f 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d26:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481b      	ldr	r0, [pc, #108]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d30:	f003 f8b0 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d3a:	f7ff fb31 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001d3e:	4817      	ldr	r0, [pc, #92]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d40:	f002 fcc0 	bl	80046c4 <HAL_TIM_IC_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001d4a:	f7ff fb29 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480f      	ldr	r0, [pc, #60]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d5e:	f003 fdfd 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001d68:	f7ff fb1a 	bl	80013a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001d78:	2305      	movs	r3, #5
 8001d7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM1_Init+0xe0>)
 8001d84:	f002 ff28 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d8e:	f7ff fb07 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200004c0 	.word	0x200004c0
 8001da0:	40010000 	.word	0x40010000

08001da4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	f107 0320 	add.w	r3, r7, #32
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001dde:	2259      	movs	r2, #89	; 0x59
 8001de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001dea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df0:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dfc:	4833      	ldr	r0, [pc, #204]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001dfe:	f002 fa0f 	bl	8004220 <HAL_TIM_Base_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001e08:	f7ff faca 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e16:	4619      	mov	r1, r3
 8001e18:	482c      	ldr	r0, [pc, #176]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e1a:	f003 f83b 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001e24:	f7ff fabc 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e28:	4828      	ldr	r0, [pc, #160]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e2a:	f002 fab9 	bl	80043a0 <HAL_TIM_PWM_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001e34:	f7ff fab4 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e40:	f107 0320 	add.w	r3, r7, #32
 8001e44:	4619      	mov	r1, r3
 8001e46:	4821      	ldr	r0, [pc, #132]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e48:	f003 fd88 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e52:	f7ff faa5 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e56:	2370      	movs	r3, #112	; 0x70
 8001e58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4817      	ldr	r0, [pc, #92]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e6e:	f002 ff4f 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e78:	f7ff fa92 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4812      	ldr	r0, [pc, #72]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e84:	f002 ff44 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e8e:	f7ff fa87 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2208      	movs	r2, #8
 8001e96:	4619      	mov	r1, r3
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001e9a:	f002 ff39 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ea4:	f7ff fa7c 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001eb0:	f002 ff2e 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001eba:	f7ff fa71 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM2_Init+0x128>)
 8001ec0:	f000 fa92 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8001ec4:	bf00      	nop
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000508 	.word	0x20000508

08001ed0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <MX_TIM3_Init+0xdc>)
 8001efe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f02:	2259      	movs	r2, #89	; 0x59
 8001f04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f20:	4821      	ldr	r0, [pc, #132]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f22:	f002 f97d 	bl	8004220 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f7ff fa38 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0318 	add.w	r3, r7, #24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481a      	ldr	r0, [pc, #104]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f3e:	f002 ffa9 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f48:	f7ff fa2a 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f4c:	4816      	ldr	r0, [pc, #88]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f4e:	f002 fbb9 	bl	80046c4 <HAL_TIM_IC_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f58:	f7ff fa22 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f6c:	f003 fcf6 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001f76:	f7ff fa13 	bl	80013a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001f86:	2305      	movs	r3, #5
 8001f88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM3_Init+0xd8>)
 8001f92:	f002 fe21 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f9c:	f7ff fa00 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000550 	.word	0x20000550
 8001fac:	40000400 	.word	0x40000400

08001fb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0318 	add.w	r3, r7, #24
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <MX_TIM4_Init+0xdc>)
 8001fde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001fe2:	2259      	movs	r2, #89	; 0x59
 8001fe4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001fee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ff2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <MX_TIM4_Init+0xd8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002000:	4821      	ldr	r0, [pc, #132]	; (8002088 <MX_TIM4_Init+0xd8>)
 8002002:	f002 f90d 	bl	8004220 <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800200c:	f7ff f9c8 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002016:	f107 0318 	add.w	r3, r7, #24
 800201a:	4619      	mov	r1, r3
 800201c:	481a      	ldr	r0, [pc, #104]	; (8002088 <MX_TIM4_Init+0xd8>)
 800201e:	f002 ff39 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002028:	f7ff f9ba 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <MX_TIM4_Init+0xd8>)
 800202e:	f002 fb49 	bl	80046c4 <HAL_TIM_IC_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002038:	f7ff f9b2 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4619      	mov	r1, r3
 800204a:	480f      	ldr	r0, [pc, #60]	; (8002088 <MX_TIM4_Init+0xd8>)
 800204c:	f003 fc86 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002056:	f7ff f9a3 	bl	80013a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800205a:	230a      	movs	r3, #10
 800205c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800205e:	2301      	movs	r3, #1
 8002060:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8002066:	2305      	movs	r3, #5
 8002068:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_TIM4_Init+0xd8>)
 8002072:	f002 fdb1 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800207c:	f7ff f990 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000598 	.word	0x20000598
 800208c:	40000800 	.word	0x40000800

08002090 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0318 	add.w	r3, r7, #24
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <MX_TIM8_Init+0x124>)
 80020be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020da:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020e6:	4832      	ldr	r0, [pc, #200]	; (80021b0 <MX_TIM8_Init+0x120>)
 80020e8:	f002 f89a 	bl	8004220 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80020f2:	f7ff f955 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	4619      	mov	r1, r3
 8002102:	482b      	ldr	r0, [pc, #172]	; (80021b0 <MX_TIM8_Init+0x120>)
 8002104:	f002 fec6 	bl	8004e94 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800210e:	f7ff f947 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002112:	4827      	ldr	r0, [pc, #156]	; (80021b0 <MX_TIM8_Init+0x120>)
 8002114:	f002 fad6 	bl	80046c4 <HAL_TIM_IC_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800211e:	f7ff f93f 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	481f      	ldr	r0, [pc, #124]	; (80021b0 <MX_TIM8_Init+0x120>)
 8002132:	f003 fc13 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 800213c:	f7ff f930 	bl	80013a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002144:	2301      	movs	r3, #1
 8002146:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	2200      	movs	r2, #0
 8002154:	4619      	mov	r1, r3
 8002156:	4816      	ldr	r0, [pc, #88]	; (80021b0 <MX_TIM8_Init+0x120>)
 8002158:	f002 fd3e 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002162:	f7ff f91d 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002166:	463b      	mov	r3, r7
 8002168:	2204      	movs	r2, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4810      	ldr	r0, [pc, #64]	; (80021b0 <MX_TIM8_Init+0x120>)
 800216e:	f002 fd33 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002178:	f7ff f912 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	2208      	movs	r2, #8
 8002180:	4619      	mov	r1, r3
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <MX_TIM8_Init+0x120>)
 8002184:	f002 fd28 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 800218e:	f7ff f907 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002192:	463b      	mov	r3, r7
 8002194:	220c      	movs	r2, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_TIM8_Init+0x120>)
 800219a:	f002 fd1d 	bl	8004bd8 <HAL_TIM_IC_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80021a4:	f7ff f8fc 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3728      	adds	r7, #40	; 0x28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200005e0 	.word	0x200005e0
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b090      	sub	sp, #64	; 0x40
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a7b      	ldr	r2, [pc, #492]	; (80023c4 <HAL_TIM_Base_MspInit+0x20c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d135      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021de:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a79      	ldr	r2, [pc, #484]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b77      	ldr	r3, [pc, #476]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b70      	ldr	r3, [pc, #448]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002224:	2301      	movs	r3, #1
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	4867      	ldr	r0, [pc, #412]	; (80023cc <HAL_TIM_Base_MspInit+0x214>)
 8002230:	f000 fcdc 	bl	8002bec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2105      	movs	r1, #5
 8002238:	2018      	movs	r0, #24
 800223a:	f000 fc1b 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800223e:	2018      	movs	r0, #24
 8002240:	f000 fc34 	bl	8002aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002244:	e0ba      	b.n	80023bc <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d10e      	bne.n	800226e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4a5b      	ldr	r2, [pc, #364]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6413      	str	r3, [r2, #64]	; 0x40
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	6a3b      	ldr	r3, [r7, #32]
}
 800226c:	e0a6      	b.n	80023bc <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_TIM_Base_MspInit+0x218>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d12c      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	4b52      	ldr	r3, [pc, #328]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a51      	ldr	r2, [pc, #324]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
 8002288:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6313      	str	r3, [r2, #48]	; 0x30
 80022a4:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022c0:	2302      	movs	r3, #2
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c8:	4619      	mov	r1, r3
 80022ca:	4842      	ldr	r0, [pc, #264]	; (80023d4 <HAL_TIM_Base_MspInit+0x21c>)
 80022cc:	f000 fc8e 	bl	8002bec <HAL_GPIO_Init>
}
 80022d0:	e074      	b.n	80023bc <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <HAL_TIM_Base_MspInit+0x220>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d12d      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	4a38      	ldr	r2, [pc, #224]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6413      	str	r3, [r2, #64]	; 0x40
 80022ec:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002326:	2302      	movs	r3, #2
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	482a      	ldr	r0, [pc, #168]	; (80023dc <HAL_TIM_Base_MspInit+0x224>)
 8002332:	f000 fc5b 	bl	8002bec <HAL_GPIO_Init>
}
 8002336:	e041      	b.n	80023bc <HAL_TIM_Base_MspInit+0x204>
  else if(tim_baseHandle->Instance==TIM8)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_TIM_Base_MspInit+0x228>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d13c      	bne.n	80023bc <HAL_TIM_Base_MspInit+0x204>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_TIM_Base_MspInit+0x210>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800237a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800238c:	2303      	movs	r3, #3
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002394:	4619      	mov	r1, r3
 8002396:	4813      	ldr	r0, [pc, #76]	; (80023e4 <HAL_TIM_Base_MspInit+0x22c>)
 8002398:	f000 fc28 	bl	8002bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2105      	movs	r1, #5
 80023a0:	202c      	movs	r0, #44	; 0x2c
 80023a2:	f000 fb67 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80023a6:	202c      	movs	r0, #44	; 0x2c
 80023a8:	f000 fb80 	bl	8002aac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2105      	movs	r1, #5
 80023b0:	202e      	movs	r0, #46	; 0x2e
 80023b2:	f000 fb5f 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80023b6:	202e      	movs	r0, #46	; 0x2e
 80023b8:	f000 fb78 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3740      	adds	r7, #64	; 0x40
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40020800 	.word	0x40020800

080023e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d13c      	bne.n	8002484 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_TIM_MspPostInit+0xa4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002442:	2301      	movs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002452:	2301      	movs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <HAL_TIM_MspPostInit+0xa8>)
 800245e:	f000 fbc5 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002462:	f640 4308 	movw	r3, #3080	; 0xc08
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002474:	2301      	movs	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_TIM_MspPostInit+0xac>)
 8002480:	f000 fbb4 	bl	8002bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400

08002498 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_UART7_Init+0x4c>)
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <MX_UART7_Init+0x50>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <MX_UART7_Init+0x4c>)
 80024d0:	f003 fad4 	bl	8005a7c <HAL_UART_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80024da:	f7fe ff61 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000628 	.word	0x20000628
 80024e8:	40007800 	.word	0x40007800

080024ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <MX_USART2_UART_Init+0x50>)
 80024f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 80024f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 8002512:	220c      	movs	r2, #12
 8002514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_USART2_UART_Init+0x4c>)
 8002524:	f003 faaa 	bl	8005a7c <HAL_UART_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800252e:	f7fe ff37 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000066c 	.word	0x2000066c
 800253c:	40004400 	.word	0x40004400

08002540 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <MX_USART3_UART_Init+0x50>)
 8002548:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_USART3_UART_Init+0x4c>)
 800254c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002550:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_USART3_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002566:	220c      	movs	r2, #12
 8002568:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <MX_USART3_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_USART3_UART_Init+0x4c>)
 8002578:	f003 fa80 	bl	8005a7c <HAL_UART_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002582:	f7fe ff0d 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200006b0 	.word	0x200006b0
 8002590:	40004800 	.word	0x40004800

08002594 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <MX_USART6_UART_Init+0x50>)
 800259c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_USART6_UART_Init+0x4c>)
 80025cc:	f003 fa56 	bl	8005a7c <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025d6:	f7fe fee3 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200006f4 	.word	0x200006f4
 80025e4:	40011400 	.word	0x40011400

080025e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b090      	sub	sp, #64	; 0x40
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a80      	ldr	r2, [pc, #512]	; (8002808 <HAL_UART_MspInit+0x220>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d135      	bne.n	8002676 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <HAL_UART_MspInit+0x224>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <HAL_UART_MspInit+0x224>)
 8002614:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b7c      	ldr	r3, [pc, #496]	; (800280c <HAL_UART_MspInit+0x224>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_UART_MspInit+0x224>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_UART_MspInit+0x224>)
 8002630:	f043 0310 	orr.w	r3, r3, #16
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b75      	ldr	r3, [pc, #468]	; (800280c <HAL_UART_MspInit+0x224>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002642:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002654:	2308      	movs	r3, #8
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265c:	4619      	mov	r1, r3
 800265e:	486c      	ldr	r0, [pc, #432]	; (8002810 <HAL_UART_MspInit+0x228>)
 8002660:	f000 fac4 	bl	8002bec <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2105      	movs	r1, #5
 8002668:	2052      	movs	r0, #82	; 0x52
 800266a:	f000 fa03 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800266e:	2052      	movs	r0, #82	; 0x52
 8002670:	f000 fa1c 	bl	8002aac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002674:	e0c4      	b.n	8002800 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a66      	ldr	r2, [pc, #408]	; (8002814 <HAL_UART_MspInit+0x22c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d152      	bne.n	8002726 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_UART_MspInit+0x224>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a60      	ldr	r2, [pc, #384]	; (800280c <HAL_UART_MspInit+0x224>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
 8002690:	4b5e      	ldr	r3, [pc, #376]	; (800280c <HAL_UART_MspInit+0x224>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <HAL_UART_MspInit+0x224>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	4a59      	ldr	r2, [pc, #356]	; (800280c <HAL_UART_MspInit+0x224>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6313      	str	r3, [r2, #48]	; 0x30
 80026ac:	4b57      	ldr	r3, [pc, #348]	; (800280c <HAL_UART_MspInit+0x224>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_UART_MspInit+0x224>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_UART_MspInit+0x224>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6313      	str	r3, [r2, #48]	; 0x30
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_UART_MspInit+0x224>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026d4:	2308      	movs	r3, #8
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e4:	2307      	movs	r3, #7
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ec:	4619      	mov	r1, r3
 80026ee:	484a      	ldr	r0, [pc, #296]	; (8002818 <HAL_UART_MspInit+0x230>)
 80026f0:	f000 fa7c 	bl	8002bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026f4:	2320      	movs	r3, #32
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002704:	2307      	movs	r3, #7
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800270c:	4619      	mov	r1, r3
 800270e:	4843      	ldr	r0, [pc, #268]	; (800281c <HAL_UART_MspInit+0x234>)
 8002710:	f000 fa6c 	bl	8002bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	2105      	movs	r1, #5
 8002718:	2026      	movs	r0, #38	; 0x26
 800271a:	f000 f9ab 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800271e:	2026      	movs	r0, #38	; 0x26
 8002720:	f000 f9c4 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 8002724:	e06c      	b.n	8002800 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a3d      	ldr	r2, [pc, #244]	; (8002820 <HAL_UART_MspInit+0x238>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d135      	bne.n	800279c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	4b35      	ldr	r3, [pc, #212]	; (800280c <HAL_UART_MspInit+0x224>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_UART_MspInit+0x224>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_UART_MspInit+0x224>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_UART_MspInit+0x224>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a2d      	ldr	r2, [pc, #180]	; (800280c <HAL_UART_MspInit+0x224>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6313      	str	r3, [r2, #48]	; 0x30
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_UART_MspInit+0x224>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002768:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800277a:	2307      	movs	r3, #7
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002782:	4619      	mov	r1, r3
 8002784:	4825      	ldr	r0, [pc, #148]	; (800281c <HAL_UART_MspInit+0x234>)
 8002786:	f000 fa31 	bl	8002bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2105      	movs	r1, #5
 800278e:	2027      	movs	r0, #39	; 0x27
 8002790:	f000 f970 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002794:	2027      	movs	r0, #39	; 0x27
 8002796:	f000 f989 	bl	8002aac <HAL_NVIC_EnableIRQ>
}
 800279a:	e031      	b.n	8002800 <HAL_UART_MspInit+0x218>
  else if(uartHandle->Instance==USART6)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <HAL_UART_MspInit+0x23c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12c      	bne.n	8002800 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_UART_MspInit+0x224>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_UART_MspInit+0x224>)
 80027b0:	f043 0320 	orr.w	r3, r3, #32
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_UART_MspInit+0x224>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_UART_MspInit+0x224>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_UART_MspInit+0x224>)
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_UART_MspInit+0x224>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80027de:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027f0:	2308      	movs	r3, #8
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f8:	4619      	mov	r1, r3
 80027fa:	480b      	ldr	r0, [pc, #44]	; (8002828 <HAL_UART_MspInit+0x240>)
 80027fc:	f000 f9f6 	bl	8002bec <HAL_GPIO_Init>
}
 8002800:	bf00      	nop
 8002802:	3740      	adds	r7, #64	; 0x40
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40007800 	.word	0x40007800
 800280c:	40023800 	.word	0x40023800
 8002810:	40021000 	.word	0x40021000
 8002814:	40004400 	.word	0x40004400
 8002818:	40020000 	.word	0x40020000
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40004800 	.word	0x40004800
 8002824:	40011400 	.word	0x40011400
 8002828:	40021800 	.word	0x40021800

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002832:	490e      	ldr	r1, [pc, #56]	; (800286c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002856:	f7ff fa1f 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f006 fc1b 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7fe fcd1 	bl	8001204 <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002864:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800286c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002870:	08009d9c 	.word	0x08009d9c
  ldr r2, =_sbss
 8002874:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002878:	200044a0 	.word	0x200044a0

0800287c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <ADC_IRQHandler>
	...

08002880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <HAL_Init+0x40>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <HAL_Init+0x40>)
 8002896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <HAL_Init+0x40>)
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 f8d8 	bl	8002a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ae:	200f      	movs	r0, #15
 80028b0:	f7ff f870 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b4:	f7ff f842 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023c00 	.word	0x40023c00

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000024 	.word	0x20000024
 80028e8:	20000738 	.word	0x20000738

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000738 	.word	0x20000738

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff4c 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a86:	f7ff ff61 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002a8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	6978      	ldr	r0, [r7, #20]
 8002a92:	f7ff ffb1 	bl	80029f8 <NVIC_EncodePriority>
 8002a96:	4602      	mov	r2, r0
 8002a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff80 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff54 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ad6:	f7ff ff09 	bl	80028ec <HAL_GetTick>
 8002ada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e052      	b.n	8002ba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_Abort+0x62>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4a:	e013      	b.n	8002b74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4c:	f7ff fece 	bl	80028ec <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d90c      	bls.n	8002b74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e015      	b.n	8002ba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e4      	bne.n	8002b4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	223f      	movs	r2, #63	; 0x3f
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d004      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00c      	b.n	8002be0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2205      	movs	r2, #5
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e177      	b.n	8002ef8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f040 8166 	bne.w	8002ef2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d005      	beq.n	8002c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d017      	beq.n	8002cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d123      	bne.n	8002d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	08da      	lsrs	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3208      	adds	r2, #8
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0203 	and.w	r2, r3, #3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80c0 	beq.w	8002ef2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_GPIO_Init+0x324>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d8e:	4a61      	ldr	r2, [pc, #388]	; (8002f14 <HAL_GPIO_Init+0x328>)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	3302      	adds	r3, #2
 8002d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	220f      	movs	r2, #15
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a58      	ldr	r2, [pc, #352]	; (8002f18 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d037      	beq.n	8002e2a <HAL_GPIO_Init+0x23e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_GPIO_Init+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d031      	beq.n	8002e26 <HAL_GPIO_Init+0x23a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a56      	ldr	r2, [pc, #344]	; (8002f20 <HAL_GPIO_Init+0x334>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d02b      	beq.n	8002e22 <HAL_GPIO_Init+0x236>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a55      	ldr	r2, [pc, #340]	; (8002f24 <HAL_GPIO_Init+0x338>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d025      	beq.n	8002e1e <HAL_GPIO_Init+0x232>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a54      	ldr	r2, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x33c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01f      	beq.n	8002e1a <HAL_GPIO_Init+0x22e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <HAL_GPIO_Init+0x340>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d019      	beq.n	8002e16 <HAL_GPIO_Init+0x22a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_GPIO_Init+0x344>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0x226>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_GPIO_Init+0x348>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00d      	beq.n	8002e0e <HAL_GPIO_Init+0x222>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a50      	ldr	r2, [pc, #320]	; (8002f38 <HAL_GPIO_Init+0x34c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <HAL_GPIO_Init+0x21e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4f      	ldr	r2, [pc, #316]	; (8002f3c <HAL_GPIO_Init+0x350>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_GPIO_Init+0x21a>
 8002e02:	2309      	movs	r3, #9
 8002e04:	e012      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e06:	230a      	movs	r3, #10
 8002e08:	e010      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	e00e      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e00c      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e12:	2306      	movs	r3, #6
 8002e14:	e00a      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e16:	2305      	movs	r3, #5
 8002e18:	e008      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e004      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_GPIO_Init+0x240>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f002 0203 	and.w	r2, r2, #3
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	4093      	lsls	r3, r2
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e3c:	4935      	ldr	r1, [pc, #212]	; (8002f14 <HAL_GPIO_Init+0x328>)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9e:	4b28      	ldr	r3, [pc, #160]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_GPIO_Init+0x354>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	f67f ae84 	bls.w	8002c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40013800 	.word	0x40013800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40021400 	.word	0x40021400
 8002f30:	40021800 	.word	0x40021800
 8002f34:	40021c00 	.word	0x40021c00
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40022400 	.word	0x40022400
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e12b      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f8e8 	bl	8001174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f000 fe0c 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	; (80031ec <HAL_I2C_Init+0x274>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <HAL_I2C_Init+0x84>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a80      	ldr	r2, [pc, #512]	; (80031f0 <HAL_I2C_Init+0x278>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e006      	b.n	800300a <HAL_I2C_Init+0x92>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a7d      	ldr	r2, [pc, #500]	; (80031f4 <HAL_I2C_Init+0x27c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a78      	ldr	r2, [pc, #480]	; (80031f8 <HAL_I2C_Init+0x280>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0c9b      	lsrs	r3, r3, #18
 800301c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a6a      	ldr	r2, [pc, #424]	; (80031ec <HAL_I2C_Init+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <HAL_I2C_Init+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_I2C_Init+0xe8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a69      	ldr	r2, [pc, #420]	; (80031fc <HAL_I2C_Init+0x284>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	495c      	ldr	r1, [pc, #368]	; (80031ec <HAL_I2C_Init+0x274>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d819      	bhi.n	80030b4 <HAL_I2C_Init+0x13c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e59      	subs	r1, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fbb1 f3f3 	udiv	r3, r1, r3
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_I2C_Init+0x138>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e59      	subs	r1, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	e051      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e04f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <HAL_I2C_Init+0x168>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e012      	b.n	8003106 <HAL_I2C_Init+0x18e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x196>
 800310a:	2301      	movs	r3, #1
 800310c:	e022      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_I2C_Init+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	fbb0 f3f3 	udiv	r3, r0, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6809      	ldr	r1, [r1, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6911      	ldr	r1, [r2, #16]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	000186a0 	.word	0x000186a0
 80031f0:	001e847f 	.word	0x001e847f
 80031f4:	003d08ff 	.word	0x003d08ff
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d129      	bne.n	800326a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	; 0x24
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d12a      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2224      	movs	r2, #36	; 0x24
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	89fa      	ldrh	r2, [r7, #14]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_PWREx_EnableOverDrive+0x90>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_PWREx_EnableOverDrive+0x90>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_PWREx_EnableOverDrive+0x90>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_PWREx_EnableOverDrive+0x94>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7ff fae2 	bl	80028ec <HAL_GetTick>
 8003328:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800332a:	e009      	b.n	8003340 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800332c:	f7ff fade 	bl	80028ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333a:	d901      	bls.n	8003340 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e01f      	b.n	8003380 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_PWREx_EnableOverDrive+0x98>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d1ee      	bne.n	800332c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003354:	f7ff faca 	bl	80028ec <HAL_GetTick>
 8003358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800335a:	e009      	b.n	8003370 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800335c:	f7ff fac6 	bl	80028ec <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336a:	d901      	bls.n	8003370 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e007      	b.n	8003380 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_PWREx_EnableOverDrive+0x98>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800337c:	d1ee      	bne.n	800335c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	420e0040 	.word	0x420e0040
 8003390:	40007000 	.word	0x40007000
 8003394:	420e0044 	.word	0x420e0044

08003398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e267      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d075      	beq.n	80034a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d00c      	beq.n	80033dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b7e      	ldr	r3, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x108>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d157      	bne.n	80034a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e242      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x74>
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6f      	ldr	r2, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 8003430:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a68      	ldr	r2, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a65      	ldr	r2, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7ff fa4c 	bl	80028ec <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7ff fa48 	bl	80028ec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e207      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xc0>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7ff fa38 	bl	80028ec <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003480:	f7ff fa34 	bl	80028ec <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1f3      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0xe8>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d063      	beq.n	8003576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1c7      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4937      	ldr	r1, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7ff f9ed 	bl	80028ec <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003516:	f7ff f9e9 	bl	80028ec <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1a8      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7ff f9cc 	bl	80028ec <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003558:	f7ff f9c8 	bl	80028ec <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e187      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d036      	beq.n	80035f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7ff f9ac 	bl	80028ec <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003598:	f7ff f9a8 	bl	80028ec <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e167      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x200>
 80035b6:	e01b      	b.n	80035f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7ff f995 	bl	80028ec <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	e00e      	b.n	80035e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c6:	f7ff f991 	bl	80028ec <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d907      	bls.n	80035e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e150      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	42470000 	.word	0x42470000
 80035e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ea      	bne.n	80035c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8097 	beq.w	800372c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	4b7d      	ldr	r3, [pc, #500]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x474>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7ff f951 	bl	80028ec <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7ff f94d 	bl	80028ec <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e10c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x2ea>
 8003674:	4b64      	ldr	r3, [pc, #400]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a63      	ldr	r2, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x30c>
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5e      	ldr	r2, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a5b      	ldr	r2, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 80036a4:	4b58      	ldr	r3, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a57      	ldr	r2, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
 80036b0:	4b55      	ldr	r3, [pc, #340]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a54      	ldr	r2, [pc, #336]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 0304 	bic.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7ff f912 	bl	80028ec <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7ff f90e 	bl	80028ec <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0cb      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ee      	beq.n	80036cc <HAL_RCC_OscConfig+0x334>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7ff f8fc 	bl	80028ec <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7ff f8f8 	bl	80028ec <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0b5      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a1 	beq.w	8003878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b08      	cmp	r3, #8
 8003740:	d05c      	beq.n	80037fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d141      	bne.n	80037ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7ff f8cc 	bl	80028ec <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7ff f8c8 	bl	80028ec <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e087      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7ff f8a1 	bl	80028ec <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7ff f89d 	bl	80028ec <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e05c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x416>
 80037cc:	e054      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7ff f88a 	bl	80028ec <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7ff f886 	bl	80028ec <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e045      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x444>
 80037fa:	e03d      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e038      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4ec>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d028      	beq.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d121      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d11a      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0cc      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90c      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b8      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f4:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	494d      	ldr	r1, [pc, #308]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d044      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e067      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4934      	ldr	r1, [pc, #208]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe ffb8 	bl	80028ec <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe ffb4 	bl	80028ec <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e04f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20c      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e032      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4916      	ldr	r1, [pc, #88]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	490e      	ldr	r1, [pc, #56]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0e:	f000 f821 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	490a      	ldr	r1, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd ffb0 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00
 8003a44:	40023800 	.word	0x40023800
 8003a48:	08009d10 	.word	0x08009d10
 8003a4c:	2000001c 	.word	0x2000001c
 8003a50:	20000020 	.word	0x20000020

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b090      	sub	sp, #64	; 0x40
 8003a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a60:	2300      	movs	r3, #0
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	2300      	movs	r3, #0
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6c:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d00d      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x40>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	f200 80a1 	bhi.w	8003bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x34>
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a86:	e09b      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a8c:	e09b      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8e:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003a90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a92:	e098      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a94:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9e:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d028      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003abc:	2100      	movs	r1, #0
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac0:	fb03 f201 	mul.w	r2, r3, r1
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	fb00 f303 	mul.w	r3, r0, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	4a43      	ldr	r2, [pc, #268]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ace:	fba0 1202 	umull	r1, r2, r0, r2
 8003ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ada:	4413      	add	r3, r2
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003aee:	f7fc fb87 	bl	8000200 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4613      	mov	r3, r2
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afa:	e053      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	2200      	movs	r2, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	617a      	str	r2, [r7, #20]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b0e:	f04f 0b00 	mov.w	fp, #0
 8003b12:	4652      	mov	r2, sl
 8003b14:	465b      	mov	r3, fp
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b46:	ebb2 0408 	subs.w	r4, r2, r8
 8003b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	00eb      	lsls	r3, r5, #3
 8003b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5c:	00e2      	lsls	r2, r4, #3
 8003b5e:	4614      	mov	r4, r2
 8003b60:	461d      	mov	r5, r3
 8003b62:	eb14 030a 	adds.w	r3, r4, sl
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	eb45 030b 	adc.w	r3, r5, fp
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	028b      	lsls	r3, r1, #10
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b84:	4621      	mov	r1, r4
 8003b86:	028a      	lsls	r2, r1, #10
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	60fa      	str	r2, [r7, #12]
 8003b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b98:	f7fc fb32 	bl	8000200 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3740      	adds	r7, #64	; 0x40
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	017d7840 	.word	0x017d7840

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	2000001c 	.word	0x2000001c

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4903      	ldr	r1, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08009d20 	.word	0x08009d20

08003c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c24:	f7ff ffdc 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0b5b      	lsrs	r3, r3, #13
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08009d20 	.word	0x08009d20

08003c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	220f      	movs	r2, #15
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0203 	and.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_RCC_GetClockConfig+0x60>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	601a      	str	r2, [r3, #0]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40023c00 	.word	0x40023c00

08003cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d075      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ce0:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce6:	f7fe fe01 	bl	80028ec <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cee:	f7fe fdfd 	bl	80028ec <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e189      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d00:	4b8a      	ldr	r3, [pc, #552]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	019a      	lsls	r2, r3, #6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	071b      	lsls	r3, r3, #28
 8003d24:	4981      	ldr	r1, [pc, #516]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01f      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d38:	4b7c      	ldr	r3, [pc, #496]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3e:	0f1b      	lsrs	r3, r3, #28
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	019a      	lsls	r2, r3, #6
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	071b      	lsls	r3, r3, #28
 8003d58:	4974      	ldr	r1, [pc, #464]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d60:	4b72      	ldr	r3, [pc, #456]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d66:	f023 021f 	bic.w	r2, r3, #31
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	496e      	ldr	r1, [pc, #440]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	019a      	lsls	r2, r3, #6
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	071b      	lsls	r3, r3, #28
 8003d98:	4964      	ldr	r1, [pc, #400]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da0:	4b61      	ldr	r3, [pc, #388]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003da6:	f7fe fda1 	bl	80028ec <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dae:	f7fe fd9d 	bl	80028ec <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e129      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc0:	4b5a      	ldr	r3, [pc, #360]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d079      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003de4:	4b52      	ldr	r3, [pc, #328]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dea:	f7fe fd7f 	bl	80028ec <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003df2:	f7fe fd7b 	bl	80028ec <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e107      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e04:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d0ef      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	0f1b      	lsrs	r3, r3, #28
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	019a      	lsls	r2, r3, #6
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	493b      	ldr	r1, [pc, #236]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	4934      	ldr	r1, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01e      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	0e1b      	lsrs	r3, r3, #24
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	019a      	lsls	r2, r3, #6
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	061b      	lsls	r3, r3, #24
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	4927      	ldr	r1, [pc, #156]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4922      	ldr	r1, [pc, #136]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003eac:	2201      	movs	r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fd1c 	bl	80028ec <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003eb8:	f7fe fd18 	bl	80028ec <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0a4      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed6:	d1ef      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 808b 	beq.w	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0e:	f7fe fced 	bl	80028ec <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f14:	e010      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f16:	f7fe fce9 	bl	80028ec <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d909      	bls.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e075      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f28:	42470068 	.word	0x42470068
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470070 	.word	0x42470070
 8003f34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f38:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0e8      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02f      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d028      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f62:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f6c:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f72:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d114      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fcaf 	bl	80028ec <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fe fcab 	bl	80028ec <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e035      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ee      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc0:	d10d      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd6:	4912      	ldr	r1, [pc, #72]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	608b      	str	r3, [r1, #8]
 8003fdc:	e005      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fe4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fe8:	6093      	str	r3, [r2, #8]
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	490a      	ldr	r1, [pc, #40]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004010:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40007000 	.word	0x40007000
 8004020:	40023800 	.word	0x40023800
 8004024:	42470e40 	.word	0x42470e40
 8004028:	424711e0 	.word	0x424711e0

0800402c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e066      	b.n	8004110 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7f5b      	ldrb	r3, [r3, #29]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd fc48 	bl	80018e8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	22ca      	movs	r2, #202	; 0xca
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2253      	movs	r2, #83	; 0x53
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f87a 	bl	8004168 <RTC_EnterInitMode>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d12c      	bne.n	80040d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800408c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004090:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68d2      	ldr	r2, [r2, #12]
 80040b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6919      	ldr	r1, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f881 	bl	80041d6 <RTC_ExitInitMode>
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	22ff      	movs	r2, #255	; 0xff
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004132:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004134:	f7fe fbda 	bl	80028ec <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800413a:	e009      	b.n	8004150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800413c:	f7fe fbd6 	bl	80028ec <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414a:	d901      	bls.n	8004150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e007      	b.n	8004160 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ee      	beq.n	800413c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d122      	bne.n	80041cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004196:	f7fe fba9 	bl	80028ec <HAL_GetTick>
 800419a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800419c:	e00c      	b.n	80041b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800419e:	f7fe fba5 	bl	80028ec <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ac:	d904      	bls.n	80041b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2204      	movs	r2, #4
 80041b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <RTC_EnterInitMode+0x64>
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d1e8      	bne.n	800419e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff89 	bl	8004118 <HAL_RTC_WaitForSynchro>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2204      	movs	r2, #4
 8004210:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e041      	b.n	80042b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd ffb6 	bl	80021b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f000 ff42 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04e      	b.n	8004376 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a23      	ldr	r2, [pc, #140]	; (8004384 <HAL_TIM_Base_Start_IT+0xc4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d022      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004302:	d01d      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_TIM_Base_Start_IT+0xc8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d018      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <HAL_TIM_Base_Start_IT+0xcc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d013      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <HAL_TIM_Base_Start_IT+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00e      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_TIM_Base_Start_IT+0xd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_TIM_Base_Start_IT+0xd8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <HAL_TIM_Base_Start_IT+0x80>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a18      	ldr	r2, [pc, #96]	; (800439c <HAL_TIM_Base_Start_IT+0xdc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b06      	cmp	r3, #6
 8004350:	d010      	beq.n	8004374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	e007      	b.n	8004374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	40010400 	.word	0x40010400
 8004398:	40014000 	.word	0x40014000
 800439c:	40001800 	.word	0x40001800

080043a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f839 	bl	800443e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fe82 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_TIM_PWM_Start+0x24>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e022      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d109      	bne.n	8004492 <HAL_TIM_PWM_Start+0x3e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e015      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d109      	bne.n	80044ac <HAL_TIM_PWM_Start+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	e008      	b.n	80044be <HAL_TIM_PWM_Start+0x6a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07c      	b.n	80045c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <HAL_TIM_PWM_Start+0x82>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d4:	e013      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d104      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x92>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	e00b      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f4:	e003      	b.n	80044fe <HAL_TIM_PWM_Start+0xaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	6839      	ldr	r1, [r7, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fa02 	bl	8005910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <HAL_TIM_PWM_Start+0x174>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_PWM_Start+0xcc>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <HAL_TIM_PWM_Start+0x178>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d101      	bne.n	8004524 <HAL_TIM_PWM_Start+0xd0>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_TIM_PWM_Start+0xd2>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_TIM_PWM_Start+0x174>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d01d      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_TIM_PWM_Start+0x17c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_TIM_PWM_Start+0x180>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_TIM_PWM_Start+0x184>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <HAL_TIM_PWM_Start+0x178>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_TIM_PWM_Start+0x188>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_TIM_PWM_Start+0x136>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <HAL_TIM_PWM_Start+0x18c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b06      	cmp	r3, #6
 800459a:	d010      	beq.n	80045be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	e007      	b.n	80045be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40001800 	.word	0x40001800

080045e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 f98a 	bl	8005910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <HAL_TIM_PWM_Stop+0xd8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_PWM_Stop+0x2c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2d      	ldr	r2, [pc, #180]	; (80046c0 <HAL_TIM_PWM_Stop+0xdc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <HAL_TIM_PWM_Stop+0x30>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_TIM_PWM_Stop+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	f241 1311 	movw	r3, #4369	; 0x1111
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <HAL_TIM_PWM_Stop+0x66>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	f240 4344 	movw	r3, #1092	; 0x444
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_TIM_PWM_Stop+0x66>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	f241 1311 	movw	r3, #4369	; 0x1111
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_TIM_PWM_Stop+0x96>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	f240 4344 	movw	r3, #1092	; 0x444
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_TIM_PWM_Stop+0x96>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Stop+0xa6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	e013      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Stop+0xb6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Stop+0xc6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xce>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40010400 	.word	0x40010400

080046c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f839 	bl	8004762 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fcf0 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_TIM_IC_Start_IT+0x1e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e013      	b.n	80047be <HAL_TIM_IC_Start_IT+0x46>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_IC_Start_IT+0x2e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e00b      	b.n	80047be <HAL_TIM_IC_Start_IT+0x46>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_IC_Start_IT+0x3e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e003      	b.n	80047be <HAL_TIM_IC_Start_IT+0x46>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_TIM_IC_Start_IT+0x58>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e013      	b.n	80047f8 <HAL_TIM_IC_Start_IT+0x80>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d104      	bne.n	80047e0 <HAL_TIM_IC_Start_IT+0x68>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e00b      	b.n	80047f8 <HAL_TIM_IC_Start_IT+0x80>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d104      	bne.n	80047f0 <HAL_TIM_IC_Start_IT+0x78>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e003      	b.n	80047f8 <HAL_TIM_IC_Start_IT+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d102      	bne.n	8004806 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004800:	7b7b      	ldrb	r3, [r7, #13]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0cc      	b.n	80049a4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <HAL_TIM_IC_Start_IT+0xa2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	e013      	b.n	8004842 <HAL_TIM_IC_Start_IT+0xca>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d104      	bne.n	800482a <HAL_TIM_IC_Start_IT+0xb2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	e00b      	b.n	8004842 <HAL_TIM_IC_Start_IT+0xca>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d104      	bne.n	800483a <HAL_TIM_IC_Start_IT+0xc2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	e003      	b.n	8004842 <HAL_TIM_IC_Start_IT+0xca>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0xda>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004850:	e013      	b.n	800487a <HAL_TIM_IC_Start_IT+0x102>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0xea>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004860:	e00b      	b.n	800487a <HAL_TIM_IC_Start_IT+0x102>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0xfa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004870:	e003      	b.n	800487a <HAL_TIM_IC_Start_IT+0x102>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d841      	bhi.n	8004904 <HAL_TIM_IC_Start_IT+0x18c>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HAL_TIM_IC_Start_IT+0x110>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	08004905 	.word	0x08004905
 8004890:	08004905 	.word	0x08004905
 8004894:	08004905 	.word	0x08004905
 8004898:	080048cf 	.word	0x080048cf
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004905 	.word	0x08004905
 80048a4:	08004905 	.word	0x08004905
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004905 	.word	0x08004905
 80048b8:	080048f3 	.word	0x080048f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0202 	orr.w	r2, r2, #2
 80048ca:	60da      	str	r2, [r3, #12]
      break;
 80048cc:	e01d      	b.n	800490a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0204 	orr.w	r2, r2, #4
 80048dc:	60da      	str	r2, [r3, #12]
      break;
 80048de:	e014      	b.n	800490a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	60da      	str	r2, [r3, #12]
      break;
 80048f0:	e00b      	b.n	800490a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0210 	orr.w	r2, r2, #16
 8004900:	60da      	str	r2, [r3, #12]
      break;
 8004902:	e002      	b.n	800490a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      break;
 8004908:	bf00      	nop
  }

  if (status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d148      	bne.n	80049a2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fff9 	bl	8005910 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a22      	ldr	r2, [pc, #136]	; (80049ac <HAL_TIM_IC_Start_IT+0x234>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d01d      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_TIM_IC_Start_IT+0x238>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_TIM_IC_Start_IT+0x240>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_TIM_IC_Start_IT+0x244>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_TIM_IC_Start_IT+0x248>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_TIM_IC_Start_IT+0x1f6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_TIM_IC_Start_IT+0x24c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d010      	beq.n	80049a2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	e007      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40001800 	.word	0x40001800

080049c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0202 	mvn.w	r2, #2
 80049f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fb ff84 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb4a 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb51 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0204 	mvn.w	r2, #4
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fb ff5a 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fb20 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fb27 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0208 	mvn.w	r2, #8
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fb ff30 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 faf6 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fafd 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0210 	mvn.w	r2, #16
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2208      	movs	r2, #8
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fb ff06 	bl	8000918 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 facc 	bl	80050ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fad3 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0201 	mvn.w	r2, #1
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fc18 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d10e      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d107      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 ff78 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d10e      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d107      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa98 	bl	80050d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0220 	mvn.w	r2, #32
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 ff42 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e088      	b.n	8004d08 <HAL_TIM_IC_ConfigChannel+0x130>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f000 fcb8 	bl	8005588 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 020c 	bic.w	r2, r2, #12
 8004c26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	619a      	str	r2, [r3, #24]
 8004c3a:	e060      	b.n	8004cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d11c      	bne.n	8004c7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f000 fd3c 	bl	80056ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6999      	ldr	r1, [r3, #24]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	021a      	lsls	r2, r3, #8
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	619a      	str	r2, [r3, #24]
 8004c7a:	e040      	b.n	8004cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d11b      	bne.n	8004cba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f000 fd89 	bl	80057a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 020c 	bic.w	r2, r2, #12
 8004ca4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
 8004cb8:	e021      	b.n	8004cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b0c      	cmp	r3, #12
 8004cbe:	d11c      	bne.n	8004cfa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6819      	ldr	r1, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f000 fda6 	bl	8005820 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69da      	ldr	r2, [r3, #28]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ce2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69d9      	ldr	r1, [r3, #28]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	61da      	str	r2, [r3, #28]
 8004cf8:	e001      	b.n	8004cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ae      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	f200 809f 	bhi.w	8004e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004e7d 	.word	0x08004e7d
 8004d4c:	08004e7d 	.word	0x08004e7d
 8004d50:	08004e7d 	.word	0x08004e7d
 8004d54:	08004db9 	.word	0x08004db9
 8004d58:	08004e7d 	.word	0x08004e7d
 8004d5c:	08004e7d 	.word	0x08004e7d
 8004d60:	08004e7d 	.word	0x08004e7d
 8004d64:	08004dfb 	.word	0x08004dfb
 8004d68:	08004e7d 	.word	0x08004e7d
 8004d6c:	08004e7d 	.word	0x08004e7d
 8004d70:	08004e7d 	.word	0x08004e7d
 8004d74:	08004e3b 	.word	0x08004e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa52 	bl	8005228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	619a      	str	r2, [r3, #24]
      break;
 8004db6:	e064      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 faa2 	bl	8005308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]
      break;
 8004df8:	e043      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 faf7 	bl	80053f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0208 	orr.w	r2, r2, #8
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0204 	bic.w	r2, r2, #4
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fb4b 	bl	80054dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e002      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e0b4      	b.n	800501a <HAL_TIM_ConfigClockSource+0x186>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee8:	d03e      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0xd4>
 8004eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eee:	f200 8087 	bhi.w	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	f000 8086 	beq.w	8005006 <HAL_TIM_ConfigClockSource+0x172>
 8004efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efe:	d87f      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d01a      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0xa6>
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d87b      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d050      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x11a>
 8004f0c:	2b60      	cmp	r3, #96	; 0x60
 8004f0e:	d877      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b50      	cmp	r3, #80	; 0x50
 8004f12:	d03c      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0xfa>
 8004f14:	2b50      	cmp	r3, #80	; 0x50
 8004f16:	d873      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d058      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x13a>
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d86f      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d064      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b30      	cmp	r3, #48	; 0x30
 8004f26:	d86b      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d060      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d867      	bhi.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d05c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d05a      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x15a>
 8004f38:	e062      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6899      	ldr	r1, [r3, #8]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f000 fcc1 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
      break;
 8004f66:	e04f      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6899      	ldr	r1, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f000 fcaa 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f8a:	609a      	str	r2, [r3, #8]
      break;
 8004f8c:	e03c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f000 fb68 	bl	8005670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2150      	movs	r1, #80	; 0x50
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fc77 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8004fac:	e02c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 fbc4 	bl	8005748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2160      	movs	r1, #96	; 0x60
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fc67 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e01c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fb48 	bl	8005670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fc57 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8004fec:	e00c      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f000 fc4e 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8004ffe:	e003      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e000      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b0c      	cmp	r3, #12
 8005036:	d831      	bhi.n	800509c <HAL_TIM_ReadCapturedValue+0x78>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <HAL_TIM_ReadCapturedValue+0x1c>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005075 	.word	0x08005075
 8005044:	0800509d 	.word	0x0800509d
 8005048:	0800509d 	.word	0x0800509d
 800504c:	0800509d 	.word	0x0800509d
 8005050:	0800507f 	.word	0x0800507f
 8005054:	0800509d 	.word	0x0800509d
 8005058:	0800509d 	.word	0x0800509d
 800505c:	0800509d 	.word	0x0800509d
 8005060:	08005089 	.word	0x08005089
 8005064:	0800509d 	.word	0x0800509d
 8005068:	0800509d 	.word	0x0800509d
 800506c:	0800509d 	.word	0x0800509d
 8005070:	08005093 	.word	0x08005093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	60fb      	str	r3, [r7, #12]

      break;
 800507c:	e00f      	b.n	800509e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	60fb      	str	r3, [r7, #12]

      break;
 8005086:	e00a      	b.n	800509e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	60fb      	str	r3, [r7, #12]

      break;
 8005090:	e005      	b.n	800509e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	60fb      	str	r3, [r7, #12]

      break;
 800509a:	e000      	b.n	800509e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800509c:	bf00      	nop
  }

  return tmpreg;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a40      	ldr	r2, [pc, #256]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3d      	ldr	r2, [pc, #244]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3c      	ldr	r2, [pc, #240]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3a      	ldr	r2, [pc, #232]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <TIM_Base_SetConfig+0x114>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d027      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d023      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_Base_SetConfig+0x128>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <TIM_Base_SetConfig+0x12c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a26      	ldr	r2, [pc, #152]	; (8005218 <TIM_Base_SetConfig+0x130>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a25      	ldr	r2, [pc, #148]	; (800521c <TIM_Base_SetConfig+0x134>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a24      	ldr	r2, [pc, #144]	; (8005220 <TIM_Base_SetConfig+0x138>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_Base_SetConfig+0x13c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <TIM_Base_SetConfig+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d103      	bne.n	80051e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	615a      	str	r2, [r3, #20]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800
 800521c:	40001800 	.word	0x40001800
 8005220:	40001c00 	.word	0x40001c00
 8005224:	40002000 	.word	0x40002000

08005228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0302 	bic.w	r3, r3, #2
 8005270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a20      	ldr	r2, [pc, #128]	; (8005300 <TIM_OC1_SetConfig+0xd8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC1_SetConfig+0x64>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <TIM_OC1_SetConfig+0xdc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10c      	bne.n	80052a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0308 	bic.w	r3, r3, #8
 8005292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <TIM_OC1_SetConfig+0xd8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC1_SetConfig+0x8e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a14      	ldr	r2, [pc, #80]	; (8005304 <TIM_OC1_SetConfig+0xdc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40010000 	.word	0x40010000
 8005304:	40010400 	.word	0x40010400

08005308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0210 	bic.w	r2, r3, #16
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0320 	bic.w	r3, r3, #32
 8005352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a22      	ldr	r2, [pc, #136]	; (80053ec <TIM_OC2_SetConfig+0xe4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC2_SetConfig+0x68>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <TIM_OC2_SetConfig+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d10d      	bne.n	800538c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <TIM_OC2_SetConfig+0xe4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC2_SetConfig+0x94>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <TIM_OC2_SetConfig+0xe8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d113      	bne.n	80053c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40010400 	.word	0x40010400

080053f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <TIM_OC3_SetConfig+0xe0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_OC3_SetConfig+0x66>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <TIM_OC3_SetConfig+0xe4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10d      	bne.n	8005476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <TIM_OC3_SetConfig+0xe0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC3_SetConfig+0x92>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <TIM_OC3_SetConfig+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400

080054dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	031b      	lsls	r3, r3, #12
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a12      	ldr	r2, [pc, #72]	; (8005580 <TIM_OC4_SetConfig+0xa4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_OC4_SetConfig+0x68>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a11      	ldr	r2, [pc, #68]	; (8005584 <TIM_OC4_SetConfig+0xa8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d109      	bne.n	8005558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a28      	ldr	r2, [pc, #160]	; (8005654 <TIM_TI1_SetConfig+0xcc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01b      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d017      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a25      	ldr	r2, [pc, #148]	; (8005658 <TIM_TI1_SetConfig+0xd0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a24      	ldr	r2, [pc, #144]	; (800565c <TIM_TI1_SetConfig+0xd4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00f      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a23      	ldr	r2, [pc, #140]	; (8005660 <TIM_TI1_SetConfig+0xd8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a22      	ldr	r2, [pc, #136]	; (8005664 <TIM_TI1_SetConfig+0xdc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_TI1_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_TI1_SetConfig+0x66>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_TI1_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <TIM_TI1_SetConfig+0x6a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <TIM_TI1_SetConfig+0x6c>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e003      	b.n	8005612 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	b2db      	uxtb	r3, r3
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f023 030a 	bic.w	r3, r3, #10
 800562c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 030a 	and.w	r3, r3, #10
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40010400 	.word	0x40010400
 8005668:	40014000 	.word	0x40014000
 800566c:	40001800 	.word	0x40001800

08005670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800569a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f023 030a 	bic.w	r3, r3, #10
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f023 0210 	bic.w	r2, r3, #16
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800570c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	031b      	lsls	r3, r3, #12
 8005712:	b29b      	uxth	r3, r3
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0210 	bic.w	r2, r3, #16
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	031b      	lsls	r3, r3, #12
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0303 	bic.w	r3, r3, #3
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	621a      	str	r2, [r3, #32]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	031b      	lsls	r3, r3, #12
 8005864:	b29b      	uxth	r3, r3
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	031b      	lsls	r3, r3, #12
 8005878:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f043 0307 	orr.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2201      	movs	r2, #1
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	43db      	mvns	r3, r3
 8005932:	401a      	ands	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005970:	2302      	movs	r3, #2
 8005972:	e05a      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c0:	d01d      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e03f      	b.n	8005b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc fda0 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	; 0x24
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fddf 	bl	8006684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af02      	add	r7, sp, #8
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d17c      	bne.n	8005c30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_UART_Transmit+0x2c>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e075      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Transmit+0x3e>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e06e      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2221      	movs	r2, #33	; 0x21
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b6a:	f7fc febf 	bl	80028ec <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d108      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	e003      	b.n	8005ba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ba8:	e02a      	b.n	8005c00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fb1f 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e036      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e007      	b.n	8005bf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cf      	bne.n	8005baa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 faef 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e006      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d11d      	bne.n	8005c90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_UART_Receive_IT+0x26>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e016      	b.n	8005c92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Receive_IT+0x38>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e00f      	b.n	8005c92 <HAL_UART_Receive_IT+0x58>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fb24 	bl	80062d4 <UART_Start_Receive_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	e000      	b.n	8005c92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b0ba      	sub	sp, #232	; 0xe8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10f      	bne.n	8005d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_UART_IRQHandler+0x66>
 8005cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fc07 	bl	800650e <UART_Receive_IT>
      return;
 8005d00:	e256      	b.n	80061b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80de 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x22c>
 8005d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80d1 	beq.w	8005ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_UART_IRQHandler+0xae>
 8005d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 0201 	orr.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_UART_IRQHandler+0xd2>
 8005d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f043 0202 	orr.w	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_UART_IRQHandler+0xf6>
 8005d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f043 0204 	orr.w	r2, r3, #4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d011      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x126>
 8005d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d105      	bne.n	8005db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f043 0208 	orr.w	r2, r3, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 81ed 	beq.w	80061a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_UART_IRQHandler+0x14e>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb92 	bl	800650e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_UART_IRQHandler+0x17a>
 8005e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d04f      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa9a 	bl	8006350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	d141      	bne.n	8005eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3314      	adds	r3, #20
 8005e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d9      	bne.n	8005e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d013      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	4a7d      	ldr	r2, [pc, #500]	; (8006078 <HAL_UART_IRQHandler+0x3dc>)
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc fe8c 	bl	8002ba8 <HAL_DMA_Abort_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	e00e      	b.n	8005ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f990 	bl	80061cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e00a      	b.n	8005ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f98c 	bl	80061cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	e006      	b.n	8005ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f988 	bl	80061cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ec2:	e170      	b.n	80061a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	bf00      	nop
    return;
 8005ec6:	e16e      	b.n	80061a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	f040 814a 	bne.w	8006166 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8143 	beq.w	8006166 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 813c 	beq.w	8006166 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	f040 80b4 	bne.w	800607c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8140 	beq.w	80061aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f080 8139 	bcs.w	80061aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4a:	f000 8088 	beq.w	800605e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1d9      	bne.n	8005f4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e1      	bne.n	8005f9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006000:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800602c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006040:	65ba      	str	r2, [r7, #88]	; 0x58
 8006042:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e3      	bne.n	800601c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	4618      	mov	r0, r3
 800605a:	f7fc fd35 	bl	8002ac8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006066:	b29b      	uxth	r3, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	b29b      	uxth	r3, r3
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8b6 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006074:	e099      	b.n	80061aa <HAL_UART_IRQHandler+0x50e>
 8006076:	bf00      	nop
 8006078:	08006417 	.word	0x08006417
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006084:	b29b      	uxth	r3, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 808b 	beq.w	80061ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8086 	beq.w	80061ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060c6:	647a      	str	r2, [r7, #68]	; 0x44
 80060c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e3      	bne.n	80060a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	623b      	str	r3, [r7, #32]
   return(result);
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e3      	bne.n	80060da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006144:	61fa      	str	r2, [r7, #28]
 8006146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	617b      	str	r3, [r7, #20]
   return(result);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e3      	bne.n	8006120 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f83e 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006164:	e023      	b.n	80061ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_UART_IRQHandler+0x4ea>
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f95d 	bl	800643e <UART_Transmit_IT>
    return;
 8006184:	e014      	b.n	80061b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00e      	beq.n	80061b0 <HAL_UART_IRQHandler+0x514>
 8006192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f99d 	bl	80064de <UART_EndTransmit_IT>
    return;
 80061a4:	e004      	b.n	80061b0 <HAL_UART_IRQHandler+0x514>
    return;
 80061a6:	bf00      	nop
 80061a8:	e002      	b.n	80061b0 <HAL_UART_IRQHandler+0x514>
      return;
 80061aa:	bf00      	nop
 80061ac:	e000      	b.n	80061b0 <HAL_UART_IRQHandler+0x514>
      return;
 80061ae:	bf00      	nop
  }
}
 80061b0:	37e8      	adds	r7, #232	; 0xe8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop

080061b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b090      	sub	sp, #64	; 0x40
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	e050      	b.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d04c      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <UART_WaitOnFlagUntilTimeout+0x30>
 8006218:	f7fc fb68 	bl	80028ec <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006224:	429a      	cmp	r2, r3
 8006226:	d241      	bcs.n	80062ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006248:	637a      	str	r2, [r7, #52]	; 0x34
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800624e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	613b      	str	r3, [r7, #16]
   return(result);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	63bb      	str	r3, [r7, #56]	; 0x38
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800627c:	623a      	str	r2, [r7, #32]
 800627e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	6a3a      	ldr	r2, [r7, #32]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	61bb      	str	r3, [r7, #24]
   return(result);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e5      	bne.n	800625c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e00f      	b.n	80062cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d09f      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3740      	adds	r7, #64	; 0x40
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2222      	movs	r2, #34	; 0x22
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006320:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0220 	orr.w	r2, r2, #32
 8006340:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b095      	sub	sp, #84	; 0x54
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006378:	643a      	str	r2, [r7, #64]	; 0x40
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800637e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e5      	bne.n	8006358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3314      	adds	r3, #20
 8006392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	61fb      	str	r3, [r7, #28]
   return(result);
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e5      	bne.n	800638c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d119      	bne.n	80063fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	647b      	str	r3, [r7, #68]	; 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e8:	61ba      	str	r2, [r7, #24]
 80063ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e5      	bne.n	80063c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
}
 800640a:	bf00      	nop
 800640c:	3754      	adds	r7, #84	; 0x54
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fecb 	bl	80061cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b21      	cmp	r3, #33	; 0x21
 8006450:	d13e      	bne.n	80064d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645a:	d114      	bne.n	8006486 <UART_Transmit_IT+0x48>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006478:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	1c9a      	adds	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	621a      	str	r2, [r3, #32]
 8006484:	e008      	b.n	8006498 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6211      	str	r1, [r2, #32]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10f      	bne.n	80064cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e000      	b.n	80064d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fe5a 	bl	80061b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b08c      	sub	sp, #48	; 0x30
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b22      	cmp	r3, #34	; 0x22
 8006520:	f040 80ab 	bne.w	800667a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d117      	bne.n	800655e <UART_Receive_IT+0x50>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d113      	bne.n	800655e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	b29a      	uxth	r2, r3
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	1c9a      	adds	r2, r3, #2
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
 800655c:	e026      	b.n	80065ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006570:	d007      	beq.n	8006582 <UART_Receive_IT+0x74>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <UART_Receive_IT+0x82>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e008      	b.n	80065a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	4619      	mov	r1, r3
 80065ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d15a      	bne.n	8006676 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0220 	bic.w	r2, r2, #32
 80065ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d135      	bne.n	800666c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	613b      	str	r3, [r7, #16]
   return(result);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f023 0310 	bic.w	r3, r3, #16
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	623a      	str	r2, [r7, #32]
 8006628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	61bb      	str	r3, [r7, #24]
   return(result);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b10      	cmp	r3, #16
 8006646:	d10a      	bne.n	800665e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff fdbb 	bl	80061e0 <HAL_UARTEx_RxEventCallback>
 800666a:	e002      	b.n	8006672 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fa f90f 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e002      	b.n	800667c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	e000      	b.n	800667c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800667a:	2302      	movs	r3, #2
  }
}
 800667c:	4618      	mov	r0, r3
 800667e:	3730      	adds	r7, #48	; 0x30
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006688:	b0c0      	sub	sp, #256	; 0x100
 800668a:	af00      	add	r7, sp, #0
 800668c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	68d9      	ldr	r1, [r3, #12]
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	ea40 0301 	orr.w	r3, r0, r1
 80066ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066dc:	f021 010c 	bic.w	r1, r1, #12
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ea:	430b      	orrs	r3, r1
 80066ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fe:	6999      	ldr	r1, [r3, #24]
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	ea40 0301 	orr.w	r3, r0, r1
 800670a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b8f      	ldr	r3, [pc, #572]	; (8006950 <UART_SetConfig+0x2cc>)
 8006714:	429a      	cmp	r2, r3
 8006716:	d005      	beq.n	8006724 <UART_SetConfig+0xa0>
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b8d      	ldr	r3, [pc, #564]	; (8006954 <UART_SetConfig+0x2d0>)
 8006720:	429a      	cmp	r2, r3
 8006722:	d104      	bne.n	800672e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006724:	f7fd fa7c 	bl	8003c20 <HAL_RCC_GetPCLK2Freq>
 8006728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800672c:	e003      	b.n	8006736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800672e:	f7fd fa63 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 8006732:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006740:	f040 810c 	bne.w	800695c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006748:	2200      	movs	r2, #0
 800674a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800674e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	1891      	adds	r1, r2, r2
 800675c:	65b9      	str	r1, [r7, #88]	; 0x58
 800675e:	415b      	adcs	r3, r3
 8006760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006766:	4621      	mov	r1, r4
 8006768:	eb12 0801 	adds.w	r8, r2, r1
 800676c:	4629      	mov	r1, r5
 800676e:	eb43 0901 	adc.w	r9, r3, r1
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800677e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006786:	4690      	mov	r8, r2
 8006788:	4699      	mov	r9, r3
 800678a:	4623      	mov	r3, r4
 800678c:	eb18 0303 	adds.w	r3, r8, r3
 8006790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006794:	462b      	mov	r3, r5
 8006796:	eb49 0303 	adc.w	r3, r9, r3
 800679a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067b2:	460b      	mov	r3, r1
 80067b4:	18db      	adds	r3, r3, r3
 80067b6:	653b      	str	r3, [r7, #80]	; 0x50
 80067b8:	4613      	mov	r3, r2
 80067ba:	eb42 0303 	adc.w	r3, r2, r3
 80067be:	657b      	str	r3, [r7, #84]	; 0x54
 80067c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067c8:	f7f9 fd1a 	bl	8000200 <__aeabi_uldivmod>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4b61      	ldr	r3, [pc, #388]	; (8006958 <UART_SetConfig+0x2d4>)
 80067d2:	fba3 2302 	umull	r2, r3, r3, r2
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	011c      	lsls	r4, r3, #4
 80067da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	1891      	adds	r1, r2, r2
 80067f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80067f4:	415b      	adcs	r3, r3
 80067f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067fc:	4641      	mov	r1, r8
 80067fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006802:	4649      	mov	r1, r9
 8006804:	eb43 0b01 	adc.w	fp, r3, r1
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800681c:	4692      	mov	sl, r2
 800681e:	469b      	mov	fp, r3
 8006820:	4643      	mov	r3, r8
 8006822:	eb1a 0303 	adds.w	r3, sl, r3
 8006826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800682a:	464b      	mov	r3, r9
 800682c:	eb4b 0303 	adc.w	r3, fp, r3
 8006830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006840:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006848:	460b      	mov	r3, r1
 800684a:	18db      	adds	r3, r3, r3
 800684c:	643b      	str	r3, [r7, #64]	; 0x40
 800684e:	4613      	mov	r3, r2
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	647b      	str	r3, [r7, #68]	; 0x44
 8006856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800685a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800685e:	f7f9 fccf 	bl	8000200 <__aeabi_uldivmod>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4611      	mov	r1, r2
 8006868:	4b3b      	ldr	r3, [pc, #236]	; (8006958 <UART_SetConfig+0x2d4>)
 800686a:	fba3 2301 	umull	r2, r3, r3, r1
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	2264      	movs	r2, #100	; 0x64
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	1acb      	subs	r3, r1, r3
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800687e:	4b36      	ldr	r3, [pc, #216]	; (8006958 <UART_SetConfig+0x2d4>)
 8006880:	fba3 2302 	umull	r2, r3, r3, r2
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800688c:	441c      	add	r4, r3
 800688e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006892:	2200      	movs	r2, #0
 8006894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800689c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	1891      	adds	r1, r2, r2
 80068a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068a8:	415b      	adcs	r3, r3
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068b0:	4641      	mov	r1, r8
 80068b2:	1851      	adds	r1, r2, r1
 80068b4:	6339      	str	r1, [r7, #48]	; 0x30
 80068b6:	4649      	mov	r1, r9
 80068b8:	414b      	adcs	r3, r1
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068c8:	4659      	mov	r1, fp
 80068ca:	00cb      	lsls	r3, r1, #3
 80068cc:	4651      	mov	r1, sl
 80068ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d2:	4651      	mov	r1, sl
 80068d4:	00ca      	lsls	r2, r1, #3
 80068d6:	4610      	mov	r0, r2
 80068d8:	4619      	mov	r1, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	4642      	mov	r2, r8
 80068de:	189b      	adds	r3, r3, r2
 80068e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e4:	464b      	mov	r3, r9
 80068e6:	460a      	mov	r2, r1
 80068e8:	eb42 0303 	adc.w	r3, r2, r3
 80068ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006904:	460b      	mov	r3, r1
 8006906:	18db      	adds	r3, r3, r3
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
 800690a:	4613      	mov	r3, r2
 800690c:	eb42 0303 	adc.w	r3, r2, r3
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800691a:	f7f9 fc71 	bl	8000200 <__aeabi_uldivmod>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <UART_SetConfig+0x2d4>)
 8006924:	fba3 1302 	umull	r1, r3, r3, r2
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	2164      	movs	r1, #100	; 0x64
 800692c:	fb01 f303 	mul.w	r3, r1, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	3332      	adds	r3, #50	; 0x32
 8006936:	4a08      	ldr	r2, [pc, #32]	; (8006958 <UART_SetConfig+0x2d4>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	f003 0207 	and.w	r2, r3, #7
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4422      	add	r2, r4
 800694a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800694c:	e105      	b.n	8006b5a <UART_SetConfig+0x4d6>
 800694e:	bf00      	nop
 8006950:	40011000 	.word	0x40011000
 8006954:	40011400 	.word	0x40011400
 8006958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800695c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006960:	2200      	movs	r2, #0
 8006962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006966:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800696a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800696e:	4642      	mov	r2, r8
 8006970:	464b      	mov	r3, r9
 8006972:	1891      	adds	r1, r2, r2
 8006974:	6239      	str	r1, [r7, #32]
 8006976:	415b      	adcs	r3, r3
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
 800697a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800697e:	4641      	mov	r1, r8
 8006980:	1854      	adds	r4, r2, r1
 8006982:	4649      	mov	r1, r9
 8006984:	eb43 0501 	adc.w	r5, r3, r1
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	00eb      	lsls	r3, r5, #3
 8006992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006996:	00e2      	lsls	r2, r4, #3
 8006998:	4614      	mov	r4, r2
 800699a:	461d      	mov	r5, r3
 800699c:	4643      	mov	r3, r8
 800699e:	18e3      	adds	r3, r4, r3
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a4:	464b      	mov	r3, r9
 80069a6:	eb45 0303 	adc.w	r3, r5, r3
 80069aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ca:	4629      	mov	r1, r5
 80069cc:	008b      	lsls	r3, r1, #2
 80069ce:	4621      	mov	r1, r4
 80069d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d4:	4621      	mov	r1, r4
 80069d6:	008a      	lsls	r2, r1, #2
 80069d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069dc:	f7f9 fc10 	bl	8000200 <__aeabi_uldivmod>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4b60      	ldr	r3, [pc, #384]	; (8006b68 <UART_SetConfig+0x4e4>)
 80069e6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	011c      	lsls	r4, r3, #4
 80069ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	1891      	adds	r1, r2, r2
 8006a06:	61b9      	str	r1, [r7, #24]
 8006a08:	415b      	adcs	r3, r3
 8006a0a:	61fb      	str	r3, [r7, #28]
 8006a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a10:	4641      	mov	r1, r8
 8006a12:	1851      	adds	r1, r2, r1
 8006a14:	6139      	str	r1, [r7, #16]
 8006a16:	4649      	mov	r1, r9
 8006a18:	414b      	adcs	r3, r1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a28:	4659      	mov	r1, fp
 8006a2a:	00cb      	lsls	r3, r1, #3
 8006a2c:	4651      	mov	r1, sl
 8006a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a32:	4651      	mov	r1, sl
 8006a34:	00ca      	lsls	r2, r1, #3
 8006a36:	4610      	mov	r0, r2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a44:	464b      	mov	r3, r9
 8006a46:	460a      	mov	r2, r1
 8006a48:	eb42 0303 	adc.w	r3, r2, r3
 8006a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a68:	4649      	mov	r1, r9
 8006a6a:	008b      	lsls	r3, r1, #2
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a72:	4641      	mov	r1, r8
 8006a74:	008a      	lsls	r2, r1, #2
 8006a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a7a:	f7f9 fbc1 	bl	8000200 <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <UART_SetConfig+0x4e4>)
 8006a84:	fba3 1302 	umull	r1, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	2164      	movs	r1, #100	; 0x64
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	3332      	adds	r3, #50	; 0x32
 8006a96:	4a34      	ldr	r2, [pc, #208]	; (8006b68 <UART_SetConfig+0x4e4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa2:	441c      	add	r4, r3
 8006aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8006aac:	677a      	str	r2, [r7, #116]	; 0x74
 8006aae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	1891      	adds	r1, r2, r2
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	415b      	adcs	r3, r3
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	1851      	adds	r1, r2, r1
 8006ac6:	6039      	str	r1, [r7, #0]
 8006ac8:	4649      	mov	r1, r9
 8006aca:	414b      	adcs	r3, r1
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ada:	4659      	mov	r1, fp
 8006adc:	00cb      	lsls	r3, r1, #3
 8006ade:	4651      	mov	r1, sl
 8006ae0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	00ca      	lsls	r2, r1, #3
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	4603      	mov	r3, r0
 8006aee:	4642      	mov	r2, r8
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006af4:	464b      	mov	r3, r9
 8006af6:	460a      	mov	r2, r1
 8006af8:	eb42 0303 	adc.w	r3, r2, r3
 8006afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	663b      	str	r3, [r7, #96]	; 0x60
 8006b08:	667a      	str	r2, [r7, #100]	; 0x64
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b16:	4649      	mov	r1, r9
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b20:	4641      	mov	r1, r8
 8006b22:	008a      	lsls	r2, r1, #2
 8006b24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b28:	f7f9 fb6a 	bl	8000200 <__aeabi_uldivmod>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <UART_SetConfig+0x4e4>)
 8006b32:	fba3 1302 	umull	r1, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	2164      	movs	r1, #100	; 0x64
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	3332      	adds	r3, #50	; 0x32
 8006b44:	4a08      	ldr	r2, [pc, #32]	; (8006b68 <UART_SetConfig+0x4e4>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4422      	add	r2, r4
 8006b58:	609a      	str	r2, [r3, #8]
}
 8006b5a:	bf00      	nop
 8006b5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b60:	46bd      	mov	sp, r7
 8006b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b66:	bf00      	nop
 8006b68:	51eb851f 	.word	0x51eb851f

08006b6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b7e:	2b84      	cmp	r3, #132	; 0x84
 8006b80:	d005      	beq.n	8006b8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ba0:	f001 f82a 	bl	8007bf8 <vTaskStartScheduler>
  
  return osOK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bac:	b089      	sub	sp, #36	; 0x24
 8006bae:	af04      	add	r7, sp, #16
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d020      	beq.n	8006bfe <osThreadCreate+0x54>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01c      	beq.n	8006bfe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685c      	ldr	r4, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681d      	ldr	r5, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691e      	ldr	r6, [r3, #16]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff ffc8 	bl	8006b6c <makeFreeRtosPriority>
 8006bdc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006be6:	9202      	str	r2, [sp, #8]
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	9100      	str	r1, [sp, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	4632      	mov	r2, r6
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fe22 	bl	800783c <xTaskCreateStatic>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	e01c      	b.n	8006c38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685c      	ldr	r4, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c0a:	b29e      	uxth	r6, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff ffaa 	bl	8006b6c <makeFreeRtosPriority>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f107 030c 	add.w	r3, r7, #12
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	9200      	str	r2, [sp, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	4632      	mov	r2, r6
 8006c26:	4629      	mov	r1, r5
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fe64 	bl	80078f6 <xTaskCreate>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d001      	beq.n	8006c38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e000      	b.n	8006c3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c42 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <osDelay+0x16>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	e000      	b.n	8006c5a <osDelay+0x18>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 ff98 	bl	8007b90 <vTaskDelay>
  
  return osOK;
 8006c60:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af02      	add	r7, sp, #8
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00f      	beq.n	8006c9c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10a      	bne.n	8006c98 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	9200      	str	r2, [sp, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f000 f962 	bl	8006f58 <xQueueGenericCreateStatic>
 8006c94:	4603      	mov	r3, r0
 8006c96:	e016      	b.n	8006cc6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e014      	b.n	8006cc6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d110      	bne.n	8006cc4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	f000 f9ce 	bl	8007048 <xQueueGenericCreate>
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <osSemaphoreCreate+0x56>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa1e 	bl	80070fc <xQueueGenericSend>
      return sema;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e000      	b.n	8006cc6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006cc4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006cce:	b590      	push	{r4, r7, lr}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af02      	add	r7, sp, #8
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <osMessageCreate+0x36>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6859      	ldr	r1, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2400      	movs	r4, #0
 8006cfa:	9400      	str	r4, [sp, #0]
 8006cfc:	f000 f92c 	bl	8006f58 <xQueueGenericCreateStatic>
 8006d00:	4603      	mov	r3, r0
 8006d02:	e008      	b.n	8006d16 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f000 f99a 	bl	8007048 <xQueueGenericCreate>
 8006d14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}

08006d1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f103 0208 	add.w	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f103 0208 	add.w	r2, r3, #8
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f103 0208 	add.w	r2, r3, #8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d103      	bne.n	8006de0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e00c      	b.n	8006dfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3308      	adds	r3, #8
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e002      	b.n	8006dee <vListInsert+0x2e>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d2f6      	bcs.n	8006de8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6892      	ldr	r2, [r2, #8]
 8006e48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6852      	ldr	r2, [r2, #4]
 8006e52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d103      	bne.n	8006e66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eb2:	f001 fce7 	bl	8008884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ec2:	fb01 f303 	mul.w	r3, r1, r3
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	441a      	add	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d114      	bne.n	8006f32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01a      	beq.n	8006f46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3310      	adds	r3, #16
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 f8c1 	bl	800809c <xTaskRemoveFromEventList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <xQueueGenericReset+0xcc>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	e009      	b.n	8006f46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3310      	adds	r3, #16
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fef1 	bl	8006d1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff feec 	bl	8006d1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f001 fccd 	bl	80088e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f4a:	2301      	movs	r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	e000ed04 	.word	0xe000ed04

08006f58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08e      	sub	sp, #56	; 0x38
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <xQueueGenericCreateStatic+0x52>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <xQueueGenericCreateStatic+0x56>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <xQueueGenericCreateStatic+0x58>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	623b      	str	r3, [r7, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <xQueueGenericCreateStatic+0x7e>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <xQueueGenericCreateStatic+0x82>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <xQueueGenericCreateStatic+0x84>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	61fb      	str	r3, [r7, #28]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ff6:	2348      	movs	r3, #72	; 0x48
 8006ff8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b48      	cmp	r3, #72	; 0x48
 8006ffe:	d00a      	beq.n	8007016 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	61bb      	str	r3, [r7, #24]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007016:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800702a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f83f 	bl	80070bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueGenericCreate+0x2a>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	613b      	str	r3, [r7, #16]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3348      	adds	r3, #72	; 0x48
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fd21 	bl	8008ac8 <pvPortMalloc>
 8007086:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d011      	beq.n	80070b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	3348      	adds	r3, #72	; 0x48
 8007096:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070a0:	79fa      	ldrb	r2, [r7, #7]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f805 	bl	80070bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070b2:	69bb      	ldr	r3, [r7, #24]
	}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e002      	b.n	80070de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ea:	2101      	movs	r1, #1
 80070ec:	69b8      	ldr	r0, [r7, #24]
 80070ee:	f7ff fecb 	bl	8006e88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericSend+0x32>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <xQueueGenericSend+0x40>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <xQueueGenericSend+0x44>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <xQueueGenericSend+0x46>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <xQueueGenericSend+0x60>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b02      	cmp	r3, #2
 8007160:	d103      	bne.n	800716a <xQueueGenericSend+0x6e>
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <xQueueGenericSend+0x72>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <xQueueGenericSend+0x74>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xQueueGenericSend+0x8e>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800718a:	f001 f947 	bl	800841c <xTaskGetSchedulerState>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <xQueueGenericSend+0x9e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <xQueueGenericSend+0xa2>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <xQueueGenericSend+0xa4>
 800719e:	2300      	movs	r3, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xQueueGenericSend+0xbe>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	61fb      	str	r3, [r7, #28]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071ba:	f001 fb63 	bl	8008884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d302      	bcc.n	80071d0 <xQueueGenericSend+0xd4>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d129      	bne.n	8007224 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d6:	f000 fa37 	bl	8007648 <prvCopyDataToQueue>
 80071da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	3324      	adds	r3, #36	; 0x24
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 ff57 	bl	800809c <xTaskRemoveFromEventList>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d013      	beq.n	800721c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071f4:	4b3f      	ldr	r3, [pc, #252]	; (80072f4 <xQueueGenericSend+0x1f8>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	e00a      	b.n	800721c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800720c:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <xQueueGenericSend+0x1f8>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800721c:	f001 fb62 	bl	80088e4 <vPortExitCritical>
				return pdPASS;
 8007220:	2301      	movs	r3, #1
 8007222:	e063      	b.n	80072ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800722a:	f001 fb5b 	bl	80088e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800722e:	2300      	movs	r3, #0
 8007230:	e05c      	b.n	80072ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007238:	f107 0314 	add.w	r3, r7, #20
 800723c:	4618      	mov	r0, r3
 800723e:	f000 ff8f 	bl	8008160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007246:	f001 fb4d 	bl	80088e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800724a:	f000 fd3f 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800724e:	f001 fb19 	bl	8008884 <vPortEnterCritical>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007258:	b25b      	sxtb	r3, r3
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d103      	bne.n	8007268 <xQueueGenericSend+0x16c>
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726e:	b25b      	sxtb	r3, r3
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d103      	bne.n	800727e <xQueueGenericSend+0x182>
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800727e:	f001 fb31 	bl	80088e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007282:	1d3a      	adds	r2, r7, #4
 8007284:	f107 0314 	add.w	r3, r7, #20
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ff7e 	bl	800818c <xTaskCheckForTimeOut>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d124      	bne.n	80072e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007298:	f000 fab8 	bl	800780c <prvIsQueueFull>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d018      	beq.n	80072d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	3310      	adds	r3, #16
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4611      	mov	r1, r2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fed2 	bl	8008054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fa59 	bl	8007768 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072b6:	f000 fd17 	bl	8007ce8 <xTaskResumeAll>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f47f af7c 	bne.w	80071ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072c2:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <xQueueGenericSend+0x1f8>)
 80072c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	e772      	b.n	80071ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d6:	f000 fa47 	bl	8007768 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072da:	f000 fd05 	bl	8007ce8 <xTaskResumeAll>
 80072de:	e76c      	b.n	80071ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e2:	f000 fa41 	bl	8007768 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072e6:	f000 fcff 	bl	8007ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3738      	adds	r7, #56	; 0x38
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b090      	sub	sp, #64	; 0x40
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d103      	bne.n	8007334 <xQueueGenericSendFromISR+0x3c>
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <xQueueGenericSendFromISR+0x40>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <xQueueGenericSendFromISR+0x42>
 8007338:	2300      	movs	r3, #0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b02      	cmp	r3, #2
 8007358:	d103      	bne.n	8007362 <xQueueGenericSendFromISR+0x6a>
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <xQueueGenericSendFromISR+0x6e>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueGenericSendFromISR+0x70>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	623b      	str	r3, [r7, #32]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007382:	f001 fb61 	bl	8008a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007386:	f3ef 8211 	mrs	r2, BASEPRI
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	61fa      	str	r2, [r7, #28]
 800739c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800739e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <xQueueGenericSendFromISR+0xbc>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d12f      	bne.n	8007414 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073ca:	f000 f93d 	bl	8007648 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d112      	bne.n	80073fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d016      	beq.n	800740e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	3324      	adds	r3, #36	; 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fe59 	bl	800809c <xTaskRemoveFromEventList>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e007      	b.n	800740e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007402:	3301      	adds	r3, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	b25a      	sxtb	r2, r3
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800740e:	2301      	movs	r3, #1
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007412:	e001      	b.n	8007418 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007422:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007426:	4618      	mov	r0, r3
 8007428:	3740      	adds	r7, #64	; 0x40
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08e      	sub	sp, #56	; 0x38
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	623b      	str	r3, [r7, #32]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	61fb      	str	r3, [r7, #28]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <xQueueGiveFromISR+0x58>
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <xQueueGiveFromISR+0x5c>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <xQueueGiveFromISR+0x5e>
 800748a:	2300      	movs	r3, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	61bb      	str	r3, [r7, #24]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a6:	f001 facf 	bl	8008a48 <vPortValidateInterruptPriority>
	__asm volatile
 80074aa:	f3ef 8211 	mrs	r2, BASEPRI
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	617a      	str	r2, [r7, #20]
 80074c0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d22b      	bcs.n	800752e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d112      	bne.n	8007518 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d016      	beq.n	8007528 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	3324      	adds	r3, #36	; 0x24
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fdcc 	bl	800809c <xTaskRemoveFromEventList>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e007      	b.n	8007528 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751c:	3301      	adds	r3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	b25a      	sxtb	r2, r3
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007528:	2301      	movs	r3, #1
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
 800752c:	e001      	b.n	8007532 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800752e:	2300      	movs	r3, #0
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f383 8811 	msr	BASEPRI, r3
}
 800753c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800753e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007540:	4618      	mov	r0, r3
 8007542:	3738      	adds	r7, #56	; 0x38
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	; 0x38
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	623b      	str	r3, [r7, #32]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <xQueueReceiveFromISR+0x3a>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <xQueueReceiveFromISR+0x3e>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueReceiveFromISR+0x40>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61fb      	str	r3, [r7, #28]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075a2:	f001 fa51 	bl	8008a48 <vPortValidateInterruptPriority>
	__asm volatile
 80075a6:	f3ef 8211 	mrs	r2, BASEPRI
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	61ba      	str	r2, [r7, #24]
 80075bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d02f      	beq.n	800762e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075dc:	f000 f89e 	bl	800771c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	1e5a      	subs	r2, r3, #1
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80075e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f0:	d112      	bne.n	8007618 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	3310      	adds	r3, #16
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fd4c 	bl	800809c <xTaskRemoveFromEventList>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00e      	beq.n	8007628 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	e007      	b.n	8007628 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800761c:	3301      	adds	r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	b25a      	sxtb	r2, r3
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007628:	2301      	movs	r3, #1
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
 800762c:	e001      	b.n	8007632 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f383 8811 	msr	BASEPRI, r3
}
 800763c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007640:	4618      	mov	r0, r3
 8007642:	3738      	adds	r7, #56	; 0x38
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d14d      	bne.n	800770a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fef0 	bl	8008458 <xTaskPriorityDisinherit>
 8007678:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	e043      	b.n	800770a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d119      	bne.n	80076bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6858      	ldr	r0, [r3, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	461a      	mov	r2, r3
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	f001 fd25 	bl	80090e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d32b      	bcc.n	800770a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	e026      	b.n	800770a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68d8      	ldr	r0, [r3, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	461a      	mov	r2, r3
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	f001 fd0b 	bl	80090e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	425b      	negs	r3, r3
 80076d6:	441a      	add	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d207      	bcs.n	80076f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	425b      	negs	r3, r3
 80076f2:	441a      	add	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d105      	bne.n	800770a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	3b01      	subs	r3, #1
 8007708:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007712:	697b      	ldr	r3, [r7, #20]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d018      	beq.n	8007760 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	441a      	add	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	429a      	cmp	r2, r3
 8007746:	d303      	bcc.n	8007750 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68d9      	ldr	r1, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	461a      	mov	r2, r3
 800775a:	6838      	ldr	r0, [r7, #0]
 800775c:	f001 fcc1 	bl	80090e2 <memcpy>
	}
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007770:	f001 f888 	bl	8008884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800777a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800777c:	e011      	b.n	80077a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d012      	beq.n	80077ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3324      	adds	r3, #36	; 0x24
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fc86 	bl	800809c <xTaskRemoveFromEventList>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007796:	f000 fd5b 	bl	8008250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	3b01      	subs	r3, #1
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dce9      	bgt.n	800777e <prvUnlockQueue+0x16>
 80077aa:	e000      	b.n	80077ae <prvUnlockQueue+0x46>
					break;
 80077ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	22ff      	movs	r2, #255	; 0xff
 80077b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077b6:	f001 f895 	bl	80088e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077ba:	f001 f863 	bl	8008884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077c6:	e011      	b.n	80077ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3310      	adds	r3, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fc61 	bl	800809c <xTaskRemoveFromEventList>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077e0:	f000 fd36 	bl	8008250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dce9      	bgt.n	80077c8 <prvUnlockQueue+0x60>
 80077f4:	e000      	b.n	80077f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	22ff      	movs	r2, #255	; 0xff
 80077fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007800:	f001 f870 	bl	80088e4 <vPortExitCritical>
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007814:	f001 f836 	bl	8008884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007820:	429a      	cmp	r2, r3
 8007822:	d102      	bne.n	800782a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e001      	b.n	800782e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800782e:	f001 f859 	bl	80088e4 <vPortExitCritical>

	return xReturn;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08e      	sub	sp, #56	; 0x38
 8007840:	af04      	add	r7, sp, #16
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10a      	bne.n	8007866 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	623b      	str	r3, [r7, #32]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xTaskCreateStatic+0x46>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	61fb      	str	r3, [r7, #28]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007882:	23b4      	movs	r3, #180	; 0xb4
 8007884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2bb4      	cmp	r3, #180	; 0xb4
 800788a:	d00a      	beq.n	80078a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	61bb      	str	r3, [r7, #24]
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01e      	beq.n	80078e8 <xTaskCreateStatic+0xac>
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01b      	beq.n	80078e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078c2:	2300      	movs	r3, #0
 80078c4:	9303      	str	r3, [sp, #12]
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f850 	bl	8007980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e2:	f000 f8eb 	bl	8007abc <prvAddNewTaskToReadyList>
 80078e6:	e001      	b.n	80078ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078ec:	697b      	ldr	r3, [r7, #20]
	}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b08c      	sub	sp, #48	; 0x30
 80078fa:	af04      	add	r7, sp, #16
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f8dc 	bl	8008ac8 <pvPortMalloc>
 8007910:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007918:	20b4      	movs	r0, #180	; 0xb4
 800791a:	f001 f8d5 	bl	8008ac8 <pvPortMalloc>
 800791e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
 800792c:	e005      	b.n	800793a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800792e:	6978      	ldr	r0, [r7, #20]
 8007930:	f001 f996 	bl	8008c60 <vPortFree>
 8007934:	e001      	b.n	800793a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d017      	beq.n	8007970 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007948:	88fa      	ldrh	r2, [r7, #6]
 800794a:	2300      	movs	r3, #0
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	9302      	str	r3, [sp, #8]
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f80e 	bl	8007980 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007964:	69f8      	ldr	r0, [r7, #28]
 8007966:	f000 f8a9 	bl	8007abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800796a:	2301      	movs	r3, #1
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	e002      	b.n	8007976 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007976:	69bb      	ldr	r3, [r7, #24]
	}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007998:	3b01      	subs	r3, #1
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f023 0307 	bic.w	r3, r3, #7
 80079a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	617b      	str	r3, [r7, #20]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01f      	beq.n	8007a0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	e012      	b.n	80079fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	3334      	adds	r3, #52	; 0x34
 80079e4:	460a      	mov	r2, r1
 80079e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	3301      	adds	r3, #1
 80079f8:	61fb      	str	r3, [r7, #28]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	2b0f      	cmp	r3, #15
 80079fe:	d9e9      	bls.n	80079d4 <prvInitialiseNewTask+0x54>
 8007a00:	e000      	b.n	8007a04 <prvInitialiseNewTask+0x84>
			{
				break;
 8007a02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a0c:	e003      	b.n	8007a16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d901      	bls.n	8007a20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a1c:	2306      	movs	r3, #6
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	2200      	movs	r2, #0
 8007a30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	3304      	adds	r3, #4
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff f991 	bl	8006d5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	3318      	adds	r3, #24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff f98c 	bl	8006d5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	f1c3 0207 	rsb	r2, r3, #7
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	334c      	adds	r3, #76	; 0x4c
 8007a70:	2260      	movs	r2, #96	; 0x60
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 fb42 	bl	80090fe <memset>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	4a0c      	ldr	r2, [pc, #48]	; (8007ab0 <prvInitialiseNewTask+0x130>)
 8007a7e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <prvInitialiseNewTask+0x134>)
 8007a84:	655a      	str	r2, [r3, #84]	; 0x54
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	4a0b      	ldr	r2, [pc, #44]	; (8007ab8 <prvInitialiseNewTask+0x138>)
 8007a8a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	68f9      	ldr	r1, [r7, #12]
 8007a90:	69b8      	ldr	r0, [r7, #24]
 8007a92:	f000 fdcd 	bl	8008630 <pxPortInitialiseStack>
 8007a96:	4602      	mov	r2, r0
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	3720      	adds	r7, #32
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	08009d48 	.word	0x08009d48
 8007ab4:	08009d68 	.word	0x08009d68
 8007ab8:	08009d28 	.word	0x08009d28

08007abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ac4:	f000 fede 	bl	8008884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac8:	4b2a      	ldr	r3, [pc, #168]	; (8007b74 <prvAddNewTaskToReadyList+0xb8>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a29      	ldr	r2, [pc, #164]	; (8007b74 <prvAddNewTaskToReadyList+0xb8>)
 8007ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ad2:	4b29      	ldr	r3, [pc, #164]	; (8007b78 <prvAddNewTaskToReadyList+0xbc>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ada:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <prvAddNewTaskToReadyList+0xbc>)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <prvAddNewTaskToReadyList+0xb8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d110      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae8:	f000 fbd6 	bl	8008298 <prvInitialiseTaskLists>
 8007aec:	e00d      	b.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aee:	4b23      	ldr	r3, [pc, #140]	; (8007b7c <prvAddNewTaskToReadyList+0xc0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007af6:	4b20      	ldr	r3, [pc, #128]	; (8007b78 <prvAddNewTaskToReadyList+0xbc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d802      	bhi.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b04:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <prvAddNewTaskToReadyList+0xbc>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007b12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	2201      	movs	r2, #1
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <prvAddNewTaskToReadyList+0xcc>)
 8007b34:	441a      	add	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7ff f91b 	bl	8006d78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b42:	f000 fecf 	bl	80088e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <prvAddNewTaskToReadyList+0xc0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <prvAddNewTaskToReadyList+0xbc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d207      	bcs.n	8007b6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	2000083c 	.word	0x2000083c
 8007b78:	2000073c 	.word	0x2000073c
 8007b7c:	20000848 	.word	0x20000848
 8007b80:	20000858 	.word	0x20000858
 8007b84:	20000844 	.word	0x20000844
 8007b88:	20000740 	.word	0x20000740
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d017      	beq.n	8007bd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <vTaskDelay+0x60>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vTaskDelay+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60bb      	str	r3, [r7, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bc0:	f000 f884 	bl	8007ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fccc 	bl	8008564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bcc:	f000 f88c 	bl	8007ce8 <xTaskResumeAll>
 8007bd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <vTaskDelay+0x64>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000864 	.word	0x20000864
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c06:	463a      	mov	r2, r7
 8007c08:	1d39      	adds	r1, r7, #4
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f8 fc8a 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	9202      	str	r2, [sp, #8]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	2300      	movs	r3, #0
 8007c24:	460a      	mov	r2, r1
 8007c26:	4921      	ldr	r1, [pc, #132]	; (8007cac <vTaskStartScheduler+0xb4>)
 8007c28:	4821      	ldr	r0, [pc, #132]	; (8007cb0 <vTaskStartScheduler+0xb8>)
 8007c2a:	f7ff fe07 	bl	800783c <xTaskCreateStatic>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <vTaskStartScheduler+0xbc>)
 8007c32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c34:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <vTaskStartScheduler+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e001      	b.n	8007c46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d11b      	bne.n	8007c84 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c60:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <vTaskStartScheduler+0xc0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	334c      	adds	r3, #76	; 0x4c
 8007c66:	4a15      	ldr	r2, [pc, #84]	; (8007cbc <vTaskStartScheduler+0xc4>)
 8007c68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6a:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <vTaskStartScheduler+0xc8>)
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <vTaskStartScheduler+0xcc>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c78:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <vTaskStartScheduler+0xd0>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c7e:	f000 fd5f 	bl	8008740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c82:	e00e      	b.n	8007ca2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d10a      	bne.n	8007ca2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60fb      	str	r3, [r7, #12]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <vTaskStartScheduler+0xa8>
}
 8007ca2:	bf00      	nop
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	08009d08 	.word	0x08009d08
 8007cb0:	08008269 	.word	0x08008269
 8007cb4:	20000860 	.word	0x20000860
 8007cb8:	2000073c 	.word	0x2000073c
 8007cbc:	2000002c 	.word	0x2000002c
 8007cc0:	2000085c 	.word	0x2000085c
 8007cc4:	20000848 	.word	0x20000848
 8007cc8:	20000840 	.word	0x20000840

08007ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a03      	ldr	r2, [pc, #12]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	20000864 	.word	0x20000864

08007ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cf6:	4b41      	ldr	r3, [pc, #260]	; (8007dfc <xTaskResumeAll+0x114>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	603b      	str	r3, [r7, #0]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d14:	f000 fdb6 	bl	8008884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d18:	4b38      	ldr	r3, [pc, #224]	; (8007dfc <xTaskResumeAll+0x114>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	4a37      	ldr	r2, [pc, #220]	; (8007dfc <xTaskResumeAll+0x114>)
 8007d20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d22:	4b36      	ldr	r3, [pc, #216]	; (8007dfc <xTaskResumeAll+0x114>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d161      	bne.n	8007dee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d2a:	4b35      	ldr	r3, [pc, #212]	; (8007e00 <xTaskResumeAll+0x118>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d05d      	beq.n	8007dee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d32:	e02e      	b.n	8007d92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d34:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <xTaskResumeAll+0x11c>)
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff f876 	bl	8006e32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff f871 	bl	8006e32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	2201      	movs	r2, #1
 8007d56:	409a      	lsls	r2, r3
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <xTaskResumeAll+0x120>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <xTaskResumeAll+0x120>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a27      	ldr	r2, [pc, #156]	; (8007e0c <xTaskResumeAll+0x124>)
 8007d70:	441a      	add	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4610      	mov	r0, r2
 8007d7a:	f7fe fffd 	bl	8006d78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <xTaskResumeAll+0x128>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d302      	bcc.n	8007d92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d8c:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <xTaskResumeAll+0x12c>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d92:	4b1c      	ldr	r3, [pc, #112]	; (8007e04 <xTaskResumeAll+0x11c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1cc      	bne.n	8007d34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007da0:	f000 fb1c 	bl	80083dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <xTaskResumeAll+0x130>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d010      	beq.n	8007dd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007db0:	f000 f836 	bl	8007e20 <xTaskIncrementTick>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007dba:	4b16      	ldr	r3, [pc, #88]	; (8007e14 <xTaskResumeAll+0x12c>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f1      	bne.n	8007db0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007dcc:	4b12      	ldr	r3, [pc, #72]	; (8007e18 <xTaskResumeAll+0x130>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <xTaskResumeAll+0x12c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <xTaskResumeAll+0x134>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dee:	f000 fd79 	bl	80088e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007df2:	68bb      	ldr	r3, [r7, #8]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000864 	.word	0x20000864
 8007e00:	2000083c 	.word	0x2000083c
 8007e04:	200007fc 	.word	0x200007fc
 8007e08:	20000844 	.word	0x20000844
 8007e0c:	20000740 	.word	0x20000740
 8007e10:	2000073c 	.word	0x2000073c
 8007e14:	20000850 	.word	0x20000850
 8007e18:	2000084c 	.word	0x2000084c
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e2a:	4b4e      	ldr	r3, [pc, #312]	; (8007f64 <xTaskIncrementTick+0x144>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f040 808e 	bne.w	8007f50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e34:	4b4c      	ldr	r3, [pc, #304]	; (8007f68 <xTaskIncrementTick+0x148>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e3c:	4a4a      	ldr	r2, [pc, #296]	; (8007f68 <xTaskIncrementTick+0x148>)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d120      	bne.n	8007e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e48:	4b48      	ldr	r3, [pc, #288]	; (8007f6c <xTaskIncrementTick+0x14c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	603b      	str	r3, [r7, #0]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xTaskIncrementTick+0x46>
 8007e68:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <xTaskIncrementTick+0x14c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <xTaskIncrementTick+0x150>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a3e      	ldr	r2, [pc, #248]	; (8007f6c <xTaskIncrementTick+0x14c>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4a3e      	ldr	r2, [pc, #248]	; (8007f70 <xTaskIncrementTick+0x150>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	4b3d      	ldr	r3, [pc, #244]	; (8007f74 <xTaskIncrementTick+0x154>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a3c      	ldr	r2, [pc, #240]	; (8007f74 <xTaskIncrementTick+0x154>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	f000 faa9 	bl	80083dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e8a:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <xTaskIncrementTick+0x158>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d348      	bcc.n	8007f26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e94:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <xTaskIncrementTick+0x14c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <xTaskIncrementTick+0x158>)
 8007ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea4:	601a      	str	r2, [r3, #0]
					break;
 8007ea6:	e03e      	b.n	8007f26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea8:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <xTaskIncrementTick+0x14c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d203      	bcs.n	8007ec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ec0:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <xTaskIncrementTick+0x158>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ec6:	e02e      	b.n	8007f26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe ffb0 	bl	8006e32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	3318      	adds	r3, #24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe ffa7 	bl	8006e32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	2201      	movs	r2, #1
 8007eea:	409a      	lsls	r2, r3
 8007eec:	4b23      	ldr	r3, [pc, #140]	; (8007f7c <xTaskIncrementTick+0x15c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <xTaskIncrementTick+0x15c>)
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4a1f      	ldr	r2, [pc, #124]	; (8007f80 <xTaskIncrementTick+0x160>)
 8007f04:	441a      	add	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f7fe ff33 	bl	8006d78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <xTaskIncrementTick+0x164>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3b9      	bcc.n	8007e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f24:	e7b6      	b.n	8007e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f26:	4b17      	ldr	r3, [pc, #92]	; (8007f84 <xTaskIncrementTick+0x164>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	4914      	ldr	r1, [pc, #80]	; (8007f80 <xTaskIncrementTick+0x160>)
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d901      	bls.n	8007f42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <xTaskIncrementTick+0x168>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	e004      	b.n	8007f5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f50:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <xTaskIncrementTick+0x16c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3301      	adds	r3, #1
 8007f56:	4a0d      	ldr	r2, [pc, #52]	; (8007f8c <xTaskIncrementTick+0x16c>)
 8007f58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000864 	.word	0x20000864
 8007f68:	20000840 	.word	0x20000840
 8007f6c:	200007f4 	.word	0x200007f4
 8007f70:	200007f8 	.word	0x200007f8
 8007f74:	20000854 	.word	0x20000854
 8007f78:	2000085c 	.word	0x2000085c
 8007f7c:	20000844 	.word	0x20000844
 8007f80:	20000740 	.word	0x20000740
 8007f84:	2000073c 	.word	0x2000073c
 8007f88:	20000850 	.word	0x20000850
 8007f8c:	2000084c 	.word	0x2000084c

08007f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f96:	4b29      	ldr	r3, [pc, #164]	; (800803c <vTaskSwitchContext+0xac>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f9e:	4b28      	ldr	r3, [pc, #160]	; (8008040 <vTaskSwitchContext+0xb0>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fa4:	e044      	b.n	8008030 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007fa6:	4b26      	ldr	r3, [pc, #152]	; (8008040 <vTaskSwitchContext+0xb0>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <vTaskSwitchContext+0xb4>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	fab3 f383 	clz	r3, r3
 8007fb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	f1c3 031f 	rsb	r3, r3, #31
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	4921      	ldr	r1, [pc, #132]	; (8008048 <vTaskSwitchContext+0xb8>)
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	607b      	str	r3, [r7, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	e7fe      	b.n	8007fea <vTaskSwitchContext+0x5a>
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a14      	ldr	r2, [pc, #80]	; (8008048 <vTaskSwitchContext+0xb8>)
 8007ff8:	4413      	add	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	605a      	str	r2, [r3, #4]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3308      	adds	r3, #8
 800800e:	429a      	cmp	r2, r3
 8008010:	d104      	bne.n	800801c <vTaskSwitchContext+0x8c>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	605a      	str	r2, [r3, #4]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	4a0a      	ldr	r2, [pc, #40]	; (800804c <vTaskSwitchContext+0xbc>)
 8008024:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <vTaskSwitchContext+0xbc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	334c      	adds	r3, #76	; 0x4c
 800802c:	4a08      	ldr	r2, [pc, #32]	; (8008050 <vTaskSwitchContext+0xc0>)
 800802e:	6013      	str	r3, [r2, #0]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	20000864 	.word	0x20000864
 8008040:	20000850 	.word	0x20000850
 8008044:	20000844 	.word	0x20000844
 8008048:	20000740 	.word	0x20000740
 800804c:	2000073c 	.word	0x2000073c
 8008050:	2000002c 	.word	0x2000002c

08008054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800807a:	4b07      	ldr	r3, [pc, #28]	; (8008098 <vTaskPlaceOnEventList+0x44>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3318      	adds	r3, #24
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fe fe9c 	bl	8006dc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008088:	2101      	movs	r1, #1
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f000 fa6a 	bl	8008564 <prvAddCurrentTaskToDelayedList>
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	2000073c 	.word	0x2000073c

0800809c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	3318      	adds	r3, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe feb0 	bl	8006e32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <xTaskRemoveFromEventList+0xac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11c      	bne.n	8008114 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	3304      	adds	r3, #4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fea7 	bl	8006e32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <xTaskRemoveFromEventList+0xb0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	4a16      	ldr	r2, [pc, #88]	; (800814c <xTaskRemoveFromEventList+0xb0>)
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <xTaskRemoveFromEventList+0xb4>)
 8008104:	441a      	add	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3304      	adds	r3, #4
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f7fe fe33 	bl	8006d78 <vListInsertEnd>
 8008112:	e005      	b.n	8008120 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	3318      	adds	r3, #24
 8008118:	4619      	mov	r1, r3
 800811a:	480e      	ldr	r0, [pc, #56]	; (8008154 <xTaskRemoveFromEventList+0xb8>)
 800811c:	f7fe fe2c 	bl	8006d78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <xTaskRemoveFromEventList+0xbc>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	429a      	cmp	r2, r3
 800812c:	d905      	bls.n	800813a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <xTaskRemoveFromEventList+0xc0>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	e001      	b.n	800813e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800813e:	697b      	ldr	r3, [r7, #20]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	20000864 	.word	0x20000864
 800814c:	20000844 	.word	0x20000844
 8008150:	20000740 	.word	0x20000740
 8008154:	200007fc 	.word	0x200007fc
 8008158:	2000073c 	.word	0x2000073c
 800815c:	20000850 	.word	0x20000850

08008160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008168:	4b06      	ldr	r3, [pc, #24]	; (8008184 <vTaskInternalSetTimeOutState+0x24>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <vTaskInternalSetTimeOutState+0x28>)
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	605a      	str	r2, [r3, #4]
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	20000854 	.word	0x20000854
 8008188:	20000840 	.word	0x20000840

0800818c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	613b      	str	r3, [r7, #16]
}
 80081ae:	bf00      	nop
 80081b0:	e7fe      	b.n	80081b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60fb      	str	r3, [r7, #12]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081ce:	f000 fb59 	bl	8008884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081d2:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <xTaskCheckForTimeOut+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d102      	bne.n	80081f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	e023      	b.n	800823a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <xTaskCheckForTimeOut+0xc0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d007      	beq.n	800820e <xTaskCheckForTimeOut+0x82>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	429a      	cmp	r2, r3
 8008206:	d302      	bcc.n	800820e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e015      	b.n	800823a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	429a      	cmp	r2, r3
 8008216:	d20b      	bcs.n	8008230 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ff9b 	bl	8008160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	61fb      	str	r3, [r7, #28]
 800822e:	e004      	b.n	800823a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800823a:	f000 fb53 	bl	80088e4 <vPortExitCritical>

	return xReturn;
 800823e:	69fb      	ldr	r3, [r7, #28]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000840 	.word	0x20000840
 800824c:	20000854 	.word	0x20000854

08008250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008254:	4b03      	ldr	r3, [pc, #12]	; (8008264 <vTaskMissedYield+0x14>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
}
 800825a:	bf00      	nop
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	20000850 	.word	0x20000850

08008268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008270:	f000 f852 	bl	8008318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <prvIdleTask+0x28>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d9f9      	bls.n	8008270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <prvIdleTask+0x2c>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800828c:	e7f0      	b.n	8008270 <prvIdleTask+0x8>
 800828e:	bf00      	nop
 8008290:	20000740 	.word	0x20000740
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800829e:	2300      	movs	r3, #0
 80082a0:	607b      	str	r3, [r7, #4]
 80082a2:	e00c      	b.n	80082be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4a12      	ldr	r2, [pc, #72]	; (80082f8 <prvInitialiseTaskLists+0x60>)
 80082b0:	4413      	add	r3, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fd33 	bl	8006d1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3301      	adds	r3, #1
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b06      	cmp	r3, #6
 80082c2:	d9ef      	bls.n	80082a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082c4:	480d      	ldr	r0, [pc, #52]	; (80082fc <prvInitialiseTaskLists+0x64>)
 80082c6:	f7fe fd2a 	bl	8006d1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ca:	480d      	ldr	r0, [pc, #52]	; (8008300 <prvInitialiseTaskLists+0x68>)
 80082cc:	f7fe fd27 	bl	8006d1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082d0:	480c      	ldr	r0, [pc, #48]	; (8008304 <prvInitialiseTaskLists+0x6c>)
 80082d2:	f7fe fd24 	bl	8006d1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082d6:	480c      	ldr	r0, [pc, #48]	; (8008308 <prvInitialiseTaskLists+0x70>)
 80082d8:	f7fe fd21 	bl	8006d1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082dc:	480b      	ldr	r0, [pc, #44]	; (800830c <prvInitialiseTaskLists+0x74>)
 80082de:	f7fe fd1e 	bl	8006d1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082e2:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <prvInitialiseTaskLists+0x78>)
 80082e4:	4a05      	ldr	r2, [pc, #20]	; (80082fc <prvInitialiseTaskLists+0x64>)
 80082e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <prvInitialiseTaskLists+0x7c>)
 80082ea:	4a05      	ldr	r2, [pc, #20]	; (8008300 <prvInitialiseTaskLists+0x68>)
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000740 	.word	0x20000740
 80082fc:	200007cc 	.word	0x200007cc
 8008300:	200007e0 	.word	0x200007e0
 8008304:	200007fc 	.word	0x200007fc
 8008308:	20000810 	.word	0x20000810
 800830c:	20000828 	.word	0x20000828
 8008310:	200007f4 	.word	0x200007f4
 8008314:	200007f8 	.word	0x200007f8

08008318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800831e:	e019      	b.n	8008354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008320:	f000 fab0 	bl	8008884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008324:	4b10      	ldr	r3, [pc, #64]	; (8008368 <prvCheckTasksWaitingTermination+0x50>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe fd7e 	bl	8006e32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <prvCheckTasksWaitingTermination+0x54>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3b01      	subs	r3, #1
 800833c:	4a0b      	ldr	r2, [pc, #44]	; (800836c <prvCheckTasksWaitingTermination+0x54>)
 800833e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <prvCheckTasksWaitingTermination+0x58>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3b01      	subs	r3, #1
 8008346:	4a0a      	ldr	r2, [pc, #40]	; (8008370 <prvCheckTasksWaitingTermination+0x58>)
 8008348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800834a:	f000 facb 	bl	80088e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f810 	bl	8008374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <prvCheckTasksWaitingTermination+0x58>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1e1      	bne.n	8008320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800835c:	bf00      	nop
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000810 	.word	0x20000810
 800836c:	2000083c 	.word	0x2000083c
 8008370:	20000824 	.word	0x20000824

08008374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	334c      	adds	r3, #76	; 0x4c
 8008380:	4618      	mov	r0, r3
 8008382:	f000 ffdd 	bl	8009340 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fc63 	bl	8008c60 <vPortFree>
				vPortFree( pxTCB );
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fc60 	bl	8008c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083a0:	e018      	b.n	80083d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d103      	bne.n	80083b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc57 	bl	8008c60 <vPortFree>
	}
 80083b2:	e00f      	b.n	80083d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d00a      	beq.n	80083d4 <prvDeleteTCB+0x60>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60fb      	str	r3, [r7, #12]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <prvDeleteTCB+0x5e>
	}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <prvResetNextTaskUnblockTime+0x38>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <prvResetNextTaskUnblockTime+0x3c>)
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295
 80083f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083f4:	e008      	b.n	8008408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <prvResetNextTaskUnblockTime+0x38>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a04      	ldr	r2, [pc, #16]	; (8008418 <prvResetNextTaskUnblockTime+0x3c>)
 8008406:	6013      	str	r3, [r2, #0]
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	200007f4 	.word	0x200007f4
 8008418:	2000085c 	.word	0x2000085c

0800841c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008422:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <xTaskGetSchedulerState+0x34>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800842a:	2301      	movs	r3, #1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	e008      	b.n	8008442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <xTaskGetSchedulerState+0x38>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008438:	2302      	movs	r3, #2
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	e001      	b.n	8008442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008442:	687b      	ldr	r3, [r7, #4]
	}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	20000848 	.word	0x20000848
 8008454:	20000864 	.word	0x20000864

08008458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d06e      	beq.n	800854c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800846e:	4b3a      	ldr	r3, [pc, #232]	; (8008558 <xTaskPriorityDisinherit+0x100>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d00a      	beq.n	800848e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60bb      	str	r3, [r7, #8]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b0:	1e5a      	subs	r2, r3, #1
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084be:	429a      	cmp	r2, r3
 80084c0:	d044      	beq.n	800854c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d140      	bne.n	800854c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fcaf 	bl	8006e32 <uxListRemove>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d115      	bne.n	8008506 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084de:	491f      	ldr	r1, [pc, #124]	; (800855c <xTaskPriorityDisinherit+0x104>)
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <xTaskPriorityDisinherit+0xae>
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	2201      	movs	r2, #1
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	43da      	mvns	r2, r3
 80084fc:	4b18      	ldr	r3, [pc, #96]	; (8008560 <xTaskPriorityDisinherit+0x108>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4013      	ands	r3, r2
 8008502:	4a17      	ldr	r2, [pc, #92]	; (8008560 <xTaskPriorityDisinherit+0x108>)
 8008504:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	f1c3 0207 	rsb	r2, r3, #7
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	2201      	movs	r2, #1
 8008520:	409a      	lsls	r2, r3
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <xTaskPriorityDisinherit+0x108>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4313      	orrs	r3, r2
 8008528:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <xTaskPriorityDisinherit+0x108>)
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4a08      	ldr	r2, [pc, #32]	; (800855c <xTaskPriorityDisinherit+0x104>)
 800853a:	441a      	add	r2, r3
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3304      	adds	r3, #4
 8008540:	4619      	mov	r1, r3
 8008542:	4610      	mov	r0, r2
 8008544:	f7fe fc18 	bl	8006d78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800854c:	697b      	ldr	r3, [r7, #20]
	}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000073c 	.word	0x2000073c
 800855c:	20000740 	.word	0x20000740
 8008560:	20000844 	.word	0x20000844

08008564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008574:	4b28      	ldr	r3, [pc, #160]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3304      	adds	r3, #4
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fc59 	bl	8006e32 <uxListRemove>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008586:	4b24      	ldr	r3, [pc, #144]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	2201      	movs	r2, #1
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	43da      	mvns	r2, r3
 8008594:	4b21      	ldr	r3, [pc, #132]	; (800861c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4013      	ands	r3, r2
 800859a:	4a20      	ldr	r2, [pc, #128]	; (800861c <prvAddCurrentTaskToDelayedList+0xb8>)
 800859c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d10a      	bne.n	80085bc <prvAddCurrentTaskToDelayedList+0x58>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	481a      	ldr	r0, [pc, #104]	; (8008620 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085b6:	f7fe fbdf 	bl	8006d78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085ba:	e026      	b.n	800860a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085c4:	4b14      	ldr	r3, [pc, #80]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d209      	bcs.n	80085e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d4:	4b13      	ldr	r3, [pc, #76]	; (8008624 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b0f      	ldr	r3, [pc, #60]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe fbed 	bl	8006dc0 <vListInsert>
}
 80085e6:	e010      	b.n	800860a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e8:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4619      	mov	r1, r3
 80085f4:	4610      	mov	r0, r2
 80085f6:	f7fe fbe3 	bl	8006dc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	d202      	bcs.n	800860a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008604:	4a09      	ldr	r2, [pc, #36]	; (800862c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6013      	str	r3, [r2, #0]
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000840 	.word	0x20000840
 8008618:	2000073c 	.word	0x2000073c
 800861c:	20000844 	.word	0x20000844
 8008620:	20000828 	.word	0x20000828
 8008624:	200007f8 	.word	0x200007f8
 8008628:	200007f4 	.word	0x200007f4
 800862c:	2000085c 	.word	0x2000085c

08008630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3b04      	subs	r3, #4
 8008640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3b04      	subs	r3, #4
 800864e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3b04      	subs	r3, #4
 800865e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008660:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <pxPortInitialiseStack+0x64>)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b14      	subs	r3, #20
 800866a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3b04      	subs	r3, #4
 8008676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f06f 0202 	mvn.w	r2, #2
 800867e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3b20      	subs	r3, #32
 8008684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	08008699 	.word	0x08008699

08008698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <prvTaskExitError+0x54>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d00a      	beq.n	80086c2 <prvTaskExitError+0x2a>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60fb      	str	r3, [r7, #12]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <prvTaskExitError+0x28>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086d6:	bf00      	nop
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0fc      	beq.n	80086d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	20000028 	.word	0x20000028

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	4770      	bx	lr
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst2>:
 8008710:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008718:	4808      	ldr	r0, [pc, #32]	; (800873c <prvPortStartFirstTask+0x24>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8814 	msr	CONTROL, r0
 800872a:	b662      	cpsie	i
 800872c:	b661      	cpsie	f
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	df00      	svc	0
 8008738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800873a:	bf00      	nop
 800873c:	e000ed08 	.word	0xe000ed08

08008740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008746:	4b46      	ldr	r3, [pc, #280]	; (8008860 <xPortStartScheduler+0x120>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a46      	ldr	r2, [pc, #280]	; (8008864 <xPortStartScheduler+0x124>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10a      	bne.n	8008766 <xPortStartScheduler+0x26>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008766:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <xPortStartScheduler+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a3f      	ldr	r2, [pc, #252]	; (8008868 <xPortStartScheduler+0x128>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d10a      	bne.n	8008786 <xPortStartScheduler+0x46>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008786:	4b39      	ldr	r3, [pc, #228]	; (800886c <xPortStartScheduler+0x12c>)
 8008788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	22ff      	movs	r2, #255	; 0xff
 8008796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b31      	ldr	r3, [pc, #196]	; (8008870 <xPortStartScheduler+0x130>)
 80087ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ae:	4b31      	ldr	r3, [pc, #196]	; (8008874 <xPortStartScheduler+0x134>)
 80087b0:	2207      	movs	r2, #7
 80087b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087b4:	e009      	b.n	80087ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087b6:	4b2f      	ldr	r3, [pc, #188]	; (8008874 <xPortStartScheduler+0x134>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	4a2d      	ldr	r2, [pc, #180]	; (8008874 <xPortStartScheduler+0x134>)
 80087be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d0ef      	beq.n	80087b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087d6:	4b27      	ldr	r3, [pc, #156]	; (8008874 <xPortStartScheduler+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f1c3 0307 	rsb	r3, r3, #7
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d00a      	beq.n	80087f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60bb      	str	r3, [r7, #8]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <xPortStartScheduler+0x134>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <xPortStartScheduler+0x134>)
 8008800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <xPortStartScheduler+0x134>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800880a:	4a1a      	ldr	r2, [pc, #104]	; (8008874 <xPortStartScheduler+0x134>)
 800880c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	b2da      	uxtb	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008816:	4b18      	ldr	r3, [pc, #96]	; (8008878 <xPortStartScheduler+0x138>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a17      	ldr	r2, [pc, #92]	; (8008878 <xPortStartScheduler+0x138>)
 800881c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <xPortStartScheduler+0x138>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a14      	ldr	r2, [pc, #80]	; (8008878 <xPortStartScheduler+0x138>)
 8008828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800882c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800882e:	f000 f8dd 	bl	80089ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008832:	4b12      	ldr	r3, [pc, #72]	; (800887c <xPortStartScheduler+0x13c>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008838:	f000 f8fc 	bl	8008a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <xPortStartScheduler+0x140>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <xPortStartScheduler+0x140>)
 8008842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008848:	f7ff ff66 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800884c:	f7ff fba0 	bl	8007f90 <vTaskSwitchContext>
	prvTaskExitError();
 8008850:	f7ff ff22 	bl	8008698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	e000ed00 	.word	0xe000ed00
 8008864:	410fc271 	.word	0x410fc271
 8008868:	410fc270 	.word	0x410fc270
 800886c:	e000e400 	.word	0xe000e400
 8008870:	20000868 	.word	0x20000868
 8008874:	2000086c 	.word	0x2000086c
 8008878:	e000ed20 	.word	0xe000ed20
 800887c:	20000028 	.word	0x20000028
 8008880:	e000ef34 	.word	0xe000ef34

08008884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	607b      	str	r3, [r7, #4]
}
 800889c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <vPortEnterCritical+0x58>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <vPortEnterCritical+0x58>)
 80088a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <vPortEnterCritical+0x58>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d10f      	bne.n	80088d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <vPortEnterCritical+0x5c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	603b      	str	r3, [r7, #0]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <vPortEnterCritical+0x4a>
	}
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	20000028 	.word	0x20000028
 80088e0:	e000ed04 	.word	0xe000ed04

080088e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <vPortExitCritical+0x50>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10a      	bne.n	8008908 <vPortExitCritical+0x24>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	607b      	str	r3, [r7, #4]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <vPortExitCritical+0x50>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	4a09      	ldr	r2, [pc, #36]	; (8008934 <vPortExitCritical+0x50>)
 8008910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <vPortExitCritical+0x50>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d105      	bne.n	8008926 <vPortExitCritical+0x42>
 800891a:	2300      	movs	r3, #0
 800891c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	f383 8811 	msr	BASEPRI, r3
}
 8008924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000028 	.word	0x20000028
	...

08008940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008940:	f3ef 8009 	mrs	r0, PSP
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <pxCurrentTCBConst>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	f01e 0f10 	tst.w	lr, #16
 8008950:	bf08      	it	eq
 8008952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008964:	f380 8811 	msr	BASEPRI, r0
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f7ff fb0e 	bl	8007f90 <vTaskSwitchContext>
 8008974:	f04f 0000 	mov.w	r0, #0
 8008978:	f380 8811 	msr	BASEPRI, r0
 800897c:	bc09      	pop	{r0, r3}
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	6808      	ldr	r0, [r1, #0]
 8008982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008986:	f01e 0f10 	tst.w	lr, #16
 800898a:	bf08      	it	eq
 800898c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008990:	f380 8809 	msr	PSP, r0
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	f3af 8000 	nop.w

080089a0 <pxCurrentTCBConst>:
 80089a0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop

080089a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089c2:	f7ff fa2d 	bl	8007e20 <xTaskIncrementTick>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089cc:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <SysTick_Handler+0x40>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f383 8811 	msr	BASEPRI, r3
}
 80089de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	; (8008a24 <vPortSetupTimerInterrupt+0x38>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <vPortSetupTimerInterrupt+0x3c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <vPortSetupTimerInterrupt+0x40>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <vPortSetupTimerInterrupt+0x44>)
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <vPortSetupTimerInterrupt+0x34>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000e010 	.word	0xe000e010
 8008a24:	e000e018 	.word	0xe000e018
 8008a28:	2000001c 	.word	0x2000001c
 8008a2c:	10624dd3 	.word	0x10624dd3
 8008a30:	e000e014 	.word	0xe000e014

08008a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a44 <vPortEnableVFP+0x10>
 8008a38:	6801      	ldr	r1, [r0, #0]
 8008a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a42:	bf00      	nop
 8008a44:	e000ed88 	.word	0xe000ed88

08008a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a4e:	f3ef 8305 	mrs	r3, IPSR
 8008a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b0f      	cmp	r3, #15
 8008a58:	d914      	bls.n	8008a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <vPortValidateInterruptPriority+0x70>)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a64:	4b15      	ldr	r3, [pc, #84]	; (8008abc <vPortValidateInterruptPriority+0x74>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	7afa      	ldrb	r2, [r7, #11]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d20a      	bcs.n	8008a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a84:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <vPortValidateInterruptPriority+0x78>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <vPortValidateInterruptPriority+0x7c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d90a      	bls.n	8008aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	603b      	str	r3, [r7, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <vPortValidateInterruptPriority+0x60>
	}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	e000e3f0 	.word	0xe000e3f0
 8008abc:	20000868 	.word	0x20000868
 8008ac0:	e000ed0c 	.word	0xe000ed0c
 8008ac4:	2000086c 	.word	0x2000086c

08008ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08a      	sub	sp, #40	; 0x28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ad4:	f7ff f8fa 	bl	8007ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ad8:	4b5b      	ldr	r3, [pc, #364]	; (8008c48 <pvPortMalloc+0x180>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ae0:	f000 f920 	bl	8008d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ae4:	4b59      	ldr	r3, [pc, #356]	; (8008c4c <pvPortMalloc+0x184>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 8093 	bne.w	8008c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01d      	beq.n	8008b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008af8:	2208      	movs	r2, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4413      	add	r3, r2
 8008afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	3308      	adds	r3, #8
 8008b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <pvPortMalloc+0x6c>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	617b      	str	r3, [r7, #20]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d06e      	beq.n	8008c18 <pvPortMalloc+0x150>
 8008b3a:	4b45      	ldr	r3, [pc, #276]	; (8008c50 <pvPortMalloc+0x188>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d869      	bhi.n	8008c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b44:	4b43      	ldr	r3, [pc, #268]	; (8008c54 <pvPortMalloc+0x18c>)
 8008b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b48:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <pvPortMalloc+0x18c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b4e:	e004      	b.n	8008b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d903      	bls.n	8008b6c <pvPortMalloc+0xa4>
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1f1      	bne.n	8008b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b6c:	4b36      	ldr	r3, [pc, #216]	; (8008c48 <pvPortMalloc+0x180>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d050      	beq.n	8008c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2208      	movs	r2, #8
 8008b7c:	4413      	add	r3, r2
 8008b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	2308      	movs	r3, #8
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d91f      	bls.n	8008bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	613b      	str	r3, [r7, #16]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	1ad2      	subs	r2, r2, r3
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bd2:	69b8      	ldr	r0, [r7, #24]
 8008bd4:	f000 f908 	bl	8008de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bd8:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <pvPortMalloc+0x188>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <pvPortMalloc+0x188>)
 8008be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008be6:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <pvPortMalloc+0x188>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b1b      	ldr	r3, [pc, #108]	; (8008c58 <pvPortMalloc+0x190>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d203      	bcs.n	8008bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bf2:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <pvPortMalloc+0x188>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <pvPortMalloc+0x190>)
 8008bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	4b13      	ldr	r3, [pc, #76]	; (8008c4c <pvPortMalloc+0x184>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c0e:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <pvPortMalloc+0x194>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a11      	ldr	r2, [pc, #68]	; (8008c5c <pvPortMalloc+0x194>)
 8008c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c18:	f7ff f866 	bl	8007ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <pvPortMalloc+0x174>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	60fb      	str	r3, [r7, #12]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <pvPortMalloc+0x172>
	return pvReturn;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3728      	adds	r7, #40	; 0x28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20004478 	.word	0x20004478
 8008c4c:	2000448c 	.word	0x2000448c
 8008c50:	2000447c 	.word	0x2000447c
 8008c54:	20004470 	.word	0x20004470
 8008c58:	20004480 	.word	0x20004480
 8008c5c:	20004484 	.word	0x20004484

08008c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d04d      	beq.n	8008d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c72:	2308      	movs	r3, #8
 8008c74:	425b      	negs	r3, r3
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4413      	add	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	4b24      	ldr	r3, [pc, #144]	; (8008d18 <vPortFree+0xb8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <vPortFree+0x44>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <vPortFree+0x62>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60bb      	str	r3, [r7, #8]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <vPortFree+0xb8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01e      	beq.n	8008d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d11a      	bne.n	8008d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <vPortFree+0xb8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ce8:	f7fe fff0 	bl	8007ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <vPortFree+0xbc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <vPortFree+0xbc>)
 8008cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cfa:	6938      	ldr	r0, [r7, #16]
 8008cfc:	f000 f874 	bl	8008de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vPortFree+0xc0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <vPortFree+0xc0>)
 8008d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d0a:	f7fe ffed 	bl	8007ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d0e:	bf00      	nop
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	2000448c 	.word	0x2000448c
 8008d1c:	2000447c 	.word	0x2000447c
 8008d20:	20004488 	.word	0x20004488

08008d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d30:	4b27      	ldr	r3, [pc, #156]	; (8008dd0 <prvHeapInit+0xac>)
 8008d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	4a1f      	ldr	r2, [pc, #124]	; (8008dd0 <prvHeapInit+0xac>)
 8008d54:	4413      	add	r3, r2
 8008d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d5c:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d70:	2208      	movs	r2, #8
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d8e:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvHeapInit+0xb4>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <prvHeapInit+0xb8>)
 8008db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a09      	ldr	r2, [pc, #36]	; (8008de0 <prvHeapInit+0xbc>)
 8008dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <prvHeapInit+0xc0>)
 8008dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dc2:	601a      	str	r2, [r3, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20000870 	.word	0x20000870
 8008dd4:	20004470 	.word	0x20004470
 8008dd8:	20004478 	.word	0x20004478
 8008ddc:	20004480 	.word	0x20004480
 8008de0:	2000447c 	.word	0x2000447c
 8008de4:	2000448c 	.word	0x2000448c

08008de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <prvInsertBlockIntoFreeList+0xac>)
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	e002      	b.n	8008dfc <prvInsertBlockIntoFreeList+0x14>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d8f7      	bhi.n	8008df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d108      	bne.n	8008e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	441a      	add	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d118      	bne.n	8008e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d00d      	beq.n	8008e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	441a      	add	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e008      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e003      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d002      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20004470 	.word	0x20004470
 8008e98:	20004478 	.word	0x20004478

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2000002c 	.word	0x2000002c

08008ea8 <std>:
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	4604      	mov	r4, r0
 8008eae:	e9c0 3300 	strd	r3, r3, [r0]
 8008eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	6643      	str	r3, [r0, #100]	; 0x64
 8008ebc:	81c2      	strh	r2, [r0, #14]
 8008ebe:	6183      	str	r3, [r0, #24]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	305c      	adds	r0, #92	; 0x5c
 8008ec6:	f000 f91a 	bl	80090fe <memset>
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <std+0x38>)
 8008ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <std+0x3c>)
 8008ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <std+0x40>)
 8008ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <std+0x44>)
 8008ed8:	6224      	str	r4, [r4, #32]
 8008eda:	6323      	str	r3, [r4, #48]	; 0x30
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	08009419 	.word	0x08009419
 8008ee4:	0800943b 	.word	0x0800943b
 8008ee8:	08009473 	.word	0x08009473
 8008eec:	08009497 	.word	0x08009497

08008ef0 <_cleanup_r>:
 8008ef0:	4901      	ldr	r1, [pc, #4]	; (8008ef8 <_cleanup_r+0x8>)
 8008ef2:	f000 b8af 	b.w	8009054 <_fwalk_reent>
 8008ef6:	bf00      	nop
 8008ef8:	08009771 	.word	0x08009771

08008efc <__sfmoreglue>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	2268      	movs	r2, #104	; 0x68
 8008f00:	1e4d      	subs	r5, r1, #1
 8008f02:	4355      	muls	r5, r2
 8008f04:	460e      	mov	r6, r1
 8008f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f0a:	f000 f921 	bl	8009150 <_malloc_r>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	b140      	cbz	r0, 8008f24 <__sfmoreglue+0x28>
 8008f12:	2100      	movs	r1, #0
 8008f14:	e9c0 1600 	strd	r1, r6, [r0]
 8008f18:	300c      	adds	r0, #12
 8008f1a:	60a0      	str	r0, [r4, #8]
 8008f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f20:	f000 f8ed 	bl	80090fe <memset>
 8008f24:	4620      	mov	r0, r4
 8008f26:	bd70      	pop	{r4, r5, r6, pc}

08008f28 <__sfp_lock_acquire>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__sfp_lock_acquire+0x8>)
 8008f2a:	f000 b8d8 	b.w	80090de <__retarget_lock_acquire_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20004491 	.word	0x20004491

08008f34 <__sfp_lock_release>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__sfp_lock_release+0x8>)
 8008f36:	f000 b8d3 	b.w	80090e0 <__retarget_lock_release_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20004491 	.word	0x20004491

08008f40 <__sinit_lock_acquire>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__sinit_lock_acquire+0x8>)
 8008f42:	f000 b8cc 	b.w	80090de <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20004492 	.word	0x20004492

08008f4c <__sinit_lock_release>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sinit_lock_release+0x8>)
 8008f4e:	f000 b8c7 	b.w	80090e0 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20004492 	.word	0x20004492

08008f58 <__sinit>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	f7ff fff0 	bl	8008f40 <__sinit_lock_acquire>
 8008f60:	69a3      	ldr	r3, [r4, #24]
 8008f62:	b11b      	cbz	r3, 8008f6c <__sinit+0x14>
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f68:	f7ff bff0 	b.w	8008f4c <__sinit_lock_release>
 8008f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f70:	6523      	str	r3, [r4, #80]	; 0x50
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <__sinit+0x68>)
 8008f74:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <__sinit+0x6c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	bf04      	itt	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	61a3      	streq	r3, [r4, #24]
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f820 	bl	8008fc8 <__sfp>
 8008f88:	6060      	str	r0, [r4, #4]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 f81c 	bl	8008fc8 <__sfp>
 8008f90:	60a0      	str	r0, [r4, #8]
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 f818 	bl	8008fc8 <__sfp>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	60e0      	str	r0, [r4, #12]
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	6860      	ldr	r0, [r4, #4]
 8008fa0:	f7ff ff82 	bl	8008ea8 <std>
 8008fa4:	68a0      	ldr	r0, [r4, #8]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	2109      	movs	r1, #9
 8008faa:	f7ff ff7d 	bl	8008ea8 <std>
 8008fae:	68e0      	ldr	r0, [r4, #12]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	2112      	movs	r1, #18
 8008fb4:	f7ff ff78 	bl	8008ea8 <std>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	61a3      	str	r3, [r4, #24]
 8008fbc:	e7d2      	b.n	8008f64 <__sinit+0xc>
 8008fbe:	bf00      	nop
 8008fc0:	08009d88 	.word	0x08009d88
 8008fc4:	08008ef1 	.word	0x08008ef1

08008fc8 <__sfp>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	4607      	mov	r7, r0
 8008fcc:	f7ff ffac 	bl	8008f28 <__sfp_lock_acquire>
 8008fd0:	4b1e      	ldr	r3, [pc, #120]	; (800904c <__sfp+0x84>)
 8008fd2:	681e      	ldr	r6, [r3, #0]
 8008fd4:	69b3      	ldr	r3, [r6, #24]
 8008fd6:	b913      	cbnz	r3, 8008fde <__sfp+0x16>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbd 	bl	8008f58 <__sinit>
 8008fde:	3648      	adds	r6, #72	; 0x48
 8008fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	d503      	bpl.n	8008ff0 <__sfp+0x28>
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	b30b      	cbz	r3, 8009030 <__sfp+0x68>
 8008fec:	6836      	ldr	r6, [r6, #0]
 8008fee:	e7f7      	b.n	8008fe0 <__sfp+0x18>
 8008ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ff4:	b9d5      	cbnz	r5, 800902c <__sfp+0x64>
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <__sfp+0x88>)
 8008ff8:	60e3      	str	r3, [r4, #12]
 8008ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8009000:	f000 f86c 	bl	80090dc <__retarget_lock_init_recursive>
 8009004:	f7ff ff96 	bl	8008f34 <__sfp_lock_release>
 8009008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800900c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009010:	6025      	str	r5, [r4, #0]
 8009012:	61a5      	str	r5, [r4, #24]
 8009014:	2208      	movs	r2, #8
 8009016:	4629      	mov	r1, r5
 8009018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800901c:	f000 f86f 	bl	80090fe <memset>
 8009020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009028:	4620      	mov	r0, r4
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	3468      	adds	r4, #104	; 0x68
 800902e:	e7d9      	b.n	8008fe4 <__sfp+0x1c>
 8009030:	2104      	movs	r1, #4
 8009032:	4638      	mov	r0, r7
 8009034:	f7ff ff62 	bl	8008efc <__sfmoreglue>
 8009038:	4604      	mov	r4, r0
 800903a:	6030      	str	r0, [r6, #0]
 800903c:	2800      	cmp	r0, #0
 800903e:	d1d5      	bne.n	8008fec <__sfp+0x24>
 8009040:	f7ff ff78 	bl	8008f34 <__sfp_lock_release>
 8009044:	230c      	movs	r3, #12
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	e7ee      	b.n	8009028 <__sfp+0x60>
 800904a:	bf00      	nop
 800904c:	08009d88 	.word	0x08009d88
 8009050:	ffff0001 	.word	0xffff0001

08009054 <_fwalk_reent>:
 8009054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009058:	4606      	mov	r6, r0
 800905a:	4688      	mov	r8, r1
 800905c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009060:	2700      	movs	r7, #0
 8009062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009066:	f1b9 0901 	subs.w	r9, r9, #1
 800906a:	d505      	bpl.n	8009078 <_fwalk_reent+0x24>
 800906c:	6824      	ldr	r4, [r4, #0]
 800906e:	2c00      	cmp	r4, #0
 8009070:	d1f7      	bne.n	8009062 <_fwalk_reent+0xe>
 8009072:	4638      	mov	r0, r7
 8009074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009078:	89ab      	ldrh	r3, [r5, #12]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d907      	bls.n	800908e <_fwalk_reent+0x3a>
 800907e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009082:	3301      	adds	r3, #1
 8009084:	d003      	beq.n	800908e <_fwalk_reent+0x3a>
 8009086:	4629      	mov	r1, r5
 8009088:	4630      	mov	r0, r6
 800908a:	47c0      	blx	r8
 800908c:	4307      	orrs	r7, r0
 800908e:	3568      	adds	r5, #104	; 0x68
 8009090:	e7e9      	b.n	8009066 <_fwalk_reent+0x12>
	...

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4d0d      	ldr	r5, [pc, #52]	; (80090cc <__libc_init_array+0x38>)
 8009098:	4c0d      	ldr	r4, [pc, #52]	; (80090d0 <__libc_init_array+0x3c>)
 800909a:	1b64      	subs	r4, r4, r5
 800909c:	10a4      	asrs	r4, r4, #2
 800909e:	2600      	movs	r6, #0
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	4d0b      	ldr	r5, [pc, #44]	; (80090d4 <__libc_init_array+0x40>)
 80090a6:	4c0c      	ldr	r4, [pc, #48]	; (80090d8 <__libc_init_array+0x44>)
 80090a8:	f000 fca2 	bl	80099f0 <_init>
 80090ac:	1b64      	subs	r4, r4, r5
 80090ae:	10a4      	asrs	r4, r4, #2
 80090b0:	2600      	movs	r6, #0
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	08009d94 	.word	0x08009d94
 80090d0:	08009d94 	.word	0x08009d94
 80090d4:	08009d94 	.word	0x08009d94
 80090d8:	08009d98 	.word	0x08009d98

080090dc <__retarget_lock_init_recursive>:
 80090dc:	4770      	bx	lr

080090de <__retarget_lock_acquire_recursive>:
 80090de:	4770      	bx	lr

080090e0 <__retarget_lock_release_recursive>:
 80090e0:	4770      	bx	lr

080090e2 <memcpy>:
 80090e2:	440a      	add	r2, r1
 80090e4:	4291      	cmp	r1, r2
 80090e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ea:	d100      	bne.n	80090ee <memcpy+0xc>
 80090ec:	4770      	bx	lr
 80090ee:	b510      	push	{r4, lr}
 80090f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f8:	4291      	cmp	r1, r2
 80090fa:	d1f9      	bne.n	80090f0 <memcpy+0xe>
 80090fc:	bd10      	pop	{r4, pc}

080090fe <memset>:
 80090fe:	4402      	add	r2, r0
 8009100:	4603      	mov	r3, r0
 8009102:	4293      	cmp	r3, r2
 8009104:	d100      	bne.n	8009108 <memset+0xa>
 8009106:	4770      	bx	lr
 8009108:	f803 1b01 	strb.w	r1, [r3], #1
 800910c:	e7f9      	b.n	8009102 <memset+0x4>
	...

08009110 <sbrk_aligned>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0e      	ldr	r6, [pc, #56]	; (800914c <sbrk_aligned+0x3c>)
 8009114:	460c      	mov	r4, r1
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	4605      	mov	r5, r0
 800911a:	b911      	cbnz	r1, 8009122 <sbrk_aligned+0x12>
 800911c:	f000 f96c 	bl	80093f8 <_sbrk_r>
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 f967 	bl	80093f8 <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d00a      	beq.n	8009144 <sbrk_aligned+0x34>
 800912e:	1cc4      	adds	r4, r0, #3
 8009130:	f024 0403 	bic.w	r4, r4, #3
 8009134:	42a0      	cmp	r0, r4
 8009136:	d007      	beq.n	8009148 <sbrk_aligned+0x38>
 8009138:	1a21      	subs	r1, r4, r0
 800913a:	4628      	mov	r0, r5
 800913c:	f000 f95c 	bl	80093f8 <_sbrk_r>
 8009140:	3001      	adds	r0, #1
 8009142:	d101      	bne.n	8009148 <sbrk_aligned+0x38>
 8009144:	f04f 34ff 	mov.w	r4, #4294967295
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	20004498 	.word	0x20004498

08009150 <_malloc_r>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	f025 0503 	bic.w	r5, r5, #3
 800915a:	3508      	adds	r5, #8
 800915c:	2d0c      	cmp	r5, #12
 800915e:	bf38      	it	cc
 8009160:	250c      	movcc	r5, #12
 8009162:	2d00      	cmp	r5, #0
 8009164:	4607      	mov	r7, r0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d905      	bls.n	8009178 <_malloc_r+0x28>
 800916c:	230c      	movs	r3, #12
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	2600      	movs	r6, #0
 8009172:	4630      	mov	r0, r6
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	4e2e      	ldr	r6, [pc, #184]	; (8009234 <_malloc_r+0xe4>)
 800917a:	f000 fbad 	bl	80098d8 <__malloc_lock>
 800917e:	6833      	ldr	r3, [r6, #0]
 8009180:	461c      	mov	r4, r3
 8009182:	bb34      	cbnz	r4, 80091d2 <_malloc_r+0x82>
 8009184:	4629      	mov	r1, r5
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ffc2 	bl	8009110 <sbrk_aligned>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	4604      	mov	r4, r0
 8009190:	d14d      	bne.n	800922e <_malloc_r+0xde>
 8009192:	6834      	ldr	r4, [r6, #0]
 8009194:	4626      	mov	r6, r4
 8009196:	2e00      	cmp	r6, #0
 8009198:	d140      	bne.n	800921c <_malloc_r+0xcc>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	4631      	mov	r1, r6
 800919e:	4638      	mov	r0, r7
 80091a0:	eb04 0803 	add.w	r8, r4, r3
 80091a4:	f000 f928 	bl	80093f8 <_sbrk_r>
 80091a8:	4580      	cmp	r8, r0
 80091aa:	d13a      	bne.n	8009222 <_malloc_r+0xd2>
 80091ac:	6821      	ldr	r1, [r4, #0]
 80091ae:	3503      	adds	r5, #3
 80091b0:	1a6d      	subs	r5, r5, r1
 80091b2:	f025 0503 	bic.w	r5, r5, #3
 80091b6:	3508      	adds	r5, #8
 80091b8:	2d0c      	cmp	r5, #12
 80091ba:	bf38      	it	cc
 80091bc:	250c      	movcc	r5, #12
 80091be:	4629      	mov	r1, r5
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7ff ffa5 	bl	8009110 <sbrk_aligned>
 80091c6:	3001      	adds	r0, #1
 80091c8:	d02b      	beq.n	8009222 <_malloc_r+0xd2>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	442b      	add	r3, r5
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	e00e      	b.n	80091f0 <_malloc_r+0xa0>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	1b52      	subs	r2, r2, r5
 80091d6:	d41e      	bmi.n	8009216 <_malloc_r+0xc6>
 80091d8:	2a0b      	cmp	r2, #11
 80091da:	d916      	bls.n	800920a <_malloc_r+0xba>
 80091dc:	1961      	adds	r1, r4, r5
 80091de:	42a3      	cmp	r3, r4
 80091e0:	6025      	str	r5, [r4, #0]
 80091e2:	bf18      	it	ne
 80091e4:	6059      	strne	r1, [r3, #4]
 80091e6:	6863      	ldr	r3, [r4, #4]
 80091e8:	bf08      	it	eq
 80091ea:	6031      	streq	r1, [r6, #0]
 80091ec:	5162      	str	r2, [r4, r5]
 80091ee:	604b      	str	r3, [r1, #4]
 80091f0:	4638      	mov	r0, r7
 80091f2:	f104 060b 	add.w	r6, r4, #11
 80091f6:	f000 fb75 	bl	80098e4 <__malloc_unlock>
 80091fa:	f026 0607 	bic.w	r6, r6, #7
 80091fe:	1d23      	adds	r3, r4, #4
 8009200:	1af2      	subs	r2, r6, r3
 8009202:	d0b6      	beq.n	8009172 <_malloc_r+0x22>
 8009204:	1b9b      	subs	r3, r3, r6
 8009206:	50a3      	str	r3, [r4, r2]
 8009208:	e7b3      	b.n	8009172 <_malloc_r+0x22>
 800920a:	6862      	ldr	r2, [r4, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	bf0c      	ite	eq
 8009210:	6032      	streq	r2, [r6, #0]
 8009212:	605a      	strne	r2, [r3, #4]
 8009214:	e7ec      	b.n	80091f0 <_malloc_r+0xa0>
 8009216:	4623      	mov	r3, r4
 8009218:	6864      	ldr	r4, [r4, #4]
 800921a:	e7b2      	b.n	8009182 <_malloc_r+0x32>
 800921c:	4634      	mov	r4, r6
 800921e:	6876      	ldr	r6, [r6, #4]
 8009220:	e7b9      	b.n	8009196 <_malloc_r+0x46>
 8009222:	230c      	movs	r3, #12
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	4638      	mov	r0, r7
 8009228:	f000 fb5c 	bl	80098e4 <__malloc_unlock>
 800922c:	e7a1      	b.n	8009172 <_malloc_r+0x22>
 800922e:	6025      	str	r5, [r4, #0]
 8009230:	e7de      	b.n	80091f0 <_malloc_r+0xa0>
 8009232:	bf00      	nop
 8009234:	20004494 	.word	0x20004494

08009238 <_puts_r>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	460e      	mov	r6, r1
 800923c:	4605      	mov	r5, r0
 800923e:	b118      	cbz	r0, 8009248 <_puts_r+0x10>
 8009240:	6983      	ldr	r3, [r0, #24]
 8009242:	b90b      	cbnz	r3, 8009248 <_puts_r+0x10>
 8009244:	f7ff fe88 	bl	8008f58 <__sinit>
 8009248:	69ab      	ldr	r3, [r5, #24]
 800924a:	68ac      	ldr	r4, [r5, #8]
 800924c:	b913      	cbnz	r3, 8009254 <_puts_r+0x1c>
 800924e:	4628      	mov	r0, r5
 8009250:	f7ff fe82 	bl	8008f58 <__sinit>
 8009254:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <_puts_r+0xd0>)
 8009256:	429c      	cmp	r4, r3
 8009258:	d120      	bne.n	800929c <_puts_r+0x64>
 800925a:	686c      	ldr	r4, [r5, #4]
 800925c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800925e:	07db      	lsls	r3, r3, #31
 8009260:	d405      	bmi.n	800926e <_puts_r+0x36>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	0598      	lsls	r0, r3, #22
 8009266:	d402      	bmi.n	800926e <_puts_r+0x36>
 8009268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800926a:	f7ff ff38 	bl	80090de <__retarget_lock_acquire_recursive>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	0719      	lsls	r1, r3, #28
 8009272:	d51d      	bpl.n	80092b0 <_puts_r+0x78>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	b1db      	cbz	r3, 80092b0 <_puts_r+0x78>
 8009278:	3e01      	subs	r6, #1
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009280:	3b01      	subs	r3, #1
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	bb39      	cbnz	r1, 80092d6 <_puts_r+0x9e>
 8009286:	2b00      	cmp	r3, #0
 8009288:	da38      	bge.n	80092fc <_puts_r+0xc4>
 800928a:	4622      	mov	r2, r4
 800928c:	210a      	movs	r1, #10
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f906 	bl	80094a0 <__swbuf_r>
 8009294:	3001      	adds	r0, #1
 8009296:	d011      	beq.n	80092bc <_puts_r+0x84>
 8009298:	250a      	movs	r5, #10
 800929a:	e011      	b.n	80092c0 <_puts_r+0x88>
 800929c:	4b1b      	ldr	r3, [pc, #108]	; (800930c <_puts_r+0xd4>)
 800929e:	429c      	cmp	r4, r3
 80092a0:	d101      	bne.n	80092a6 <_puts_r+0x6e>
 80092a2:	68ac      	ldr	r4, [r5, #8]
 80092a4:	e7da      	b.n	800925c <_puts_r+0x24>
 80092a6:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <_puts_r+0xd8>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	bf08      	it	eq
 80092ac:	68ec      	ldreq	r4, [r5, #12]
 80092ae:	e7d5      	b.n	800925c <_puts_r+0x24>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 f958 	bl	8009568 <__swsetup_r>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0dd      	beq.n	8009278 <_puts_r+0x40>
 80092bc:	f04f 35ff 	mov.w	r5, #4294967295
 80092c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092c2:	07da      	lsls	r2, r3, #31
 80092c4:	d405      	bmi.n	80092d2 <_puts_r+0x9a>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	059b      	lsls	r3, r3, #22
 80092ca:	d402      	bmi.n	80092d2 <_puts_r+0x9a>
 80092cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ce:	f7ff ff07 	bl	80090e0 <__retarget_lock_release_recursive>
 80092d2:	4628      	mov	r0, r5
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	da04      	bge.n	80092e4 <_puts_r+0xac>
 80092da:	69a2      	ldr	r2, [r4, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	dc06      	bgt.n	80092ee <_puts_r+0xb6>
 80092e0:	290a      	cmp	r1, #10
 80092e2:	d004      	beq.n	80092ee <_puts_r+0xb6>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	6022      	str	r2, [r4, #0]
 80092ea:	7019      	strb	r1, [r3, #0]
 80092ec:	e7c5      	b.n	800927a <_puts_r+0x42>
 80092ee:	4622      	mov	r2, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f8d5 	bl	80094a0 <__swbuf_r>
 80092f6:	3001      	adds	r0, #1
 80092f8:	d1bf      	bne.n	800927a <_puts_r+0x42>
 80092fa:	e7df      	b.n	80092bc <_puts_r+0x84>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	250a      	movs	r5, #10
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	6022      	str	r2, [r4, #0]
 8009304:	701d      	strb	r5, [r3, #0]
 8009306:	e7db      	b.n	80092c0 <_puts_r+0x88>
 8009308:	08009d48 	.word	0x08009d48
 800930c:	08009d68 	.word	0x08009d68
 8009310:	08009d28 	.word	0x08009d28

08009314 <puts>:
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <puts+0xc>)
 8009316:	4601      	mov	r1, r0
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	f7ff bf8d 	b.w	8009238 <_puts_r>
 800931e:	bf00      	nop
 8009320:	2000002c 	.word	0x2000002c

08009324 <cleanup_glue>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	460c      	mov	r4, r1
 8009328:	6809      	ldr	r1, [r1, #0]
 800932a:	4605      	mov	r5, r0
 800932c:	b109      	cbz	r1, 8009332 <cleanup_glue+0xe>
 800932e:	f7ff fff9 	bl	8009324 <cleanup_glue>
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933a:	f000 bad9 	b.w	80098f0 <_free_r>
	...

08009340 <_reclaim_reent>:
 8009340:	4b2c      	ldr	r3, [pc, #176]	; (80093f4 <_reclaim_reent+0xb4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4283      	cmp	r3, r0
 8009346:	b570      	push	{r4, r5, r6, lr}
 8009348:	4604      	mov	r4, r0
 800934a:	d051      	beq.n	80093f0 <_reclaim_reent+0xb0>
 800934c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800934e:	b143      	cbz	r3, 8009362 <_reclaim_reent+0x22>
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d14a      	bne.n	80093ec <_reclaim_reent+0xac>
 8009356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	b111      	cbz	r1, 8009362 <_reclaim_reent+0x22>
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fac7 	bl	80098f0 <_free_r>
 8009362:	6961      	ldr	r1, [r4, #20]
 8009364:	b111      	cbz	r1, 800936c <_reclaim_reent+0x2c>
 8009366:	4620      	mov	r0, r4
 8009368:	f000 fac2 	bl	80098f0 <_free_r>
 800936c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800936e:	b111      	cbz	r1, 8009376 <_reclaim_reent+0x36>
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fabd 	bl	80098f0 <_free_r>
 8009376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009378:	b111      	cbz	r1, 8009380 <_reclaim_reent+0x40>
 800937a:	4620      	mov	r0, r4
 800937c:	f000 fab8 	bl	80098f0 <_free_r>
 8009380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009382:	b111      	cbz	r1, 800938a <_reclaim_reent+0x4a>
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fab3 	bl	80098f0 <_free_r>
 800938a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800938c:	b111      	cbz	r1, 8009394 <_reclaim_reent+0x54>
 800938e:	4620      	mov	r0, r4
 8009390:	f000 faae 	bl	80098f0 <_free_r>
 8009394:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009396:	b111      	cbz	r1, 800939e <_reclaim_reent+0x5e>
 8009398:	4620      	mov	r0, r4
 800939a:	f000 faa9 	bl	80098f0 <_free_r>
 800939e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80093a0:	b111      	cbz	r1, 80093a8 <_reclaim_reent+0x68>
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 faa4 	bl	80098f0 <_free_r>
 80093a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093aa:	b111      	cbz	r1, 80093b2 <_reclaim_reent+0x72>
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fa9f 	bl	80098f0 <_free_r>
 80093b2:	69a3      	ldr	r3, [r4, #24]
 80093b4:	b1e3      	cbz	r3, 80093f0 <_reclaim_reent+0xb0>
 80093b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093b8:	4620      	mov	r0, r4
 80093ba:	4798      	blx	r3
 80093bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093be:	b1b9      	cbz	r1, 80093f0 <_reclaim_reent+0xb0>
 80093c0:	4620      	mov	r0, r4
 80093c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093c6:	f7ff bfad 	b.w	8009324 <cleanup_glue>
 80093ca:	5949      	ldr	r1, [r1, r5]
 80093cc:	b941      	cbnz	r1, 80093e0 <_reclaim_reent+0xa0>
 80093ce:	3504      	adds	r5, #4
 80093d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d2:	2d80      	cmp	r5, #128	; 0x80
 80093d4:	68d9      	ldr	r1, [r3, #12]
 80093d6:	d1f8      	bne.n	80093ca <_reclaim_reent+0x8a>
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fa89 	bl	80098f0 <_free_r>
 80093de:	e7ba      	b.n	8009356 <_reclaim_reent+0x16>
 80093e0:	680e      	ldr	r6, [r1, #0]
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 fa84 	bl	80098f0 <_free_r>
 80093e8:	4631      	mov	r1, r6
 80093ea:	e7ef      	b.n	80093cc <_reclaim_reent+0x8c>
 80093ec:	2500      	movs	r5, #0
 80093ee:	e7ef      	b.n	80093d0 <_reclaim_reent+0x90>
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
 80093f2:	bf00      	nop
 80093f4:	2000002c 	.word	0x2000002c

080093f8 <_sbrk_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d06      	ldr	r5, [pc, #24]	; (8009414 <_sbrk_r+0x1c>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7f8 fc12 	bl	8001c2c <_sbrk>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_sbrk_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_sbrk_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	2000449c 	.word	0x2000449c

08009418 <__sread>:
 8009418:	b510      	push	{r4, lr}
 800941a:	460c      	mov	r4, r1
 800941c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009420:	f000 fab2 	bl	8009988 <_read_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	bfab      	itete	ge
 8009428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800942a:	89a3      	ldrhlt	r3, [r4, #12]
 800942c:	181b      	addge	r3, r3, r0
 800942e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009432:	bfac      	ite	ge
 8009434:	6563      	strge	r3, [r4, #84]	; 0x54
 8009436:	81a3      	strhlt	r3, [r4, #12]
 8009438:	bd10      	pop	{r4, pc}

0800943a <__swrite>:
 800943a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943e:	461f      	mov	r7, r3
 8009440:	898b      	ldrh	r3, [r1, #12]
 8009442:	05db      	lsls	r3, r3, #23
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	4616      	mov	r6, r2
 800944a:	d505      	bpl.n	8009458 <__swrite+0x1e>
 800944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009450:	2302      	movs	r3, #2
 8009452:	2200      	movs	r2, #0
 8009454:	f000 f9c8 	bl	80097e8 <_lseek_r>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800945e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	4628      	mov	r0, r5
 800946a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	f000 b869 	b.w	8009544 <_write_r>

08009472 <__sseek>:
 8009472:	b510      	push	{r4, lr}
 8009474:	460c      	mov	r4, r1
 8009476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947a:	f000 f9b5 	bl	80097e8 <_lseek_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	bf15      	itete	ne
 8009484:	6560      	strne	r0, [r4, #84]	; 0x54
 8009486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800948a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800948e:	81a3      	strheq	r3, [r4, #12]
 8009490:	bf18      	it	ne
 8009492:	81a3      	strhne	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__sclose>:
 8009496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949a:	f000 b8d3 	b.w	8009644 <_close_r>
	...

080094a0 <__swbuf_r>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	460e      	mov	r6, r1
 80094a4:	4614      	mov	r4, r2
 80094a6:	4605      	mov	r5, r0
 80094a8:	b118      	cbz	r0, 80094b2 <__swbuf_r+0x12>
 80094aa:	6983      	ldr	r3, [r0, #24]
 80094ac:	b90b      	cbnz	r3, 80094b2 <__swbuf_r+0x12>
 80094ae:	f7ff fd53 	bl	8008f58 <__sinit>
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <__swbuf_r+0x98>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	d12b      	bne.n	8009510 <__swbuf_r+0x70>
 80094b8:	686c      	ldr	r4, [r5, #4]
 80094ba:	69a3      	ldr	r3, [r4, #24]
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	071a      	lsls	r2, r3, #28
 80094c2:	d52f      	bpl.n	8009524 <__swbuf_r+0x84>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	b36b      	cbz	r3, 8009524 <__swbuf_r+0x84>
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	6820      	ldr	r0, [r4, #0]
 80094cc:	1ac0      	subs	r0, r0, r3
 80094ce:	6963      	ldr	r3, [r4, #20]
 80094d0:	b2f6      	uxtb	r6, r6
 80094d2:	4283      	cmp	r3, r0
 80094d4:	4637      	mov	r7, r6
 80094d6:	dc04      	bgt.n	80094e2 <__swbuf_r+0x42>
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 f948 	bl	8009770 <_fflush_r>
 80094e0:	bb30      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	6022      	str	r2, [r4, #0]
 80094ee:	701e      	strb	r6, [r3, #0]
 80094f0:	6963      	ldr	r3, [r4, #20]
 80094f2:	3001      	adds	r0, #1
 80094f4:	4283      	cmp	r3, r0
 80094f6:	d004      	beq.n	8009502 <__swbuf_r+0x62>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d506      	bpl.n	800950c <__swbuf_r+0x6c>
 80094fe:	2e0a      	cmp	r6, #10
 8009500:	d104      	bne.n	800950c <__swbuf_r+0x6c>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f000 f933 	bl	8009770 <_fflush_r>
 800950a:	b988      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 800950c:	4638      	mov	r0, r7
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <__swbuf_r+0x9c>)
 8009512:	429c      	cmp	r4, r3
 8009514:	d101      	bne.n	800951a <__swbuf_r+0x7a>
 8009516:	68ac      	ldr	r4, [r5, #8]
 8009518:	e7cf      	b.n	80094ba <__swbuf_r+0x1a>
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <__swbuf_r+0xa0>)
 800951c:	429c      	cmp	r4, r3
 800951e:	bf08      	it	eq
 8009520:	68ec      	ldreq	r4, [r5, #12]
 8009522:	e7ca      	b.n	80094ba <__swbuf_r+0x1a>
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f81e 	bl	8009568 <__swsetup_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0cb      	beq.n	80094c8 <__swbuf_r+0x28>
 8009530:	f04f 37ff 	mov.w	r7, #4294967295
 8009534:	e7ea      	b.n	800950c <__swbuf_r+0x6c>
 8009536:	bf00      	nop
 8009538:	08009d48 	.word	0x08009d48
 800953c:	08009d68 	.word	0x08009d68
 8009540:	08009d28 	.word	0x08009d28

08009544 <_write_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4d07      	ldr	r5, [pc, #28]	; (8009564 <_write_r+0x20>)
 8009548:	4604      	mov	r4, r0
 800954a:	4608      	mov	r0, r1
 800954c:	4611      	mov	r1, r2
 800954e:	2200      	movs	r2, #0
 8009550:	602a      	str	r2, [r5, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f7f8 fb19 	bl	8001b8a <_write>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_write_r+0x1e>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_write_r+0x1e>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	2000449c 	.word	0x2000449c

08009568 <__swsetup_r>:
 8009568:	4b32      	ldr	r3, [pc, #200]	; (8009634 <__swsetup_r+0xcc>)
 800956a:	b570      	push	{r4, r5, r6, lr}
 800956c:	681d      	ldr	r5, [r3, #0]
 800956e:	4606      	mov	r6, r0
 8009570:	460c      	mov	r4, r1
 8009572:	b125      	cbz	r5, 800957e <__swsetup_r+0x16>
 8009574:	69ab      	ldr	r3, [r5, #24]
 8009576:	b913      	cbnz	r3, 800957e <__swsetup_r+0x16>
 8009578:	4628      	mov	r0, r5
 800957a:	f7ff fced 	bl	8008f58 <__sinit>
 800957e:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <__swsetup_r+0xd0>)
 8009580:	429c      	cmp	r4, r3
 8009582:	d10f      	bne.n	80095a4 <__swsetup_r+0x3c>
 8009584:	686c      	ldr	r4, [r5, #4]
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800958c:	0719      	lsls	r1, r3, #28
 800958e:	d42c      	bmi.n	80095ea <__swsetup_r+0x82>
 8009590:	06dd      	lsls	r5, r3, #27
 8009592:	d411      	bmi.n	80095b8 <__swsetup_r+0x50>
 8009594:	2309      	movs	r3, #9
 8009596:	6033      	str	r3, [r6, #0]
 8009598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295
 80095a2:	e03e      	b.n	8009622 <__swsetup_r+0xba>
 80095a4:	4b25      	ldr	r3, [pc, #148]	; (800963c <__swsetup_r+0xd4>)
 80095a6:	429c      	cmp	r4, r3
 80095a8:	d101      	bne.n	80095ae <__swsetup_r+0x46>
 80095aa:	68ac      	ldr	r4, [r5, #8]
 80095ac:	e7eb      	b.n	8009586 <__swsetup_r+0x1e>
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <__swsetup_r+0xd8>)
 80095b0:	429c      	cmp	r4, r3
 80095b2:	bf08      	it	eq
 80095b4:	68ec      	ldreq	r4, [r5, #12]
 80095b6:	e7e6      	b.n	8009586 <__swsetup_r+0x1e>
 80095b8:	0758      	lsls	r0, r3, #29
 80095ba:	d512      	bpl.n	80095e2 <__swsetup_r+0x7a>
 80095bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095be:	b141      	cbz	r1, 80095d2 <__swsetup_r+0x6a>
 80095c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d002      	beq.n	80095ce <__swsetup_r+0x66>
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f991 	bl	80098f0 <_free_r>
 80095ce:	2300      	movs	r3, #0
 80095d0:	6363      	str	r3, [r4, #52]	; 0x34
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	2300      	movs	r3, #0
 80095dc:	6063      	str	r3, [r4, #4]
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f043 0308 	orr.w	r3, r3, #8
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	b94b      	cbnz	r3, 8009602 <__swsetup_r+0x9a>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095f8:	d003      	beq.n	8009602 <__swsetup_r+0x9a>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4630      	mov	r0, r6
 80095fe:	f000 f92b 	bl	8009858 <__smakebuf_r>
 8009602:	89a0      	ldrh	r0, [r4, #12]
 8009604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009608:	f010 0301 	ands.w	r3, r0, #1
 800960c:	d00a      	beq.n	8009624 <__swsetup_r+0xbc>
 800960e:	2300      	movs	r3, #0
 8009610:	60a3      	str	r3, [r4, #8]
 8009612:	6963      	ldr	r3, [r4, #20]
 8009614:	425b      	negs	r3, r3
 8009616:	61a3      	str	r3, [r4, #24]
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	b943      	cbnz	r3, 800962e <__swsetup_r+0xc6>
 800961c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009620:	d1ba      	bne.n	8009598 <__swsetup_r+0x30>
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	0781      	lsls	r1, r0, #30
 8009626:	bf58      	it	pl
 8009628:	6963      	ldrpl	r3, [r4, #20]
 800962a:	60a3      	str	r3, [r4, #8]
 800962c:	e7f4      	b.n	8009618 <__swsetup_r+0xb0>
 800962e:	2000      	movs	r0, #0
 8009630:	e7f7      	b.n	8009622 <__swsetup_r+0xba>
 8009632:	bf00      	nop
 8009634:	2000002c 	.word	0x2000002c
 8009638:	08009d48 	.word	0x08009d48
 800963c:	08009d68 	.word	0x08009d68
 8009640:	08009d28 	.word	0x08009d28

08009644 <_close_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	; (8009660 <_close_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f8 fab7 	bl	8001bc2 <_close>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_close_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_close_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	2000449c 	.word	0x2000449c

08009664 <__sflush_r>:
 8009664:	898a      	ldrh	r2, [r1, #12]
 8009666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	4605      	mov	r5, r0
 800966c:	0710      	lsls	r0, r2, #28
 800966e:	460c      	mov	r4, r1
 8009670:	d458      	bmi.n	8009724 <__sflush_r+0xc0>
 8009672:	684b      	ldr	r3, [r1, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc05      	bgt.n	8009684 <__sflush_r+0x20>
 8009678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc02      	bgt.n	8009684 <__sflush_r+0x20>
 800967e:	2000      	movs	r0, #0
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009686:	2e00      	cmp	r6, #0
 8009688:	d0f9      	beq.n	800967e <__sflush_r+0x1a>
 800968a:	2300      	movs	r3, #0
 800968c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009690:	682f      	ldr	r7, [r5, #0]
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	d032      	beq.n	80096fc <__sflush_r+0x98>
 8009696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	075a      	lsls	r2, r3, #29
 800969c:	d505      	bpl.n	80096aa <__sflush_r+0x46>
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	1ac0      	subs	r0, r0, r3
 80096a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a4:	b10b      	cbz	r3, 80096aa <__sflush_r+0x46>
 80096a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a8:	1ac0      	subs	r0, r0, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	4602      	mov	r2, r0
 80096ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b0      	blx	r6
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	d106      	bne.n	80096ca <__sflush_r+0x66>
 80096bc:	6829      	ldr	r1, [r5, #0]
 80096be:	291d      	cmp	r1, #29
 80096c0:	d82c      	bhi.n	800971c <__sflush_r+0xb8>
 80096c2:	4a2a      	ldr	r2, [pc, #168]	; (800976c <__sflush_r+0x108>)
 80096c4:	40ca      	lsrs	r2, r1
 80096c6:	07d6      	lsls	r6, r2, #31
 80096c8:	d528      	bpl.n	800971c <__sflush_r+0xb8>
 80096ca:	2200      	movs	r2, #0
 80096cc:	6062      	str	r2, [r4, #4]
 80096ce:	04d9      	lsls	r1, r3, #19
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	d504      	bpl.n	80096e0 <__sflush_r+0x7c>
 80096d6:	1c42      	adds	r2, r0, #1
 80096d8:	d101      	bne.n	80096de <__sflush_r+0x7a>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b903      	cbnz	r3, 80096e0 <__sflush_r+0x7c>
 80096de:	6560      	str	r0, [r4, #84]	; 0x54
 80096e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e2:	602f      	str	r7, [r5, #0]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	d0ca      	beq.n	800967e <__sflush_r+0x1a>
 80096e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ec:	4299      	cmp	r1, r3
 80096ee:	d002      	beq.n	80096f6 <__sflush_r+0x92>
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 f8fd 	bl	80098f0 <_free_r>
 80096f6:	2000      	movs	r0, #0
 80096f8:	6360      	str	r0, [r4, #52]	; 0x34
 80096fa:	e7c1      	b.n	8009680 <__sflush_r+0x1c>
 80096fc:	6a21      	ldr	r1, [r4, #32]
 80096fe:	2301      	movs	r3, #1
 8009700:	4628      	mov	r0, r5
 8009702:	47b0      	blx	r6
 8009704:	1c41      	adds	r1, r0, #1
 8009706:	d1c7      	bne.n	8009698 <__sflush_r+0x34>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0c4      	beq.n	8009698 <__sflush_r+0x34>
 800970e:	2b1d      	cmp	r3, #29
 8009710:	d001      	beq.n	8009716 <__sflush_r+0xb2>
 8009712:	2b16      	cmp	r3, #22
 8009714:	d101      	bne.n	800971a <__sflush_r+0xb6>
 8009716:	602f      	str	r7, [r5, #0]
 8009718:	e7b1      	b.n	800967e <__sflush_r+0x1a>
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e7ad      	b.n	8009680 <__sflush_r+0x1c>
 8009724:	690f      	ldr	r7, [r1, #16]
 8009726:	2f00      	cmp	r7, #0
 8009728:	d0a9      	beq.n	800967e <__sflush_r+0x1a>
 800972a:	0793      	lsls	r3, r2, #30
 800972c:	680e      	ldr	r6, [r1, #0]
 800972e:	bf08      	it	eq
 8009730:	694b      	ldreq	r3, [r1, #20]
 8009732:	600f      	str	r7, [r1, #0]
 8009734:	bf18      	it	ne
 8009736:	2300      	movne	r3, #0
 8009738:	eba6 0807 	sub.w	r8, r6, r7
 800973c:	608b      	str	r3, [r1, #8]
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	dd9c      	ble.n	800967e <__sflush_r+0x1a>
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009748:	4643      	mov	r3, r8
 800974a:	463a      	mov	r2, r7
 800974c:	4628      	mov	r0, r5
 800974e:	47b0      	blx	r6
 8009750:	2800      	cmp	r0, #0
 8009752:	dc06      	bgt.n	8009762 <__sflush_r+0xfe>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e78e      	b.n	8009680 <__sflush_r+0x1c>
 8009762:	4407      	add	r7, r0
 8009764:	eba8 0800 	sub.w	r8, r8, r0
 8009768:	e7e9      	b.n	800973e <__sflush_r+0xda>
 800976a:	bf00      	nop
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f7ff fbe7 	bl	8008f58 <__sinit>
 800978a:	4b14      	ldr	r3, [pc, #80]	; (80097dc <_fflush_r+0x6c>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d11b      	bne.n	80097c8 <_fflush_r+0x58>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ef      	beq.n	800977a <_fflush_r+0xa>
 800979a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800979c:	07d0      	lsls	r0, r2, #31
 800979e:	d404      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a0:	0599      	lsls	r1, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_fflush_r+0x3a>
 80097a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a6:	f7ff fc9a 	bl	80090de <__retarget_lock_acquire_recursive>
 80097aa:	4628      	mov	r0, r5
 80097ac:	4621      	mov	r1, r4
 80097ae:	f7ff ff59 	bl	8009664 <__sflush_r>
 80097b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b4:	07da      	lsls	r2, r3, #31
 80097b6:	4605      	mov	r5, r0
 80097b8:	d4e0      	bmi.n	800977c <_fflush_r+0xc>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	059b      	lsls	r3, r3, #22
 80097be:	d4dd      	bmi.n	800977c <_fflush_r+0xc>
 80097c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c2:	f7ff fc8d 	bl	80090e0 <__retarget_lock_release_recursive>
 80097c6:	e7d9      	b.n	800977c <_fflush_r+0xc>
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <_fflush_r+0x70>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <_fflush_r+0x62>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7df      	b.n	8009792 <_fflush_r+0x22>
 80097d2:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <_fflush_r+0x74>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7da      	b.n	8009792 <_fflush_r+0x22>
 80097dc:	08009d48 	.word	0x08009d48
 80097e0:	08009d68 	.word	0x08009d68
 80097e4:	08009d28 	.word	0x08009d28

080097e8 <_lseek_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d07      	ldr	r5, [pc, #28]	; (8009808 <_lseek_r+0x20>)
 80097ec:	4604      	mov	r4, r0
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f8 fa0a 	bl	8001c10 <_lseek>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_lseek_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_lseek_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	2000449c 	.word	0x2000449c

0800980c <__swhatbuf_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	460e      	mov	r6, r1
 8009810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009814:	2900      	cmp	r1, #0
 8009816:	b096      	sub	sp, #88	; 0x58
 8009818:	4614      	mov	r4, r2
 800981a:	461d      	mov	r5, r3
 800981c:	da08      	bge.n	8009830 <__swhatbuf_r+0x24>
 800981e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	602a      	str	r2, [r5, #0]
 8009826:	061a      	lsls	r2, r3, #24
 8009828:	d410      	bmi.n	800984c <__swhatbuf_r+0x40>
 800982a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982e:	e00e      	b.n	800984e <__swhatbuf_r+0x42>
 8009830:	466a      	mov	r2, sp
 8009832:	f000 f8bb 	bl	80099ac <_fstat_r>
 8009836:	2800      	cmp	r0, #0
 8009838:	dbf1      	blt.n	800981e <__swhatbuf_r+0x12>
 800983a:	9a01      	ldr	r2, [sp, #4]
 800983c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009844:	425a      	negs	r2, r3
 8009846:	415a      	adcs	r2, r3
 8009848:	602a      	str	r2, [r5, #0]
 800984a:	e7ee      	b.n	800982a <__swhatbuf_r+0x1e>
 800984c:	2340      	movs	r3, #64	; 0x40
 800984e:	2000      	movs	r0, #0
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	b016      	add	sp, #88	; 0x58
 8009854:	bd70      	pop	{r4, r5, r6, pc}
	...

08009858 <__smakebuf_r>:
 8009858:	898b      	ldrh	r3, [r1, #12]
 800985a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800985c:	079d      	lsls	r5, r3, #30
 800985e:	4606      	mov	r6, r0
 8009860:	460c      	mov	r4, r1
 8009862:	d507      	bpl.n	8009874 <__smakebuf_r+0x1c>
 8009864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	6123      	str	r3, [r4, #16]
 800986c:	2301      	movs	r3, #1
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	b002      	add	sp, #8
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	ab01      	add	r3, sp, #4
 8009876:	466a      	mov	r2, sp
 8009878:	f7ff ffc8 	bl	800980c <__swhatbuf_r>
 800987c:	9900      	ldr	r1, [sp, #0]
 800987e:	4605      	mov	r5, r0
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fc65 	bl	8009150 <_malloc_r>
 8009886:	b948      	cbnz	r0, 800989c <__smakebuf_r+0x44>
 8009888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988c:	059a      	lsls	r2, r3, #22
 800988e:	d4ef      	bmi.n	8009870 <__smakebuf_r+0x18>
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7e3      	b.n	8009864 <__smakebuf_r+0xc>
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <__smakebuf_r+0x7c>)
 800989e:	62b3      	str	r3, [r6, #40]	; 0x28
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	6163      	str	r3, [r4, #20]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	b15b      	cbz	r3, 80098cc <__smakebuf_r+0x74>
 80098b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f889 	bl	80099d0 <_isatty_r>
 80098be:	b128      	cbz	r0, 80098cc <__smakebuf_r+0x74>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	89a0      	ldrh	r0, [r4, #12]
 80098ce:	4305      	orrs	r5, r0
 80098d0:	81a5      	strh	r5, [r4, #12]
 80098d2:	e7cd      	b.n	8009870 <__smakebuf_r+0x18>
 80098d4:	08008ef1 	.word	0x08008ef1

080098d8 <__malloc_lock>:
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__malloc_lock+0x8>)
 80098da:	f7ff bc00 	b.w	80090de <__retarget_lock_acquire_recursive>
 80098de:	bf00      	nop
 80098e0:	20004490 	.word	0x20004490

080098e4 <__malloc_unlock>:
 80098e4:	4801      	ldr	r0, [pc, #4]	; (80098ec <__malloc_unlock+0x8>)
 80098e6:	f7ff bbfb 	b.w	80090e0 <__retarget_lock_release_recursive>
 80098ea:	bf00      	nop
 80098ec:	20004490 	.word	0x20004490

080098f0 <_free_r>:
 80098f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d044      	beq.n	8009980 <_free_r+0x90>
 80098f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fa:	9001      	str	r0, [sp, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009902:	bfb8      	it	lt
 8009904:	18e4      	addlt	r4, r4, r3
 8009906:	f7ff ffe7 	bl	80098d8 <__malloc_lock>
 800990a:	4a1e      	ldr	r2, [pc, #120]	; (8009984 <_free_r+0x94>)
 800990c:	9801      	ldr	r0, [sp, #4]
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	b933      	cbnz	r3, 8009920 <_free_r+0x30>
 8009912:	6063      	str	r3, [r4, #4]
 8009914:	6014      	str	r4, [r2, #0]
 8009916:	b003      	add	sp, #12
 8009918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800991c:	f7ff bfe2 	b.w	80098e4 <__malloc_unlock>
 8009920:	42a3      	cmp	r3, r4
 8009922:	d908      	bls.n	8009936 <_free_r+0x46>
 8009924:	6825      	ldr	r5, [r4, #0]
 8009926:	1961      	adds	r1, r4, r5
 8009928:	428b      	cmp	r3, r1
 800992a:	bf01      	itttt	eq
 800992c:	6819      	ldreq	r1, [r3, #0]
 800992e:	685b      	ldreq	r3, [r3, #4]
 8009930:	1949      	addeq	r1, r1, r5
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	e7ed      	b.n	8009912 <_free_r+0x22>
 8009936:	461a      	mov	r2, r3
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	b10b      	cbz	r3, 8009940 <_free_r+0x50>
 800993c:	42a3      	cmp	r3, r4
 800993e:	d9fa      	bls.n	8009936 <_free_r+0x46>
 8009940:	6811      	ldr	r1, [r2, #0]
 8009942:	1855      	adds	r5, r2, r1
 8009944:	42a5      	cmp	r5, r4
 8009946:	d10b      	bne.n	8009960 <_free_r+0x70>
 8009948:	6824      	ldr	r4, [r4, #0]
 800994a:	4421      	add	r1, r4
 800994c:	1854      	adds	r4, r2, r1
 800994e:	42a3      	cmp	r3, r4
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	d1e0      	bne.n	8009916 <_free_r+0x26>
 8009954:	681c      	ldr	r4, [r3, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	6053      	str	r3, [r2, #4]
 800995a:	4421      	add	r1, r4
 800995c:	6011      	str	r1, [r2, #0]
 800995e:	e7da      	b.n	8009916 <_free_r+0x26>
 8009960:	d902      	bls.n	8009968 <_free_r+0x78>
 8009962:	230c      	movs	r3, #12
 8009964:	6003      	str	r3, [r0, #0]
 8009966:	e7d6      	b.n	8009916 <_free_r+0x26>
 8009968:	6825      	ldr	r5, [r4, #0]
 800996a:	1961      	adds	r1, r4, r5
 800996c:	428b      	cmp	r3, r1
 800996e:	bf04      	itt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	6063      	str	r3, [r4, #4]
 8009976:	bf04      	itt	eq
 8009978:	1949      	addeq	r1, r1, r5
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	6054      	str	r4, [r2, #4]
 800997e:	e7ca      	b.n	8009916 <_free_r+0x26>
 8009980:	b003      	add	sp, #12
 8009982:	bd30      	pop	{r4, r5, pc}
 8009984:	20004494 	.word	0x20004494

08009988 <_read_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d07      	ldr	r5, [pc, #28]	; (80099a8 <_read_r+0x20>)
 800998c:	4604      	mov	r4, r0
 800998e:	4608      	mov	r0, r1
 8009990:	4611      	mov	r1, r2
 8009992:	2200      	movs	r2, #0
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	f7f8 f8da 	bl	8001b50 <_read>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d102      	bne.n	80099a6 <_read_r+0x1e>
 80099a0:	682b      	ldr	r3, [r5, #0]
 80099a2:	b103      	cbz	r3, 80099a6 <_read_r+0x1e>
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	bd38      	pop	{r3, r4, r5, pc}
 80099a8:	2000449c 	.word	0x2000449c

080099ac <_fstat_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d07      	ldr	r5, [pc, #28]	; (80099cc <_fstat_r+0x20>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	4611      	mov	r1, r2
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	f7f8 f90e 	bl	8001bda <_fstat>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d102      	bne.n	80099c8 <_fstat_r+0x1c>
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	b103      	cbz	r3, 80099c8 <_fstat_r+0x1c>
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	bd38      	pop	{r3, r4, r5, pc}
 80099ca:	bf00      	nop
 80099cc:	2000449c 	.word	0x2000449c

080099d0 <_isatty_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d06      	ldr	r5, [pc, #24]	; (80099ec <_isatty_r+0x1c>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	f7f8 f90d 	bl	8001bfa <_isatty>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_isatty_r+0x1a>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_isatty_r+0x1a>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	2000449c 	.word	0x2000449c

080099f0 <_init>:
 80099f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f2:	bf00      	nop
 80099f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f6:	bc08      	pop	{r3}
 80099f8:	469e      	mov	lr, r3
 80099fa:	4770      	bx	lr

080099fc <_fini>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	bf00      	nop
 8009a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a02:	bc08      	pop	{r3}
 8009a04:	469e      	mov	lr, r3
 8009a06:	4770      	bx	lr
