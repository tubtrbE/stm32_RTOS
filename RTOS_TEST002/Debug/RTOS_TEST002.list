
RTOS_TEST002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db0  08006db0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db8  08006db8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000480c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004880  20004880  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd6f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003721  00000000  00000000  0003ce13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001538  00000000  00000000  00041bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026daf  00000000  00000000  000430f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186a4  00000000  00000000  00069e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb224  00000000  00000000  00082543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d767  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006504  00000000  00000000  0016d7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006cb0 	.word	0x08006cb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006cb0 	.word	0x08006cb0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fcf9 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f831 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f94b 	bl	8000870 <MX_GPIO_Init>
  MX_ETH_Init();
 80005da:	f000 f8a3 	bl	8000724 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f8ef 	bl	80007c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 f917 	bl	8000814 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005e6:	f000 f891 	bl	800070c <MX_NVIC_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of hBinarySem */
  osSemaphoreDef(hBinarySem);
 80005ea:	2300      	movs	r3, #0
 80005ec:	623b      	str	r3, [r7, #32]
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  hBinarySemHandle = osSemaphoreCreate(osSemaphore(hBinarySem), 1);
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fb1c 	bl	8003c36 <osSemaphoreCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <main+0x64>)
 8000602:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x68>)
 8000606:	1d3c      	adds	r4, r7, #4
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 faab 	bl	8003b76 <osThreadCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <main+0x6c>)
 8000624:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f003 fa9f 	bl	8003b68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	e7fe      	b.n	800062a <main+0x62>
 800062c:	20000ac0 	.word	0x20000ac0
 8000630:	08006cd4 	.word	0x08006cd4
 8000634:	20000abc 	.word	0x20000abc

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 fe62 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fbed 	bl	8001e9c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f9ee 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fe4e 	bl	800238c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f9d7 	bl	8000aa8 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 fd73 	bl	8001200 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f000 fd8c 	bl	8001238 <HAL_NVIC_EnableIRQ>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ETH_Init+0x84>)
 800072a:	4a20      	ldr	r2, [pc, #128]	; (80007ac <MX_ETH_Init+0x88>)
 800072c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_ETH_Init+0x8c>)
 800073c:	22e1      	movs	r2, #225	; 0xe1
 800073e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ETH_Init+0x84>)
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <MX_ETH_Init+0x8c>)
 8000756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_ETH_Init+0x84>)
 800075a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800075e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ETH_Init+0x84>)
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <MX_ETH_Init+0x90>)
 8000764:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_ETH_Init+0x84>)
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_ETH_Init+0x94>)
 800076a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_ETH_Init+0x84>)
 800076e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000772:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_ETH_Init+0x84>)
 8000776:	f000 fd6d 	bl	8001254 <HAL_ETH_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 f992 	bl	8000aa8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000784:	2238      	movs	r2, #56	; 0x38
 8000786:	2100      	movs	r1, #0
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_ETH_Init+0x98>)
 800078a:	f005 fdc1 	bl	8006310 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_ETH_Init+0x98>)
 8000790:	2221      	movs	r2, #33	; 0x21
 8000792:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_ETH_Init+0x98>)
 8000796:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800079a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_ETH_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200004bc 	.word	0x200004bc
 80007ac:	40028000 	.word	0x40028000
 80007b0:	20000ac4 	.word	0x20000ac4
 80007b4:	2000041c 	.word	0x2000041c
 80007b8:	2000037c 	.word	0x2000037c
 80007bc:	20000344 	.word	0x20000344

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART3_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART3_UART_Init+0x4c>)
 80007f8:	f002 fac8 	bl	8002d8c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f951 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000056c 	.word	0x2000056c
 8000810:	40004800 	.word	0x40004800

08000814 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800081e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2204      	movs	r2, #4
 8000824:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2201      	movs	r2, #1
 800083c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2201      	movs	r2, #1
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	f001 fa02 	bl	8001c60 <HAL_PCD_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000862:	f000 f921 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200005b0 	.word	0x200005b0

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a4b      	ldr	r2, [pc, #300]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a44      	ldr	r2, [pc, #272]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b42      	ldr	r3, [pc, #264]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3b      	ldr	r3, [pc, #236]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a36      	ldr	r2, [pc, #216]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x14c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0x14c>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0181 	movw	r1, #16513	; 0x4081
 8000934:	4822      	ldr	r0, [pc, #136]	; (80009c0 <MX_GPIO_Init+0x150>)
 8000936:	f001 f961 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000940:	f001 f95c 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_GPIO_Init+0x158>)
 800095c:	f000 ffa2 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000960:	f244 0381 	movw	r3, #16513	; 0x4081
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x150>)
 800097a:	f000 ff93 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x154>)
 8000996:	f000 ff85 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_GPIO_Init+0x154>)
 80009ae:	f000 ff79 	bl	80018a4 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800

080009cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	osSemaphoreRelease(hBinarySemHandle);
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f9ac 	bl	8003d38 <osSemaphoreRelease>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000ac0 	.word	0x20000ac0

080009ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t uart_buf[30];
	/* Infinite loop */
	for (;;) {
		if (hBinarySemHandle != NULL) {
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <StartDefaultTask+0x88>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d029      	beq.n	8000a50 <StartDefaultTask+0x64>
			if (osSemaphoreWait(hBinarySemHandle, 0) == osOK) {
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <StartDefaultTask+0x88>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 f94a 	bl	8003c9c <osSemaphoreWait>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d120      	bne.n	8000a50 <StartDefaultTask+0x64>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	4819      	ldr	r0, [pc, #100]	; (8000a78 <StartDefaultTask+0x8c>)
 8000a14:	f001 f8f2 	bl	8001bfc <HAL_GPIO_WritePin>
				osDelay(100);
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f003 f8f8 	bl	8003c0e <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <StartDefaultTask+0x8c>)
 8000a24:	f001 f8ea 	bl	8001bfc <HAL_GPIO_WritePin>

				memset(uart_buf, 0, sizeof(uart_buf));
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	221e      	movs	r2, #30
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 fc6d 	bl	8006310 <memset>
				sprintf(uart_buf, "\r\nKorea \r\n");
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4910      	ldr	r1, [pc, #64]	; (8000a7c <StartDefaultTask+0x90>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 fd7d 	bl	800653c <siprintf>
				HAL_UART_Transmit(&huart3, uart_buf, sizeof(uart_buf), 100);
 8000a42:	f107 0108 	add.w	r1, r7, #8
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	221e      	movs	r2, #30
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <StartDefaultTask+0x94>)
 8000a4c:	f002 f9eb 	bl	8002e26 <HAL_UART_Transmit>
			}
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <StartDefaultTask+0x8c>)
 8000a56:	f001 f8d1 	bl	8001bfc <HAL_GPIO_WritePin>
		osDelay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f003 f8d7 	bl	8003c0e <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <StartDefaultTask+0x8c>)
 8000a66:	f001 f8c9 	bl	8001bfc <HAL_GPIO_WritePin>
		osDelay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f003 f8cf 	bl	8003c0e <osDelay>
		if (hBinarySemHandle != NULL) {
 8000a70:	e7c0      	b.n	80009f4 <StartDefaultTask+0x8>
 8000a72:	bf00      	nop
 8000a74:	20000ac0 	.word	0x20000ac0
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	08006cf0 	.word	0x08006cf0
 8000a80:	2000056c 	.word	0x2000056c

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 fab7 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	210f      	movs	r1, #15
 8000af6:	f06f 0001 	mvn.w	r0, #1
 8000afa:	f000 fb81 	bl	8001200 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <HAL_ETH_MspInit+0x174>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	f040 80a4 	bne.w	8000c78 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a52      	ldr	r2, [pc, #328]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b50      	ldr	r3, [pc, #320]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b48:	623b      	str	r3, [r7, #32]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <HAL_ETH_MspInit+0x17c>)
 8000c10:	f000 fe48 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <HAL_ETH_MspInit+0x180>)
 8000c30:	f000 fe38 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <HAL_ETH_MspInit+0x184>)
 8000c52:	f000 fe27 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_ETH_MspInit+0x188>)
 8000c74:	f000 fe16 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	; 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40028000 	.word	0x40028000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021800 	.word	0x40021800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12c      	bne.n	8000d14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d04:	2307      	movs	r3, #7
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d10:	f000 fdc8 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d48:	d13f      	bne.n	8000dca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d84:	f000 fd8e 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d9e:	f000 fd81 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6353      	str	r3, [r2, #52]	; 0x34
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	201e      	movs	r0, #30
 8000df2:	f000 fa05 	bl	8001200 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000df6:	201e      	movs	r0, #30
 8000df8:	f000 fa1e 	bl	8001238 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xa4>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e18:	f107 0210 	add.w	r2, r7, #16
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fcd2 	bl	80027cc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e28:	f001 fca8 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_InitTick+0xa8>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_InitTick+0xac>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_InitTick+0xb0>)
 8000e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_InitTick+0xac>)
 8000e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_InitTick+0xac>)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_InitTick+0xac>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_InitTick+0xac>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_InitTick+0xac>)
 8000e62:	f001 fce5 	bl	8002830 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d104      	bne.n	8000e76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_InitTick+0xac>)
 8000e6e:	f001 fd39 	bl	80028e4 <HAL_TIM_Base_Start_IT>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	20000acc 	.word	0x20000acc
 8000e8c:	40000800 	.word	0x40000800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM4_IRQHandler+0x10>)
 8000ec2:	f001 fd7f 	bl	80029c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000acc 	.word	0x20000acc

08000ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed8:	f000 feaa 	bl	8001c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f005 f9c4 	bl	800629c <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20030000 	.word	0x20030000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000b14 	.word	0x20000b14
 8000f48:	20004880 	.word	0x20004880

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd7 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f005 f983 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fb11 	bl	80005c8 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fb4:	08006dc0 	.word	0x08006dc0
  ldr r2, =_sbss
 8000fb8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fbc:	20004880 	.word	0x20004880

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f8fc 	bl	80011ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff fef2 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fd5c 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000b18 	.word	0x20000b18

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000b18 	.word	0x20000b18

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff4c 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001212:	f7ff ff61 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001216:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff ffb1 	bl	8001184 <NVIC_EncodePriority>
 8001222:	4602      	mov	r2, r0
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff80 	bl	8001130 <__NVIC_SetPriority>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff54 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e06c      	b.n	8001340 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2223      	movs	r2, #35	; 0x23
 8001274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fc47 	bl	8000b0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <HAL_ETH_Init+0xf8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <HAL_ETH_Init+0xf8>)
 80012a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <HAL_ETH_Init+0xf8>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4927      	ldr	r1, [pc, #156]	; (800134c <HAL_ETH_Init+0xf8>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_ETH_Init+0xf8>)
 80012b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff feae 	bl	8001030 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d6:	e011      	b.n	80012fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d8:	f7ff feaa 	bl	8001030 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d909      	bls.n	80012fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2204      	movs	r2, #4
 80012ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e021      	b.n	8001340 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e4      	bne.n	80012d8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f958 	bl	80015c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f9ff 	bl	8001718 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa55 	bl	80017ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9bd 	bl	80016a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2210      	movs	r2, #16
 800133a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800

08001350 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <ETH_SetMACConfig+0x15c>)
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7c1b      	ldrb	r3, [r3, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <ETH_SetMACConfig+0x28>
 8001372:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001376:	e000      	b.n	800137a <ETH_SetMACConfig+0x2a>
 8001378:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	7c5b      	ldrb	r3, [r3, #17]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <ETH_SetMACConfig+0x38>
 8001382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001386:	e000      	b.n	800138a <ETH_SetMACConfig+0x3a>
 8001388:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800138a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	7fdb      	ldrb	r3, [r3, #31]
 8001396:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001398:	431a      	orrs	r2, r3
                        macconf->Speed |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	7f92      	ldrb	r2, [r2, #30]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d102      	bne.n	80013ae <ETH_SetMACConfig+0x5e>
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	e000      	b.n	80013b0 <ETH_SetMACConfig+0x60>
 80013ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80013b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7f1b      	ldrb	r3, [r3, #28]
 80013b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <ETH_SetMACConfig+0x88>
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	e000      	b.n	80013da <ETH_SetMACConfig+0x8a>
 80013d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	7bdb      	ldrb	r3, [r3, #15]
 80013e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f2:	4313      	orrs	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fe1c 	bl	8001048 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001436:	2a00      	cmp	r2, #0
 8001438:	d101      	bne.n	800143e <ETH_SetMACConfig+0xee>
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	e000      	b.n	8001440 <ETH_SetMACConfig+0xf0>
 800143e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001440:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001446:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800144e:	2a01      	cmp	r2, #1
 8001450:	d101      	bne.n	8001456 <ETH_SetMACConfig+0x106>
 8001452:	2208      	movs	r2, #8
 8001454:	e000      	b.n	8001458 <ETH_SetMACConfig+0x108>
 8001456:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001458:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001460:	2a01      	cmp	r2, #1
 8001462:	d101      	bne.n	8001468 <ETH_SetMACConfig+0x118>
 8001464:	2204      	movs	r2, #4
 8001466:	e000      	b.n	800146a <ETH_SetMACConfig+0x11a>
 8001468:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800146a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001472:	2a01      	cmp	r2, #1
 8001474:	d101      	bne.n	800147a <ETH_SetMACConfig+0x12a>
 8001476:	2202      	movs	r2, #2
 8001478:	e000      	b.n	800147c <ETH_SetMACConfig+0x12c>
 800147a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fdd7 	bl	8001048 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	ff20810f 	.word	0xff20810f

080014b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <ETH_SetDMAConfig+0x110>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetDMAConfig+0x2c>
 80014d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014da:	e000      	b.n	80014de <ETH_SetDMAConfig+0x2e>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7b5b      	ldrb	r3, [r3, #13]
 80014e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	7f52      	ldrb	r2, [r2, #29]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <ETH_SetDMAConfig+0x44>
 80014ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014f2:	e000      	b.n	80014f6 <ETH_SetDMAConfig+0x46>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
 80014fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7f1b      	ldrb	r3, [r3, #28]
 800150a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800150c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7f9b      	ldrb	r3, [r3, #30]
 8001512:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001514:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800151a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001522:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001524:	4313      	orrs	r3, r2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fd7e 	bl	8001048 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001564:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800156a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001570:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001578:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800157a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001582:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001588:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001596:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fd4f 	bl	8001048 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	f8de3f23 	.word	0xf8de3f23

080015c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a6      	sub	sp, #152	; 0x98
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001600:	2300      	movs	r3, #0
 8001602:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800160a:	2300      	movs	r3, #0
 800160c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800162c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fe86 	bl	8001350 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001644:	2301      	movs	r3, #1
 8001646:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001648:	2301      	movs	r3, #1
 800164a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001670:	2301      	movs	r3, #1
 8001672:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800167a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff08 	bl	80014b0 <ETH_SetDMAConfig>
}
 80016a0:	bf00      	nop
 80016a2:	3798      	adds	r7, #152	; 0x98
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3305      	adds	r3, #5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	3204      	adds	r2, #4
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <ETH_MACAddressConfig+0x68>)
 80016ca:	4413      	add	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3303      	adds	r3, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4313      	orrs	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <ETH_MACAddressConfig+0x6c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40028040 	.word	0x40028040
 8001714:	40028044 	.word	0x40028044

08001718 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e03e      	b.n	80017a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	3206      	adds	r2, #6
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d80c      	bhi.n	8001788 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e004      	b.n	8001792 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d9bd      	bls.n	8001726 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	611a      	str	r2, [r3, #16]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e046      	b.n	8001866 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001814:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800181c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	3212      	adds	r2, #18
 8001832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d80c      	bhi.n	8001856 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	e004      	b.n	8001860 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d9b5      	bls.n	80017d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	60da      	str	r2, [r3, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e177      	b.n	8001bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8166 	bne.w	8001baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80c0 	beq.w	8001baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a61      	ldr	r2, [pc, #388]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d037      	beq.n	8001ae2 <HAL_GPIO_Init+0x23e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_GPIO_Init+0x23a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d02b      	beq.n	8001ada <HAL_GPIO_Init+0x236>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_GPIO_Init+0x338>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x232>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_GPIO_Init+0x33c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x22e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_GPIO_Init+0x340>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x22a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_GPIO_Init+0x344>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x348>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a50      	ldr	r2, [pc, #320]	; (8001bf0 <HAL_GPIO_Init+0x34c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_GPIO_Init+0x350>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x21a>
 8001aba:	2309      	movs	r3, #9
 8001abc:	e012      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	e010      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae84 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40022400 	.word	0x40022400
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe febc 	bl	80009cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c62:	b08f      	sub	sp, #60	; 0x3c
 8001c64:	af0a      	add	r7, sp, #40	; 0x28
 8001c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e10f      	b.n	8001e92 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff f84b 	bl	8000d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fc8e 	bl	80035d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	687e      	ldr	r6, [r7, #4]
 8001cbe:	466d      	mov	r5, sp
 8001cc0:	f106 0410 	add.w	r4, r6, #16
 8001cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ccc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd4:	1d33      	adds	r3, r6, #4
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f001 fc19 	bl	8003510 <USB_CoreInit>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d0      	b.n	8001e92 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fc7c 	bl	80035f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e04a      	b.n	8001d98 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	333d      	adds	r3, #61	; 0x3d
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	333c      	adds	r3, #60	; 0x3c
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3344      	adds	r3, #68	; 0x44
 8001d3e:	4602      	mov	r2, r0
 8001d40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3348      	adds	r3, #72	; 0x48
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	334c      	adds	r3, #76	; 0x4c
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3354      	adds	r3, #84	; 0x54
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	3301      	adds	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3af      	bcc.n	8001d02 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e044      	b.n	8001e32 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3b5      	bcc.n	8001da8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	687e      	ldr	r6, [r7, #4]
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0410 	add.w	r4, r6, #16
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5a:	1d33      	adds	r3, r6, #4
 8001e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5e:	6838      	ldr	r0, [r7, #0]
 8001e60:	f001 fc14 	bl	800368c <USB_DevInit>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00d      	b.n	8001e92 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fddf 	bl	8003a4e <USB_DevDisconnect>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e267      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e242      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f86c 	bl	8001030 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f868 	bl	8001030 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e207      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f858 	bl	8001030 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f854 	bl	8001030 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f3      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f80d 	bl	8001030 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f809 	bl	8001030 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a8      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe ffec 	bl	8001030 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe ffe8 	bl	8001030 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e187      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe ffcc 	bl	8001030 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe ffc8 	bl	8001030 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e167      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e01b      	b.n	80020f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ffb5 	bl	8001030 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe ffb1 	bl	8001030 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d907      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e150      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470000 	.word	0x42470000
 80020e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ea      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8097 	beq.w	8002230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe ff71 	bl	8001030 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe ff6d 	bl	8001030 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e10c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x30c>
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff32 	bl	8001030 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff2e 	bl	8001030 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0cb      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe ff1c 	bl	8001030 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff18 	bl	8001030 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0b5      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d05c      	beq.n	8002300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d141      	bne.n	80022d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe feec 	bl	8001030 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe fee8 	bl	8001030 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e087      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fec1 	bl	8001030 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe febd 	bl	8001030 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x416>
 80022d0:	e054      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe feaa 	bl	8001030 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fea6 	bl	8001030 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e038      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
 8002314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d028      	beq.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7fe fdd8 	bl	8001030 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fdd4 	bl	8001030 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fc52 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08006d04 	.word	0x08006d04
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b094      	sub	sp, #80	; 0x50
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
 8002564:	2300      	movs	r3, #0
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b79      	ldr	r3, [pc, #484]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80e1 	bhi.w	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e0db      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002590:	e0db      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x208>)
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002596:	e0d8      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6139      	str	r1, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4651      	mov	r1, sl
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	4651      	mov	r1, sl
 800260c:	ebb2 0801 	subs.w	r8, r2, r1
 8002610:	4659      	mov	r1, fp
 8002612:	eb63 0901 	sbc.w	r9, r3, r1
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	4623      	mov	r3, r4
 8002630:	eb18 0303 	adds.w	r3, r8, r3
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	462b      	mov	r3, r5
 8002638:	eb49 0303 	adc.w	r3, r9, r3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264a:	4629      	mov	r1, r5
 800264c:	024b      	lsls	r3, r1, #9
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002654:	4621      	mov	r1, r4
 8002656:	024a      	lsls	r2, r1, #9
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265e:	2200      	movs	r2, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002668:	f7fd fe12 	bl	8000290 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002674:	e058      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	4618      	mov	r0, r3
 8002680:	4611      	mov	r1, r2
 8002682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4641      	mov	r1, r8
 80026aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c8:	ebb2 040a 	subs.w	r4, r2, sl
 80026cc:	eb63 050b 	sbc.w	r5, r3, fp
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	464b      	mov	r3, r9
 80026ec:	eb45 0303 	adc.w	r3, r5, r3
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	61fa      	str	r2, [r7, #28]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	f7fd fdb8 	bl	8000290 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800274c:	4618      	mov	r0, r3
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff0 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08006d14 	.word	0x08006d14

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08006d14 	.word	0x08006d14

080027cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	220f      	movs	r2, #15
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCC_GetClockConfig+0x60>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	40023c00 	.word	0x40023c00

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f839 	bl	80028ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 f9d8 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e04e      	b.n	800299a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d01d      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_TIM_Base_Start_IT+0xc8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_TIM_Base_Start_IT+0x80>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d010      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002986:	e007      	b.n	8002998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40001800 	.word	0x40001800

080029c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d122      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d11b      	bne.n	8002a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0202 	mvn.w	r2, #2
 80029f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8ee 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002a0c:	e005      	b.n	8002a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8e0 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f8f1 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d122      	bne.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d11b      	bne.n	8002a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0204 	mvn.w	r2, #4
 8002a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8c4 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002a60:	e005      	b.n	8002a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8b6 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8c7 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d122      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d11b      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0208 	mvn.w	r2, #8
 8002a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f89a 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f88c 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f89d 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d122      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d11b      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0210 	mvn.w	r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2208      	movs	r2, #8
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f870 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f862 	bl	8002bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f873 	bl	8002bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0201 	mvn.w	r2, #1
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fd ff9e 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d10e      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d107      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f902 	bl	8002d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d10e      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d107      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f838 	bl	8002c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d10e      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d107      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0220 	mvn.w	r2, #32
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8cc 	bl	8002d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d00f      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <TIM_Base_SetConfig+0x118>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <TIM_Base_SetConfig+0x11c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <TIM_Base_SetConfig+0x120>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d027      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2c      	ldr	r2, [pc, #176]	; (8002d3c <TIM_Base_SetConfig+0x118>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d023      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <TIM_Base_SetConfig+0x11c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <TIM_Base_SetConfig+0x120>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d017      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <TIM_Base_SetConfig+0x128>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <TIM_Base_SetConfig+0x130>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <TIM_Base_SetConfig+0x134>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <TIM_Base_SetConfig+0x138>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40014800 	.word	0x40014800
 8002d58:	40001800 	.word	0x40001800
 8002d5c:	40001c00 	.word	0x40001c00
 8002d60:	40002000 	.word	0x40002000

08002d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e03f      	b.n	8002e1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd ff70 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f929 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b08a      	sub	sp, #40	; 0x28
 8002e2a:	af02      	add	r7, sp, #8
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d17c      	bne.n	8002f40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_UART_Transmit+0x2c>
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e075      	b.n	8002f42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <HAL_UART_Transmit+0x3e>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e06e      	b.n	8002f42 <HAL_UART_Transmit+0x11c>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2221      	movs	r2, #33	; 0x21
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe f8d9 	bl	8001030 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d108      	bne.n	8002ea8 <HAL_UART_Transmit+0x82>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e003      	b.n	8002eb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002eb8:	e02a      	b.n	8002f10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f840 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e036      	b.n	8002f42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	3302      	adds	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e007      	b.n	8002f02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1cf      	bne.n	8002eba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f810 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e006      	b.n	8002f42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b090      	sub	sp, #64	; 0x40
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5a:	e050      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d04c      	beq.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	f7fe f861 	bl	8001030 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d241      	bcs.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f9a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fce:	623a      	str	r2, [r7, #32]
 8002fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e00f      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	429a      	cmp	r2, r3
 800301a:	d09f      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3740      	adds	r7, #64	; 0x40
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b0c0      	sub	sp, #256	; 0x100
 800302e:	af00      	add	r7, sp, #0
 8003030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	68d9      	ldr	r1, [r3, #12]
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	ea40 0301 	orr.w	r3, r0, r1
 8003050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	431a      	orrs	r2, r3
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003080:	f021 010c 	bic.w	r1, r1, #12
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800308e:	430b      	orrs	r3, r1
 8003090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a2:	6999      	ldr	r1, [r3, #24]
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	ea40 0301 	orr.w	r3, r0, r1
 80030ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b8f      	ldr	r3, [pc, #572]	; (80032f4 <UART_SetConfig+0x2cc>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d005      	beq.n	80030c8 <UART_SetConfig+0xa0>
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <UART_SetConfig+0x2d0>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d104      	bne.n	80030d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7ff fb6c 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 80030cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030d0:	e003      	b.n	80030da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030d2:	f7ff fb53 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80030d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	f040 810c 	bne.w	8003300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030fa:	4622      	mov	r2, r4
 80030fc:	462b      	mov	r3, r5
 80030fe:	1891      	adds	r1, r2, r2
 8003100:	65b9      	str	r1, [r7, #88]	; 0x58
 8003102:	415b      	adcs	r3, r3
 8003104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800310a:	4621      	mov	r1, r4
 800310c:	eb12 0801 	adds.w	r8, r2, r1
 8003110:	4629      	mov	r1, r5
 8003112:	eb43 0901 	adc.w	r9, r3, r1
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800312a:	4690      	mov	r8, r2
 800312c:	4699      	mov	r9, r3
 800312e:	4623      	mov	r3, r4
 8003130:	eb18 0303 	adds.w	r3, r8, r3
 8003134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003138:	462b      	mov	r3, r5
 800313a:	eb49 0303 	adc.w	r3, r9, r3
 800313e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800314e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003156:	460b      	mov	r3, r1
 8003158:	18db      	adds	r3, r3, r3
 800315a:	653b      	str	r3, [r7, #80]	; 0x50
 800315c:	4613      	mov	r3, r2
 800315e:	eb42 0303 	adc.w	r3, r2, r3
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
 8003164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800316c:	f7fd f890 	bl	8000290 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4b61      	ldr	r3, [pc, #388]	; (80032fc <UART_SetConfig+0x2d4>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011c      	lsls	r4, r3, #4
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800318c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	64b9      	str	r1, [r7, #72]	; 0x48
 8003198:	415b      	adcs	r3, r3
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800319c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031a0:	4641      	mov	r1, r8
 80031a2:	eb12 0a01 	adds.w	sl, r2, r1
 80031a6:	4649      	mov	r1, r9
 80031a8:	eb43 0b01 	adc.w	fp, r3, r1
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c0:	4692      	mov	sl, r2
 80031c2:	469b      	mov	fp, r3
 80031c4:	4643      	mov	r3, r8
 80031c6:	eb1a 0303 	adds.w	r3, sl, r3
 80031ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ce:	464b      	mov	r3, r9
 80031d0:	eb4b 0303 	adc.w	r3, fp, r3
 80031d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031ec:	460b      	mov	r3, r1
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
 80031f2:	4613      	mov	r3, r2
 80031f4:	eb42 0303 	adc.w	r3, r2, r3
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
 80031fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003202:	f7fd f845 	bl	8000290 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4611      	mov	r1, r2
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <UART_SetConfig+0x2d4>)
 800320e:	fba3 2301 	umull	r2, r3, r3, r1
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2264      	movs	r2, #100	; 0x64
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	1acb      	subs	r3, r1, r3
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <UART_SetConfig+0x2d4>)
 8003224:	fba3 2302 	umull	r2, r3, r3, r2
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003230:	441c      	add	r4, r3
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800323c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	63b9      	str	r1, [r7, #56]	; 0x38
 800324c:	415b      	adcs	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003254:	4641      	mov	r1, r8
 8003256:	1851      	adds	r1, r2, r1
 8003258:	6339      	str	r1, [r7, #48]	; 0x30
 800325a:	4649      	mov	r1, r9
 800325c:	414b      	adcs	r3, r1
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800326c:	4659      	mov	r1, fp
 800326e:	00cb      	lsls	r3, r1, #3
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003276:	4651      	mov	r1, sl
 8003278:	00ca      	lsls	r2, r1, #3
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	4603      	mov	r3, r0
 8003280:	4642      	mov	r2, r8
 8003282:	189b      	adds	r3, r3, r2
 8003284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003288:	464b      	mov	r3, r9
 800328a:	460a      	mov	r2, r1
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032a8:	460b      	mov	r3, r1
 80032aa:	18db      	adds	r3, r3, r3
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ae:	4613      	mov	r3, r2
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032be:	f7fc ffe7 	bl	8000290 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <UART_SetConfig+0x2d4>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <UART_SetConfig+0x2d4>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4422      	add	r2, r4
 80032ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f0:	e105      	b.n	80034fe <UART_SetConfig+0x4d6>
 80032f2:	bf00      	nop
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003304:	2200      	movs	r2, #0
 8003306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800330a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800330e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003312:	4642      	mov	r2, r8
 8003314:	464b      	mov	r3, r9
 8003316:	1891      	adds	r1, r2, r2
 8003318:	6239      	str	r1, [r7, #32]
 800331a:	415b      	adcs	r3, r3
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003322:	4641      	mov	r1, r8
 8003324:	1854      	adds	r4, r2, r1
 8003326:	4649      	mov	r1, r9
 8003328:	eb43 0501 	adc.w	r5, r3, r1
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003348:	464b      	mov	r3, r9
 800334a:	eb45 0303 	adc.w	r3, r5, r3
 800334e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800335e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800336e:	4629      	mov	r1, r5
 8003370:	008b      	lsls	r3, r1, #2
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003378:	4621      	mov	r1, r4
 800337a:	008a      	lsls	r2, r1, #2
 800337c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003380:	f7fc ff86 	bl	8000290 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4b60      	ldr	r3, [pc, #384]	; (800350c <UART_SetConfig+0x4e4>)
 800338a:	fba3 2302 	umull	r2, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	011c      	lsls	r4, r3, #4
 8003392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800339c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	1891      	adds	r1, r2, r2
 80033aa:	61b9      	str	r1, [r7, #24]
 80033ac:	415b      	adcs	r3, r3
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b4:	4641      	mov	r1, r8
 80033b6:	1851      	adds	r1, r2, r1
 80033b8:	6139      	str	r1, [r7, #16]
 80033ba:	4649      	mov	r1, r9
 80033bc:	414b      	adcs	r3, r1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033cc:	4659      	mov	r1, fp
 80033ce:	00cb      	lsls	r3, r1, #3
 80033d0:	4651      	mov	r1, sl
 80033d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d6:	4651      	mov	r1, sl
 80033d8:	00ca      	lsls	r2, r1, #3
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	4642      	mov	r2, r8
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033e8:	464b      	mov	r3, r9
 80033ea:	460a      	mov	r2, r1
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80033fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800341e:	f7fc ff37 	bl	8000290 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b39      	ldr	r3, [pc, #228]	; (800350c <UART_SetConfig+0x4e4>)
 8003428:	fba3 1302 	umull	r1, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	2164      	movs	r1, #100	; 0x64
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	3332      	adds	r3, #50	; 0x32
 800343a:	4a34      	ldr	r2, [pc, #208]	; (800350c <UART_SetConfig+0x4e4>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003446:	441c      	add	r4, r3
 8003448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344c:	2200      	movs	r2, #0
 800344e:	673b      	str	r3, [r7, #112]	; 0x70
 8003450:	677a      	str	r2, [r7, #116]	; 0x74
 8003452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	1891      	adds	r1, r2, r2
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	415b      	adcs	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003466:	4641      	mov	r1, r8
 8003468:	1851      	adds	r1, r2, r1
 800346a:	6039      	str	r1, [r7, #0]
 800346c:	4649      	mov	r1, r9
 800346e:	414b      	adcs	r3, r1
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800347e:	4659      	mov	r1, fp
 8003480:	00cb      	lsls	r3, r1, #3
 8003482:	4651      	mov	r1, sl
 8003484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003488:	4651      	mov	r1, sl
 800348a:	00ca      	lsls	r2, r1, #3
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	4603      	mov	r3, r0
 8003492:	4642      	mov	r2, r8
 8003494:	189b      	adds	r3, r3, r2
 8003496:	66bb      	str	r3, [r7, #104]	; 0x68
 8003498:	464b      	mov	r3, r9
 800349a:	460a      	mov	r2, r1
 800349c:	eb42 0303 	adc.w	r3, r2, r3
 80034a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	663b      	str	r3, [r7, #96]	; 0x60
 80034ac:	667a      	str	r2, [r7, #100]	; 0x64
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034ba:	4649      	mov	r1, r9
 80034bc:	008b      	lsls	r3, r1, #2
 80034be:	4641      	mov	r1, r8
 80034c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c4:	4641      	mov	r1, r8
 80034c6:	008a      	lsls	r2, r1, #2
 80034c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034cc:	f7fc fee0 	bl	8000290 <__aeabi_uldivmod>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <UART_SetConfig+0x4e4>)
 80034d6:	fba3 1302 	umull	r1, r3, r3, r2
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2164      	movs	r1, #100	; 0x64
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	3332      	adds	r3, #50	; 0x32
 80034e8:	4a08      	ldr	r2, [pc, #32]	; (800350c <UART_SetConfig+0x4e4>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4422      	add	r2, r4
 80034fc:	609a      	str	r2, [r3, #8]
}
 80034fe:	bf00      	nop
 8003500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003510:	b084      	sub	sp, #16
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	f107 001c 	add.w	r0, r7, #28
 800351e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	d122      	bne.n	800356e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 faa2 	bl	8003aac <USB_CoreReset>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e01a      	b.n	80035a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa96 	bl	8003aac <USB_CoreReset>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
 8003596:	e005      	b.n	80035a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10b      	bne.n	80035c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f043 0206 	orr.w	r2, r3, #6
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ce:	b004      	add	sp, #16
 80035d0:	4770      	bx	lr

080035d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d115      	bne.n	8003642 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fd fd10 	bl	8001048 <HAL_Delay>
      ms++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa2e 	bl	8003a90 <USB_GetMode>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d01e      	beq.n	8003678 <USB_SetCurrentMode+0x84>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b31      	cmp	r3, #49	; 0x31
 800363e:	d9f0      	bls.n	8003622 <USB_SetCurrentMode+0x2e>
 8003640:	e01a      	b.n	8003678 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003654:	2001      	movs	r0, #1
 8003656:	f7fd fcf7 	bl	8001048 <HAL_Delay>
      ms++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa15 	bl	8003a90 <USB_GetMode>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <USB_SetCurrentMode+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b31      	cmp	r3, #49	; 0x31
 8003670:	d9f0      	bls.n	8003654 <USB_SetCurrentMode+0x60>
 8003672:	e001      	b.n	8003678 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e005      	b.n	8003684 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b32      	cmp	r3, #50	; 0x32
 800367c:	d101      	bne.n	8003682 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800368c:	b084      	sub	sp, #16
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800369a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e009      	b.n	80036c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3340      	adds	r3, #64	; 0x40
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0e      	cmp	r3, #14
 80036c4:	d9f2      	bls.n	80036ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11c      	bne.n	8003706 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
 8003704:	e00b      	b.n	800371e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003730:	4619      	mov	r1, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003738:	461a      	mov	r2, r3
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800374a:	2100      	movs	r1, #0
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f965 	bl	8003a1c <USB_SetDevSpeed>
 8003752:	e008      	b.n	8003766 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003754:	2101      	movs	r1, #1
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f960 	bl	8003a1c <USB_SetDevSpeed>
 800375c:	e003      	b.n	8003766 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800375e:	2103      	movs	r1, #3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f95b 	bl	8003a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003766:	2110      	movs	r1, #16
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8f3 	bl	8003954 <USB_FlushTxFifo>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f91f 	bl	80039bc <USB_FlushRxFifo>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	461a      	mov	r2, r3
 8003790:	2300      	movs	r3, #0
 8003792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e043      	b.n	800383a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c8:	d118      	bne.n	80037fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e013      	b.n	800380e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	461a      	mov	r2, r3
 80037f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e008      	b.n	800380e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	461a      	mov	r2, r3
 800382e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3301      	adds	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3b7      	bcc.n	80037b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e043      	b.n	80038d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800385a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385e:	d118      	bne.n	8003892 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e013      	b.n	80038a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e008      	b.n	80038a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3301      	adds	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d3b7      	bcc.n	8003848 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <USB_DevInit+0x2c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f043 0208 	orr.w	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394c:	b004      	add	sp, #16
 800394e:	4770      	bx	lr
 8003950:	803c3800 	.word	0x803c3800

08003954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <USB_FlushTxFifo+0x64>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e01b      	b.n	80039ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	daf2      	bge.n	8003962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <USB_FlushTxFifo+0x64>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e006      	b.n	80039ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d0f0      	beq.n	800398c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	00030d40 	.word	0x00030d40

080039bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <USB_FlushRxFifo+0x5c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e018      	b.n	8003a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	daf2      	bge.n	80039c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2210      	movs	r2, #16
 80039ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <USB_FlushRxFifo+0x5c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e006      	b.n	8003a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d0f0      	beq.n	80039ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	00030d40 	.word	0x00030d40

08003a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3301      	adds	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <USB_CoreReset+0x64>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e01b      	b.n	8003b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	daf2      	bge.n	8003ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <USB_CoreReset+0x64>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e006      	b.n	8003b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d0f0      	beq.n	8003ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	00030d40 	.word	0x00030d40

08003b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b26:	2b84      	cmp	r3, #132	; 0x84
 8003b28:	d005      	beq.n	8003b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	3303      	adds	r3, #3
 8003b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b4a:	f3ef 8305 	mrs	r3, IPSR
 8003b4e:	607b      	str	r3, [r7, #4]
  return(result);
 8003b50:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b6c:	f001 f926 	bl	8004dbc <vTaskStartScheduler>
  
  return osOK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b78:	b089      	sub	sp, #36	; 0x24
 8003b7a:	af04      	add	r7, sp, #16
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <osThreadCreate+0x54>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685c      	ldr	r4, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681d      	ldr	r5, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691e      	ldr	r6, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ffb6 	bl	8003b14 <makeFreeRtosPriority>
 8003ba8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bb2:	9202      	str	r2, [sp, #8]
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	9100      	str	r1, [sp, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4632      	mov	r2, r6
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f000 ff1e 	bl	8004a00 <xTaskCreateStatic>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e01c      	b.n	8003c04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685c      	ldr	r4, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bd6:	b29e      	uxth	r6, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff98 	bl	8003b14 <makeFreeRtosPriority>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f107 030c 	add.w	r3, r7, #12
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	9200      	str	r2, [sp, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	4632      	mov	r2, r6
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 ff60 	bl	8004aba <xTaskCreate>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <osDelay+0x16>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	e000      	b.n	8003c26 <osDelay+0x18>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f894 	bl	8004d54 <vTaskDelay>
  
  return osOK;
 8003c2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00f      	beq.n	8003c68 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10a      	bne.n	8003c64 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	9200      	str	r2, [sp, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 f9be 	bl	8003fdc <xQueueGenericCreateStatic>
 8003c60:	4603      	mov	r3, r0
 8003c62:	e016      	b.n	8003c92 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e014      	b.n	8003c92 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d110      	bne.n	8003c90 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003c6e:	2203      	movs	r2, #3
 8003c70:	2100      	movs	r1, #0
 8003c72:	2001      	movs	r0, #1
 8003c74:	f000 fa2a 	bl	80040cc <xQueueGenericCreate>
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <osSemaphoreCreate+0x56>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa7a 	bl	8004180 <xQueueGenericSend>
      return sema;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	e000      	b.n	8003c92 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003c90:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	e03a      	b.n	8003d2a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d103      	bne.n	8003cc8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e009      	b.n	8003cdc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <osSemaphoreWait+0x40>
      ticks = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003cdc:	f7ff ff32 	bl	8003b44 <inHandlerMode>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	461a      	mov	r2, r3
 8003cec:	2100      	movs	r1, #0
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fcde 	bl	80046b0 <xQueueReceiveFromISR>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <osSemaphoreWait+0x62>
      return osErrorOS;
 8003cfa:	23ff      	movs	r3, #255	; 0xff
 8003cfc:	e015      	b.n	8003d2a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <osSemaphoreWait+0x8c>
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <osSemaphoreWait+0x98>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	e008      	b.n	8003d28 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fbbd 	bl	8004498 <xQueueSemaphoreTake>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d001      	beq.n	8003d28 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003d24:	23ff      	movs	r3, #255	; 0xff
 8003d26:	e000      	b.n	8003d2a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003d48:	f7ff fefc 	bl	8003b44 <inHandlerMode>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d016      	beq.n	8003d80 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fb0f 	bl	800437c <xQueueGiveFromISR>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003d64:	23ff      	movs	r3, #255	; 0xff
 8003d66:	e017      	b.n	8003d98 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d013      	beq.n	8003d96 <osSemaphoreRelease+0x5e>
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <osSemaphoreRelease+0x68>)
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	e00a      	b.n	8003d96 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003d80:	2300      	movs	r3, #0
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9fa 	bl	8004180 <xQueueGenericSend>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0208 	add.w	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 0208 	add.w	r2, r3, #8
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 0208 	add.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d103      	bne.n	8003e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e00c      	b.n	8003e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e002      	b.n	8003e74 <vListInsert+0x2e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d2f6      	bcs.n	8003e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d103      	bne.n	8003eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f36:	f001 fea5 	bl	8005c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	3b01      	subs	r3, #1
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	; 0xff
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3310      	adds	r3, #16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 f961 	bl	8005260 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xQueueGenericReset+0xcc>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e009      	b.n	8003fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3310      	adds	r3, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef2 	bl	8003da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff feed 	bl	8003da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 fe8b 	bl	8005ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	; 0x38
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <xQueueGenericCreateStatic+0x52>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xQueueGenericCreateStatic+0x56>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericCreateStatic+0x58>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <xQueueGenericCreateStatic+0x7e>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <xQueueGenericCreateStatic+0x82>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <xQueueGenericCreateStatic+0x84>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fb      	str	r3, [r7, #28]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800407a:	2348      	movs	r3, #72	; 0x48
 800407c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b48      	cmp	r3, #72	; 0x48
 8004082:	d00a      	beq.n	800409a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61bb      	str	r3, [r7, #24]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800409a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f83f 	bl	8004140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3730      	adds	r7, #48	; 0x30
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	613b      	str	r3, [r7, #16]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3348      	adds	r3, #72	; 0x48
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fedf 	bl	8005ec8 <pvPortMalloc>
 800410a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d011      	beq.n	8004136 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3348      	adds	r3, #72	; 0x48
 800411a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004124:	79fa      	ldrb	r2, [r7, #7]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f805 	bl	8004140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004136:	69bb      	ldr	r3, [r7, #24]
	}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e002      	b.n	8004162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800416e:	2101      	movs	r1, #1
 8004170:	69b8      	ldr	r0, [r7, #24]
 8004172:	f7ff fecb 	bl	8003f0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	; 0x38
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xQueueGenericSend+0x32>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <xQueueGenericSend+0x40>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueGenericSend+0x44>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueGenericSend+0x46>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xQueueGenericSend+0x60>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x6e>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSend+0x72>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSend+0x74>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueGenericSend+0x8e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420e:	f001 f9e7 	bl	80055e0 <xTaskGetSchedulerState>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xQueueGenericSend+0x9e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <xQueueGenericSend+0xa2>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericSend+0xa4>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericSend+0xbe>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	61fb      	str	r3, [r7, #28]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423e:	f001 fd21 	bl	8005c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <xQueueGenericSend+0xd4>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d129      	bne.n	80042a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425a:	f000 fac1 	bl	80047e0 <prvCopyDataToQueue>
 800425e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	3324      	adds	r3, #36	; 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fff7 	bl	8005260 <xTaskRemoveFromEventList>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <xQueueGenericSend+0x1f8>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e00a      	b.n	80042a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <xQueueGenericSend+0x1f8>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042a0:	f001 fd20 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e063      	b.n	8004370 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ae:	f001 fd19 	bl	8005ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e05c      	b.n	8004370 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f82f 	bl	8005324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ca:	f001 fd0b 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ce:	f000 fddf 	bl	8004e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042d2:	f001 fcd7 	bl	8005c84 <vPortEnterCritical>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d103      	bne.n	80042ec <xQueueGenericSend+0x16c>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x182>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004302:	f001 fcef 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004306:	1d3a      	adds	r2, r7, #4
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f81e 	bl	8005350 <xTaskCheckForTimeOut>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d124      	bne.n	8004364 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800431a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431c:	f000 fb58 	bl	80049d0 <prvIsQueueFull>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	3310      	adds	r3, #16
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ff72 	bl	8005218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fae3 	bl	8004900 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800433a:	f000 fdb7 	bl	8004eac <xTaskResumeAll>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af7c 	bne.w	800423e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <xQueueGenericSend+0x1f8>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	e772      	b.n	800423e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435a:	f000 fad1 	bl	8004900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435e:	f000 fda5 	bl	8004eac <xTaskResumeAll>
 8004362:	e76c      	b.n	800423e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004366:	f000 facb 	bl	8004900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800436a:	f000 fd9f 	bl	8004eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004370:	4618      	mov	r0, r3
 8004372:	3738      	adds	r7, #56	; 0x38
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08e      	sub	sp, #56	; 0x38
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	623b      	str	r3, [r7, #32]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	61fb      	str	r3, [r7, #28]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <xQueueGiveFromISR+0x58>
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <xQueueGiveFromISR+0x5c>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <xQueueGiveFromISR+0x5e>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10a      	bne.n	80043f4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	61bb      	str	r3, [r7, #24]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043f4:	f001 fd28 	bl	8005e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043f8:	f3ef 8211 	mrs	r2, BASEPRI
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	617a      	str	r2, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004410:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004420:	429a      	cmp	r2, r3
 8004422:	d22b      	bcs.n	800447c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800442a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004436:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d112      	bne.n	8004466 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d016      	beq.n	8004476 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f000 ff07 	bl	8005260 <xTaskRemoveFromEventList>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e007      	b.n	8004476 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800446a:	3301      	adds	r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	b25a      	sxtb	r2, r3
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004476:	2301      	movs	r3, #1
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
 800447a:	e001      	b.n	8004480 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800447c:	2300      	movs	r3, #0
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800448a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800448e:	4618      	mov	r0, r3
 8004490:	3738      	adds	r7, #56	; 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08e      	sub	sp, #56	; 0x38
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	623b      	str	r3, [r7, #32]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61fb      	str	r3, [r7, #28]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e8:	f001 f87a 	bl	80055e0 <xTaskGetSchedulerState>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <xQueueSemaphoreTake+0x60>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <xQueueSemaphoreTake+0x64>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <xQueueSemaphoreTake+0x66>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	61bb      	str	r3, [r7, #24]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004518:	f001 fbb4 	bl	8005c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d024      	beq.n	8004572 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	1e5a      	subs	r2, r3, #1
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004538:	f001 f9fa 	bl	8005930 <pvTaskIncrementMutexHeldCount>
 800453c:	4602      	mov	r2, r0
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00f      	beq.n	800456a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	3310      	adds	r3, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fe86 	bl	8005260 <xTaskRemoveFromEventList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800455a:	4b54      	ldr	r3, [pc, #336]	; (80046ac <xQueueSemaphoreTake+0x214>)
 800455c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800456a:	f001 fbbb 	bl	8005ce4 <vPortExitCritical>
				return pdPASS;
 800456e:	2301      	movs	r3, #1
 8004570:	e097      	b.n	80046a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d111      	bne.n	800459c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	617b      	str	r3, [r7, #20]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004594:	f001 fba6 	bl	8005ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004598:	2300      	movs	r3, #0
 800459a:	e082      	b.n	80046a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 febc 	bl	8005324 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b0:	f001 fb98 	bl	8005ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b4:	f000 fc6c 	bl	8004e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b8:	f001 fb64 	bl	8005c84 <vPortEnterCritical>
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d103      	bne.n	80045d2 <xQueueSemaphoreTake+0x13a>
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueSemaphoreTake+0x150>
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	f001 fb7c 	bl	8005ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ec:	463a      	mov	r2, r7
 80045ee:	f107 030c 	add.w	r3, r7, #12
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 feab 	bl	8005350 <xTaskCheckForTimeOut>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d132      	bne.n	8004666 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004602:	f000 f9cf 	bl	80049a4 <prvIsQueueEmpty>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d026      	beq.n	800465a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004614:	f001 fb36 	bl	8005c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fffd 	bl	800561c <xTaskPriorityInherit>
 8004622:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004624:	f001 fb5e 	bl	8005ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	3324      	adds	r3, #36	; 0x24
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fdf1 	bl	8005218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004638:	f000 f962 	bl	8004900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800463c:	f000 fc36 	bl	8004eac <xTaskResumeAll>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f af68 	bne.w	8004518 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004648:	4b18      	ldr	r3, [pc, #96]	; (80046ac <xQueueSemaphoreTake+0x214>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	e75e      	b.n	8004518 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800465a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800465c:	f000 f950 	bl	8004900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004660:	f000 fc24 	bl	8004eac <xTaskResumeAll>
 8004664:	e758      	b.n	8004518 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004668:	f000 f94a 	bl	8004900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800466c:	f000 fc1e 	bl	8004eac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004672:	f000 f997 	bl	80049a4 <prvIsQueueEmpty>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	f43f af4d 	beq.w	8004518 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004684:	f001 fafe 	bl	8005c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800468a:	f000 f891 	bl	80047b0 <prvGetDisinheritPriorityAfterTimeout>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f8bc 	bl	8005814 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800469c:	f001 fb22 	bl	8005ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3738      	adds	r7, #56	; 0x38
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08e      	sub	sp, #56	; 0x38
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	623b      	str	r3, [r7, #32]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <xQueueReceiveFromISR+0x3a>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <xQueueReceiveFromISR+0x3e>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <xQueueReceiveFromISR+0x40>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61fb      	str	r3, [r7, #28]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470a:	f001 fb9d 	bl	8005e48 <vPortValidateInterruptPriority>
	__asm volatile
 800470e:	f3ef 8211 	mrs	r2, BASEPRI
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02f      	beq.n	8004796 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004744:	f000 f8b6 	bl	80048b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	1e5a      	subs	r2, r3, #1
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d112      	bne.n	8004780 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	3310      	adds	r3, #16
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fd7a 	bl	8005260 <xTaskRemoveFromEventList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e007      	b.n	8004790 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004784:	3301      	adds	r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	b25a      	sxtb	r2, r3
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
 8004794:	e001      	b.n	800479a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f383 8811 	msr	BASEPRI, r3
}
 80047a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3738      	adds	r7, #56	; 0x38
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1c3 0307 	rsb	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e001      	b.n	80047d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80047d2:	68fb      	ldr	r3, [r7, #12]
	}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10d      	bne.n	800481a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d14d      	bne.n	80048a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 ff7c 	bl	8005708 <xTaskPriorityDisinherit>
 8004810:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	e043      	b.n	80048a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d119      	bne.n	8004854 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6858      	ldr	r0, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	461a      	mov	r2, r3
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	f001 fd62 	bl	80062f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d32b      	bcc.n	80048a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	e026      	b.n	80048a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68d8      	ldr	r0, [r3, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	f001 fd48 	bl	80062f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	425b      	negs	r3, r3
 800486e:	441a      	add	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d207      	bcs.n	8004890 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	425b      	negs	r3, r3
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d105      	bne.n	80048a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3b01      	subs	r3, #1
 80048a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048aa:	697b      	ldr	r3, [r7, #20]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	441a      	add	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d303      	bcc.n	80048e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68d9      	ldr	r1, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	461a      	mov	r2, r3
 80048f2:	6838      	ldr	r0, [r7, #0]
 80048f4:	f001 fcfe 	bl	80062f4 <memcpy>
	}
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004908:	f001 f9bc 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004912:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004914:	e011      	b.n	800493a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d012      	beq.n	8004944 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3324      	adds	r3, #36	; 0x24
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fc9c 	bl	8005260 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800492e:	f000 fd71 	bl	8005414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	3b01      	subs	r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800493a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	dce9      	bgt.n	8004916 <prvUnlockQueue+0x16>
 8004942:	e000      	b.n	8004946 <prvUnlockQueue+0x46>
					break;
 8004944:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800494e:	f001 f9c9 	bl	8005ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004952:	f001 f997 	bl	8005c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800495e:	e011      	b.n	8004984 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d012      	beq.n	800498e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3310      	adds	r3, #16
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fc77 	bl	8005260 <xTaskRemoveFromEventList>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004978:	f000 fd4c 	bl	8005414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800497c:	7bbb      	ldrb	r3, [r7, #14]
 800497e:	3b01      	subs	r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dce9      	bgt.n	8004960 <prvUnlockQueue+0x60>
 800498c:	e000      	b.n	8004990 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800498e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004998:	f001 f9a4 	bl	8005ce4 <vPortExitCritical>
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049ac:	f001 f96a 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e001      	b.n	80049c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049c2:	f001 f98f 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049d8:	f001 f954 	bl	8005c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d102      	bne.n	80049ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e001      	b.n	80049f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f2:	f001 f977 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08e      	sub	sp, #56	; 0x38
 8004a04:	af04      	add	r7, sp, #16
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	623b      	str	r3, [r7, #32]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	61fb      	str	r3, [r7, #28]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a46:	23b4      	movs	r3, #180	; 0xb4
 8004a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2bb4      	cmp	r3, #180	; 0xb4
 8004a4e:	d00a      	beq.n	8004a66 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	61bb      	str	r3, [r7, #24]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01e      	beq.n	8004aac <xTaskCreateStatic+0xac>
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a86:	2300      	movs	r3, #0
 8004a88:	9303      	str	r3, [sp, #12]
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	9302      	str	r3, [sp, #8]
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f850 	bl	8004b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aa6:	f000 f8eb 	bl	8004c80 <prvAddNewTaskToReadyList>
 8004aaa:	e001      	b.n	8004ab0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ab0:	697b      	ldr	r3, [r7, #20]
	}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b08c      	sub	sp, #48	; 0x30
 8004abe:	af04      	add	r7, sp, #16
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f9fa 	bl	8005ec8 <pvPortMalloc>
 8004ad4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004adc:	20b4      	movs	r0, #180	; 0xb4
 8004ade:	f001 f9f3 	bl	8005ec8 <pvPortMalloc>
 8004ae2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
 8004af0:	e005      	b.n	8004afe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	f001 fab4 	bl	8006060 <vPortFree>
 8004af8:	e001      	b.n	8004afe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d017      	beq.n	8004b34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9303      	str	r3, [sp, #12]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f80e 	bl	8004b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b28:	69f8      	ldr	r0, [r7, #28]
 8004b2a:	f000 f8a9 	bl	8004c80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e002      	b.n	8004b3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	617b      	str	r3, [r7, #20]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01f      	beq.n	8004bd2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e012      	b.n	8004bbe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	7819      	ldrb	r1, [r3, #0]
 8004ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3334      	adds	r3, #52	; 0x34
 8004ba8:	460a      	mov	r2, r1
 8004baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b0f      	cmp	r3, #15
 8004bc2:	d9e9      	bls.n	8004b98 <prvInitialiseNewTask+0x54>
 8004bc4:	e000      	b.n	8004bc8 <prvInitialiseNewTask+0x84>
			{
				break;
 8004bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	e003      	b.n	8004bda <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d901      	bls.n	8004be4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be0:	2306      	movs	r3, #6
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f8f2 	bl	8003de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3318      	adds	r3, #24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff f8ed 	bl	8003de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	f1c3 0207 	rsb	r2, r3, #7
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	334c      	adds	r3, #76	; 0x4c
 8004c34:	2260      	movs	r2, #96	; 0x60
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 fb69 	bl	8006310 <memset>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <prvInitialiseNewTask+0x130>)
 8004c42:	651a      	str	r2, [r3, #80]	; 0x50
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <prvInitialiseNewTask+0x134>)
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <prvInitialiseNewTask+0x138>)
 8004c4e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	69b8      	ldr	r0, [r7, #24]
 8004c56:	f000 fee5 	bl	8005a24 <pxPortInitialiseStack>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c6c:	bf00      	nop
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	08006d3c 	.word	0x08006d3c
 8004c78:	08006d5c 	.word	0x08006d5c
 8004c7c:	08006d1c 	.word	0x08006d1c

08004c80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c88:	f000 fffc 	bl	8005c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <prvAddNewTaskToReadyList+0xb8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <prvAddNewTaskToReadyList+0xb8>)
 8004c94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <prvAddNewTaskToReadyList+0xbc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c9e:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <prvAddNewTaskToReadyList+0xbc>)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <prvAddNewTaskToReadyList+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d110      	bne.n	8004cce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cac:	f000 fbd6 	bl	800545c <prvInitialiseTaskLists>
 8004cb0:	e00d      	b.n	8004cce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <prvAddNewTaskToReadyList+0xc0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <prvAddNewTaskToReadyList+0xbc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d802      	bhi.n	8004cce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <prvAddNewTaskToReadyList+0xbc>)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cce:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <prvAddNewTaskToReadyList+0xc4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <prvAddNewTaskToReadyList+0xc4>)
 8004cd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2201      	movs	r2, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <prvAddNewTaskToReadyList+0xc8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <prvAddNewTaskToReadyList+0xc8>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <prvAddNewTaskToReadyList+0xcc>)
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7ff f87c 	bl	8003dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d06:	f000 ffed 	bl	8005ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <prvAddNewTaskToReadyList+0xc0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <prvAddNewTaskToReadyList+0xbc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d207      	bcs.n	8004d30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <prvAddNewTaskToReadyList+0xd0>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000c1c 	.word	0x20000c1c
 8004d3c:	20000b1c 	.word	0x20000b1c
 8004d40:	20000c28 	.word	0x20000c28
 8004d44:	20000c38 	.word	0x20000c38
 8004d48:	20000c24 	.word	0x20000c24
 8004d4c:	20000b20 	.word	0x20000b20
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <vTaskDelay+0x60>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <vTaskDelay+0x30>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60bb      	str	r3, [r7, #8]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d84:	f000 f884 	bl	8004e90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d88:	2100      	movs	r1, #0
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fde4 	bl	8005958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d90:	f000 f88c 	bl	8004eac <xTaskResumeAll>
 8004d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <vTaskDelay+0x64>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000c44 	.word	0x20000c44
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dca:	463a      	mov	r2, r7
 8004dcc:	1d39      	adds	r1, r7, #4
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb fbde 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	9202      	str	r2, [sp, #8]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2300      	movs	r3, #0
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	460a      	mov	r2, r1
 8004dea:	4921      	ldr	r1, [pc, #132]	; (8004e70 <vTaskStartScheduler+0xb4>)
 8004dec:	4821      	ldr	r0, [pc, #132]	; (8004e74 <vTaskStartScheduler+0xb8>)
 8004dee:	f7ff fe07 	bl	8004a00 <xTaskCreateStatic>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <vTaskStartScheduler+0xbc>)
 8004df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004df8:	4b1f      	ldr	r3, [pc, #124]	; (8004e78 <vTaskStartScheduler+0xbc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e001      	b.n	8004e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d11b      	bne.n	8004e48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e24:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <vTaskStartScheduler+0xc0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	334c      	adds	r3, #76	; 0x4c
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <vTaskStartScheduler+0xc4>)
 8004e2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <vTaskStartScheduler+0xc8>)
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295
 8004e34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <vTaskStartScheduler+0xcc>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <vTaskStartScheduler+0xd0>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e42:	f000 fe7d 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e46:	e00e      	b.n	8004e66 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d10a      	bne.n	8004e66 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <vTaskStartScheduler+0xa8>
}
 8004e66:	bf00      	nop
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	08006cfc 	.word	0x08006cfc
 8004e74:	0800542d 	.word	0x0800542d
 8004e78:	20000c40 	.word	0x20000c40
 8004e7c:	20000b1c 	.word	0x20000b1c
 8004e80:	20000010 	.word	0x20000010
 8004e84:	20000c3c 	.word	0x20000c3c
 8004e88:	20000c28 	.word	0x20000c28
 8004e8c:	20000c20 	.word	0x20000c20

08004e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <vTaskSuspendAll+0x18>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	4a03      	ldr	r2, [pc, #12]	; (8004ea8 <vTaskSuspendAll+0x18>)
 8004e9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e9e:	bf00      	nop
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20000c44 	.word	0x20000c44

08004eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <xTaskResumeAll+0x114>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	603b      	str	r3, [r7, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ed8:	f000 fed4 	bl	8005c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004edc:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <xTaskResumeAll+0x114>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	4a37      	ldr	r2, [pc, #220]	; (8004fc0 <xTaskResumeAll+0x114>)
 8004ee4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <xTaskResumeAll+0x114>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d161      	bne.n	8004fb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eee:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <xTaskResumeAll+0x118>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05d      	beq.n	8004fb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef6:	e02e      	b.n	8004f56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	4b33      	ldr	r3, [pc, #204]	; (8004fc8 <xTaskResumeAll+0x11c>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3318      	adds	r3, #24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ffd7 	bl	8003eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ffd2 	bl	8003eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	2201      	movs	r2, #1
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <xTaskResumeAll+0x120>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <xTaskResumeAll+0x120>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <xTaskResumeAll+0x124>)
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f7fe ff5e 	bl	8003dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <xTaskResumeAll+0x128>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <xTaskResumeAll+0x12c>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <xTaskResumeAll+0x11c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1cc      	bne.n	8004ef8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f64:	f000 fb1c 	bl	80055a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f68:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f74:	f000 f836 	bl	8004fe4 <xTaskIncrementTick>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <xTaskResumeAll+0x12c>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f1      	bne.n	8004f74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <xTaskResumeAll+0x130>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <xTaskResumeAll+0x12c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <xTaskResumeAll+0x134>)
 8004fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb2:	f000 fe97 	bl	8005ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000c44 	.word	0x20000c44
 8004fc4:	20000c1c 	.word	0x20000c1c
 8004fc8:	20000bdc 	.word	0x20000bdc
 8004fcc:	20000c24 	.word	0x20000c24
 8004fd0:	20000b20 	.word	0x20000b20
 8004fd4:	20000b1c 	.word	0x20000b1c
 8004fd8:	20000c30 	.word	0x20000c30
 8004fdc:	20000c2c 	.word	0x20000c2c
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fee:	4b4e      	ldr	r3, [pc, #312]	; (8005128 <xTaskIncrementTick+0x144>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 808e 	bne.w	8005114 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff8:	4b4c      	ldr	r3, [pc, #304]	; (800512c <xTaskIncrementTick+0x148>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005000:	4a4a      	ldr	r2, [pc, #296]	; (800512c <xTaskIncrementTick+0x148>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d120      	bne.n	800504e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800500c:	4b48      	ldr	r3, [pc, #288]	; (8005130 <xTaskIncrementTick+0x14c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <xTaskIncrementTick+0x48>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xTaskIncrementTick+0x46>
 800502c:	4b40      	ldr	r3, [pc, #256]	; (8005130 <xTaskIncrementTick+0x14c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b40      	ldr	r3, [pc, #256]	; (8005134 <xTaskIncrementTick+0x150>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3e      	ldr	r2, [pc, #248]	; (8005130 <xTaskIncrementTick+0x14c>)
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4a3e      	ldr	r2, [pc, #248]	; (8005134 <xTaskIncrementTick+0x150>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b3d      	ldr	r3, [pc, #244]	; (8005138 <xTaskIncrementTick+0x154>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a3c      	ldr	r2, [pc, #240]	; (8005138 <xTaskIncrementTick+0x154>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	f000 faa9 	bl	80055a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800504e:	4b3b      	ldr	r3, [pc, #236]	; (800513c <xTaskIncrementTick+0x158>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d348      	bcc.n	80050ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005058:	4b35      	ldr	r3, [pc, #212]	; (8005130 <xTaskIncrementTick+0x14c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <xTaskIncrementTick+0x158>)
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	601a      	str	r2, [r3, #0]
					break;
 800506a:	e03e      	b.n	80050ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <xTaskIncrementTick+0x14c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d203      	bcs.n	800508c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005084:	4a2d      	ldr	r2, [pc, #180]	; (800513c <xTaskIncrementTick+0x158>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800508a:	e02e      	b.n	80050ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3304      	adds	r3, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe ff11 	bl	8003eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3318      	adds	r3, #24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe ff08 	bl	8003eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	2201      	movs	r2, #1
 80050ae:	409a      	lsls	r2, r3
 80050b0:	4b23      	ldr	r3, [pc, #140]	; (8005140 <xTaskIncrementTick+0x15c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	4a22      	ldr	r2, [pc, #136]	; (8005140 <xTaskIncrementTick+0x15c>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <xTaskIncrementTick+0x160>)
 80050c8:	441a      	add	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe fe94 	bl	8003dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <xTaskIncrementTick+0x164>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d3b9      	bcc.n	8005058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e8:	e7b6      	b.n	8005058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ea:	4b17      	ldr	r3, [pc, #92]	; (8005148 <xTaskIncrementTick+0x164>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f0:	4914      	ldr	r1, [pc, #80]	; (8005144 <xTaskIncrementTick+0x160>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d901      	bls.n	8005106 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <xTaskIncrementTick+0x168>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e004      	b.n	800511e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <xTaskIncrementTick+0x16c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <xTaskIncrementTick+0x16c>)
 800511c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800511e:	697b      	ldr	r3, [r7, #20]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000c44 	.word	0x20000c44
 800512c:	20000c20 	.word	0x20000c20
 8005130:	20000bd4 	.word	0x20000bd4
 8005134:	20000bd8 	.word	0x20000bd8
 8005138:	20000c34 	.word	0x20000c34
 800513c:	20000c3c 	.word	0x20000c3c
 8005140:	20000c24 	.word	0x20000c24
 8005144:	20000b20 	.word	0x20000b20
 8005148:	20000b1c 	.word	0x20000b1c
 800514c:	20000c30 	.word	0x20000c30
 8005150:	20000c2c 	.word	0x20000c2c

08005154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515a:	4b29      	ldr	r3, [pc, #164]	; (8005200 <vTaskSwitchContext+0xac>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005162:	4b28      	ldr	r3, [pc, #160]	; (8005204 <vTaskSwitchContext+0xb0>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005168:	e044      	b.n	80051f4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <vTaskSwitchContext+0xb0>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <vTaskSwitchContext+0xb4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	fab3 f383 	clz	r3, r3
 800517c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	f1c3 031f 	rsb	r3, r3, #31
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	4921      	ldr	r1, [pc, #132]	; (800520c <vTaskSwitchContext+0xb8>)
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <vTaskSwitchContext+0x5a>
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4a14      	ldr	r2, [pc, #80]	; (800520c <vTaskSwitchContext+0xb8>)
 80051bc:	4413      	add	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3308      	adds	r3, #8
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d104      	bne.n	80051e0 <vTaskSwitchContext+0x8c>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <vTaskSwitchContext+0xbc>)
 80051e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <vTaskSwitchContext+0xbc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	334c      	adds	r3, #76	; 0x4c
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <vTaskSwitchContext+0xc0>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000c44 	.word	0x20000c44
 8005204:	20000c30 	.word	0x20000c30
 8005208:	20000c24 	.word	0x20000c24
 800520c:	20000b20 	.word	0x20000b20
 8005210:	20000b1c 	.word	0x20000b1c
 8005214:	20000010 	.word	0x20000010

08005218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	60fb      	str	r3, [r7, #12]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <vTaskPlaceOnEventList+0x44>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3318      	adds	r3, #24
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fe fdfd 	bl	8003e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800524c:	2101      	movs	r1, #1
 800524e:	6838      	ldr	r0, [r7, #0]
 8005250:	f000 fb82 	bl	8005958 <prvAddCurrentTaskToDelayedList>
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000b1c 	.word	0x20000b1c

08005260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	3318      	adds	r3, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe fe11 	bl	8003eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <xTaskRemoveFromEventList+0xac>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11c      	bne.n	80052d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fe08 	bl	8003eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	2201      	movs	r2, #1
 80052ae:	409a      	lsls	r2, r3
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <xTaskRemoveFromEventList+0xb0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	4a16      	ldr	r2, [pc, #88]	; (8005310 <xTaskRemoveFromEventList+0xb0>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <xTaskRemoveFromEventList+0xb4>)
 80052c8:	441a      	add	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fe fd94 	bl	8003dfe <vListInsertEnd>
 80052d6:	e005      	b.n	80052e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3318      	adds	r3, #24
 80052dc:	4619      	mov	r1, r3
 80052de:	480e      	ldr	r0, [pc, #56]	; (8005318 <xTaskRemoveFromEventList+0xb8>)
 80052e0:	f7fe fd8d 	bl	8003dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <xTaskRemoveFromEventList+0xbc>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d905      	bls.n	80052fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <xTaskRemoveFromEventList+0xc0>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e001      	b.n	8005302 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005302:	697b      	ldr	r3, [r7, #20]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000c44 	.word	0x20000c44
 8005310:	20000c24 	.word	0x20000c24
 8005314:	20000b20 	.word	0x20000b20
 8005318:	20000bdc 	.word	0x20000bdc
 800531c:	20000b1c 	.word	0x20000b1c
 8005320:	20000c30 	.word	0x20000c30

08005324 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <vTaskInternalSetTimeOutState+0x24>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <vTaskInternalSetTimeOutState+0x28>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	605a      	str	r2, [r3, #4]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20000c34 	.word	0x20000c34
 800534c:	20000c20 	.word	0x20000c20

08005350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60fb      	str	r3, [r7, #12]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005392:	f000 fc77 	bl	8005c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005396:	4b1d      	ldr	r3, [pc, #116]	; (800540c <xTaskCheckForTimeOut+0xbc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d102      	bne.n	80053b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	e023      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <xTaskCheckForTimeOut+0xc0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d007      	beq.n	80053d2 <xTaskCheckForTimeOut+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e015      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d20b      	bcs.n	80053f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff9b 	bl	8005324 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e004      	b.n	80053fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053fe:	f000 fc71 	bl	8005ce4 <vPortExitCritical>

	return xReturn;
 8005402:	69fb      	ldr	r3, [r7, #28]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20000c20 	.word	0x20000c20
 8005410:	20000c34 	.word	0x20000c34

08005414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <vTaskMissedYield+0x14>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
}
 800541e:	bf00      	nop
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000c30 	.word	0x20000c30

0800542c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005434:	f000 f852 	bl	80054dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <prvIdleTask+0x28>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d9f9      	bls.n	8005434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <prvIdleTask+0x2c>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005450:	e7f0      	b.n	8005434 <prvIdleTask+0x8>
 8005452:	bf00      	nop
 8005454:	20000b20 	.word	0x20000b20
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]
 8005466:	e00c      	b.n	8005482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a12      	ldr	r2, [pc, #72]	; (80054bc <prvInitialiseTaskLists+0x60>)
 8005474:	4413      	add	r3, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fc94 	bl	8003da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3301      	adds	r3, #1
 8005480:	607b      	str	r3, [r7, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b06      	cmp	r3, #6
 8005486:	d9ef      	bls.n	8005468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005488:	480d      	ldr	r0, [pc, #52]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 800548a:	f7fe fc8b 	bl	8003da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800548e:	480d      	ldr	r0, [pc, #52]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 8005490:	f7fe fc88 	bl	8003da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005494:	480c      	ldr	r0, [pc, #48]	; (80054c8 <prvInitialiseTaskLists+0x6c>)
 8005496:	f7fe fc85 	bl	8003da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800549a:	480c      	ldr	r0, [pc, #48]	; (80054cc <prvInitialiseTaskLists+0x70>)
 800549c:	f7fe fc82 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054a0:	480b      	ldr	r0, [pc, #44]	; (80054d0 <prvInitialiseTaskLists+0x74>)
 80054a2:	f7fe fc7f 	bl	8003da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvInitialiseTaskLists+0x78>)
 80054a8:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <prvInitialiseTaskLists+0x64>)
 80054aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvInitialiseTaskLists+0x7c>)
 80054ae:	4a05      	ldr	r2, [pc, #20]	; (80054c4 <prvInitialiseTaskLists+0x68>)
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000b20 	.word	0x20000b20
 80054c0:	20000bac 	.word	0x20000bac
 80054c4:	20000bc0 	.word	0x20000bc0
 80054c8:	20000bdc 	.word	0x20000bdc
 80054cc:	20000bf0 	.word	0x20000bf0
 80054d0:	20000c08 	.word	0x20000c08
 80054d4:	20000bd4 	.word	0x20000bd4
 80054d8:	20000bd8 	.word	0x20000bd8

080054dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e2:	e019      	b.n	8005518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054e4:	f000 fbce 	bl	8005c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <prvCheckTasksWaitingTermination+0x50>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fcdf 	bl	8003eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3b01      	subs	r3, #1
 8005500:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <prvCheckTasksWaitingTermination+0x54>)
 8005502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800550c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800550e:	f000 fbe9 	bl	8005ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f810 	bl	8005538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvCheckTasksWaitingTermination+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e1      	bne.n	80054e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000bf0 	.word	0x20000bf0
 8005530:	20000c1c 	.word	0x20000c1c
 8005534:	20000c04 	.word	0x20000c04

08005538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	334c      	adds	r3, #76	; 0x4c
 8005544:	4618      	mov	r0, r3
 8005546:	f000 ff8d 	bl	8006464 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fd81 	bl	8006060 <vPortFree>
				vPortFree( pxTCB );
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fd7e 	bl	8006060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005564:	e018      	b.n	8005598 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d103      	bne.n	8005578 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fd75 	bl	8006060 <vPortFree>
	}
 8005576:	e00f      	b.n	8005598 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800557e:	2b02      	cmp	r3, #2
 8005580:	d00a      	beq.n	8005598 <prvDeleteTCB+0x60>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <prvDeleteTCB+0x5e>
	}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvResetNextTaskUnblockTime+0x38>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <prvResetNextTaskUnblockTime+0x3c>)
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055b8:	e008      	b.n	80055cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ba:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <prvResetNextTaskUnblockTime+0x38>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a04      	ldr	r2, [pc, #16]	; (80055dc <prvResetNextTaskUnblockTime+0x3c>)
 80055ca:	6013      	str	r3, [r2, #0]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	20000bd4 	.word	0x20000bd4
 80055dc:	20000c3c 	.word	0x20000c3c

080055e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <xTaskGetSchedulerState+0x34>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055ee:	2301      	movs	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	e008      	b.n	8005606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <xTaskGetSchedulerState+0x38>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055fc:	2302      	movs	r3, #2
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	e001      	b.n	8005606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005606:	687b      	ldr	r3, [r7, #4]
	}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	20000c28 	.word	0x20000c28
 8005618:	20000c44 	.word	0x20000c44

0800561c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d05e      	beq.n	80056f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <xTaskPriorityInherit+0xe0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d24e      	bcs.n	80056de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db06      	blt.n	8005656 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005648:	4b2c      	ldr	r3, [pc, #176]	; (80056fc <xTaskPriorityInherit+0xe0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	f1c3 0207 	rsb	r2, r3, #7
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a26      	ldr	r2, [pc, #152]	; (8005700 <xTaskPriorityInherit+0xe4>)
 8005668:	4413      	add	r3, r2
 800566a:	4299      	cmp	r1, r3
 800566c:	d12f      	bne.n	80056ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fc20 	bl	8003eb8 <uxListRemove>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	2201      	movs	r2, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43da      	mvns	r2, r3
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <xTaskPriorityInherit+0xe8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4013      	ands	r3, r2
 8005690:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <xTaskPriorityInherit+0xe8>)
 8005692:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <xTaskPriorityInherit+0xe0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	2201      	movs	r2, #1
 80056a4:	409a      	lsls	r2, r3
 80056a6:	4b17      	ldr	r3, [pc, #92]	; (8005704 <xTaskPriorityInherit+0xe8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <xTaskPriorityInherit+0xe8>)
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4a10      	ldr	r2, [pc, #64]	; (8005700 <xTaskPriorityInherit+0xe4>)
 80056be:	441a      	add	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f7fe fb99 	bl	8003dfe <vListInsertEnd>
 80056cc:	e004      	b.n	80056d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <xTaskPriorityInherit+0xe0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e008      	b.n	80056f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <xTaskPriorityInherit+0xe0>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d201      	bcs.n	80056f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80056f0:	68fb      	ldr	r3, [r7, #12]
	}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000b1c 	.word	0x20000b1c
 8005700:	20000b20 	.word	0x20000b20
 8005704:	20000c24 	.word	0x20000c24

08005708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d06e      	beq.n	80057fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800571e:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <xTaskPriorityDisinherit+0x100>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d00a      	beq.n	800573e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60bb      	str	r3, [r7, #8]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	429a      	cmp	r2, r3
 8005770:	d044      	beq.n	80057fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005776:	2b00      	cmp	r3, #0
 8005778:	d140      	bne.n	80057fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fb9a 	bl	8003eb8 <uxListRemove>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d115      	bne.n	80057b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	491f      	ldr	r1, [pc, #124]	; (800580c <xTaskPriorityDisinherit+0x104>)
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <xTaskPriorityDisinherit+0xae>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	2201      	movs	r2, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43da      	mvns	r2, r3
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <xTaskPriorityDisinherit+0x108>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4013      	ands	r3, r2
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <xTaskPriorityDisinherit+0x108>)
 80057b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	f1c3 0207 	rsb	r2, r3, #7
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <xTaskPriorityDisinherit+0x108>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <xTaskPriorityDisinherit+0x108>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <xTaskPriorityDisinherit+0x104>)
 80057ea:	441a      	add	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7fe fb03 	bl	8003dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057fc:	697b      	ldr	r3, [r7, #20]
	}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000b1c 	.word	0x20000b1c
 800580c:	20000b20 	.word	0x20000b20
 8005810:	20000c24 	.word	0x20000c24

08005814 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005822:	2301      	movs	r3, #1
 8005824:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d077      	beq.n	800591c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d902      	bls.n	800585a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	e002      	b.n	8005860 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d058      	beq.n	800591c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	429a      	cmp	r2, r3
 8005872:	d153      	bne.n	800591c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005874:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	429a      	cmp	r2, r3
 800587c:	d10a      	bne.n	8005894 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60bb      	str	r3, [r7, #8]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	db04      	blt.n	80058b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f1c3 0207 	rsb	r2, r3, #7
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	6959      	ldr	r1, [r3, #20]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4a19      	ldr	r2, [pc, #100]	; (8005928 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80058c2:	4413      	add	r3, r2
 80058c4:	4299      	cmp	r1, r3
 80058c6:	d129      	bne.n	800591c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe faf3 	bl	8003eb8 <uxListRemove>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	2201      	movs	r2, #1
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43da      	mvns	r2, r3
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4013      	ands	r3, r2
 80058ea:	4a10      	ldr	r2, [pc, #64]	; (800592c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	2201      	movs	r2, #1
 80058f4:	409a      	lsls	r2, r3
 80058f6:	4b0d      	ldr	r3, [pc, #52]	; (800592c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	4a0b      	ldr	r2, [pc, #44]	; (800592c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4a06      	ldr	r2, [pc, #24]	; (8005928 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800590e:	441a      	add	r2, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f7fe fa71 	bl	8003dfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800591c:	bf00      	nop
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000b1c 	.word	0x20000b1c
 8005928:	20000b20 	.word	0x20000b20
 800592c:	20000c24 	.word	0x20000c24

08005930 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <pvTaskIncrementMutexHeldCount+0x24>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <pvTaskIncrementMutexHeldCount+0x24>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005942:	3201      	adds	r2, #1
 8005944:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005946:	4b03      	ldr	r3, [pc, #12]	; (8005954 <pvTaskIncrementMutexHeldCount+0x24>)
 8005948:	681b      	ldr	r3, [r3, #0]
	}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000b1c 	.word	0x20000b1c

08005958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005962:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005968:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe faa2 	bl	8003eb8 <uxListRemove>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2201      	movs	r2, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43da      	mvns	r2, r3
 8005988:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4013      	ands	r3, r2
 800598e:	4a20      	ldr	r2, [pc, #128]	; (8005a10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005990:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d10a      	bne.n	80059b0 <prvAddCurrentTaskToDelayedList+0x58>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	481a      	ldr	r0, [pc, #104]	; (8005a14 <prvAddCurrentTaskToDelayedList+0xbc>)
 80059aa:	f7fe fa28 	bl	8003dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059ae:	e026      	b.n	80059fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4413      	add	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d209      	bcs.n	80059dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <prvAddCurrentTaskToDelayedList+0xc0>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7fe fa36 	bl	8003e46 <vListInsert>
}
 80059da:	e010      	b.n	80059fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <prvAddCurrentTaskToDelayedList+0xc4>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <prvAddCurrentTaskToDelayedList+0xb4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fe fa2c 	bl	8003e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d202      	bcs.n	80059fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6013      	str	r3, [r2, #0]
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20000c20 	.word	0x20000c20
 8005a0c:	20000b1c 	.word	0x20000b1c
 8005a10:	20000c24 	.word	0x20000c24
 8005a14:	20000c08 	.word	0x20000c08
 8005a18:	20000bd8 	.word	0x20000bd8
 8005a1c:	20000bd4 	.word	0x20000bd4
 8005a20:	20000c3c 	.word	0x20000c3c

08005a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b04      	subs	r3, #4
 8005a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3b04      	subs	r3, #4
 8005a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a54:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <pxPortInitialiseStack+0x64>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3b14      	subs	r3, #20
 8005a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f06f 0202 	mvn.w	r2, #2
 8005a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b20      	subs	r3, #32
 8005a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	08005a8d 	.word	0x08005a8d

08005a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <prvTaskExitError+0x54>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d00a      	beq.n	8005ab6 <prvTaskExitError+0x2a>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	60fb      	str	r3, [r7, #12]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <prvTaskExitError+0x28>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aca:	bf00      	nop
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0fc      	beq.n	8005acc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	2000000c 	.word	0x2000000c
	...

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20000b1c 	.word	0x20000b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <xPortStartScheduler+0x124>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10a      	bne.n	8005b66 <xPortStartScheduler+0x26>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a3f      	ldr	r2, [pc, #252]	; (8005c68 <xPortStartScheduler+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10a      	bne.n	8005b86 <xPortStartScheduler+0x46>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <xPortStartScheduler+0x130>)
 8005bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bae:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb4:	e009      	b.n	8005bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d0ef      	beq.n	8005bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bd6:	4b27      	ldr	r3, [pc, #156]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1c3 0307 	rsb	r3, r3, #7
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d00a      	beq.n	8005bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60bb      	str	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xPortStartScheduler+0x134>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c0a:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c22:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c2e:	f000 f8dd 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <xPortStartScheduler+0x13c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c38:	f000 f8fc 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0f      	ldr	r2, [pc, #60]	; (8005c80 <xPortStartScheduler+0x140>)
 8005c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c48:	f7ff ff66 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c4c:	f7ff fa82 	bl	8005154 <vTaskSwitchContext>
	prvTaskExitError();
 8005c50:	f7ff ff1c 	bl	8005a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed00 	.word	0xe000ed00
 8005c64:	410fc271 	.word	0x410fc271
 8005c68:	410fc270 	.word	0x410fc270
 8005c6c:	e000e400 	.word	0xe000e400
 8005c70:	20000c48 	.word	0x20000c48
 8005c74:	20000c4c 	.word	0x20000c4c
 8005c78:	e000ed20 	.word	0xe000ed20
 8005c7c:	2000000c 	.word	0x2000000c
 8005c80:	e000ef34 	.word	0xe000ef34

08005c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
}
 8005c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <vPortEnterCritical+0x58>)
 8005ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <vPortEnterCritical+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10f      	bne.n	8005cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <vPortEnterCritical+0x5c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	603b      	str	r3, [r7, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vPortEnterCritical+0x4a>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	2000000c 	.word	0x2000000c
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vPortExitCritical+0x50>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vPortExitCritical+0x24>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	607b      	str	r3, [r7, #4]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortExitCritical+0x50>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <vPortExitCritical+0x50>)
 8005d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d105      	bne.n	8005d26 <vPortExitCritical+0x42>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f383 8811 	msr	BASEPRI, r3
}
 8005d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	2000000c 	.word	0x2000000c
	...

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7ff f9f0 	bl	8005154 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	20000b1c 	.word	0x20000b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7ff f90f 	bl	8004fe4 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <SysTick_Handler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d914      	bls.n	8005e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <vPortValidateInterruptPriority+0x70>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e64:	4b15      	ldr	r3, [pc, #84]	; (8005ebc <vPortValidateInterruptPriority+0x74>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	7afa      	ldrb	r2, [r7, #11]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20a      	bcs.n	8005e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <vPortValidateInterruptPriority+0x78>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <vPortValidateInterruptPriority+0x7c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d90a      	bls.n	8005eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	603b      	str	r3, [r7, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <vPortValidateInterruptPriority+0x60>
	}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	e000e3f0 	.word	0xe000e3f0
 8005ebc:	20000c48 	.word	0x20000c48
 8005ec0:	e000ed0c 	.word	0xe000ed0c
 8005ec4:	20000c4c 	.word	0x20000c4c

08005ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08a      	sub	sp, #40	; 0x28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed4:	f7fe ffdc 	bl	8004e90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ed8:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <pvPortMalloc+0x180>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee0:	f000 f920 	bl	8006124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee4:	4b59      	ldr	r3, [pc, #356]	; (800604c <pvPortMalloc+0x184>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8093 	bne.w	8006018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ef8:	2208      	movs	r2, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	3308      	adds	r3, #8
 8005f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <pvPortMalloc+0x6c>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	617b      	str	r3, [r7, #20]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06e      	beq.n	8006018 <pvPortMalloc+0x150>
 8005f3a:	4b45      	ldr	r3, [pc, #276]	; (8006050 <pvPortMalloc+0x188>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d869      	bhi.n	8006018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f44:	4b43      	ldr	r3, [pc, #268]	; (8006054 <pvPortMalloc+0x18c>)
 8005f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <pvPortMalloc+0x18c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4e:	e004      	b.n	8005f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d903      	bls.n	8005f6c <pvPortMalloc+0xa4>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f1      	bne.n	8005f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <pvPortMalloc+0x180>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d050      	beq.n	8006018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4413      	add	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	2308      	movs	r3, #8
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d91f      	bls.n	8005fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	613b      	str	r3, [r7, #16]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f000 f908 	bl	80061e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <pvPortMalloc+0x188>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <pvPortMalloc+0x188>)
 8005fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <pvPortMalloc+0x188>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <pvPortMalloc+0x190>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d203      	bcs.n	8005ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <pvPortMalloc+0x188>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <pvPortMalloc+0x190>)
 8005ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x184>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	431a      	orrs	r2, r3
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <pvPortMalloc+0x194>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a11      	ldr	r2, [pc, #68]	; (800605c <pvPortMalloc+0x194>)
 8006016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006018:	f7fe ff48 	bl	8004eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <pvPortMalloc+0x174>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60fb      	str	r3, [r7, #12]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <pvPortMalloc+0x172>
	return pvReturn;
 800603c:	69fb      	ldr	r3, [r7, #28]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	; 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20004858 	.word	0x20004858
 800604c:	2000486c 	.word	0x2000486c
 8006050:	2000485c 	.word	0x2000485c
 8006054:	20004850 	.word	0x20004850
 8006058:	20004860 	.word	0x20004860
 800605c:	20004864 	.word	0x20004864

08006060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04d      	beq.n	800610e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006072:	2308      	movs	r3, #8
 8006074:	425b      	negs	r3, r3
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <vPortFree+0xb8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4013      	ands	r3, r2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vPortFree+0x44>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <vPortFree+0x62>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <vPortFree+0xb8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <vPortFree+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	401a      	ands	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060e8:	f7fe fed2 	bl	8004e90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <vPortFree+0xbc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <vPortFree+0xbc>)
 80060f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060fa:	6938      	ldr	r0, [r7, #16]
 80060fc:	f000 f874 	bl	80061e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <vPortFree+0xc0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3301      	adds	r3, #1
 8006106:	4a06      	ldr	r2, [pc, #24]	; (8006120 <vPortFree+0xc0>)
 8006108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800610a:	f7fe fecf 	bl	8004eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2000486c 	.word	0x2000486c
 800611c:	2000485c 	.word	0x2000485c
 8006120:	20004868 	.word	0x20004868

08006124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800612a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800612e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006130:	4b27      	ldr	r3, [pc, #156]	; (80061d0 <prvHeapInit+0xac>)
 8006132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3307      	adds	r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0307 	bic.w	r3, r3, #7
 800614a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <prvHeapInit+0xac>)
 8006154:	4413      	add	r3, r2
 8006156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <prvHeapInit+0xb0>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <prvHeapInit+0xb0>)
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006170:	2208      	movs	r2, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <prvHeapInit+0xb4>)
 8006184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <prvHeapInit+0xb4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800618e:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <prvHeapInit+0xb4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <prvHeapInit+0xb4>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <prvHeapInit+0xb8>)
 80061b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <prvHeapInit+0xbc>)
 80061ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <prvHeapInit+0xc0>)
 80061be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c2:	601a      	str	r2, [r3, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000c50 	.word	0x20000c50
 80061d4:	20004850 	.word	0x20004850
 80061d8:	20004858 	.word	0x20004858
 80061dc:	20004860 	.word	0x20004860
 80061e0:	2000485c 	.word	0x2000485c
 80061e4:	2000486c 	.word	0x2000486c

080061e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061f0:	4b28      	ldr	r3, [pc, #160]	; (8006294 <prvInsertBlockIntoFreeList+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e002      	b.n	80061fc <prvInsertBlockIntoFreeList+0x14>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d8f7      	bhi.n	80061f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d108      	bne.n	800622a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d118      	bne.n	8006270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d00d      	beq.n	8006266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e008      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvInsertBlockIntoFreeList+0xb0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e003      	b.n	8006278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d002      	beq.n	8006286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20004850 	.word	0x20004850
 8006298:	20004858 	.word	0x20004858

0800629c <__errno>:
 800629c:	4b01      	ldr	r3, [pc, #4]	; (80062a4 <__errno+0x8>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000010 	.word	0x20000010

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4d0d      	ldr	r5, [pc, #52]	; (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	; (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1b64      	subs	r4, r4, r5
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2600      	movs	r6, #0
 80062b4:	42a6      	cmp	r6, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4d0b      	ldr	r5, [pc, #44]	; (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	; (80062ec <__libc_init_array+0x44>)
 80062bc:	f000 fcf8 	bl	8006cb0 <_init>
 80062c0:	1b64      	subs	r4, r4, r5
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2600      	movs	r6, #0
 80062c6:	42a6      	cmp	r6, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d0:	4798      	blx	r3
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062da:	4798      	blx	r3
 80062dc:	3601      	adds	r6, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	08006db8 	.word	0x08006db8
 80062e4:	08006db8 	.word	0x08006db8
 80062e8:	08006db8 	.word	0x08006db8
 80062ec:	08006dbc 	.word	0x08006dbc

080062f0 <__retarget_lock_acquire_recursive>:
 80062f0:	4770      	bx	lr

080062f2 <__retarget_lock_release_recursive>:
 80062f2:	4770      	bx	lr

080062f4 <memcpy>:
 80062f4:	440a      	add	r2, r1
 80062f6:	4291      	cmp	r1, r2
 80062f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062fc:	d100      	bne.n	8006300 <memcpy+0xc>
 80062fe:	4770      	bx	lr
 8006300:	b510      	push	{r4, lr}
 8006302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800630a:	4291      	cmp	r1, r2
 800630c:	d1f9      	bne.n	8006302 <memcpy+0xe>
 800630e:	bd10      	pop	{r4, pc}

08006310 <memset>:
 8006310:	4402      	add	r2, r0
 8006312:	4603      	mov	r3, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <sbrk_aligned>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4e0e      	ldr	r6, [pc, #56]	; (800635c <sbrk_aligned+0x3c>)
 8006324:	460c      	mov	r4, r1
 8006326:	6831      	ldr	r1, [r6, #0]
 8006328:	4605      	mov	r5, r0
 800632a:	b911      	cbnz	r1, 8006332 <sbrk_aligned+0x12>
 800632c:	f000 f8f6 	bl	800651c <_sbrk_r>
 8006330:	6030      	str	r0, [r6, #0]
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f000 f8f1 	bl	800651c <_sbrk_r>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d00a      	beq.n	8006354 <sbrk_aligned+0x34>
 800633e:	1cc4      	adds	r4, r0, #3
 8006340:	f024 0403 	bic.w	r4, r4, #3
 8006344:	42a0      	cmp	r0, r4
 8006346:	d007      	beq.n	8006358 <sbrk_aligned+0x38>
 8006348:	1a21      	subs	r1, r4, r0
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f8e6 	bl	800651c <_sbrk_r>
 8006350:	3001      	adds	r0, #1
 8006352:	d101      	bne.n	8006358 <sbrk_aligned+0x38>
 8006354:	f04f 34ff 	mov.w	r4, #4294967295
 8006358:	4620      	mov	r0, r4
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	20004878 	.word	0x20004878

08006360 <_malloc_r>:
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	1ccd      	adds	r5, r1, #3
 8006366:	f025 0503 	bic.w	r5, r5, #3
 800636a:	3508      	adds	r5, #8
 800636c:	2d0c      	cmp	r5, #12
 800636e:	bf38      	it	cc
 8006370:	250c      	movcc	r5, #12
 8006372:	2d00      	cmp	r5, #0
 8006374:	4607      	mov	r7, r0
 8006376:	db01      	blt.n	800637c <_malloc_r+0x1c>
 8006378:	42a9      	cmp	r1, r5
 800637a:	d905      	bls.n	8006388 <_malloc_r+0x28>
 800637c:	230c      	movs	r3, #12
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	2600      	movs	r6, #0
 8006382:	4630      	mov	r0, r6
 8006384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006388:	4e2e      	ldr	r6, [pc, #184]	; (8006444 <_malloc_r+0xe4>)
 800638a:	f000 f8f7 	bl	800657c <__malloc_lock>
 800638e:	6833      	ldr	r3, [r6, #0]
 8006390:	461c      	mov	r4, r3
 8006392:	bb34      	cbnz	r4, 80063e2 <_malloc_r+0x82>
 8006394:	4629      	mov	r1, r5
 8006396:	4638      	mov	r0, r7
 8006398:	f7ff ffc2 	bl	8006320 <sbrk_aligned>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	4604      	mov	r4, r0
 80063a0:	d14d      	bne.n	800643e <_malloc_r+0xde>
 80063a2:	6834      	ldr	r4, [r6, #0]
 80063a4:	4626      	mov	r6, r4
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	d140      	bne.n	800642c <_malloc_r+0xcc>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	4631      	mov	r1, r6
 80063ae:	4638      	mov	r0, r7
 80063b0:	eb04 0803 	add.w	r8, r4, r3
 80063b4:	f000 f8b2 	bl	800651c <_sbrk_r>
 80063b8:	4580      	cmp	r8, r0
 80063ba:	d13a      	bne.n	8006432 <_malloc_r+0xd2>
 80063bc:	6821      	ldr	r1, [r4, #0]
 80063be:	3503      	adds	r5, #3
 80063c0:	1a6d      	subs	r5, r5, r1
 80063c2:	f025 0503 	bic.w	r5, r5, #3
 80063c6:	3508      	adds	r5, #8
 80063c8:	2d0c      	cmp	r5, #12
 80063ca:	bf38      	it	cc
 80063cc:	250c      	movcc	r5, #12
 80063ce:	4629      	mov	r1, r5
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffa5 	bl	8006320 <sbrk_aligned>
 80063d6:	3001      	adds	r0, #1
 80063d8:	d02b      	beq.n	8006432 <_malloc_r+0xd2>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	442b      	add	r3, r5
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	e00e      	b.n	8006400 <_malloc_r+0xa0>
 80063e2:	6822      	ldr	r2, [r4, #0]
 80063e4:	1b52      	subs	r2, r2, r5
 80063e6:	d41e      	bmi.n	8006426 <_malloc_r+0xc6>
 80063e8:	2a0b      	cmp	r2, #11
 80063ea:	d916      	bls.n	800641a <_malloc_r+0xba>
 80063ec:	1961      	adds	r1, r4, r5
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	6025      	str	r5, [r4, #0]
 80063f2:	bf18      	it	ne
 80063f4:	6059      	strne	r1, [r3, #4]
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	bf08      	it	eq
 80063fa:	6031      	streq	r1, [r6, #0]
 80063fc:	5162      	str	r2, [r4, r5]
 80063fe:	604b      	str	r3, [r1, #4]
 8006400:	4638      	mov	r0, r7
 8006402:	f104 060b 	add.w	r6, r4, #11
 8006406:	f000 f8bf 	bl	8006588 <__malloc_unlock>
 800640a:	f026 0607 	bic.w	r6, r6, #7
 800640e:	1d23      	adds	r3, r4, #4
 8006410:	1af2      	subs	r2, r6, r3
 8006412:	d0b6      	beq.n	8006382 <_malloc_r+0x22>
 8006414:	1b9b      	subs	r3, r3, r6
 8006416:	50a3      	str	r3, [r4, r2]
 8006418:	e7b3      	b.n	8006382 <_malloc_r+0x22>
 800641a:	6862      	ldr	r2, [r4, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	bf0c      	ite	eq
 8006420:	6032      	streq	r2, [r6, #0]
 8006422:	605a      	strne	r2, [r3, #4]
 8006424:	e7ec      	b.n	8006400 <_malloc_r+0xa0>
 8006426:	4623      	mov	r3, r4
 8006428:	6864      	ldr	r4, [r4, #4]
 800642a:	e7b2      	b.n	8006392 <_malloc_r+0x32>
 800642c:	4634      	mov	r4, r6
 800642e:	6876      	ldr	r6, [r6, #4]
 8006430:	e7b9      	b.n	80063a6 <_malloc_r+0x46>
 8006432:	230c      	movs	r3, #12
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4638      	mov	r0, r7
 8006438:	f000 f8a6 	bl	8006588 <__malloc_unlock>
 800643c:	e7a1      	b.n	8006382 <_malloc_r+0x22>
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	e7de      	b.n	8006400 <_malloc_r+0xa0>
 8006442:	bf00      	nop
 8006444:	20004874 	.word	0x20004874

08006448 <cleanup_glue>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	6809      	ldr	r1, [r1, #0]
 800644e:	4605      	mov	r5, r0
 8006450:	b109      	cbz	r1, 8006456 <cleanup_glue+0xe>
 8006452:	f7ff fff9 	bl	8006448 <cleanup_glue>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800645e:	f000 b899 	b.w	8006594 <_free_r>
	...

08006464 <_reclaim_reent>:
 8006464:	4b2c      	ldr	r3, [pc, #176]	; (8006518 <_reclaim_reent+0xb4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4283      	cmp	r3, r0
 800646a:	b570      	push	{r4, r5, r6, lr}
 800646c:	4604      	mov	r4, r0
 800646e:	d051      	beq.n	8006514 <_reclaim_reent+0xb0>
 8006470:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006472:	b143      	cbz	r3, 8006486 <_reclaim_reent+0x22>
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d14a      	bne.n	8006510 <_reclaim_reent+0xac>
 800647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	b111      	cbz	r1, 8006486 <_reclaim_reent+0x22>
 8006480:	4620      	mov	r0, r4
 8006482:	f000 f887 	bl	8006594 <_free_r>
 8006486:	6961      	ldr	r1, [r4, #20]
 8006488:	b111      	cbz	r1, 8006490 <_reclaim_reent+0x2c>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 f882 	bl	8006594 <_free_r>
 8006490:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006492:	b111      	cbz	r1, 800649a <_reclaim_reent+0x36>
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f87d 	bl	8006594 <_free_r>
 800649a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800649c:	b111      	cbz	r1, 80064a4 <_reclaim_reent+0x40>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 f878 	bl	8006594 <_free_r>
 80064a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064a6:	b111      	cbz	r1, 80064ae <_reclaim_reent+0x4a>
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 f873 	bl	8006594 <_free_r>
 80064ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064b0:	b111      	cbz	r1, 80064b8 <_reclaim_reent+0x54>
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f86e 	bl	8006594 <_free_r>
 80064b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80064ba:	b111      	cbz	r1, 80064c2 <_reclaim_reent+0x5e>
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f869 	bl	8006594 <_free_r>
 80064c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80064c4:	b111      	cbz	r1, 80064cc <_reclaim_reent+0x68>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 f864 	bl	8006594 <_free_r>
 80064cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ce:	b111      	cbz	r1, 80064d6 <_reclaim_reent+0x72>
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 f85f 	bl	8006594 <_free_r>
 80064d6:	69a3      	ldr	r3, [r4, #24]
 80064d8:	b1e3      	cbz	r3, 8006514 <_reclaim_reent+0xb0>
 80064da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064dc:	4620      	mov	r0, r4
 80064de:	4798      	blx	r3
 80064e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064e2:	b1b9      	cbz	r1, 8006514 <_reclaim_reent+0xb0>
 80064e4:	4620      	mov	r0, r4
 80064e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ea:	f7ff bfad 	b.w	8006448 <cleanup_glue>
 80064ee:	5949      	ldr	r1, [r1, r5]
 80064f0:	b941      	cbnz	r1, 8006504 <_reclaim_reent+0xa0>
 80064f2:	3504      	adds	r5, #4
 80064f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f6:	2d80      	cmp	r5, #128	; 0x80
 80064f8:	68d9      	ldr	r1, [r3, #12]
 80064fa:	d1f8      	bne.n	80064ee <_reclaim_reent+0x8a>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 f849 	bl	8006594 <_free_r>
 8006502:	e7ba      	b.n	800647a <_reclaim_reent+0x16>
 8006504:	680e      	ldr	r6, [r1, #0]
 8006506:	4620      	mov	r0, r4
 8006508:	f000 f844 	bl	8006594 <_free_r>
 800650c:	4631      	mov	r1, r6
 800650e:	e7ef      	b.n	80064f0 <_reclaim_reent+0x8c>
 8006510:	2500      	movs	r5, #0
 8006512:	e7ef      	b.n	80064f4 <_reclaim_reent+0x90>
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	bf00      	nop
 8006518:	20000010 	.word	0x20000010

0800651c <_sbrk_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4d06      	ldr	r5, [pc, #24]	; (8006538 <_sbrk_r+0x1c>)
 8006520:	2300      	movs	r3, #0
 8006522:	4604      	mov	r4, r0
 8006524:	4608      	mov	r0, r1
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	f7fa fcda 	bl	8000ee0 <_sbrk>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_sbrk_r+0x1a>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_sbrk_r+0x1a>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	2000487c 	.word	0x2000487c

0800653c <siprintf>:
 800653c:	b40e      	push	{r1, r2, r3}
 800653e:	b500      	push	{lr}
 8006540:	b09c      	sub	sp, #112	; 0x70
 8006542:	ab1d      	add	r3, sp, #116	; 0x74
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	9006      	str	r0, [sp, #24]
 8006548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800654c:	4809      	ldr	r0, [pc, #36]	; (8006574 <siprintf+0x38>)
 800654e:	9107      	str	r1, [sp, #28]
 8006550:	9104      	str	r1, [sp, #16]
 8006552:	4909      	ldr	r1, [pc, #36]	; (8006578 <siprintf+0x3c>)
 8006554:	f853 2b04 	ldr.w	r2, [r3], #4
 8006558:	9105      	str	r1, [sp, #20]
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	a902      	add	r1, sp, #8
 8006560:	f000 f8c0 	bl	80066e4 <_svfiprintf_r>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	b01c      	add	sp, #112	; 0x70
 800656c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006570:	b003      	add	sp, #12
 8006572:	4770      	bx	lr
 8006574:	20000010 	.word	0x20000010
 8006578:	ffff0208 	.word	0xffff0208

0800657c <__malloc_lock>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__malloc_lock+0x8>)
 800657e:	f7ff beb7 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	20004870 	.word	0x20004870

08006588 <__malloc_unlock>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__malloc_unlock+0x8>)
 800658a:	f7ff beb2 	b.w	80062f2 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	20004870 	.word	0x20004870

08006594 <_free_r>:
 8006594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006596:	2900      	cmp	r1, #0
 8006598:	d044      	beq.n	8006624 <_free_r+0x90>
 800659a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659e:	9001      	str	r0, [sp, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f1a1 0404 	sub.w	r4, r1, #4
 80065a6:	bfb8      	it	lt
 80065a8:	18e4      	addlt	r4, r4, r3
 80065aa:	f7ff ffe7 	bl	800657c <__malloc_lock>
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <_free_r+0x94>)
 80065b0:	9801      	ldr	r0, [sp, #4]
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	b933      	cbnz	r3, 80065c4 <_free_r+0x30>
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	6014      	str	r4, [r2, #0]
 80065ba:	b003      	add	sp, #12
 80065bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c0:	f7ff bfe2 	b.w	8006588 <__malloc_unlock>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d908      	bls.n	80065da <_free_r+0x46>
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	1961      	adds	r1, r4, r5
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf01      	itttt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	1949      	addeq	r1, r1, r5
 80065d6:	6021      	streq	r1, [r4, #0]
 80065d8:	e7ed      	b.n	80065b6 <_free_r+0x22>
 80065da:	461a      	mov	r2, r3
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b10b      	cbz	r3, 80065e4 <_free_r+0x50>
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d9fa      	bls.n	80065da <_free_r+0x46>
 80065e4:	6811      	ldr	r1, [r2, #0]
 80065e6:	1855      	adds	r5, r2, r1
 80065e8:	42a5      	cmp	r5, r4
 80065ea:	d10b      	bne.n	8006604 <_free_r+0x70>
 80065ec:	6824      	ldr	r4, [r4, #0]
 80065ee:	4421      	add	r1, r4
 80065f0:	1854      	adds	r4, r2, r1
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	d1e0      	bne.n	80065ba <_free_r+0x26>
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	6053      	str	r3, [r2, #4]
 80065fe:	4421      	add	r1, r4
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	e7da      	b.n	80065ba <_free_r+0x26>
 8006604:	d902      	bls.n	800660c <_free_r+0x78>
 8006606:	230c      	movs	r3, #12
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	e7d6      	b.n	80065ba <_free_r+0x26>
 800660c:	6825      	ldr	r5, [r4, #0]
 800660e:	1961      	adds	r1, r4, r5
 8006610:	428b      	cmp	r3, r1
 8006612:	bf04      	itt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	bf04      	itt	eq
 800661c:	1949      	addeq	r1, r1, r5
 800661e:	6021      	streq	r1, [r4, #0]
 8006620:	6054      	str	r4, [r2, #4]
 8006622:	e7ca      	b.n	80065ba <_free_r+0x26>
 8006624:	b003      	add	sp, #12
 8006626:	bd30      	pop	{r4, r5, pc}
 8006628:	20004874 	.word	0x20004874

0800662c <__ssputs_r>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	688e      	ldr	r6, [r1, #8]
 8006632:	429e      	cmp	r6, r3
 8006634:	4682      	mov	sl, r0
 8006636:	460c      	mov	r4, r1
 8006638:	4690      	mov	r8, r2
 800663a:	461f      	mov	r7, r3
 800663c:	d838      	bhi.n	80066b0 <__ssputs_r+0x84>
 800663e:	898a      	ldrh	r2, [r1, #12]
 8006640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006644:	d032      	beq.n	80066ac <__ssputs_r+0x80>
 8006646:	6825      	ldr	r5, [r4, #0]
 8006648:	6909      	ldr	r1, [r1, #16]
 800664a:	eba5 0901 	sub.w	r9, r5, r1
 800664e:	6965      	ldr	r5, [r4, #20]
 8006650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006658:	3301      	adds	r3, #1
 800665a:	444b      	add	r3, r9
 800665c:	106d      	asrs	r5, r5, #1
 800665e:	429d      	cmp	r5, r3
 8006660:	bf38      	it	cc
 8006662:	461d      	movcc	r5, r3
 8006664:	0553      	lsls	r3, r2, #21
 8006666:	d531      	bpl.n	80066cc <__ssputs_r+0xa0>
 8006668:	4629      	mov	r1, r5
 800666a:	f7ff fe79 	bl	8006360 <_malloc_r>
 800666e:	4606      	mov	r6, r0
 8006670:	b950      	cbnz	r0, 8006688 <__ssputs_r+0x5c>
 8006672:	230c      	movs	r3, #12
 8006674:	f8ca 3000 	str.w	r3, [sl]
 8006678:	89a3      	ldrh	r3, [r4, #12]
 800667a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006688:	6921      	ldr	r1, [r4, #16]
 800668a:	464a      	mov	r2, r9
 800668c:	f7ff fe32 	bl	80062f4 <memcpy>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	6126      	str	r6, [r4, #16]
 800669e:	6165      	str	r5, [r4, #20]
 80066a0:	444e      	add	r6, r9
 80066a2:	eba5 0509 	sub.w	r5, r5, r9
 80066a6:	6026      	str	r6, [r4, #0]
 80066a8:	60a5      	str	r5, [r4, #8]
 80066aa:	463e      	mov	r6, r7
 80066ac:	42be      	cmp	r6, r7
 80066ae:	d900      	bls.n	80066b2 <__ssputs_r+0x86>
 80066b0:	463e      	mov	r6, r7
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	4632      	mov	r2, r6
 80066b6:	4641      	mov	r1, r8
 80066b8:	f000 faa8 	bl	8006c0c <memmove>
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	1b9b      	subs	r3, r3, r6
 80066c0:	60a3      	str	r3, [r4, #8]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	4433      	add	r3, r6
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e7db      	b.n	8006684 <__ssputs_r+0x58>
 80066cc:	462a      	mov	r2, r5
 80066ce:	f000 fab7 	bl	8006c40 <_realloc_r>
 80066d2:	4606      	mov	r6, r0
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d1e1      	bne.n	800669c <__ssputs_r+0x70>
 80066d8:	6921      	ldr	r1, [r4, #16]
 80066da:	4650      	mov	r0, sl
 80066dc:	f7ff ff5a 	bl	8006594 <_free_r>
 80066e0:	e7c7      	b.n	8006672 <__ssputs_r+0x46>
	...

080066e4 <_svfiprintf_r>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	4698      	mov	r8, r3
 80066ea:	898b      	ldrh	r3, [r1, #12]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	b09d      	sub	sp, #116	; 0x74
 80066f0:	4607      	mov	r7, r0
 80066f2:	460d      	mov	r5, r1
 80066f4:	4614      	mov	r4, r2
 80066f6:	d50e      	bpl.n	8006716 <_svfiprintf_r+0x32>
 80066f8:	690b      	ldr	r3, [r1, #16]
 80066fa:	b963      	cbnz	r3, 8006716 <_svfiprintf_r+0x32>
 80066fc:	2140      	movs	r1, #64	; 0x40
 80066fe:	f7ff fe2f 	bl	8006360 <_malloc_r>
 8006702:	6028      	str	r0, [r5, #0]
 8006704:	6128      	str	r0, [r5, #16]
 8006706:	b920      	cbnz	r0, 8006712 <_svfiprintf_r+0x2e>
 8006708:	230c      	movs	r3, #12
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	e0d1      	b.n	80068b6 <_svfiprintf_r+0x1d2>
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	616b      	str	r3, [r5, #20]
 8006716:	2300      	movs	r3, #0
 8006718:	9309      	str	r3, [sp, #36]	; 0x24
 800671a:	2320      	movs	r3, #32
 800671c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006720:	f8cd 800c 	str.w	r8, [sp, #12]
 8006724:	2330      	movs	r3, #48	; 0x30
 8006726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068d0 <_svfiprintf_r+0x1ec>
 800672a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800672e:	f04f 0901 	mov.w	r9, #1
 8006732:	4623      	mov	r3, r4
 8006734:	469a      	mov	sl, r3
 8006736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800673a:	b10a      	cbz	r2, 8006740 <_svfiprintf_r+0x5c>
 800673c:	2a25      	cmp	r2, #37	; 0x25
 800673e:	d1f9      	bne.n	8006734 <_svfiprintf_r+0x50>
 8006740:	ebba 0b04 	subs.w	fp, sl, r4
 8006744:	d00b      	beq.n	800675e <_svfiprintf_r+0x7a>
 8006746:	465b      	mov	r3, fp
 8006748:	4622      	mov	r2, r4
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff ff6d 	bl	800662c <__ssputs_r>
 8006752:	3001      	adds	r0, #1
 8006754:	f000 80aa 	beq.w	80068ac <_svfiprintf_r+0x1c8>
 8006758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800675a:	445a      	add	r2, fp
 800675c:	9209      	str	r2, [sp, #36]	; 0x24
 800675e:	f89a 3000 	ldrb.w	r3, [sl]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80a2 	beq.w	80068ac <_svfiprintf_r+0x1c8>
 8006768:	2300      	movs	r3, #0
 800676a:	f04f 32ff 	mov.w	r2, #4294967295
 800676e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006772:	f10a 0a01 	add.w	sl, sl, #1
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	9307      	str	r3, [sp, #28]
 800677a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800677e:	931a      	str	r3, [sp, #104]	; 0x68
 8006780:	4654      	mov	r4, sl
 8006782:	2205      	movs	r2, #5
 8006784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006788:	4851      	ldr	r0, [pc, #324]	; (80068d0 <_svfiprintf_r+0x1ec>)
 800678a:	f7f9 fd31 	bl	80001f0 <memchr>
 800678e:	9a04      	ldr	r2, [sp, #16]
 8006790:	b9d8      	cbnz	r0, 80067ca <_svfiprintf_r+0xe6>
 8006792:	06d0      	lsls	r0, r2, #27
 8006794:	bf44      	itt	mi
 8006796:	2320      	movmi	r3, #32
 8006798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800679c:	0711      	lsls	r1, r2, #28
 800679e:	bf44      	itt	mi
 80067a0:	232b      	movmi	r3, #43	; 0x2b
 80067a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067a6:	f89a 3000 	ldrb.w	r3, [sl]
 80067aa:	2b2a      	cmp	r3, #42	; 0x2a
 80067ac:	d015      	beq.n	80067da <_svfiprintf_r+0xf6>
 80067ae:	9a07      	ldr	r2, [sp, #28]
 80067b0:	4654      	mov	r4, sl
 80067b2:	2000      	movs	r0, #0
 80067b4:	f04f 0c0a 	mov.w	ip, #10
 80067b8:	4621      	mov	r1, r4
 80067ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067be:	3b30      	subs	r3, #48	; 0x30
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	d94e      	bls.n	8006862 <_svfiprintf_r+0x17e>
 80067c4:	b1b0      	cbz	r0, 80067f4 <_svfiprintf_r+0x110>
 80067c6:	9207      	str	r2, [sp, #28]
 80067c8:	e014      	b.n	80067f4 <_svfiprintf_r+0x110>
 80067ca:	eba0 0308 	sub.w	r3, r0, r8
 80067ce:	fa09 f303 	lsl.w	r3, r9, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	46a2      	mov	sl, r4
 80067d8:	e7d2      	b.n	8006780 <_svfiprintf_r+0x9c>
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	1d19      	adds	r1, r3, #4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	9103      	str	r1, [sp, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfbb      	ittet	lt
 80067e6:	425b      	neglt	r3, r3
 80067e8:	f042 0202 	orrlt.w	r2, r2, #2
 80067ec:	9307      	strge	r3, [sp, #28]
 80067ee:	9307      	strlt	r3, [sp, #28]
 80067f0:	bfb8      	it	lt
 80067f2:	9204      	strlt	r2, [sp, #16]
 80067f4:	7823      	ldrb	r3, [r4, #0]
 80067f6:	2b2e      	cmp	r3, #46	; 0x2e
 80067f8:	d10c      	bne.n	8006814 <_svfiprintf_r+0x130>
 80067fa:	7863      	ldrb	r3, [r4, #1]
 80067fc:	2b2a      	cmp	r3, #42	; 0x2a
 80067fe:	d135      	bne.n	800686c <_svfiprintf_r+0x188>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	1d1a      	adds	r2, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	9203      	str	r2, [sp, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfb8      	it	lt
 800680c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006810:	3402      	adds	r4, #2
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068e0 <_svfiprintf_r+0x1fc>
 8006818:	7821      	ldrb	r1, [r4, #0]
 800681a:	2203      	movs	r2, #3
 800681c:	4650      	mov	r0, sl
 800681e:	f7f9 fce7 	bl	80001f0 <memchr>
 8006822:	b140      	cbz	r0, 8006836 <_svfiprintf_r+0x152>
 8006824:	2340      	movs	r3, #64	; 0x40
 8006826:	eba0 000a 	sub.w	r0, r0, sl
 800682a:	fa03 f000 	lsl.w	r0, r3, r0
 800682e:	9b04      	ldr	r3, [sp, #16]
 8006830:	4303      	orrs	r3, r0
 8006832:	3401      	adds	r4, #1
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683a:	4826      	ldr	r0, [pc, #152]	; (80068d4 <_svfiprintf_r+0x1f0>)
 800683c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006840:	2206      	movs	r2, #6
 8006842:	f7f9 fcd5 	bl	80001f0 <memchr>
 8006846:	2800      	cmp	r0, #0
 8006848:	d038      	beq.n	80068bc <_svfiprintf_r+0x1d8>
 800684a:	4b23      	ldr	r3, [pc, #140]	; (80068d8 <_svfiprintf_r+0x1f4>)
 800684c:	bb1b      	cbnz	r3, 8006896 <_svfiprintf_r+0x1b2>
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	3307      	adds	r3, #7
 8006852:	f023 0307 	bic.w	r3, r3, #7
 8006856:	3308      	adds	r3, #8
 8006858:	9303      	str	r3, [sp, #12]
 800685a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685c:	4433      	add	r3, r6
 800685e:	9309      	str	r3, [sp, #36]	; 0x24
 8006860:	e767      	b.n	8006732 <_svfiprintf_r+0x4e>
 8006862:	fb0c 3202 	mla	r2, ip, r2, r3
 8006866:	460c      	mov	r4, r1
 8006868:	2001      	movs	r0, #1
 800686a:	e7a5      	b.n	80067b8 <_svfiprintf_r+0xd4>
 800686c:	2300      	movs	r3, #0
 800686e:	3401      	adds	r4, #1
 8006870:	9305      	str	r3, [sp, #20]
 8006872:	4619      	mov	r1, r3
 8006874:	f04f 0c0a 	mov.w	ip, #10
 8006878:	4620      	mov	r0, r4
 800687a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800687e:	3a30      	subs	r2, #48	; 0x30
 8006880:	2a09      	cmp	r2, #9
 8006882:	d903      	bls.n	800688c <_svfiprintf_r+0x1a8>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0c5      	beq.n	8006814 <_svfiprintf_r+0x130>
 8006888:	9105      	str	r1, [sp, #20]
 800688a:	e7c3      	b.n	8006814 <_svfiprintf_r+0x130>
 800688c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006890:	4604      	mov	r4, r0
 8006892:	2301      	movs	r3, #1
 8006894:	e7f0      	b.n	8006878 <_svfiprintf_r+0x194>
 8006896:	ab03      	add	r3, sp, #12
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	462a      	mov	r2, r5
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <_svfiprintf_r+0x1f8>)
 800689e:	a904      	add	r1, sp, #16
 80068a0:	4638      	mov	r0, r7
 80068a2:	f3af 8000 	nop.w
 80068a6:	1c42      	adds	r2, r0, #1
 80068a8:	4606      	mov	r6, r0
 80068aa:	d1d6      	bne.n	800685a <_svfiprintf_r+0x176>
 80068ac:	89ab      	ldrh	r3, [r5, #12]
 80068ae:	065b      	lsls	r3, r3, #25
 80068b0:	f53f af2c 	bmi.w	800670c <_svfiprintf_r+0x28>
 80068b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068b6:	b01d      	add	sp, #116	; 0x74
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	ab03      	add	r3, sp, #12
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	462a      	mov	r2, r5
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <_svfiprintf_r+0x1f8>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	4638      	mov	r0, r7
 80068c8:	f000 f87a 	bl	80069c0 <_printf_i>
 80068cc:	e7eb      	b.n	80068a6 <_svfiprintf_r+0x1c2>
 80068ce:	bf00      	nop
 80068d0:	08006d7c 	.word	0x08006d7c
 80068d4:	08006d86 	.word	0x08006d86
 80068d8:	00000000 	.word	0x00000000
 80068dc:	0800662d 	.word	0x0800662d
 80068e0:	08006d82 	.word	0x08006d82

080068e4 <_printf_common>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	4616      	mov	r6, r2
 80068ea:	4699      	mov	r9, r3
 80068ec:	688a      	ldr	r2, [r1, #8]
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	bfb8      	it	lt
 80068f8:	4613      	movlt	r3, r2
 80068fa:	6033      	str	r3, [r6, #0]
 80068fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006900:	4607      	mov	r7, r0
 8006902:	460c      	mov	r4, r1
 8006904:	b10a      	cbz	r2, 800690a <_printf_common+0x26>
 8006906:	3301      	adds	r3, #1
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	0699      	lsls	r1, r3, #26
 800690e:	bf42      	ittt	mi
 8006910:	6833      	ldrmi	r3, [r6, #0]
 8006912:	3302      	addmi	r3, #2
 8006914:	6033      	strmi	r3, [r6, #0]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	f015 0506 	ands.w	r5, r5, #6
 800691c:	d106      	bne.n	800692c <_printf_common+0x48>
 800691e:	f104 0a19 	add.w	sl, r4, #25
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	6832      	ldr	r2, [r6, #0]
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	42ab      	cmp	r3, r5
 800692a:	dc26      	bgt.n	800697a <_printf_common+0x96>
 800692c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006930:	1e13      	subs	r3, r2, #0
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	2301      	movne	r3, #1
 8006938:	0692      	lsls	r2, r2, #26
 800693a:	d42b      	bmi.n	8006994 <_printf_common+0xb0>
 800693c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006940:	4649      	mov	r1, r9
 8006942:	4638      	mov	r0, r7
 8006944:	47c0      	blx	r8
 8006946:	3001      	adds	r0, #1
 8006948:	d01e      	beq.n	8006988 <_printf_common+0xa4>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	68e5      	ldr	r5, [r4, #12]
 800694e:	6832      	ldr	r2, [r6, #0]
 8006950:	f003 0306 	and.w	r3, r3, #6
 8006954:	2b04      	cmp	r3, #4
 8006956:	bf08      	it	eq
 8006958:	1aad      	subeq	r5, r5, r2
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	bf0c      	ite	eq
 8006960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006964:	2500      	movne	r5, #0
 8006966:	4293      	cmp	r3, r2
 8006968:	bfc4      	itt	gt
 800696a:	1a9b      	subgt	r3, r3, r2
 800696c:	18ed      	addgt	r5, r5, r3
 800696e:	2600      	movs	r6, #0
 8006970:	341a      	adds	r4, #26
 8006972:	42b5      	cmp	r5, r6
 8006974:	d11a      	bne.n	80069ac <_printf_common+0xc8>
 8006976:	2000      	movs	r0, #0
 8006978:	e008      	b.n	800698c <_printf_common+0xa8>
 800697a:	2301      	movs	r3, #1
 800697c:	4652      	mov	r2, sl
 800697e:	4649      	mov	r1, r9
 8006980:	4638      	mov	r0, r7
 8006982:	47c0      	blx	r8
 8006984:	3001      	adds	r0, #1
 8006986:	d103      	bne.n	8006990 <_printf_common+0xac>
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006990:	3501      	adds	r5, #1
 8006992:	e7c6      	b.n	8006922 <_printf_common+0x3e>
 8006994:	18e1      	adds	r1, r4, r3
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	2030      	movs	r0, #48	; 0x30
 800699a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800699e:	4422      	add	r2, r4
 80069a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069a8:	3302      	adds	r3, #2
 80069aa:	e7c7      	b.n	800693c <_printf_common+0x58>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4622      	mov	r2, r4
 80069b0:	4649      	mov	r1, r9
 80069b2:	4638      	mov	r0, r7
 80069b4:	47c0      	blx	r8
 80069b6:	3001      	adds	r0, #1
 80069b8:	d0e6      	beq.n	8006988 <_printf_common+0xa4>
 80069ba:	3601      	adds	r6, #1
 80069bc:	e7d9      	b.n	8006972 <_printf_common+0x8e>
	...

080069c0 <_printf_i>:
 80069c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c4:	7e0f      	ldrb	r7, [r1, #24]
 80069c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069c8:	2f78      	cmp	r7, #120	; 0x78
 80069ca:	4691      	mov	r9, r2
 80069cc:	4680      	mov	r8, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	469a      	mov	sl, r3
 80069d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069d6:	d807      	bhi.n	80069e8 <_printf_i+0x28>
 80069d8:	2f62      	cmp	r7, #98	; 0x62
 80069da:	d80a      	bhi.n	80069f2 <_printf_i+0x32>
 80069dc:	2f00      	cmp	r7, #0
 80069de:	f000 80d8 	beq.w	8006b92 <_printf_i+0x1d2>
 80069e2:	2f58      	cmp	r7, #88	; 0x58
 80069e4:	f000 80a3 	beq.w	8006b2e <_printf_i+0x16e>
 80069e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069f0:	e03a      	b.n	8006a68 <_printf_i+0xa8>
 80069f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069f6:	2b15      	cmp	r3, #21
 80069f8:	d8f6      	bhi.n	80069e8 <_printf_i+0x28>
 80069fa:	a101      	add	r1, pc, #4	; (adr r1, 8006a00 <_printf_i+0x40>)
 80069fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a00:	08006a59 	.word	0x08006a59
 8006a04:	08006a6d 	.word	0x08006a6d
 8006a08:	080069e9 	.word	0x080069e9
 8006a0c:	080069e9 	.word	0x080069e9
 8006a10:	080069e9 	.word	0x080069e9
 8006a14:	080069e9 	.word	0x080069e9
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	080069e9 	.word	0x080069e9
 8006a20:	080069e9 	.word	0x080069e9
 8006a24:	080069e9 	.word	0x080069e9
 8006a28:	080069e9 	.word	0x080069e9
 8006a2c:	08006b79 	.word	0x08006b79
 8006a30:	08006a9d 	.word	0x08006a9d
 8006a34:	08006b5b 	.word	0x08006b5b
 8006a38:	080069e9 	.word	0x080069e9
 8006a3c:	080069e9 	.word	0x080069e9
 8006a40:	08006b9b 	.word	0x08006b9b
 8006a44:	080069e9 	.word	0x080069e9
 8006a48:	08006a9d 	.word	0x08006a9d
 8006a4c:	080069e9 	.word	0x080069e9
 8006a50:	080069e9 	.word	0x080069e9
 8006a54:	08006b63 	.word	0x08006b63
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	1d1a      	adds	r2, r3, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	602a      	str	r2, [r5, #0]
 8006a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0a3      	b.n	8006bb4 <_printf_i+0x1f4>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	6829      	ldr	r1, [r5, #0]
 8006a70:	0606      	lsls	r6, r0, #24
 8006a72:	f101 0304 	add.w	r3, r1, #4
 8006a76:	d50a      	bpl.n	8006a8e <_printf_i+0xce>
 8006a78:	680e      	ldr	r6, [r1, #0]
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	da03      	bge.n	8006a88 <_printf_i+0xc8>
 8006a80:	232d      	movs	r3, #45	; 0x2d
 8006a82:	4276      	negs	r6, r6
 8006a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a88:	485e      	ldr	r0, [pc, #376]	; (8006c04 <_printf_i+0x244>)
 8006a8a:	230a      	movs	r3, #10
 8006a8c:	e019      	b.n	8006ac2 <_printf_i+0x102>
 8006a8e:	680e      	ldr	r6, [r1, #0]
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a96:	bf18      	it	ne
 8006a98:	b236      	sxthne	r6, r6
 8006a9a:	e7ef      	b.n	8006a7c <_printf_i+0xbc>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	1d19      	adds	r1, r3, #4
 8006aa2:	6029      	str	r1, [r5, #0]
 8006aa4:	0601      	lsls	r1, r0, #24
 8006aa6:	d501      	bpl.n	8006aac <_printf_i+0xec>
 8006aa8:	681e      	ldr	r6, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <_printf_i+0xf2>
 8006aac:	0646      	lsls	r6, r0, #25
 8006aae:	d5fb      	bpl.n	8006aa8 <_printf_i+0xe8>
 8006ab0:	881e      	ldrh	r6, [r3, #0]
 8006ab2:	4854      	ldr	r0, [pc, #336]	; (8006c04 <_printf_i+0x244>)
 8006ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2308      	moveq	r3, #8
 8006aba:	230a      	movne	r3, #10
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ac2:	6865      	ldr	r5, [r4, #4]
 8006ac4:	60a5      	str	r5, [r4, #8]
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	bfa2      	ittt	ge
 8006aca:	6821      	ldrge	r1, [r4, #0]
 8006acc:	f021 0104 	bicge.w	r1, r1, #4
 8006ad0:	6021      	strge	r1, [r4, #0]
 8006ad2:	b90e      	cbnz	r6, 8006ad8 <_printf_i+0x118>
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	d04d      	beq.n	8006b74 <_printf_i+0x1b4>
 8006ad8:	4615      	mov	r5, r2
 8006ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ade:	fb03 6711 	mls	r7, r3, r1, r6
 8006ae2:	5dc7      	ldrb	r7, [r0, r7]
 8006ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ae8:	4637      	mov	r7, r6
 8006aea:	42bb      	cmp	r3, r7
 8006aec:	460e      	mov	r6, r1
 8006aee:	d9f4      	bls.n	8006ada <_printf_i+0x11a>
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d10b      	bne.n	8006b0c <_printf_i+0x14c>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	07de      	lsls	r6, r3, #31
 8006af8:	d508      	bpl.n	8006b0c <_printf_i+0x14c>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	6861      	ldr	r1, [r4, #4]
 8006afe:	4299      	cmp	r1, r3
 8006b00:	bfde      	ittt	le
 8006b02:	2330      	movle	r3, #48	; 0x30
 8006b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b0c:	1b52      	subs	r2, r2, r5
 8006b0e:	6122      	str	r2, [r4, #16]
 8006b10:	f8cd a000 	str.w	sl, [sp]
 8006b14:	464b      	mov	r3, r9
 8006b16:	aa03      	add	r2, sp, #12
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	f7ff fee2 	bl	80068e4 <_printf_common>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d14c      	bne.n	8006bbe <_printf_i+0x1fe>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b004      	add	sp, #16
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	4835      	ldr	r0, [pc, #212]	; (8006c04 <_printf_i+0x244>)
 8006b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b34:	6829      	ldr	r1, [r5, #0]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b3c:	6029      	str	r1, [r5, #0]
 8006b3e:	061d      	lsls	r5, r3, #24
 8006b40:	d514      	bpl.n	8006b6c <_printf_i+0x1ac>
 8006b42:	07df      	lsls	r7, r3, #31
 8006b44:	bf44      	itt	mi
 8006b46:	f043 0320 	orrmi.w	r3, r3, #32
 8006b4a:	6023      	strmi	r3, [r4, #0]
 8006b4c:	b91e      	cbnz	r6, 8006b56 <_printf_i+0x196>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f023 0320 	bic.w	r3, r3, #32
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	2310      	movs	r3, #16
 8006b58:	e7b0      	b.n	8006abc <_printf_i+0xfc>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	2378      	movs	r3, #120	; 0x78
 8006b64:	4828      	ldr	r0, [pc, #160]	; (8006c08 <_printf_i+0x248>)
 8006b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b6a:	e7e3      	b.n	8006b34 <_printf_i+0x174>
 8006b6c:	0659      	lsls	r1, r3, #25
 8006b6e:	bf48      	it	mi
 8006b70:	b2b6      	uxthmi	r6, r6
 8006b72:	e7e6      	b.n	8006b42 <_printf_i+0x182>
 8006b74:	4615      	mov	r5, r2
 8006b76:	e7bb      	b.n	8006af0 <_printf_i+0x130>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	6826      	ldr	r6, [r4, #0]
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	1d18      	adds	r0, r3, #4
 8006b80:	6028      	str	r0, [r5, #0]
 8006b82:	0635      	lsls	r5, r6, #24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0x1cc>
 8006b88:	6019      	str	r1, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0x1d2>
 8006b8c:	0670      	lsls	r0, r6, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0x1c8>
 8006b90:	8019      	strh	r1, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	4615      	mov	r5, r2
 8006b98:	e7ba      	b.n	8006b10 <_printf_i+0x150>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	602a      	str	r2, [r5, #0]
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f7f9 fb22 	bl	80001f0 <memchr>
 8006bac:	b108      	cbz	r0, 8006bb2 <_printf_i+0x1f2>
 8006bae:	1b40      	subs	r0, r0, r5
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bbc:	e7a8      	b.n	8006b10 <_printf_i+0x150>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	47d0      	blx	sl
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0ab      	beq.n	8006b24 <_printf_i+0x164>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	d413      	bmi.n	8006bfa <_printf_i+0x23a>
 8006bd2:	68e0      	ldr	r0, [r4, #12]
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	bfb8      	it	lt
 8006bda:	4618      	movlt	r0, r3
 8006bdc:	e7a4      	b.n	8006b28 <_printf_i+0x168>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4632      	mov	r2, r6
 8006be2:	4649      	mov	r1, r9
 8006be4:	4640      	mov	r0, r8
 8006be6:	47d0      	blx	sl
 8006be8:	3001      	adds	r0, #1
 8006bea:	d09b      	beq.n	8006b24 <_printf_i+0x164>
 8006bec:	3501      	adds	r5, #1
 8006bee:	68e3      	ldr	r3, [r4, #12]
 8006bf0:	9903      	ldr	r1, [sp, #12]
 8006bf2:	1a5b      	subs	r3, r3, r1
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dcf2      	bgt.n	8006bde <_printf_i+0x21e>
 8006bf8:	e7eb      	b.n	8006bd2 <_printf_i+0x212>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	f104 0619 	add.w	r6, r4, #25
 8006c00:	e7f5      	b.n	8006bee <_printf_i+0x22e>
 8006c02:	bf00      	nop
 8006c04:	08006d8d 	.word	0x08006d8d
 8006c08:	08006d9e 	.word	0x08006d9e

08006c0c <memmove>:
 8006c0c:	4288      	cmp	r0, r1
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	eb01 0402 	add.w	r4, r1, r2
 8006c14:	d902      	bls.n	8006c1c <memmove+0x10>
 8006c16:	4284      	cmp	r4, r0
 8006c18:	4623      	mov	r3, r4
 8006c1a:	d807      	bhi.n	8006c2c <memmove+0x20>
 8006c1c:	1e43      	subs	r3, r0, #1
 8006c1e:	42a1      	cmp	r1, r4
 8006c20:	d008      	beq.n	8006c34 <memmove+0x28>
 8006c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c2a:	e7f8      	b.n	8006c1e <memmove+0x12>
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4601      	mov	r1, r0
 8006c30:	428a      	cmp	r2, r1
 8006c32:	d100      	bne.n	8006c36 <memmove+0x2a>
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c3e:	e7f7      	b.n	8006c30 <memmove+0x24>

08006c40 <_realloc_r>:
 8006c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	4680      	mov	r8, r0
 8006c46:	4614      	mov	r4, r2
 8006c48:	460e      	mov	r6, r1
 8006c4a:	b921      	cbnz	r1, 8006c56 <_realloc_r+0x16>
 8006c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c50:	4611      	mov	r1, r2
 8006c52:	f7ff bb85 	b.w	8006360 <_malloc_r>
 8006c56:	b92a      	cbnz	r2, 8006c64 <_realloc_r+0x24>
 8006c58:	f7ff fc9c 	bl	8006594 <_free_r>
 8006c5c:	4625      	mov	r5, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c64:	f000 f81b 	bl	8006c9e <_malloc_usable_size_r>
 8006c68:	4284      	cmp	r4, r0
 8006c6a:	4607      	mov	r7, r0
 8006c6c:	d802      	bhi.n	8006c74 <_realloc_r+0x34>
 8006c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c72:	d812      	bhi.n	8006c9a <_realloc_r+0x5a>
 8006c74:	4621      	mov	r1, r4
 8006c76:	4640      	mov	r0, r8
 8006c78:	f7ff fb72 	bl	8006360 <_malloc_r>
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d0ed      	beq.n	8006c5e <_realloc_r+0x1e>
 8006c82:	42bc      	cmp	r4, r7
 8006c84:	4622      	mov	r2, r4
 8006c86:	4631      	mov	r1, r6
 8006c88:	bf28      	it	cs
 8006c8a:	463a      	movcs	r2, r7
 8006c8c:	f7ff fb32 	bl	80062f4 <memcpy>
 8006c90:	4631      	mov	r1, r6
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fc7e 	bl	8006594 <_free_r>
 8006c98:	e7e1      	b.n	8006c5e <_realloc_r+0x1e>
 8006c9a:	4635      	mov	r5, r6
 8006c9c:	e7df      	b.n	8006c5e <_realloc_r+0x1e>

08006c9e <_malloc_usable_size_r>:
 8006c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca2:	1f18      	subs	r0, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfbc      	itt	lt
 8006ca8:	580b      	ldrlt	r3, [r1, r0]
 8006caa:	18c0      	addlt	r0, r0, r3
 8006cac:	4770      	bx	lr
	...

08006cb0 <_init>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr

08006cbc <_fini>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr
